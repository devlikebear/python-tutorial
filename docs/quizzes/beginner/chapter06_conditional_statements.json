{
    "chapter": "Chapter 6: 조건문 (Conditional Statements)",
    "total_questions": 20,
    "questions": [
        {
            "id": 1,
            "type": "multiple_choice",
            "question": "Python에서 조건문을 시작하는 키워드는?",
            "choices": [
                "condition",
                "if",
                "when",
                "check"
            ],
            "correct_answer": 1,
            "explanation": "Python에서 조건문은 'if' 키워드로 시작합니다."
        },
        {
            "id": 2,
            "type": "multiple_choice",
            "question": "다음 코드의 출력 결과는?\nscore = 75\nif score >= 80:\n    print(\"우수\")\nelif score >= 70:\n    print(\"양호\")\nelse:\n    print(\"보통\")",
            "choices": [
                "우수",
                "양호",
                "보통",
                "오류 발생"
            ],
            "correct_answer": 1,
            "explanation": "score가 75이므로 첫 번째 조건은 거짓, 두 번째 조건(>= 70)은 참이므로 '양호'가 출력됩니다."
        },
        {
            "id": 3,
            "type": "true_false",
            "question": "Python에서 조건문 블록은 들여쓰기로 구분한다.",
            "correct_answer": true,
            "explanation": "Python은 들여쓰기(indentation)를 사용하여 코드 블록을 구분합니다."
        },
        {
            "id": 4,
            "type": "multiple_choice",
            "question": "다음 중 올바른 if문 문법은?",
            "choices": [
                "if x > 5 { print('크다') }",
                "if (x > 5) print('크다')",
                "if x > 5: print('크다')",
                "if x > 5 then print('크다')"
            ],
            "correct_answer": 2,
            "explanation": "Python에서는 조건문 뒤에 콜론(:)을 사용하고 들여쓰기로 블록을 구분합니다."
        },
        {
            "id": 5,
            "type": "code_completion",
            "question": "나이가 18세 이상이면 '성인', 그렇지 않으면 '미성년자'를 출력하는 코드를 작성하세요. (age 변수 사용)",
            "correct_answer": "if age >= 18:\n    print('성인')\nelse:\n    print('미성년자')",
            "explanation": "기본적인 if-else 구조를 사용하여 조건에 따라 다른 메시지를 출력합니다."
        },
        {
            "id": 6,
            "type": "multiple_choice",
            "question": "elif의 의미는?",
            "choices": [
                "else if",
                "end if",
                "equal if",
                "error if"
            ],
            "correct_answer": 0,
            "explanation": "elif는 'else if'의 줄임말로, 추가적인 조건을 확인할 때 사용합니다."
        },
        {
            "id": 7,
            "type": "multiple_choice",
            "question": "다음 코드의 출력 결과는?\nnumber = 0\nif number:\n    print('참')\nelse:\n    print('거짓')",
            "choices": [
                "참",
                "거짓",
                "0",
                "오류 발생"
            ],
            "correct_answer": 1,
            "explanation": "Python에서 0은 거짓(False)으로 평가되므로 '거짓'이 출력됩니다."
        },
        {
            "id": 8,
            "type": "multiple_choice",
            "question": "다음 논리 연산자 중 모든 조건이 참이어야 전체가 참이 되는 것은?",
            "choices": [
                "or",
                "and",
                "not",
                "in"
            ],
            "correct_answer": 1,
            "explanation": "and 연산자는 모든 조건이 참이어야 전체 결과가 참이 됩니다."
        },
        {
            "id": 9,
            "type": "code_output",
            "question": "다음 코드의 출력 결과를 예상해보세요:\nx = 10\ny = 5\nif x > 5 and y < 10:\n    print('조건 만족')\nelse:\n    print('조건 불만족')",
            "correct_answer": "조건 만족",
            "explanation": "x > 5는 참(10 > 5), y < 10도 참(5 < 10)이므로 and 조건이 만족되어 '조건 만족'이 출력됩니다."
        },
        {
            "id": 10,
            "type": "multiple_choice",
            "question": "삼항 연산자의 올바른 문법은?",
            "choices": [
                "조건 ? 참값 : 거짓값",
                "참값 if 조건 else 거짓값",
                "if 조건 then 참값 else 거짓값",
                "조건 -> 참값 | 거짓값"
            ],
            "correct_answer": 1,
            "explanation": "Python의 삼항 연산자는 '참값 if 조건 else 거짓값' 형태입니다."
        },
        {
            "id": 11,
            "type": "code_completion",
            "question": "점수에 따라 등급을 매기는 코드를 작성하세요. (90이상: A, 80이상: B, 70이상: C, 그 외: F)",
            "correct_answer": "if score >= 90:\n    grade = 'A'\nelif score >= 80:\n    grade = 'B'\nelif score >= 70:\n    grade = 'C'\nelse:\n    grade = 'F'",
            "explanation": "elif를 사용하여 다중 조건을 확인하고 각 범위에 해당하는 등급을 할당합니다."
        },
        {
            "id": 12,
            "type": "multiple_choice",
            "question": "다음 코드에서 'C'가 출력되려면 x의 값은?",
            "choices": [
                "65",
                "75",
                "85",
                "95"
            ],
            "correct_answer": 1,
            "explanation": "x가 75일 때 첫 번째 조건(>= 90)과 두 번째 조건(>= 80)은 거짓이고, 세 번째 조건(>= 70)은 참이므로 'C'가 출력됩니다."
        },
        {
            "id": 13,
            "type": "true_false",
            "question": "다음 코드는 오류가 발생한다: if True: pass",
            "correct_answer": false,
            "explanation": "pass는 아무것도 하지 않는 키워드로, 문법적으로 올바른 코드입니다."
        },
        {
            "id": 14,
            "type": "multiple_choice",
            "question": "다음 중 거짓(False)으로 평가되지 않는 것은?",
            "choices": [
                "0",
                "''",
                "[]",
                "'0'"
            ],
            "correct_answer": 3,
            "explanation": "'0'은 문자열로, 내용이 있는 문자열은 참(True)으로 평가됩니다."
        },
        {
            "id": 15,
            "type": "code_debugging",
            "question": "다음 코드의 오류를 찾아 수정하세요:\nage = 20\nif age >= 18\n    print('성인입니다')\nelse:\n    print('미성년자입니다')",
            "correct_answer": "age = 20\nif age >= 18:\n    print('성인입니다')\nelse:\n    print('미성년자입니다')",
            "explanation": "if문 뒤에 콜론(:)이 누락되었습니다. Python에서는 조건문 뒤에 반드시 콜론을 써야 합니다."
        },
        {
            "id": 16,
            "type": "multiple_choice",
            "question": "중첩 조건문에서 가장 안쪽 조건이 실행되려면?",
            "choices": [
                "바깥쪽 조건만 참이면 됨",
                "안쪽 조건만 참이면 됨",
                "모든 상위 조건이 참이어야 함",
                "조건 순서와 상관없음"
            ],
            "correct_answer": 2,
            "explanation": "중첩 조건문에서는 안쪽 코드가 실행되려면 모든 상위 조건들이 참이어야 합니다."
        },
        {
            "id": 17,
            "type": "code_completion",
            "question": "문자열 변수 text에 'Python'이 포함되어 있으면 '파이썬 내용', 그렇지 않으면 '기타 내용'을 출력하는 코드를 작성하세요.",
            "correct_answer": "if 'Python' in text:\n    print('파이썬 내용')\nelse:\n    print('기타 내용')",
            "explanation": "'in' 연산자를 사용하여 문자열에 특정 내용이 포함되어 있는지 확인할 수 있습니다."
        },
        {
            "id": 18,
            "type": "multiple_choice",
            "question": "다음 코드의 출력 결과는?\nweather = 'sunny'\ntemp = 25\nif weather == 'sunny' or temp > 30:\n    print('외출하기 좋음')\nelse:\n    print('집에 있기')",
            "choices": [
                "외출하기 좋음",
                "집에 있기",
                "오류 발생",
                "아무것도 출력되지 않음"
            ],
            "correct_answer": 0,
            "explanation": "weather가 'sunny'이므로 or 조건의 첫 번째 부분이 참이 되어 '외출하기 좋음'이 출력됩니다."
        },
        {
            "id": 19,
            "type": "practical",
            "question": "사용자로부터 월(1-12)을 입력받아 해당 월의 계절을 출력하는 프로그램을 작성하세요. (12,1,2: 겨울, 3,4,5: 봄, 6,7,8: 여름, 9,10,11: 가을)",
            "correct_answer": "month = int(input('월을 입력하세요: '))\nif month in [12, 1, 2]:\n    print('겨울')\nelif month in [3, 4, 5]:\n    print('봄')\nelif month in [6, 7, 8]:\n    print('여름')\nelif month in [9, 10, 11]:\n    print('가을')\nelse:\n    print('잘못된 월입니다')",
            "explanation": "리스트를 사용하여 각 계절에 해당하는 월들을 그룹화하고 'in' 연산자로 확인합니다."
        },
        {
            "id": 20,
            "type": "code_analysis",
            "question": "다음 두 코드 블록의 차이점을 설명하세요:\n블록1: if x > 0: if y > 0: print('둘 다 양수')\n블록2: if x > 0 and y > 0: print('둘 다 양수')",
            "correct_answer": "블록1은 중첩 조건문으로 x > 0이 참일 때만 y > 0을 확인하고, 블록2는 논리 연산자 and를 사용하여 두 조건을 동시에 확인합니다. 결과는 같지만 블록2가 더 간결하고 읽기 쉽습니다.",
            "explanation": "중첩 조건문과 논리 연산자는 같은 결과를 만들 수 있지만, 논리 연산자를 사용하는 것이 일반적으로 더 간결하고 가독성이 좋습니다."
        }
    ],
    "difficulty_level": "beginner",
    "estimated_time": "25 minutes",
    "learning_objectives": [
        "if, elif, else 문법 완전 이해",
        "논리 연산자와 조건 표현식 활용",
        "중첩 조건문 작성 능력",
        "실용적인 조건문 프로그램 구현",
        "조건문을 이용한 프로그램 흐름 제어"
    ]
}