{
    "chapter": "Chapter 7: 반복문 (Loops)",
    "total_questions": 22,
    "questions": [
        {
            "id": 1,
            "type": "multiple_choice",
            "question": "Python에서 정해진 횟수만큼 반복할 때 주로 사용하는 반복문은?",
            "choices": [
                "while문",
                "for문",
                "do-while문",
                "loop문"
            ],
            "correct_answer": 1,
            "explanation": "for문은 정해진 횟수나 컬렉션의 요소를 순회할 때 주로 사용합니다."
        },
        {
            "id": 2,
            "type": "multiple_choice",
            "question": "range(2, 10, 3)의 출력 결과는?",
            "choices": [
                "[2, 3, 4, 5, 6, 7, 8, 9]",
                "[2, 5, 8]",
                "[2, 5, 8, 11]",
                "[3, 6, 9]"
            ],
            "correct_answer": 1,
            "explanation": "range(2, 10, 3)은 2부터 10 미만까지 3씩 증가하므로 [2, 5, 8]입니다."
        },
        {
            "id": 3,
            "type": "code_output",
            "question": "다음 코드의 출력 결과를 예상해보세요:\nfor i in range(3):\n    print(i * 2)",
            "correct_answer": "0\n2\n4",
            "explanation": "range(3)은 [0, 1, 2]를 생성하고, 각각에 2를 곱하면 0, 2, 4가 출력됩니다."
        },
        {
            "id": 4,
            "type": "multiple_choice",
            "question": "while문에서 반드시 포함되어야 하는 것은?",
            "choices": [
                "break문",
                "continue문",
                "조건을 변경하는 코드",
                "else절"
            ],
            "correct_answer": 2,
            "explanation": "while문에서는 조건을 변경하는 코드가 없으면 무한 루프에 빠질 수 있습니다."
        },
        {
            "id": 5,
            "type": "true_false",
            "question": "break문은 현재 반복을 건너뛰고 다음 반복으로 넘어간다.",
            "correct_answer": false,
            "explanation": "break문은 반복문을 완전히 종료합니다. 현재 반복을 건너뛰는 것은 continue문입니다."
        },
        {
            "id": 6,
            "type": "code_completion",
            "question": "1부터 5까지의 합을 구하는 for문을 작성하세요.",
            "correct_answer": "total = 0\nfor i in range(1, 6):\n    total += i\nprint(total)",
            "explanation": "range(1, 6)으로 1부터 5까지 순회하며 total에 누적합니다."
        },
        {
            "id": 7,
            "type": "multiple_choice",
            "question": "continue문의 기능은?",
            "choices": [
                "반복문을 완전히 종료",
                "현재 반복을 건너뛰고 다음 반복으로 진행",
                "반복문을 일시정지",
                "반복문을 다시 시작"
            ],
            "correct_answer": 1,
            "explanation": "continue문은 현재 반복을 건너뛰고 다음 반복으로 넘어갑니다."
        },
        {
            "id": 8,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\nfor i in range(5):\n    if i == 3:\n        break\n    print(i)",
            "correct_answer": "0\n1\n2",
            "explanation": "i가 3일 때 break문이 실행되어 반복문이 종료되므로 0, 1, 2만 출력됩니다."
        },
        {
            "id": 9,
            "type": "multiple_choice",
            "question": "enumerate() 함수의 용도는?",
            "choices": [
                "리스트의 길이를 구하기",
                "인덱스와 값을 함께 반환하기",
                "리스트를 정렬하기",
                "리스트를 역순으로 만들기"
            ],
            "correct_answer": 1,
            "explanation": "enumerate()는 순회 가능한 객체의 인덱스와 값을 함께 반환합니다."
        },
        {
            "id": 10,
            "type": "code_completion",
            "question": "리스트 [1, 2, 3, 4, 5]에서 짝수만 출력하는 코드를 작성하세요.",
            "correct_answer": "numbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num % 2 == 0:\n        print(num)",
            "explanation": "for문으로 리스트를 순회하며 각 수를 2로 나눈 나머지가 0인 경우(짝수)만 출력합니다."
        },
        {
            "id": 11,
            "type": "multiple_choice",
            "question": "중첩 for문에서 내부 for문의 break는?",
            "choices": [
                "모든 반복문을 종료",
                "외부 for문만 종료",
                "내부 for문만 종료",
                "continue와 같은 동작"
            ],
            "correct_answer": 2,
            "explanation": "break문은 해당 break가 포함된 가장 안쪽 반복문만 종료합니다."
        },
        {
            "id": 12,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\nfor i in range(4):\n    if i % 2 == 0:\n        continue\n    print(i)",
            "correct_answer": "1\n3",
            "explanation": "i가 0, 2일 때는 continue로 건너뛰고, 1, 3일 때만 출력됩니다."
        },
        {
            "id": 13,
            "type": "multiple_choice",
            "question": "while True: 구문의 의미는?",
            "choices": [
                "한 번만 실행",
                "무한 루프",
                "조건이 참일 때만 실행",
                "에러 발생"
            ],
            "correct_answer": 1,
            "explanation": "while True:는 조건이 항상 참이므로 무한 루프를 생성합니다. break문으로 종료해야 합니다."
        },
        {
            "id": 14,
            "type": "code_completion",
            "question": "사용자가 'exit'을 입력할 때까지 계속 입력을 받는 while문을 작성하세요.",
            "correct_answer": "while True:\n    user_input = input('명령을 입력하세요: ')\n    if user_input == 'exit':\n        break\n    print(f'입력: {user_input}')",
            "explanation": "무한 루프로 계속 입력을 받고, 'exit'이 입력되면 break로 종료합니다."
        },
        {
            "id": 15,
            "type": "multiple_choice",
            "question": "2차원 리스트를 순회하려면?",
            "choices": [
                "for문 하나만 사용",
                "while문만 사용",
                "중첩 for문 사용",
                "enumerate만 사용"
            ],
            "correct_answer": 2,
            "explanation": "2차원 리스트는 행과 열이 있으므로 중첩 for문을 사용해야 합니다."
        },
        {
            "id": 16,
            "type": "code_debugging",
            "question": "다음 무한 루프 코드를 수정하세요:\ncount = 1\nwhile count <= 5:\n    print(count)",
            "correct_answer": "count = 1\nwhile count <= 5:\n    print(count)\n    count += 1",
            "explanation": "조건을 변경하는 'count += 1'을 추가해야 무한 루프를 방지할 수 있습니다."
        },
        {
            "id": 17,
            "type": "multiple_choice",
            "question": "for-else 구문에서 else가 실행되는 경우는?",
            "choices": [
                "break문으로 종료된 경우",
                "continue문이 실행된 경우",
                "반복문이 정상 완료된 경우",
                "에러가 발생한 경우"
            ],
            "correct_answer": 2,
            "explanation": "for-else에서 else는 반복문이 break 없이 정상 완료되었을 때 실행됩니다."
        },
        {
            "id": 18,
            "type": "code_completion",
            "question": "구구단 2단을 출력하는 코드를 작성하세요.",
            "correct_answer": "for i in range(1, 10):\n    result = 2 * i\n    print(f'2 × {i} = {result}')",
            "explanation": "1부터 9까지 반복하며 2를 곱한 결과를 출력합니다."
        },
        {
            "id": 19,
            "type": "multiple_choice",
            "question": "리스트 컴프리헨션의 장점은?",
            "choices": [
                "메모리를 더 많이 사용",
                "코드가 더 길어짐",
                "코드가 간결하고 빠름",
                "디버깅이 쉬움"
            ],
            "correct_answer": 2,
            "explanation": "리스트 컴프리헨션은 일반적인 for문보다 간결하고 실행 속도가 빠릅니다."
        },
        {
            "id": 20,
            "type": "code_analysis",
            "question": "다음 두 코드의 차이점을 설명하세요:\n코드1: [x*2 for x in range(5)]\n코드2: for x in range(5): print(x*2)",
            "correct_answer": "코드1은 리스트 컴프리헨션으로 새로운 리스트 [0, 2, 4, 6, 8]을 생성하고, 코드2는 일반 for문으로 각 값을 출력만 합니다. 코드1은 결과를 저장하고 코드2는 출력만 합니다.",
            "explanation": "리스트 컴프리헨션은 새로운 리스트를 생성하지만, 일반 for문은 반복 작업만 수행합니다."
        },
        {
            "id": 21,
            "type": "practical",
            "question": "1부터 100까지 숫자 중 3의 배수의 합을 구하는 프로그램을 작성하세요.",
            "correct_answer": "total = 0\nfor i in range(1, 101):\n    if i % 3 == 0:\n        total += i\nprint(f'3의 배수의 합: {total}')",
            "explanation": "1부터 100까지 반복하며 3으로 나누어떨어지는 수들을 찾아 합계를 구합니다."
        },
        {
            "id": 22,
            "type": "practical",
            "question": "별표(*)로 직각삼각형 패턴을 출력하는 프로그램을 작성하세요. (5줄)",
            "correct_answer": "for i in range(1, 6):\n    for j in range(i):\n        print('*', end='')\n    print()",
            "explanation": "외부 루프는 줄 수를, 내부 루프는 각 줄의 별 개수를 제어하여 직각삼각형을 만듭니다."
        }
    ],
    "difficulty_level": "beginner",
    "estimated_time": "30 minutes",
    "learning_objectives": [
        "for문과 while문의 기본 문법 완전 이해",
        "range() 함수 활용 능력",
        "break와 continue를 이용한 반복문 제어",
        "중첩 반복문을 이용한 패턴 생성",
        "반복문을 활용한 실용적 프로그램 작성 능력"
    ]
}