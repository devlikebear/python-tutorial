{
    "chapter": "Chapter 8: 리스트와 튜플 (Lists and Tuples)",
    "total_questions": 25,
    "questions": [
        {
            "id": 1,
            "type": "multiple_choice",
            "question": "리스트와 튜플의 가장 큰 차이점은?",
            "choices": [
                "리스트는 인덱싱이 가능하고 튜플은 불가능",
                "리스트는 변경 가능하고 튜플은 변경 불가능",
                "리스트는 중복을 허용하고 튜플은 불허용",
                "리스트는 순서가 있고 튜플은 순서가 없음"
            ],
            "correct_answer": 1,
            "explanation": "리스트는 mutable(변경 가능)하고 튜플은 immutable(변경 불가능)합니다. 둘 다 인덱싱, 중복, 순서를 지원합니다."
        },
        {
            "id": 2,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\nmy_list = [1, 2, 3, 4, 5]\nprint(my_list[1:4])",
            "correct_answer": "[2, 3, 4]",
            "explanation": "슬라이싱 [1:4]는 인덱스 1부터 3까지(4 미포함)의 요소들을 반환합니다."
        },
        {
            "id": 3,
            "type": "multiple_choice",
            "question": "하나의 요소만 가진 튜플을 올바르게 생성하는 방법은?",
            "choices": [
                "(42)",
                "(42,)",
                "[42]",
                "tuple(42)"
            ],
            "correct_answer": 1,
            "explanation": "하나의 요소만 가진 튜플을 만들 때는 요소 뒤에 반드시 쉼표를 붙여야 합니다. (42,)"
        },
        {
            "id": 4,
            "type": "code_completion",
            "question": "리스트 [1, 2, 3, 4, 5]의 마지막 요소를 제거하고 반환하는 코드를 작성하세요.",
            "correct_answer": "my_list = [1, 2, 3, 4, 5]\nlast_element = my_list.pop()\nprint(last_element)",
            "explanation": "pop() 메서드는 리스트의 마지막 요소를 제거하고 반환합니다."
        },
        {
            "id": 5,
            "type": "multiple_choice",
            "question": "리스트에 새로운 요소를 추가하는 메서드가 아닌 것은?",
            "choices": [
                "append()",
                "insert()",
                "extend()",
                "add()"
            ],
            "correct_answer": 3,
            "explanation": "add()는 리스트 메서드가 아닙니다. 집합(set)에서 사용하는 메서드입니다."
        },
        {
            "id": 6,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\nnumbers = [3, 1, 4, 1, 5, 9]\nprint(numbers.count(1))",
            "correct_answer": "2",
            "explanation": "count() 메서드는 리스트에서 특정 값이 나타나는 횟수를 반환합니다. 1은 2번 나타납니다."
        },
        {
            "id": 7,
            "type": "true_false",
            "question": "튜플은 리스트보다 일반적으로 더 빠르다.",
            "correct_answer": true,
            "explanation": "튜플은 변경 불가능하므로 메모리 사용량이 적고, 접근 속도가 리스트보다 빠릅니다."
        },
        {
            "id": 8,
            "type": "code_completion",
            "question": "리스트 컴프리헨션을 사용하여 1부터 10까지 숫자 중 짝수의 제곱을 구하는 코드를 작성하세요.",
            "correct_answer": "even_squares = [x**2 for x in range(1, 11) if x % 2 == 0]\nprint(even_squares)",
            "explanation": "리스트 컴프리헨션에서 조건문을 사용하여 짝수만 선택하고 제곱을 계산합니다."
        },
        {
            "id": 9,
            "type": "multiple_choice",
            "question": "리스트의 sort()와 sorted()의 차이점은?",
            "choices": [
                "sort()는 오름차순, sorted()는 내림차순",
                "sort()는 원본 변경, sorted()는 새 리스트 반환",
                "sort()는 문자열용, sorted()는 숫자용",
                "차이점이 없음"
            ],
            "correct_answer": 1,
            "explanation": "sort()는 원본 리스트를 변경하고 None을 반환하며, sorted()는 원본을 유지하고 새로운 정렬된 리스트를 반환합니다."
        },
        {
            "id": 10,
            "type": "code_debugging",
            "question": "다음 코드의 오류를 수정하세요:\nmy_tuple = (1, 2, 3)\nmy_tuple[0] = 10",
            "correct_answer": "my_list = [1, 2, 3]\nmy_list[0] = 10\n# 또는\nmy_tuple = (10, 2, 3)  # 새로운 튜플 생성",
            "explanation": "튜플은 변경 불가능하므로 요소를 수정할 수 없습니다. 리스트를 사용하거나 새로운 튜플을 생성해야 합니다."
        },
        {
            "id": 11,
            "type": "multiple_choice",
            "question": "중첩 리스트 [[1, 2], [3, 4]]에서 숫자 4에 접근하는 방법은?",
            "choices": [
                "nested_list[1, 1]",
                "nested_list[1][1]",
                "nested_list[2][2]",
                "nested_list(1)(1)"
            ],
            "correct_answer": 1,
            "explanation": "중첩 리스트에서는 첫 번째 인덱스로 내부 리스트에 접근하고, 두 번째 인덱스로 해당 요소에 접근합니다."
        },
        {
            "id": 12,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\na, b, *c = [1, 2, 3, 4, 5]\nprint(c)",
            "correct_answer": "[3, 4, 5]",
            "explanation": "확장 언패킹에서 *c는 나머지 모든 요소들을 리스트로 수집합니다."
        },
        {
            "id": 13,
            "type": "multiple_choice",
            "question": "딕셔너리의 키로 사용할 수 있는 것은?",
            "choices": [
                "리스트",
                "튜플",
                "딕셔너리",
                "집합"
            ],
            "correct_answer": 1,
            "explanation": "딕셔너리의 키는 해시 가능한(hashable) 객체여야 하므로 변경 불가능한 튜플만 가능합니다."
        },
        {
            "id": 14,
            "type": "code_completion",
            "question": "2차원 리스트의 모든 요소를 하나의 평탄한 리스트로 만드는 코드를 작성하세요.\nnested = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]",
            "correct_answer": "nested = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\nflat = [item for sublist in nested for item in sublist]\nprint(flat)",
            "explanation": "리스트 컴프리헨션을 중첩하여 2차원 리스트를 평탄화할 수 있습니다."
        },
        {
            "id": 15,
            "type": "multiple_choice",
            "question": "얕은 복사(shallow copy)에 대한 설명으로 옳은 것은?",
            "choices": [
                "모든 중첩된 객체까지 완전히 복사",
                "최상위 레벨만 복사하고 내부 객체는 참조 공유",
                "복사가 전혀 이루어지지 않음",
                "메모리 주소만 복사"
            ],
            "correct_answer": 1,
            "explanation": "얕은 복사는 최상위 컨테이너만 새로 만들고, 내부의 객체들은 원본과 같은 참조를 공유합니다."
        },
        {
            "id": 16,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\noriginal = [1, [2, 3], 4]\nshallow = original[:]\noriginal[1][0] = 99\nprint(shallow[1][0])",
            "correct_answer": "99",
            "explanation": "얕은 복사에서는 내부 리스트 [2, 3]이 참조로 공유되므로 원본 변경이 복사본에도 영향을 줍니다."
        },
        {
            "id": 17,
            "type": "multiple_choice",
            "question": "리스트에서 특정 값의 첫 번째 인덱스를 찾는 메서드는?",
            "choices": [
                "find()",
                "search()",
                "index()",
                "locate()"
            ],
            "correct_answer": 2,
            "explanation": "index() 메서드는 리스트에서 특정 값의 첫 번째 인덱스를 반환합니다."
        },
        {
            "id": 18,
            "type": "code_completion",
            "question": "튜플 언패킹을 사용하여 함수의 여러 반환값을 받는 코드를 작성하세요.\ndef get_info(): return '김철수', 25, '서울'",
            "correct_answer": "def get_info(): \n    return '김철수', 25, '서울'\n\nname, age, city = get_info()\nprint(f'이름: {name}, 나이: {age}, 도시: {city}')",
            "explanation": "함수가 튜플을 반환할 때 언패킹을 사용하여 각 값을 개별 변수에 할당할 수 있습니다."
        },
        {
            "id": 19,
            "type": "multiple_choice",
            "question": "다음 중 리스트를 역순으로 만드는 방법이 아닌 것은?",
            "choices": [
                "my_list.reverse()",
                "my_list[::-1]",
                "reversed(my_list)",
                "my_list.sort(reverse=True)"
            ],
            "correct_answer": 3,
            "explanation": "sort(reverse=True)는 역순 정렬을 하는 것이지 단순히 역순으로 뒤집는 것이 아닙니다."
        },
        {
            "id": 20,
            "type": "code_analysis",
            "question": "다음 두 코드의 차이점을 설명하세요:\n코드1: list1.extend([4, 5])\n코드2: list1 = list1 + [4, 5]",
            "correct_answer": "extend()는 원본 리스트를 직접 수정하고 None을 반환하며, + 연산자는 새로운 리스트를 생성하여 반환합니다. extend()가 메모리 효율적이고 빠릅니다.",
            "explanation": "extend()는 in-place 연산으로 원본을 수정하고, + 연산자는 새로운 객체를 생성합니다."
        },
        {
            "id": 21,
            "type": "practical",
            "question": "학생들의 성적 리스트 [85, 92, 78, 96, 88]에서 평균보다 높은 성적만 필터링하는 코드를 작성하세요.",
            "correct_answer": "scores = [85, 92, 78, 96, 88]\naverage = sum(scores) / len(scores)\nabove_average = [score for score in scores if score > average]\nprint(f'평균: {average}, 평균 이상: {above_average}')",
            "explanation": "먼저 평균을 계산한 후 리스트 컴프리헨션으로 평균보다 높은 점수들을 필터링합니다."
        },
        {
            "id": 22,
            "type": "code_completion",
            "question": "2차원 리스트로 3x3 단위 행렬(대각선이 1이고 나머지는 0)을 생성하는 코드를 작성하세요.",
            "correct_answer": "identity_matrix = [[1 if i == j else 0 for j in range(3)] for i in range(3)]\nprint(identity_matrix)",
            "explanation": "중첩 리스트 컴프리헨션에서 i==j일 때만 1, 나머지는 0으로 설정하여 단위 행렬을 생성합니다."
        },
        {
            "id": 23,
            "type": "multiple_choice",
            "question": "다음 중 튜플의 장점이 아닌 것은?",
            "choices": [
                "리스트보다 빠른 접근 속도",
                "딕셔너리 키로 사용 가능",
                "요소 추가/삭제가 자유로움",
                "메모리 사용량이 적음"
            ],
            "correct_answer": 2,
            "explanation": "튜플은 변경 불가능하므로 요소를 추가하거나 삭제할 수 없습니다. 이는 튜플의 단점입니다."
        },
        {
            "id": 24,
            "type": "practical",
            "question": "중복 요소를 제거하면서 원래 순서를 유지하는 함수를 작성하세요.",
            "correct_answer": "def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result\n\n# 사용 예제\noriginal = [1, 2, 3, 2, 4, 1, 5]\nunique = remove_duplicates(original)\nprint(unique)  # [1, 2, 3, 4, 5]",
            "explanation": "집합을 사용하여 이미 본 요소를 추적하면서 순서를 유지하며 중복을 제거합니다."
        },
        {
            "id": 25,
            "type": "code_analysis",
            "question": "다음 코드에서 성능상 더 좋은 방법은 무엇이고 그 이유는?\n방법1: result = []\nfor i in range(1000):\n    result.append(i**2)\n\n방법2: result = [i**2 for i in range(1000)]",
            "correct_answer": "방법2가 더 좋습니다. 리스트 컴프리헨션은 C 레벨에서 최적화되어 있어 for 루프보다 빠르고 메모리 효율적입니다. 또한 코드가 더 간결하고 읽기 쉽습니다.",
            "explanation": "리스트 컴프리헨션은 내부적으로 최적화되어 있어 일반 for문보다 성능이 우수합니다."
        }
    ],
    "difficulty_level": "beginner",
    "estimated_time": "35 minutes",
    "learning_objectives": [
        "리스트와 튜플의 기본 개념과 차이점 완전 이해",
        "리스트 메서드들의 올바른 사용법",
        "슬라이싱과 인덱싱 숙련도",
        "리스트 컴프리헨션 활용 능력",
        "중첩 구조와 언패킹 이해",
        "얕은 복사와 깊은 복사의 차이점 이해",
        "실용적인 데이터 구조 활용 능력"
    ]
}