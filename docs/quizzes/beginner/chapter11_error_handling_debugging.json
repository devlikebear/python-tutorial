{
    "chapter": "Chapter 11: 에러 처리와 디버깅 (Error Handling and Debugging)",
    "total_questions": 32,
    "questions": [
        {
            "id": 1,
            "type": "multiple_choice",
            "question": "다음 중 실행 전에 발견되는 에러는?",
            "choices": [
                "ZeroDivisionError",
                "SyntaxError",
                "ValueError",
                "NameError"
            ],
            "correct_answer": 1,
            "explanation": "SyntaxError는 문법 에러로 코드 실행 전에 파이썬 파서가 발견합니다."
        },
        {
            "id": 2,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\ntry:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Error caught')\nfinally:\n    print('Always executed')",
            "correct_answer": "Error caught\nAlways executed",
            "explanation": "ZeroDivisionError가 발생하여 except 블록이 실행되고, finally는 항상 실행됩니다."
        },
        {
            "id": 3,
            "type": "multiple_choice",
            "question": "try-except 문에서 else 절이 실행되는 경우는?",
            "choices": [
                "예외가 발생했을 때",
                "예외가 발생하지 않았을 때",
                "finally 이후에 항상",
                "try 블록 실행 전에"
            ],
            "correct_answer": 1,
            "explanation": "else 절은 try 블록에서 예외가 발생하지 않았을 때만 실행됩니다."
        },
        {
            "id": 4,
            "type": "code_completion",
            "question": "다음 함수에서 ZeroDivisionError와 TypeError를 모두 처리하는 코드를 작성하세요.\ndef safe_divide(a, b):\n    try:\n        return a / b\n    # 여기에 예외 처리 추가",
            "correct_answer": "def safe_divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return \"0으로 나눌 수 없습니다\"\n    except TypeError:\n        return \"숫자만 입력 가능합니다\"\n    except Exception as e:\n        return f\"예상치 못한 오류: {e}\"",
            "explanation": "구체적인 예외 타입을 먼저 처리하고, 일반적인 예외는 마지막에 처리합니다."
        },
        {
            "id": 5,
            "type": "true_false",
            "question": "finally 블록은 예외 발생 여부와 관계없이 항상 실행된다.",
            "correct_answer": true,
            "explanation": "finally 블록은 예외 발생 여부와 상관없이 항상 실행되어 리소스 정리 등에 사용됩니다."
        },
        {
            "id": 6,
            "type": "multiple_choice",
            "question": "여러 예외를 한 번에 처리하는 올바른 문법은?",
            "choices": [
                "except ValueError and TypeError:",
                "except (ValueError, TypeError):",
                "except ValueError | TypeError:",
                "except ValueError, TypeError:"
            ],
            "correct_answer": 1,
            "explanation": "여러 예외를 한 번에 처리할 때는 튜플 형태로 묶어서 사용합니다."
        },
        {
            "id": 7,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\ntry:\n    number = int('abc')\nexcept ValueError as e:\n    print(f'오류: {type(e).__name__}')\nexcept Exception:\n    print('기타 오류')",
            "correct_answer": "오류: ValueError",
            "explanation": "int('abc')는 ValueError를 발생시키고, 첫 번째 except 블록에서 처리됩니다."
        },
        {
            "id": 8,
            "type": "practical",
            "question": "사용자 정의 예외 클래스를 만들어 보세요. 'CustomValidationError'라는 이름으로 Exception을 상속받고, 에러 메시지와 함께 필드명도 저장할 수 있도록 하세요.",
            "correct_answer": "class CustomValidationError(Exception):\n    def __init__(self, message, field_name=None):\n        super().__init__(message)\n        self.field_name = field_name\n    \n    def __str__(self):\n        if self.field_name:\n            return f\"[{self.field_name}] {super().__str__()}\"\n        return super().__str__()\n\n# 사용 예제\ntry:\n    raise CustomValidationError(\"값이 올바르지 않습니다\", \"age\")\nexcept CustomValidationError as e:\n    print(e)  # [age] 값이 올바르지 않습니다",
            "explanation": "사용자 정의 예외는 Exception을 상속받고, 추가 정보를 저장하여 더 구체적인 에러 메시지를 제공할 수 있습니다."
        },
        {
            "id": 9,
            "type": "code_debugging",
            "question": "다음 코드의 문제점을 찾아 수정하세요:\ntry:\n    file = open('data.txt', 'r')\n    content = file.read()\n    print(content)\nexcept FileNotFoundError:\n    print('파일을 찾을 수 없습니다')",
            "correct_answer": "try:\n    file = open('data.txt', 'r')\n    content = file.read()\n    print(content)\nexcept FileNotFoundError:\n    print('파일을 찾을 수 없습니다')\nfinally:\n    try:\n        file.close()\n    except:\n        pass\n\n# 또는 더 좋은 방법:\ntry:\n    with open('data.txt', 'r') as file:\n        content = file.read()\n        print(content)\nexcept FileNotFoundError:\n    print('파일을 찾을 수 없습니다')",
            "explanation": "파일을 열었으면 반드시 닫아야 합니다. with 문을 사용하면 자동으로 파일이 닫힙니다."
        },
        {
            "id": 10,
            "type": "multiple_choice",
            "question": "예외 체인(Exception Chaining)에서 사용하는 키워드는?",
            "choices": [
                "with",
                "from",
                "chain",
                "cause"
            ],
            "correct_answer": 1,
            "explanation": "'raise NewError() from original_error' 형태로 사용하여 원본 예외 정보를 유지할 수 있습니다."
        },
        {
            "id": 11,
            "type": "code_analysis",
            "question": "다음 코드에서 예외 처리의 순서를 분석하고 문제점을 설명하세요:\ntry:\n    data = process_data()\nexcept Exception:\n    print('일반 오류')\nexcept ValueError:\n    print('값 오류')\nexcept TypeError:\n    print('타입 오류')",
            "correct_answer": "문제점: Exception이 모든 예외의 부모 클래스이므로 첫 번째 except에서 모든 예외가 처리됩니다. ValueError와 TypeError는 절대 실행되지 않습니다.\n\n수정된 코드:\ntry:\n    data = process_data()\nexcept ValueError:\n    print('값 오류')\nexcept TypeError:\n    print('타입 오류')\nexcept Exception:\n    print('일반 오류')",
            "explanation": "구체적인 예외를 먼저 처리하고, 일반적인 예외는 마지막에 처리해야 합니다."
        },
        {
            "id": 12,
            "type": "practical",
            "question": "assert를 사용하여 함수의 입력값을 검증하는 예제를 작성하세요. 나이를 받아서 0-150 범위인지 확인하는 함수를 만드세요.",
            "correct_answer": "def validate_age(age):\n    \"\"\"나이 유효성 검사 함수\"\"\"\n    assert isinstance(age, int), f\"나이는 정수여야 합니다: {type(age)}\"\n    assert 0 <= age <= 150, f\"나이는 0-150 범위여야 합니다: {age}\"\n    return True\n\n# 사용 예제\ntry:\n    validate_age(25)  # 정상\n    print(\"나이 검증 성공\")\n    validate_age(-5)  # 오류\nexcept AssertionError as e:\n    print(f\"검증 실패: {e}\")",
            "explanation": "assert는 개발 시 전제 조건을 검사하는 데 유용하며, 조건이 False일 때 AssertionError를 발생시킵니다."
        },
        {
            "id": 13,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\ndef test_function():\n    try:\n        return 'try'\n    except:\n        return 'except'\n    else:\n        return 'else'\n    finally:\n        print('finally')\n        \nresult = test_function()\nprint(result)",
            "correct_answer": "finally\ntry",
            "explanation": "try에서 return이 실행되지만 finally는 여전히 실행됩니다. else는 예외가 없어도 return으로 인해 실행되지 않습니다."
        },
        {
            "id": 14,
            "type": "multiple_choice",
            "question": "로깅 레벨의 순서가 올바른 것은? (낮은 순서부터)",
            "choices": [
                "DEBUG < INFO < WARNING < ERROR < CRITICAL",
                "INFO < DEBUG < WARNING < ERROR < CRITICAL",
                "DEBUG < WARNING < INFO < ERROR < CRITICAL",
                "CRITICAL < ERROR < WARNING < INFO < DEBUG"
            ],
            "correct_answer": 0,
            "explanation": "로깅 레벨은 DEBUG(10) < INFO(20) < WARNING(30) < ERROR(40) < CRITICAL(50) 순입니다."
        },
        {
            "id": 15,
            "type": "practical",
            "question": "간단한 로깅 설정을 하고 다양한 레벨의 로그를 출력하는 코드를 작성하세요.",
            "correct_answer": "import logging\n\n# 로깅 설정\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\n\nlogger = logging.getLogger(__name__)\n\n# 다양한 레벨의 로그\nlogger.debug('디버그 메시지')\nlogger.info('정보 메시지')\nlogger.warning('경고 메시지')\nlogger.error('에러 메시지')\nlogger.critical('치명적 에러 메시지')",
            "explanation": "로깅은 print보다 유연하고 강력한 디버깅 도구로, 레벨별로 메시지를 분류할 수 있습니다."
        },
        {
            "id": 16,
            "type": "code_completion",
            "question": "재시도 로직이 포함된 네트워크 요청 함수를 작성하세요. 최대 3번까지 재시도하고, 각 시도 사이에 대기 시간을 두세요.",
            "correct_answer": "import time\nimport random\n\ndef network_request_with_retry(url, max_retries=3):\n    \"\"\"재시도 로직이 포함된 네트워크 요청\"\"\"\n    for attempt in range(max_retries):\n        try:\n            # 네트워크 요청 시뮬레이션\n            if random.random() < 0.7:  # 70% 실패 확률\n                raise ConnectionError(\"연결 실패\")\n            \n            return f\"성공: {url}에서 데이터 받음\"\n            \n        except ConnectionError as e:\n            print(f\"시도 {attempt + 1} 실패: {e}\")\n            \n            if attempt == max_retries - 1:\n                raise Exception(\"최대 재시도 횟수 초과\")\n            \n            wait_time = (attempt + 1) * 2\n            print(f\"{wait_time}초 후 재시도...\")\n            time.sleep(wait_time)\n\n# 사용 예제\ntry:\n    result = network_request_with_retry(\"https://api.example.com\")\n    print(result)\nexcept Exception as e:\n    print(f\"최종 실패: {e}\")",
            "explanation": "재시도 로직은 일시적인 네트워크 오류를 처리하는 중요한 패턴입니다."
        },
        {
            "id": 17,
            "type": "multiple_choice",
            "question": "다음 중 디버깅에 가장 적합하지 않은 방법은?",
            "choices": [
                "print 문으로 변수값 확인",
                "logging 모듈 사용",
                "assert로 조건 검사",
                "모든 예외를 except: pass로 무시"
            ],
            "correct_answer": 3,
            "explanation": "예외를 무시하면 문제의 원인을 파악하기 어려워집니다. 예외는 적절히 처리하거나 로그를 남겨야 합니다."
        },
        {
            "id": 18,
            "type": "code_debugging",
            "question": "다음 코드에서 무한 루프가 발생할 수 있는 문제를 찾아 수정하세요:\ndef get_number():\n    while True:\n        try:\n            return int(input('숫자 입력: '))\n        except:\n            print('잘못된 입력입니다')",
            "correct_answer": "def get_number():\n    max_attempts = 3\n    attempts = 0\n    \n    while attempts < max_attempts:\n        try:\n            return int(input('숫자 입력: '))\n        except ValueError:\n            attempts += 1\n            print(f'잘못된 입력입니다. ({attempts}/{max_attempts})')\n        except KeyboardInterrupt:\n            print('\\n입력이 취소되었습니다.')\n            return None\n    \n    print('최대 시도 횟수를 초과했습니다.')\n    return None\n\n# 또는 더 간단한 수정:\ndef get_number_v2():\n    while True:\n        try:\n            return int(input('숫자 입력 (q: 종료): '))\n        except ValueError:\n            user_input = input('잘못된 입력입니다. 계속하시겠습니까? (y/n): ')\n            if user_input.lower() != 'y':\n                return None",
            "explanation": "무한 루프에서 탈출 조건을 제공하거나 최대 시도 횟수를 제한해야 합니다."
        },
        {
            "id": 19,
            "type": "practical",
            "question": "입력 검증 함수를 작성하세요. 이메일 주소 형식을 간단히 검증하고, 올바르지 않으면 사용자 정의 예외를 발생시키세요.",
            "correct_answer": "class InvalidEmailError(Exception):\n    \"\"\"이메일 형식 오류 예외\"\"\"\n    pass\n\ndef validate_email(email):\n    \"\"\"이메일 주소 형식 검증\"\"\"\n    if not isinstance(email, str):\n        raise InvalidEmailError(\"이메일은 문자열이어야 합니다\")\n    \n    email = email.strip()\n    \n    if not email:\n        raise InvalidEmailError(\"이메일 주소가 비어있습니다\")\n    \n    if '@' not in email:\n        raise InvalidEmailError(\"이메일에 @가 포함되어야 합니다\")\n    \n    if email.count('@') != 1:\n        raise InvalidEmailError(\"이메일에 @는 하나만 있어야 합니다\")\n    \n    local, domain = email.split('@')\n    \n    if not local or not domain:\n        raise InvalidEmailError(\"이메일 형식이 올바르지 않습니다\")\n    \n    if '.' not in domain:\n        raise InvalidEmailError(\"도메인에 .이 포함되어야 합니다\")\n    \n    return email\n\n# 사용 예제\nemails = [\"test@example.com\", \"invalid-email\", \"\", \"test@@example.com\"]\n\nfor email in emails:\n    try:\n        valid_email = validate_email(email)\n        print(f\"✓ 유효한 이메일: {valid_email}\")\n    except InvalidEmailError as e:\n        print(f\"✗ {email}: {e}\")",
            "explanation": "입력 검증은 데이터 품질과 보안을 위해 중요하며, 명확한 오류 메시지를 제공해야 합니다."
        },
        {
            "id": 20,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\ntry:\n    x = 10\n    y = 0\n    result = x / y\nexcept ZeroDivisionError:\n    print('Division by zero')\nexcept Exception as e:\n    print(f'Other error: {e}')\nelse:\n    print(f'Result: {result}')\nfinally:\n    print('Cleanup')",
            "correct_answer": "Division by zero\nCleanup",
            "explanation": "ZeroDivisionError가 발생하여 첫 번째 except 블록이 실행되고, else는 실행되지 않으며, finally는 항상 실행됩니다."
        },
        {
            "id": 21,
            "type": "multiple_choice",
            "question": "with 문의 주요 목적은 무엇인가요?",
            "choices": [
                "예외를 자동으로 처리하기 위해",
                "리소스를 자동으로 정리하기 위해",
                "코드 실행 속도를 높이기 위해",
                "변수 스코프를 제한하기 위해"
            ],
            "correct_answer": 1,
            "explanation": "with 문은 컨텍스트 매니저를 사용하여 리소스(파일, 네트워크 연결 등)를 자동으로 정리합니다."
        },
        {
            "id": 22,
            "type": "practical",
            "question": "컨텍스트 매니저를 사용하여 안전한 파일 처리 함수를 작성하세요.",
            "correct_answer": "def safe_file_read(filename):\n    \"\"\"안전한 파일 읽기 함수\"\"\"\n    try:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n            return content\n    except FileNotFoundError:\n        print(f\"파일을 찾을 수 없습니다: {filename}\")\n        return None\n    except PermissionError:\n        print(f\"파일 접근 권한이 없습니다: {filename}\")\n        return None\n    except UnicodeDecodeError:\n        print(f\"파일 인코딩 오류: {filename}\")\n        return None\n    except Exception as e:\n        print(f\"예상치 못한 오류: {e}\")\n        return None\n\ndef safe_file_write(filename, content):\n    \"\"\"안전한 파일 쓰기 함수\"\"\"\n    try:\n        with open(filename, 'w', encoding='utf-8') as file:\n            file.write(content)\n            return True\n    except PermissionError:\n        print(f\"파일 쓰기 권한이 없습니다: {filename}\")\n        return False\n    except Exception as e:\n        print(f\"파일 쓰기 오류: {e}\")\n        return False\n\n# 사용 예제\ncontent = safe_file_read('test.txt')\nif content:\n    print(\"파일 읽기 성공\")\n\nif safe_file_write('output.txt', 'Hello, World!'):\n    print(\"파일 쓰기 성공\")",
            "explanation": "with 문을 사용하면 파일이 자동으로 닫히므로 리소스 누수를 방지할 수 있습니다."
        },
        {
            "id": 23,
            "type": "code_analysis",
            "question": "다음 코드의 예외 처리 방식을 분석하고 개선점을 제시하세요:\ndef process_data(data_list):\n    results = []\n    for item in data_list:\n        try:\n            result = int(item) * 2\n            results.append(result)\n        except:\n            pass\n    return results",
            "correct_answer": "현재 코드의 문제점:\n1. 모든 예외를 무시하여 어떤 오류가 발생했는지 알 수 없음\n2. 구체적인 예외 타입을 지정하지 않음\n3. 오류 발생 시 로그나 알림이 없음\n\n개선된 코드:\ndef process_data(data_list):\n    \"\"\"데이터 리스트를 처리하여 정수로 변환 후 2배\"\"\"\n    results = []\n    errors = []\n    \n    for i, item in enumerate(data_list):\n        try:\n            result = int(item) * 2\n            results.append(result)\n        except ValueError as e:\n            error_msg = f\"인덱스 {i}: '{item}'을 정수로 변환할 수 없습니다\"\n            errors.append(error_msg)\n            print(f\"경고: {error_msg}\")\n        except TypeError as e:\n            error_msg = f\"인덱스 {i}: 지원하지 않는 타입 {type(item)}\"\n            errors.append(error_msg)\n            print(f\"경고: {error_msg}\")\n    \n    if errors:\n        print(f\"총 {len(errors)}개의 오류가 발생했습니다\")\n    \n    return results, errors",
            "explanation": "예외를 무시하지 말고 적절히 처리하여 디버깅에 도움이 되는 정보를 제공해야 합니다."
        },
        {
            "id": 24,
            "type": "multiple_choice",
            "question": "예외 처리에서 가장 좋은 관행은?",
            "choices": [
                "모든 예외를 except: pass로 처리",
                "Exception만 사용하여 모든 예외 처리",
                "구체적인 예외 타입을 사용하여 적절히 처리",
                "예외를 절대 처리하지 않음"
            ],
            "correct_answer": 2,
            "explanation": "구체적인 예외 타입을 사용하면 각 상황에 맞는 적절한 처리가 가능하고 디버깅에 도움이 됩니다."
        },
        {
            "id": 25,
            "type": "practical",
            "question": "API 응답을 처리하는 함수를 작성하세요. JSON 파싱 오류, 네트워크 오류 등 다양한 예외를 처리하세요.",
            "correct_answer": "import json\nimport time\nimport random\n\nclass APIError(Exception):\n    \"\"\"API 관련 오류\"\"\"\n    pass\n\nclass NetworkError(APIError):\n    \"\"\"네트워크 오류\"\"\"\n    pass\n\nclass JSONParseError(APIError):\n    \"\"\"JSON 파싱 오류\"\"\"\n    pass\n\ndef fetch_api_data(url, timeout=5, max_retries=3):\n    \"\"\"API 데이터를 가져오는 함수\"\"\"\n    \n    for attempt in range(max_retries):\n        try:\n            # 네트워크 요청 시뮬레이션\n            print(f\"API 요청 시도 {attempt + 1}/{max_retries}: {url}\")\n            \n            # 랜덤 실패 시뮬레이션\n            if random.random() < 0.3:\n                raise NetworkError(\"네트워크 연결 실패\")\n            \n            # 응답 시뮬레이션\n            if random.random() < 0.2:\n                response_text = \"invalid json data\"\n            else:\n                response_text = '{\"status\": \"success\", \"data\": [1, 2, 3]}'\n            \n            # JSON 파싱\n            try:\n                data = json.loads(response_text)\n                print(f\"API 요청 성공: {data}\")\n                return data\n            except json.JSONDecodeError as e:\n                raise JSONParseError(f\"JSON 파싱 실패: {e}\")\n                \n        except NetworkError as e:\n            print(f\"네트워크 오류: {e}\")\n            \n            if attempt < max_retries - 1:\n                wait_time = (attempt + 1) * 2\n                print(f\"{wait_time}초 후 재시도...\")\n                time.sleep(0.1)  # 실제로는 time.sleep(wait_time)\n            else:\n                raise APIError(f\"최대 재시도 횟수 초과: {e}\")\n                \n        except JSONParseError as e:\n            print(f\"JSON 파싱 오류: {e}\")\n            raise  # JSON 오류는 재시도하지 않음\n            \n        except Exception as e:\n            print(f\"예상치 못한 오류: {e}\")\n            raise APIError(f\"API 요청 중 오류 발생: {e}\")\n\n# 사용 예제\ntry:\n    result = fetch_api_data(\"https://api.example.com/data\")\n    print(f\"최종 결과: {result}\")\nexcept APIError as e:\n    print(f\"API 오류: {e}\")\nexcept Exception as e:\n    print(f\"시스템 오류: {e}\")",
            "explanation": "API 처리에서는 네트워크, 파싱, 인증 등 다양한 오류가 발생할 수 있으므로 각각에 맞는 처리가 필요합니다."
        },
        {
            "id": 26,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\ndef raise_exception():\n    try:\n        raise ValueError(\"Original error\")\n    except ValueError as e:\n        raise RuntimeError(\"New error\") from e\n\ntry:\n    raise_exception()\nexcept RuntimeError as e:\n    print(f\"Caught: {e}\")\n    print(f\"Cause: {e.__cause__}\")",
            "correct_answer": "Caught: New error\nCause: Original error",
            "explanation": "예외 체인을 사용하면 원본 예외 정보를 __cause__ 속성으로 접근할 수 있습니다."
        },
        {
            "id": 27,
            "type": "practical",
            "question": "데이터베이스 연결을 시뮬레이션하는 클래스를 만들고, 적절한 예외 처리와 리소스 정리를 구현하세요.",
            "correct_answer": "class DatabaseError(Exception):\n    \"\"\"데이터베이스 관련 오류\"\"\"\n    pass\n\nclass ConnectionError(DatabaseError):\n    \"\"\"연결 오류\"\"\"\n    pass\n\nclass QueryError(DatabaseError):\n    \"\"\"쿼리 실행 오류\"\"\"\n    pass\n\nclass Database:\n    \"\"\"데이터베이스 연결 시뮬레이션 클래스\"\"\"\n    \n    def __init__(self, host, database):\n        self.host = host\n        self.database = database\n        self.is_connected = False\n        self.transaction_active = False\n    \n    def connect(self):\n        \"\"\"데이터베이스 연결\"\"\"\n        try:\n            print(f\"연결 중: {self.host}/{self.database}\")\n            \n            # 연결 실패 시뮬레이션\n            if self.host == \"invalid_host\":\n                raise ConnectionError(\"호스트에 연결할 수 없습니다\")\n            \n            self.is_connected = True\n            print(\"데이터베이스 연결 성공\")\n            \n        except Exception as e:\n            raise ConnectionError(f\"연결 실패: {e}\")\n    \n    def execute_query(self, query):\n        \"\"\"쿼리 실행\"\"\"\n        if not self.is_connected:\n            raise ConnectionError(\"데이터베이스에 연결되지 않았습니다\")\n        \n        try:\n            print(f\"쿼리 실행: {query}\")\n            \n            # 쿼리 오류 시뮬레이션\n            if \"DROP\" in query.upper():\n                raise QueryError(\"DROP 명령은 허용되지 않습니다\")\n            \n            if \"INVALID\" in query.upper():\n                raise QueryError(\"잘못된 SQL 구문입니다\")\n            \n            return f\"쿼리 실행 결과: {query}\"\n            \n        except QueryError:\n            raise\n        except Exception as e:\n            raise QueryError(f\"쿼리 실행 중 오류: {e}\")\n    \n    def begin_transaction(self):\n        \"\"\"트랜잭션 시작\"\"\"\n        if not self.is_connected:\n            raise ConnectionError(\"연결이 필요합니다\")\n        \n        self.transaction_active = True\n        print(\"트랜잭션 시작\")\n    \n    def commit(self):\n        \"\"\"트랜잭션 커밋\"\"\"\n        if self.transaction_active:\n            self.transaction_active = False\n            print(\"트랜잭션 커밋\")\n    \n    def rollback(self):\n        \"\"\"트랜잭션 롤백\"\"\"\n        if self.transaction_active:\n            self.transaction_active = False\n            print(\"트랜잭션 롤백\")\n    \n    def close(self):\n        \"\"\"연결 종료\"\"\"\n        if self.is_connected:\n            if self.transaction_active:\n                self.rollback()\n            self.is_connected = False\n            print(\"데이터베이스 연결 종료\")\n    \n    def __enter__(self):\n        \"\"\"컨텍스트 매니저 진입\"\"\"\n        self.connect()\n        return self\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"컨텍스트 매니저 종료\"\"\"\n        if exc_type:\n            print(f\"오류 발생으로 인한 정리: {exc_type.__name__}\")\n            if self.transaction_active:\n                self.rollback()\n        self.close()\n\n# 사용 예제\ndef database_operation():\n    \"\"\"데이터베이스 작업 예제\"\"\"\n    \n    # with 문을 사용한 안전한 리소스 관리\n    try:\n        with Database(\"localhost\", \"testdb\") as db:\n            db.begin_transaction()\n            \n            try:\n                result1 = db.execute_query(\"SELECT * FROM users\")\n                print(f\"결과1: {result1}\")\n                \n                result2 = db.execute_query(\"INSERT INTO users VALUES (1, 'John')\")\n                print(f\"결과2: {result2}\")\n                \n                # 의도적 오류 발생\n                result3 = db.execute_query(\"DROP TABLE users\")\n                \n                db.commit()\n                \n            except QueryError as e:\n                print(f\"쿼리 오류: {e}\")\n                db.rollback()\n                \n    except ConnectionError as e:\n        print(f\"연결 오류: {e}\")\n    except DatabaseError as e:\n        print(f\"데이터베이스 오류: {e}\")\n    except Exception as e:\n        print(f\"예상치 못한 오류: {e}\")\n\n# 테스트 실행\ndatabase_operation()",
            "explanation": "데이터베이스 작업에서는 연결, 트랜잭션, 리소스 정리를 적절히 관리하는 것이 중요합니다."
        },
        {
            "id": 28,
            "type": "code_debugging",
            "question": "다음 코드에서 메모리 누수가 발생할 수 있는 부분을 찾아 수정하세요:\nclass FileProcessor:\n    def __init__(self):\n        self.files = []\n    \n    def process_file(self, filename):\n        file = open(filename, 'r')\n        self.files.append(file)\n        content = file.read()\n        return content.upper()\n    \n    def process_multiple_files(self, filenames):\n        results = []\n        for filename in filenames:\n            try:\n                result = self.process_file(filename)\n                results.append(result)\n            except:\n                continue\n        return results",
            "correct_answer": "class FileProcessor:\n    def __init__(self):\n        self.processed_files = []  # 파일 객체 대신 처리된 파일명 저장\n    \n    def process_file(self, filename):\n        \"\"\"단일 파일 처리\"\"\"\n        try:\n            with open(filename, 'r', encoding='utf-8') as file:\n                content = file.read()\n                self.processed_files.append(filename)\n                return content.upper()\n        except FileNotFoundError:\n            raise FileNotFoundError(f\"파일을 찾을 수 없습니다: {filename}\")\n        except PermissionError:\n            raise PermissionError(f\"파일 접근 권한이 없습니다: {filename}\")\n        except Exception as e:\n            raise Exception(f\"파일 처리 중 오류: {e}\")\n    \n    def process_multiple_files(self, filenames):\n        \"\"\"여러 파일 처리\"\"\"\n        results = []\n        errors = []\n        \n        for filename in filenames:\n            try:\n                result = self.process_file(filename)\n                results.append((filename, result))\n                print(f\"✓ 처리 완료: {filename}\")\n            except FileNotFoundError as e:\n                error_msg = f\"파일 없음: {filename}\"\n                errors.append(error_msg)\n                print(f\"✗ {error_msg}\")\n            except PermissionError as e:\n                error_msg = f\"권한 오류: {filename}\"\n                errors.append(error_msg)\n                print(f\"✗ {error_msg}\")\n            except Exception as e:\n                error_msg = f\"처리 오류 {filename}: {e}\"\n                errors.append(error_msg)\n                print(f\"✗ {error_msg}\")\n        \n        print(f\"처리 완료: {len(results)}개, 오류: {len(errors)}개\")\n        return results, errors\n    \n    def get_processed_files(self):\n        \"\"\"처리된 파일 목록 반환\"\"\"\n        return self.processed_files.copy()\n\n# 사용 예제\nprocessor = FileProcessor()\nfiles = ['test1.txt', 'test2.txt', 'nonexistent.txt']\nresults, errors = processor.process_multiple_files(files)\nprint(f\"처리된 파일들: {processor.get_processed_files()}\")",
            "explanation": "원본 코드는 파일을 열기만 하고 닫지 않아 메모리 누수가 발생합니다. with 문을 사용하면 자동으로 파일이 닫힙니다."
        },
        {
            "id": 29,
            "type": "multiple_choice",
            "question": "다음 중 프로덕션 환경에서 디버깅에 가장 적합한 방법은?",
            "choices": [
                "print 문을 코드에 직접 추가",
                "assert 문으로 조건 검사",
                "logging 모듈로 적절한 레벨의 로그 기록",
                "모든 예외를 무시하여 프로그램 중단 방지"
            ],
            "correct_answer": 2,
            "explanation": "프로덕션 환경에서는 logging 모듈을 사용하여 적절한 레벨의 로그를 기록하는 것이 가장 효과적입니다."
        },
        {
            "id": 30,
            "type": "practical",
            "question": "설정 파일을 읽어서 검증하는 함수를 작성하세요. JSON 형식의 설정 파일을 읽고, 필수 키들이 있는지 확인하세요.",
            "correct_answer": "import json\nimport os\n\nclass ConfigError(Exception):\n    \"\"\"설정 파일 관련 오류\"\"\"\n    pass\n\nclass ConfigValidationError(ConfigError):\n    \"\"\"설정 검증 오류\"\"\"\n    pass\n\ndef load_and_validate_config(config_path, required_keys=None):\n    \"\"\"설정 파일 로드 및 검증\"\"\"\n    \n    if required_keys is None:\n        required_keys = ['database', 'api_key', 'debug']\n    \n    try:\n        # 파일 존재 확인\n        if not os.path.exists(config_path):\n            raise FileNotFoundError(f\"설정 파일을 찾을 수 없습니다: {config_path}\")\n        \n        # JSON 파일 읽기\n        with open(config_path, 'r', encoding='utf-8') as file:\n            try:\n                config = json.load(file)\n            except json.JSONDecodeError as e:\n                raise ConfigError(f\"JSON 파싱 오류: {e}\")\n        \n        # 데이터 타입 확인\n        if not isinstance(config, dict):\n            raise ConfigValidationError(\"설정 파일의 최상위는 객체여야 합니다\")\n        \n        # 필수 키 확인\n        missing_keys = []\n        for key in required_keys:\n            if key not in config:\n                missing_keys.append(key)\n        \n        if missing_keys:\n            raise ConfigValidationError(\n                f\"필수 설정 키가 누락되었습니다: {', '.join(missing_keys)}\"\n            )\n        \n        # 특정 키의 값 검증\n        if 'database' in config:\n            db_config = config['database']\n            if not isinstance(db_config, dict):\n                raise ConfigValidationError(\"database 설정은 객체여야 합니다\")\n            \n            db_required = ['host', 'port', 'name']\n            missing_db_keys = [key for key in db_required if key not in db_config]\n            if missing_db_keys:\n                raise ConfigValidationError(\n                    f\"데이터베이스 설정에 필수 키가 누락: {', '.join(missing_db_keys)}\"\n                )\n        \n        if 'api_key' in config:\n            api_key = config['api_key']\n            if not isinstance(api_key, str) or len(api_key) < 10:\n                raise ConfigValidationError(\"API 키는 10자 이상의 문자열이어야 합니다\")\n        \n        if 'debug' in config:\n            if not isinstance(config['debug'], bool):\n                raise ConfigValidationError(\"debug 설정은 불린 값이어야 합니다\")\n        \n        print(f\"✓ 설정 파일 로드 성공: {config_path}\")\n        return config\n        \n    except FileNotFoundError as e:\n        print(f\"✗ 파일 오류: {e}\")\n        raise\n    except ConfigError as e:\n        print(f\"✗ 설정 오류: {e}\")\n        raise\n    except Exception as e:\n        print(f\"✗ 예상치 못한 오류: {e}\")\n        raise ConfigError(f\"설정 파일 처리 중 오류: {e}\")\n\ndef create_sample_config(filename):\n    \"\"\"샘플 설정 파일 생성\"\"\"\n    sample_config = {\n        \"database\": {\n            \"host\": \"localhost\",\n            \"port\": 5432,\n            \"name\": \"myapp\",\n            \"user\": \"admin\"\n        },\n        \"api_key\": \"your-secret-api-key-here\",\n        \"debug\": True,\n        \"max_connections\": 100\n    }\n    \n    try:\n        with open(filename, 'w', encoding='utf-8') as file:\n            json.dump(sample_config, file, indent=2, ensure_ascii=False)\n        print(f\"샘플 설정 파일 생성: {filename}\")\n    except Exception as e:\n        print(f\"설정 파일 생성 실패: {e}\")\n\n# 사용 예제\ndef test_config_loading():\n    \"\"\"설정 로딩 테스트\"\"\"\n    \n    # 샘플 설정 파일 생성\n    create_sample_config('config.json')\n    \n    # 설정 파일들 테스트\n    test_cases = [\n        ('config.json', ['database', 'api_key', 'debug']),\n        ('nonexistent.json', ['database']),\n        ('config.json', ['database', 'api_key', 'missing_key'])\n    ]\n    \n    for config_file, required_keys in test_cases:\n        print(f\"\\n--- 테스트: {config_file} ---\")\n        try:\n            config = load_and_validate_config(config_file, required_keys)\n            print(f\"성공적으로 로드된 설정 키: {list(config.keys())}\")\n        except Exception as e:\n            print(f\"설정 로드 실패: {e}\")\n\n# 테스트 실행\ntest_config_loading()",
            "explanation": "설정 파일 처리에서는 파일 존재, JSON 파싱, 필수 키 검증 등 다양한 오류 상황을 고려해야 합니다."
        },
        {
            "id": 31,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\nimport logging\n\nlogging.basicConfig(level=logging.WARNING)\nlogger = logging.getLogger('test')\n\nlogger.debug('Debug message')\nlogger.info('Info message')\nlogger.warning('Warning message')\nlogger.error('Error message')",
            "correct_answer": "WARNING:test:Warning message\nERROR:test:Error message",
            "explanation": "로그 레벨이 WARNING으로 설정되어 있어서 WARNING 이상의 레벨(WARNING, ERROR, CRITICAL)만 출력됩니다."
        },
        {
            "id": 32,
            "type": "practical",
            "question": "종합적인 에러 처리를 포함한 계산기 클래스를 작성하세요. 다양한 예외 상황을 처리하고 로깅을 포함하세요.",
            "correct_answer": "import logging\nimport math\n\n# 로깅 설정\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\nclass CalculatorError(Exception):\n    \"\"\"계산기 관련 오류\"\"\"\n    pass\n\nclass InvalidOperationError(CalculatorError):\n    \"\"\"잘못된 연산 오류\"\"\"\n    pass\n\nclass CalculationError(CalculatorError):\n    \"\"\"계산 수행 오류\"\"\"\n    pass\n\nclass AdvancedCalculator:\n    \"\"\"고급 계산기 클래스\"\"\"\n    \n    def __init__(self):\n        self.logger = logging.getLogger(self.__class__.__name__)\n        self.history = []\n        \n        # 지원하는 연산들\n        self.operations = {\n            'add': self._add,\n            'subtract': self._subtract,\n            'multiply': self._multiply,\n            'divide': self._divide,\n            'power': self._power,\n            'sqrt': self._sqrt,\n            'log': self._log\n        }\n        \n        self.logger.info(\"계산기 초기화 완료\")\n    \n    def _validate_numbers(self, *args):\n        \"\"\"숫자 유효성 검사\"\"\"\n        for i, arg in enumerate(args):\n            if not isinstance(arg, (int, float)):\n                raise TypeError(f\"인수 {i+1}은 숫자여야 합니다: {type(arg)}\")\n            if math.isnan(arg) or math.isinf(arg):\n                raise ValueError(f\"인수 {i+1}은 유한한 숫자여야 합니다: {arg}\")\n    \n    def _add(self, a, b):\n        \"\"\"덧셈\"\"\"\n        return a + b\n    \n    def _subtract(self, a, b):\n        \"\"\"뺄셈\"\"\"\n        return a - b\n    \n    def _multiply(self, a, b):\n        \"\"\"곱셈\"\"\"\n        return a * b\n    \n    def _divide(self, a, b):\n        \"\"\"나눗셈\"\"\"\n        if b == 0:\n            raise ZeroDivisionError(\"0으로 나눌 수 없습니다\")\n        return a / b\n    \n    def _power(self, base, exponent):\n        \"\"\"거듭제곱\"\"\"\n        try:\n            result = base ** exponent\n            if math.isinf(result):\n                raise OverflowError(\"결과가 너무 큽니다\")\n            return result\n        except OverflowError:\n            raise CalculationError(\"거듭제곱 결과가 범위를 초과했습니다\")\n    \n    def _sqrt(self, number):\n        \"\"\"제곱근\"\"\"\n        if number < 0:\n            raise ValueError(\"음수의 제곱근은 계산할 수 없습니다\")\n        return math.sqrt(number)\n    \n    def _log(self, number, base=math.e):\n        \"\"\"로그\"\"\"\n        if number <= 0:\n            raise ValueError(\"로그의 진수는 양수여야 합니다\")\n        if base <= 0 or base == 1:\n            raise ValueError(\"로그의 밑은 양수이고 1이 아니어야 합니다\")\n        \n        try:\n            if base == math.e:\n                return math.log(number)\n            else:\n                return math.log(number, base)\n        except ValueError as e:\n            raise CalculationError(f\"로그 계산 오류: {e}\")\n    \n    def calculate(self, operation, *args):\n        \"\"\"계산 수행\"\"\"\n        operation_name = operation.lower()\n        \n        try:\n            self.logger.debug(f\"계산 요청: {operation_name}({args})\")\n            \n            # 연산 유효성 검사\n            if operation_name not in self.operations:\n                available = ', '.join(self.operations.keys())\n                raise InvalidOperationError(\n                    f\"지원하지 않는 연산: {operation_name}. \"\n                    f\"사용 가능한 연산: {available}\"\n                )\n            \n            # 인수 개수 검사\n            expected_args = {\n                'add': 2, 'subtract': 2, 'multiply': 2, 'divide': 2,\n                'power': 2, 'sqrt': 1, 'log': (1, 2)\n            }\n            \n            expected = expected_args[operation_name]\n            if isinstance(expected, tuple):\n                if len(args) not in expected:\n                    raise InvalidOperationError(\n                        f\"{operation_name} 연산은 {expected} 개의 인수가 필요합니다\"\n                    )\n            else:\n                if len(args) != expected:\n                    raise InvalidOperationError(\n                        f\"{operation_name} 연산은 {expected}개의 인수가 필요합니다\"\n                    )\n            \n            # 숫자 유효성 검사\n            self._validate_numbers(*args)\n            \n            # 계산 수행\n            operation_func = self.operations[operation_name]\n            result = operation_func(*args)\n            \n            # 결과 검증\n            if math.isnan(result):\n                raise CalculationError(\"계산 결과가 유효하지 않습니다 (NaN)\")\n            if math.isinf(result):\n                raise CalculationError(\"계산 결과가 무한대입니다\")\n            \n            # 히스토리 저장\n            calculation_record = {\n                'operation': operation_name,\n                'args': args,\n                'result': result\n            }\n            self.history.append(calculation_record)\n            \n            self.logger.info(f\"계산 성공: {operation_name}({args}) = {result}\")\n            return result\n            \n        except (TypeError, ValueError, ZeroDivisionError) as e:\n            self.logger.error(f\"계산 오류: {operation_name}({args}) - {e}\")\n            raise CalculationError(f\"{operation_name} 계산 실패: {e}\")\n        except (InvalidOperationError, CalculationError):\n            # 이미 적절히 래핑된 예외는 그대로 전파\n            raise\n        except Exception as e:\n            self.logger.critical(f\"예상치 못한 오류: {operation_name}({args}) - {e}\")\n            raise CalculationError(f\"계산 중 예상치 못한 오류: {e}\")\n    \n    def get_history(self):\n        \"\"\"계산 히스토리 반환\"\"\"\n        return self.history.copy()\n    \n    def clear_history(self):\n        \"\"\"히스토리 초기화\"\"\"\n        self.logger.info(f\"히스토리 초기화: {len(self.history)}개 항목 삭제\")\n        self.history.clear()\n\n# 사용 예제\ndef test_calculator():\n    \"\"\"계산기 테스트\"\"\"\n    calc = AdvancedCalculator()\n    \n    # 테스트 케이스들\n    test_cases = [\n        ('add', 10, 5),\n        ('subtract', 10, 3),\n        ('multiply', 4, 7),\n        ('divide', 20, 4),\n        ('divide', 10, 0),          # 0으로 나누기 오류\n        ('power', 2, 8),\n        ('power', 2, 1000),         # 오버플로우 가능\n        ('sqrt', 16),\n        ('sqrt', -4),               # 음수 제곱근 오류\n        ('log', 100, 10),\n        ('log', -5),                # 음수 로그 오류\n        ('invalid_op', 1, 2),       # 잘못된 연산\n        ('add', '10', 5),           # 타입 오류\n        ('add', 10),                # 인수 개수 오류\n    ]\n    \n    for i, test_case in enumerate(test_cases, 1):\n        operation = test_case[0]\n        args = test_case[1:]\n        \n        print(f\"\\n--- 테스트 {i}: {operation}({args}) ---\")\n        \n        try:\n            result = calc.calculate(operation, *args)\n            print(f\"✓ 결과: {result}\")\n        except CalculatorError as e:\n            print(f\"✗ 계산기 오류: {e}\")\n        except Exception as e:\n            print(f\"✗ 시스템 오류: {e}\")\n    \n    # 히스토리 출력\n    history = calc.get_history()\n    print(f\"\\n=== 계산 히스토리 ({len(history)}개) ===\")\n    for i, record in enumerate(history, 1):\n        print(f\"{i}. {record['operation']}({record['args']}) = {record['result']}\")\n\n# 테스트 실행\nif __name__ == \"__main__\":\n    test_calculator()",
            "explanation": "종합적인 에러 처리는 사용자 정의 예외, 입력 검증, 로깅, 히스토리 관리 등을 포함해야 합니다."
        }
    ],
    "difficulty_level": "beginner",
    "estimated_time": "50 minutes",
    "learning_objectives": [
        "다양한 에러 타입과 발생 원인 완전 이해",
        "try-except-else-finally 구조 완벽 활용",
        "사용자 정의 예외 설계와 구현",
        "예외 체인과 컨텍스트 활용",
        "효과적인 디버깅 기법 습득",
        "로깅을 통한 프로그램 모니터링",
        "실용적인 에러 처리 패턴 적용",
        "견고하고 안정적인 프로그램 작성 능력"
    ]
}