{
    "quiz_title": "Chapter 10: 멀티스레딩과 비동기 처리 기초",
    "quiz_description": "동시성과 병렬성, 스레딩, 멀티프로세싱, 비동기 프로그래밍의 개념과 실무 활용을 다루는 종합 퀴즈입니다.",
    "passing_score": 70,
    "time_limit_minutes": 50,
    "questions": [
        {
            "id": 1,
            "type": "multiple_choice",
            "difficulty": "easy",
            "question": "다음 중 동시성(Concurrency)과 병렬성(Parallelism)의 차이점을 가장 정확하게 설명한 것은?",
            "options": [
                "동시성은 여러 작업을 동시에 처리하고, 병렬성은 순차적으로 처리한다",
                "동시성은 논리적으로 동시에 진행되는 것처럼 보이는 것이고, 병렬성은 물리적으로 동시에 실행되는 것이다",
                "동시성과 병렬성은 동일한 개념이다",
                "병렬성은 단일 코어에서만 가능하고, 동시성은 멀티 코어에서만 가능하다"
            ],
            "correct_answer": 1,
            "explanation": "동시성은 여러 작업을 번갈아가며 처리하여 논리적으로 동시에 진행되는 것처럼 보이게 하는 것이고, 병렬성은 실제로 여러 작업을 물리적으로 동시에 처리하는 것입니다."
        },
        {
            "id": 2,
            "type": "multiple_choice",
            "difficulty": "easy",
            "question": "Python의 GIL(Global Interpreter Lock)에 대한 설명으로 올바른 것은?",
            "options": [
                "한 번에 하나의 스레드만 Python 바이트코드를 실행할 수 있게 제한한다",
                "멀티프로세싱을 제한하는 메커니즘이다",
                "비동기 프로그래밍을 불가능하게 만든다",
                "메모리 사용량을 제한하는 역할을 한다"
            ],
            "correct_answer": 0,
            "explanation": "GIL은 한 번에 하나의 스레드만 Python 바이트코드를 실행할 수 있게 제한하는 메커니즘으로, CPU 집약적 작업에서 멀티스레딩의 효과를 제한합니다."
        },
        {
            "id": 3,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "다음 중 I/O 바운드 작업에 가장 적합한 동시성 패턴은?",
            "options": [
                "멀티프로세싱만 사용",
                "스레딩 또는 비동기 프로그래밍",
                "순차 처리",
                "CPU 최적화"
            ],
            "correct_answer": 1,
            "explanation": "I/O 바운드 작업은 I/O 대기 시간 동안 다른 작업을 수행할 수 있으므로 스레딩이나 비동기 프로그래밍이 효과적입니다."
        },
        {
            "id": 4,
            "type": "coding",
            "difficulty": "medium",
            "question": "다음 코드의 실행 결과로 가장 가능성이 높은 것은?\n\n```python\nimport threading\nimport time\n\ncounter = 0\n\ndef increment():\n    global counter\n    for _ in range(1000):\n        temp = counter\n        temp += 1\n        counter = temp\n\nthread1 = threading.Thread(target=increment)\nthread2 = threading.Thread(target=increment)\n\nthread1.start()\nthread2.start()\n\nthread1.join()\nthread2.join()\n\nprint(counter)\n```",
            "options": [
                "항상 2000이 출력된다",
                "2000보다 작은 값이 출력될 가능성이 높다",
                "2000보다 큰 값이 출력될 가능성이 높다",
                "컴파일 에러가 발생한다"
            ],
            "correct_answer": 1,
            "explanation": "레이스 컨디션으로 인해 두 스레드가 동시에 counter 값을 읽고 수정하면서 일부 증가 연산이 손실될 수 있어 2000보다 작은 값이 출력될 가능성이 높습니다."
        },
        {
            "id": 5,
            "type": "true_false",
            "difficulty": "easy",
            "question": "Python에서 멀티스레딩은 CPU 집약적 작업에서 멀티프로세싱보다 항상 더 효율적이다.",
            "correct_answer": false,
            "explanation": "Python의 GIL로 인해 CPU 집약적 작업에서는 멀티스레딩이 제한적이고, 멀티프로세싱이 더 효율적입니다."
        },
        {
            "id": 6,
            "type": "fill_in_blank",
            "difficulty": "medium",
            "question": "스레드 간 동기화를 위해 사용하는 가장 기본적인 동기화 프리미티브는 ___이며, 재귀적으로 락을 획득할 수 있는 것은 ___입니다.",
            "correct_answer": [
                "Lock",
                "RLock"
            ],
            "explanation": "Lock은 기본적인 동기화 프리미티브이고, RLock(Reentrant Lock)은 같은 스레드에서 여러 번 획득할 수 있는 재귀 락입니다."
        },
        {
            "id": 7,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "다음 중 asyncio.gather()와 asyncio.wait()의 주요 차이점은?",
            "options": [
                "gather는 순서를 보장하고, wait는 순서를 보장하지 않는다",
                "gather는 예외 시 모든 작업을 취소하고, wait는 개별적으로 처리한다",
                "gather는 결과를 리스트로 반환하고, wait는 완료/미완료 세트를 반환한다",
                "위의 모든 내용이 맞다"
            ],
            "correct_answer": 3,
            "explanation": "gather는 순서 보장, 예외 시 전체 취소, 결과 리스트 반환의 특징을 가지고, wait는 더 세밀한 제어가 가능하며 완료/미완료 세트를 반환합니다."
        },
        {
            "id": 8,
            "type": "coding",
            "difficulty": "hard",
            "question": "다음 비동기 함수에서 결과로 출력될 총 실행 시간은 약 몇 초인가요?\n\n```python\nimport asyncio\nimport time\n\nasync def task1():\n    await asyncio.sleep(2)\n    return \"Task 1\"\n\nasync def task2():\n    await asyncio.sleep(3)\n    return \"Task 2\"\n\nasync def main():\n    start = time.time()\n    result1 = await task1()\n    result2 = await task2()\n    end = time.time()\n    return end - start\n\n# asyncio.run(main())\n```",
            "options": [
                "약 2초",
                "약 3초",
                "약 5초",
                "약 1초"
            ],
            "correct_answer": 2,
            "explanation": "await를 사용한 순차 실행이므로 task1(2초) + task2(3초) = 약 5초가 소요됩니다. 동시 실행하려면 asyncio.gather()를 사용해야 합니다."
        },
        {
            "id": 9,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "ThreadPoolExecutor와 ProcessPoolExecutor의 주요 차이점이 아닌 것은?",
            "options": [
                "메모리 공유 여부",
                "GIL의 영향",
                "생성 오버헤드",
                "함수 호출 방식"
            ],
            "correct_answer": 3,
            "explanation": "둘 다 동일한 방식으로 함수를 호출합니다(map, submit 등). 차이점은 메모리 공유, GIL 영향, 생성 오버헤드 등입니다."
        },
        {
            "id": 10,
            "type": "true_false",
            "difficulty": "medium",
            "question": "비동기 프로그래밍에서는 항상 멀티스레딩보다 적은 메모리를 사용한다.",
            "correct_answer": true,
            "explanation": "비동기 프로그래밍은 단일 스레드에서 이벤트 루프를 사용하므로 일반적으로 멀티스레딩보다 메모리 사용량이 적습니다."
        },
        {
            "id": 11,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "다음 코드에서 Semaphore(2)의 의미는?",
            "options": [
                "최대 2개의 스레드가 동시에 리소스에 접근할 수 있다",
                "2초 동안만 리소스에 접근할 수 있다",
                "2번만 리소스에 접근할 수 있다",
                "2개의 스레드만 생성할 수 있다"
            ],
            "correct_answer": 0,
            "explanation": "Semaphore(2)는 최대 2개의 스레드가 동시에 보호된 리소스에 접근할 수 있도록 제한합니다."
        },
        {
            "id": 12,
            "type": "coding",
            "difficulty": "hard",
            "question": "다음 비동기 코드의 실행 순서로 올바른 것은?\n\n```python\nimport asyncio\n\nasync def task(name, delay):\n    print(f\"{name} 시작\")\n    await asyncio.sleep(delay)\n    print(f\"{name} 완료\")\n\nasync def main():\n    await asyncio.gather(\n        task(\"A\", 2),\n        task(\"B\", 1),\n        task(\"C\", 3)\n    )\n```",
            "options": [
                "A시작 → A완료 → B시작 → B완료 → C시작 → C완료",
                "A시작 → B시작 → C시작 → B완료 → A완료 → C완료",
                "B시작 → B완료 → A시작 → A완료 → C시작 → C완료",
                "동시에 모든 작업이 시작되고 완료된다"
            ],
            "correct_answer": 1,
            "explanation": "gather는 모든 작업을 동시에 시작하므로 A, B, C가 순서대로 시작되고, 지연 시간에 따라 B(1초), A(2초), C(3초) 순으로 완료됩니다."
        },
        {
            "id": 13,
            "type": "fill_in_blank",
            "difficulty": "medium",
            "question": "비동기 컨텍스트 매니저를 만들기 위해서는 ___와 ___ 메서드를 구현해야 합니다.",
            "correct_answer": [
                "__aenter__",
                "__aexit__"
            ],
            "explanation": "__aenter__와 __aexit__ 메서드를 구현하면 async with 구문에서 사용할 수 있는 비동기 컨텍스트 매니저를 만들 수 있습니다."
        },
        {
            "id": 14,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "다음 중 CPU 바운드 작업의 예가 아닌 것은?",
            "options": [
                "암호화/복호화",
                "이미지 처리",
                "파일 다운로드",
                "수학적 계산"
            ],
            "correct_answer": 2,
            "explanation": "파일 다운로드는 네트워크 I/O를 기다리는 I/O 바운드 작업입니다. 나머지는 모두 CPU 연산이 주가 되는 CPU 바운드 작업입니다."
        },
        {
            "id": 15,
            "type": "true_false",
            "difficulty": "medium",
            "question": "asyncio.create_task()로 생성한 태스크는 취소할 수 있다.",
            "correct_answer": true,
            "explanation": "asyncio.create_task()로 생성한 태스크는 cancel() 메서드로 취소할 수 있습니다."
        },
        {
            "id": 16,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "다음 중 데드락(Deadlock)이 발생할 가능성이 있는 코드 패턴은?",
            "options": [
                "하나의 Lock만 사용하는 경우",
                "두 개의 Lock을 서로 다른 순서로 획득하는 경우",
                "RLock을 재귀적으로 사용하는 경우",
                "Semaphore를 사용하는 경우"
            ],
            "correct_answer": 1,
            "explanation": "두 스레드가 서로 다른 순서로 여러 Lock을 획득하려 할 때 데드락이 발생할 수 있습니다. 이를 방지하려면 일관된 순서로 Lock을 획득해야 합니다."
        },
        {
            "id": 17,
            "type": "coding",
            "difficulty": "hard",
            "question": "다음 코드에서 프로듀서-컨슈머 패턴을 올바르게 구현한 것은?",
            "options": [
                "queue.put()과 queue.get()을 직접 사용",
                "queue.put()과 queue.get()을 try-except로 감싸서 사용",
                "queue.put()과 queue.get()을 사용하고 task_done() 호출",
                "위의 모든 방법이 올바름"
            ],
            "correct_answer": 2,
            "explanation": "프로듀서-컨슈머 패턴에서는 queue.get()으로 작업을 가져온 후 처리 완료 시 task_done()을 호출하여 작업 완료를 알려야 합니다."
        },
        {
            "id": 18,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "asyncio.as_completed()의 특징으로 올바른 것은?",
            "options": [
                "모든 작업이 완료될 때까지 기다린다",
                "완료되는 순서대로 결과를 반환한다",
                "실패한 작업만 반환한다",
                "가장 빠른 작업만 반환한다"
            ],
            "correct_answer": 1,
            "explanation": "as_completed()는 여러 태스크 중에서 완료되는 순서대로 결과를 반환하는 이터레이터를 제공합니다."
        },
        {
            "id": 19,
            "type": "fill_in_blank",
            "difficulty": "hard",
            "question": "멀티프로세싱에서 프로세스 간 데이터 공유를 위해 사용할 수 있는 두 가지 주요 방법은 ___와 ___입니다.",
            "correct_answer": [
                "Queue",
                "shared memory"
            ],
            "explanation": "멀티프로세싱에서는 Queue를 통한 메시지 전달과 Value, Array 등을 사용한 공유 메모리 방식으로 데이터를 공유할 수 있습니다."
        },
        {
            "id": 20,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "다음 중 비동기 프로그래밍에서 '백프레셰(Backpressure)' 문제를 해결하는 방법이 아닌 것은?",
            "options": [
                "Queue의 maxsize 설정",
                "Rate limiting 구현",
                "더 많은 스레드 생성",
                "Producer 속도 조절"
            ],
            "correct_answer": 2,
            "explanation": "백프레셰는 생산자가 소비자보다 빠를 때 발생하는 문제로, 큐 크기 제한, 속도 제한, 생산자 속도 조절로 해결합니다. 스레드 증가는 비동기의 본질과 맞지 않습니다."
        },
        {
            "id": 21,
            "type": "true_false",
            "difficulty": "medium",
            "question": "Python의 threading.Event는 여러 스레드에게 동시에 신호를 보낼 수 있다.",
            "correct_answer": true,
            "explanation": "Event.set()을 호출하면 wait()로 대기 중인 모든 스레드가 동시에 깨어납니다."
        },
        {
            "id": 22,
            "type": "coding",
            "difficulty": "expert",
            "question": "다음 코드의 잠재적 문제점과 해결 방법을 설명하세요:\n\n```python\nimport asyncio\n\nasync def fetch_data(url):\n    # 네트워크 요청 시뮬레이션\n    await asyncio.sleep(1)\n    return f\"Data from {url}\"\n\nasync def main():\n    urls = [f\"http://api{i}.com\" for i in range(1000)]\n    tasks = [fetch_data(url) for url in urls]\n    results = await asyncio.gather(*tasks)\n    return results\n```",
            "options": [
                "문제없음 - 최적의 구현",
                "너무 많은 동시 연결로 리소스 고갈 위험",
                "GIL로 인한 성능 저하",
                "메모리 누수 발생"
            ],
            "correct_answer": 1,
            "explanation": "1000개의 동시 연결은 시스템 리소스를 고갈시킬 수 있습니다. asyncio.Semaphore로 동시 연결 수를 제한하거나 배치 처리를 사용해야 합니다."
        },
        {
            "id": 23,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "다음 중 스레드 풀의 적절한 크기를 결정하는 주요 요인이 아닌 것은?",
            "options": [
                "CPU 코어 수",
                "I/O 대기 시간",
                "메모리 사용량",
                "프로그램의 코드 라인 수"
            ],
            "correct_answer": 3,
            "explanation": "스레드 풀 크기는 CPU 코어 수, I/O 대기 시간, 메모리 사용량 등을 고려해 결정합니다. 코드 라인 수는 관련이 없습니다."
        },
        {
            "id": 24,
            "type": "design_pattern",
            "difficulty": "expert",
            "question": "대용량 파일을 여러 프로세스로 병렬 처리하는 시스템을 설계할 때 고려해야 할 주요 요소들을 설명하세요.",
            "correct_answer": "1) 파일 분할 전략 (청크 크기, 라인 경계), 2) 프로세스 간 통신 방법 (Queue, Pipe), 3) 결과 수집 및 병합, 4) 에러 처리 및 재시도 로직, 5) 메모리 사용량 제한, 6) 진행률 모니터링",
            "explanation": "대용량 파일 병렬 처리에는 효율적인 분할, 안정적인 통신, 올바른 병합, 견고한 에러 처리가 필요합니다."
        },
        {
            "id": 25,
            "type": "performance",
            "difficulty": "expert",
            "question": "다음 시나리오에서 가장 적합한 동시성 패턴을 선택하고 이유를 설명하세요: '100만 개의 이메일 주소 유효성을 외부 API로 검증'",
            "options": [
                "순차 처리 - 안정성 보장",
                "멀티스레딩 - 간단한 구현",
                "비동기 + 세마포어 - 제어된 동시성",
                "멀티프로세싱 - 최고 성능"
            ],
            "correct_answer": 2,
            "explanation": "외부 API 호출은 I/O 바운드 작업이므로 비동기가 적합하고, 세마포어로 동시 요청 수를 제한하여 API 제한과 리소스 고갈을 방지해야 합니다."
        },
        {
            "id": 26,
            "type": "debugging",
            "difficulty": "hard",
            "question": "다음 코드에서 발생할 수 있는 문제를 찾아 수정 방법을 제시하세요:\n\n```python\nimport threading\nimport time\n\nresult = []\nlock = threading.Lock()\n\ndef worker(data):\n    processed = expensive_operation(data)\n    lock.acquire()\n    result.append(processed)\n    # lock.release() 누락!\n    \ndef expensive_operation(data):\n    time.sleep(1)\n    return data * 2\n```",
            "options": [
                "레이스 컨디션 발생",
                "락이 해제되지 않아 데드락 위험",
                "메모리 누수",
                "모든 답이 맞음"
            ],
            "correct_answer": 1,
            "explanation": "lock.release()가 누락되어 락이 해제되지 않습니다. with 문을 사용하거나 try-finally로 확실히 해제해야 합니다."
        },
        {
            "id": 27,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "다음 중 비동기 프로그래밍에서 사용하는 이벤트 루프(Event Loop)의 역할이 아닌 것은?",
            "options": [
                "I/O 이벤트 모니터링",
                "코루틴 스케줄링",
                "콜백 함수 실행",
                "메모리 가비지 컬렉션"
            ],
            "correct_answer": 3,
            "explanation": "이벤트 루프는 I/O 이벤트 모니터링, 코루틴 스케줄링, 콜백 실행을 담당합니다. 메모리 가비지 컬렉션은 별도의 Python 메모리 관리 시스템에서 처리합니다."
        },
        {
            "id": 28,
            "type": "comprehensive",
            "difficulty": "expert",
            "question": "실시간 주식 데이터를 수집하고 분석하는 시스템을 설계한다면, 각 단계별로 어떤 동시성 패턴을 사용할지 설명하세요:\n1) 데이터 수집\n2) 데이터 전처리  \n3) 실시간 분석\n4) 결과 저장",
            "correct_answer": "1) 데이터 수집: 비동기 웹소켓 연결로 여러 소스에서 동시 수집, 2) 데이터 전처리: 큐 기반 멀티스레딩으로 들어오는 데이터 순차 처리, 3) 실시간 분석: CPU 집약적이므로 멀티프로세싱으로 병렬 계산, 4) 결과 저장: 비동기 DB 연결로 논블로킹 저장",
            "explanation": "각 단계의 특성(I/O vs CPU 바운드)에 맞는 최적의 동시성 패턴을 조합하여 전체 시스템 성능을 최적화합니다."
        },
        {
            "id": 29,
            "type": "true_false",
            "difficulty": "hard",
            "question": "asyncio.Queue는 스레드 안전(thread-safe)하다.",
            "correct_answer": false,
            "explanation": "asyncio.Queue는 비동기 환경에서 사용하도록 설계되었으며, 스레드 간 공유에는 queue.Queue를 사용해야 합니다."
        },
        {
            "id": 30,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "다음 중 '스타베이션(Starvation)' 문제가 발생할 수 있는 상황은?",
            "options": [
                "높은 우선순위 스레드가 계속 리소스를 점유",
                "데드락 발생",
                "메모리 부족",
                "네트워크 연결 실패"
            ],
            "correct_answer": 0,
            "explanation": "스타베이션은 일부 스레드가 리소스에 접근하지 못하고 계속 대기하는 상황으로, 높은 우선순위 작업이 계속 실행될 때 발생할 수 있습니다."
        },
        {
            "id": 31,
            "type": "coding",
            "difficulty": "expert",
            "question": "다음 비동기 함수에서 타임아웃과 재시도 로직을 올바르게 구현한 코드를 선택하세요:",
            "options": [
                "asyncio.wait_for()만 사용",
                "try-except로 단순 처리",
                "asyncio.wait_for() + 재시도 루프 + 지수 백오프",
                "threading.Timer 사용"
            ],
            "correct_answer": 2,
            "explanation": "견고한 비동기 시스템에서는 타임아웃(wait_for), 재시도 로직, 지수 백오프를 조합하여 일시적 실패에 대응해야 합니다."
        },
        {
            "id": 32,
            "type": "fill_in_blank",
            "difficulty": "medium",
            "question": "Python에서 프로세스 간 공유되는 정수형 변수를 만들려면 ___을 사용하고, 배열을 공유하려면 ___을 사용합니다.",
            "correct_answer": [
                "multiprocessing.Value",
                "multiprocessing.Array"
            ],
            "explanation": "multiprocessing.Value는 단일 값을, multiprocessing.Array는 배열을 프로세스 간에 공유할 수 있게 해줍니다."
        },
        {
            "id": 33,
            "type": "reflection",
            "difficulty": "expert",
            "question": "동시성 프로그래밍에서 발생할 수 있는 주요 위험 요소들과 각각의 예방 방법을 설명하세요.",
            "correct_answer": "1) 레이스 컨디션: Lock/RLock 사용, 2) 데드락: 일관된 락 순서, 타임아웃, 3) 스타베이션: 공정한 스케줄링, 우선순위 관리, 4) 리소스 누수: 컨텍스트 매니저 사용, 5) 백프레셰: 큐 크기 제한, 플로우 컨트롤",
            "explanation": "동시성 프로그래밍의 안전성을 위해서는 각 위험 요소를 이해하고 적절한 예방 방법을 적용해야 합니다."
        },
        {
            "id": 34,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "다음 중 비동기 제너레이터(async generator)를 만들기 위해 사용하는 키워드는?",
            "options": [
                "yield",
                "async yield",
                "await yield",
                "async def와 yield 조합"
            ],
            "correct_answer": 3,
            "explanation": "비동기 제너레이터는 async def 함수 내에서 yield를 사용하여 만들 수 있습니다."
        },
        {
            "id": 35,
            "type": "performance",
            "difficulty": "hard",
            "question": "1000개의 웹페이지를 스크래핑할 때 성능을 최적화하는 방법으로 가장 효과적인 것은?",
            "options": [
                "모든 요청을 동시에 실행",
                "세마포어로 동시 요청 수 제한 + 연결 풀 재사용",
                "순차적으로 하나씩 처리",
                "멀티프로세싱으로 분산 처리"
            ],
            "correct_answer": 1,
            "explanation": "세마포어로 동시성을 제어하고 HTTP 연결 풀을 재사용하면 서버 부하를 줄이면서도 높은 성능을 얻을 수 있습니다."
        },
        {
            "id": 36,
            "type": "true_false",
            "difficulty": "medium",
            "question": "asyncio.sleep(0)은 다른 코루틴이 실행될 기회를 제공한다.",
            "correct_answer": true,
            "explanation": "asyncio.sleep(0)은 현재 코루틴을 일시정지하고 이벤트 루프가 다른 대기 중인 코루틴을 실행할 수 있게 해줍니다."
        },
        {
            "id": 37,
            "type": "design_pattern",
            "difficulty": "expert",
            "question": "채팅 서버에서 수천 명의 동시 사용자를 처리하기 위한 아키텍처를 설계할 때 고려해야 할 동시성 패턴들을 설명하세요.",
            "correct_answer": "1) 비동기 웹소켓으로 다중 클라이언트 연결 관리, 2) 메시지 큐로 채팅방별 메시지 분산, 3) 이벤트 기반 브로드캐스팅, 4) 연결 풀링으로 리소스 효율화, 5) 백프레셰 제어로 시스템 안정성 보장",
            "explanation": "대규모 실시간 시스템에서는 비동기 I/O, 이벤트 기반 아키텍처, 적절한 리소스 관리가 핵심입니다."
        },
        {
            "id": 38,
            "type": "comprehensive",
            "difficulty": "expert",
            "question": "마이크로서비스 아키텍처에서 각 서비스 간 통신을 최적화하기 위해 동시성을 어떻게 활용할 수 있는지 설명하세요.",
            "correct_answer": "1) 비동기 HTTP 클라이언트로 서비스 간 논블로킹 통신, 2) 연결 풀로 연결 재사용, 3) 회로 차단기 패턴으로 장애 격리, 4) 배치 요청으로 네트워크 오버헤드 감소, 5) 캐싱과 비동기 업데이트로 응답성 향상",
            "explanation": "마이크로서비스에서는 네트워크 지연을 최소화하고 장애 전파를 방지하는 비동기 패턴이 중요합니다."
        },
        {
            "id": 39,
            "type": "debugging",
            "difficulty": "hard",
            "question": "다음 비동기 코드에서 메모리 누수가 발생할 수 있는 이유와 해결 방법을 설명하세요:\n\n```python\nimport asyncio\n\ntasks = []\n\nasync def create_task():\n    while True:\n        task = asyncio.create_task(some_async_work())\n        tasks.append(task)\n        await asyncio.sleep(1)\n```",
            "options": [
                "완료된 태스크를 제거하지 않아 tasks 리스트가 계속 증가",
                "비동기 함수에서 메모리 할당 오류",
                "이벤트 루프 오버헤드",
                "GIL로 인한 메모리 효율성 저하"
            ],
            "correct_answer": 0,
            "explanation": "완료된 태스크들이 tasks 리스트에 계속 쌓여서 메모리 누수가 발생합니다. 완료된 태스크를 정기적으로 제거하거나 약한 참조(weak reference)를 사용해야 합니다."
        },
        {
            "id": 40,
            "type": "reflection",
            "difficulty": "expert",
            "question": "동시성 프로그래밍을 도입할 때 고려해야 할 트레이드오프(성능 vs 복잡성, 메모리 vs 처리량 등)와 의사결정 기준에 대해 설명하세요.",
            "correct_answer": "1) 성능 vs 복잡성: 성능 이득이 복잡성 증가를 정당화하는지 측정, 2) 메모리 vs 처리량: 시스템 리소스 제약과 처리 요구사항 균형, 3) 개발/유지보수 비용 vs 운영 효율성, 4) 디버깅 어려움 vs 확장성 이익, 5) 팀의 기술 수준과 학습 곡선 고려",
            "explanation": "동시성은 강력한 도구이지만 복잡성을 증가시키므로, 명확한 이익이 있을 때만 도입하고 팀의 역량과 시스템 요구사항을 종합적으로 고려해야 합니다."
        }
    ]
}