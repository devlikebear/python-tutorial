{
    "chapter": "Chapter 1: 고급 함수 기법 (Advanced Function Techniques)",
    "total_questions": 35,
    "questions": [
        {
            "id": 1,
            "type": "multiple_choice",
            "question": "*args와 **kwargs에 대한 설명으로 올바른 것은?",
            "choices": [
                "*args는 키워드 인수, **kwargs는 위치 인수를 받는다",
                "*args는 위치 인수, **kwargs는 키워드 인수를 받는다",
                "*args와 **kwargs 모두 위치 인수를 받는다",
                "*args와 **kwargs 모두 키워드 인수를 받는다"
            ],
            "correct_answer": 1,
            "explanation": "*args는 가변 위치 인수를 튜플로 받고, **kwargs는 가변 키워드 인수를 딕셔너리로 받습니다."
        },
        {
            "id": 2,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\ndef func(*args, **kwargs):\n    print(f\"args: {args}, kwargs: {kwargs}\")\n\nfunc(1, 2, a=3, b=4)",
            "correct_answer": "args: (1, 2), kwargs: {'a': 3, 'b': 4}",
            "explanation": "위치 인수 1, 2는 args 튜플에, 키워드 인수 a=3, b=4는 kwargs 딕셔너리에 저장됩니다."
        },
        {
            "id": 3,
            "type": "multiple_choice",
            "question": "람다 함수의 특징으로 올바르지 않은 것은?",
            "choices": [
                "익명 함수이다",
                "한 줄로만 작성할 수 있다",
                "여러 개의 문장을 포함할 수 있다",
                "표현식만 포함할 수 있다"
            ],
            "correct_answer": 2,
            "explanation": "람다 함수는 단일 표현식만 포함할 수 있으며, 여러 문장을 포함할 수 없습니다."
        },
        {
            "id": 4,
            "type": "code_completion",
            "question": "다음 람다 함수를 완성하세요. 두 숫자를 받아서 더 큰 값을 반환하는 람다:\nmax_lambda = lambda x, y: ____",
            "correct_answer": "lambda x, y: x if x > y else y",
            "explanation": "조건부 표현식을 사용하여 두 값 중 큰 값을 반환합니다."
        },
        {
            "id": 5,
            "type": "practical",
            "question": "map() 함수를 사용하여 리스트 [1, 2, 3, 4, 5]의 각 원소를 제곱한 새로운 리스트를 만드는 코드를 작성하세요.",
            "correct_answer": "numbers = [1, 2, 3, 4, 5]\nsquared = list(map(lambda x: x**2, numbers))\nprint(squared)  # [1, 4, 9, 16, 25]",
            "explanation": "map() 함수는 각 원소에 함수를 적용하여 새로운 이터레이터를 반환합니다."
        },
        {
            "id": 6,
            "type": "code_output",
            "question": "다음 코드의 출력 결과는?\nnumbers = [1, 2, 3, 4, 5, 6]\neven = list(filter(lambda x: x % 2 == 0, numbers))\nprint(even)",
            "correct_answer": "[2, 4, 6]",
            "explanation": "filter() 함수는 조건에 맞는 원소들만 필터링하여 반환합니다."
        },
        {
            "id": 7,
            "type": "multiple_choice",
            "question": "reduce() 함수를 사용하기 위해 필요한 import는?",
            "choices": [
                "from itertools import reduce",
                "from functools import reduce",
                "from collections import reduce",
                "import reduce"
            ],
            "correct_answer": 1,
            "explanation": "reduce() 함수는 functools 모듈에서 import해야 합니다."
        },
        {
            "id": 8,
            "type": "code_analysis",
            "question": "다음 reduce 코드의 동작을 분석하세요:\nfrom functools import reduce\nresult = reduce(lambda x, y: x * y, [1, 2, 3, 4], 10)\nprint(result)",
            "correct_answer": "초기값 10에서 시작하여 리스트의 각 원소를 차례로 곱합니다:\n10 * 1 = 10\n10 * 2 = 20  \n20 * 3 = 60\n60 * 4 = 240\n결과: 240",
            "explanation": "reduce는 누적 연산을 수행하며, 초기값이 주어지면 그 값부터 시작합니다."
        },
        {
            "id": 9,
            "type": "practical",
            "question": "간단한 데코레이터를 작성하세요. 함수 실행 전후에 \"시작\"과 \"끝\" 메시지를 출력하는 데코레이터:",
            "correct_answer": "def simple_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(\"시작\")\n        result = func(*args, **kwargs)\n        print(\"끝\")\n        return result\n    return wrapper\n\n@simple_decorator\ndef test_func():\n    print(\"함수 실행\")\n\ntest_func()",
            "explanation": "데코레이터는 함수를 받아서 래퍼 함수를 반환하는 함수입니다."
        },
        {
            "id": 10,
            "type": "multiple_choice",
            "question": "@functools.wraps의 역할은?",
            "choices": [
                "함수의 실행 시간을 측정한다",
                "함수의 메타데이터를 보존한다",
                "함수의 인수를 검증한다",
                "함수의 결과를 캐싱한다"
            ],
            "correct_answer": 1,
            "explanation": "@functools.wraps는 원본 함수의 __name__, __doc__ 등의 메타데이터를 래퍼 함수에 복사합니다."
        },
        {
            "id": 11,
            "type": "code_debugging",
            "question": "다음 데코레이터 코드의 문제점을 찾아 수정하세요:\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        import time\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f\"실행 시간: {end - start}초\")\n    return wrapper",
            "correct_answer": "def timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        import time\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f\"실행 시간: {end - start}초\")\n        return result  # 이 줄이 누락되었음\n    return wrapper",
            "explanation": "wrapper 함수에서 원본 함수의 반환값을 반환하지 않고 있습니다."
        },
        {
            "id": 12,
            "type": "practical",
            "question": "매개변수를 받는 데코레이터를 작성하세요. 함수를 n번 반복 실행하는 repeat 데코레이터:",
            "correct_answer": "def repeat(times):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            results = []\n            for i in range(times):\n                result = func(*args, **kwargs)\n                results.append(result)\n            return results\n        return wrapper\n    return decorator\n\n@repeat(3)\ndef say_hello(name):\n    return f\"Hello, {name}!\"\n\nprint(say_hello(\"Alice\"))",
            "explanation": "매개변수를 받는 데코레이터는 3중 중첩 함수 구조를 가집니다."
        },
        {
            "id": 13,
            "type": "multiple_choice",
            "question": "클로저(Closure)의 특징으로 올바른 것은?",
            "choices": [
                "외부 함수의 지역 변수에 접근할 수 없다",
                "외부 함수가 종료된 후에도 외부 변수에 접근할 수 있다",
                "전역 변수만 사용할 수 있다",
                "인수를 받을 수 없다"
            ],
            "correct_answer": 1,
            "explanation": "클로저는 외부 함수가 종료된 후에도 외부 함수의 변수를 \"캡처\"하여 접근할 수 있습니다."
        },
        {
            "id": 14,
            "type": "code_output",
            "question": "다음 클로저 코드의 출력 결과는?\ndef outer(x):\n    def inner(y):\n        return x + y\n    return inner\n\nclosure1 = outer(10)\nclosure2 = outer(20)\nprint(closure1(5))\nprint(closure2(5))",
            "correct_answer": "15\n25",
            "explanation": "각 클로저는 독립적으로 외부 변수 x를 캡처합니다. closure1은 x=10, closure2는 x=20을 캡처합니다."
        },
        {
            "id": 15,
            "type": "practical",
            "question": "클로저를 사용하여 카운터 함수를 만드세요. 호출할 때마다 1씩 증가하는 함수:",
            "correct_answer": "def create_counter(initial=0):\n    count = initial\n    \n    def counter():\n        nonlocal count\n        count += 1\n        return count\n    \n    return counter\n\ncounter1 = create_counter()\nprint(counter1())  # 1\nprint(counter1())  # 2\n\ncounter2 = create_counter(10)\nprint(counter2())  # 11",
            "explanation": "nonlocal 키워드를 사용하여 외부 함수의 변수를 수정할 수 있습니다."
        },
        {
            "id": 16,
            "type": "multiple_choice",
            "question": "재귀 함수의 필수 구성 요소는?",
            "choices": [
                "반복문",
                "기저 조건 (Base Case)",
                "전역 변수",
                "클래스"
            ],
            "correct_answer": 1,
            "explanation": "재귀 함수는 반드시 기저 조건을 가져야 무한 재귀를 방지할 수 있습니다."
        },
        {
            "id": 17,
            "type": "code_completion",
            "question": "팩토리얼을 계산하는 재귀 함수를 완성하세요:\ndef factorial(n):\n    if ____:  # 기저 조건\n        return 1\n    return ____",
            "correct_answer": "def factorial(n):\n    if n <= 1:  # 기저 조건\n        return 1\n    return n * factorial(n - 1)",
            "explanation": "n이 1 이하일 때 1을 반환하고, 그렇지 않으면 n과 factorial(n-1)의 곱을 반환합니다."
        },
        {
            "id": 18,
            "type": "code_analysis",
            "question": "다음 피보나치 함수의 시간 복잡도는?\ndef fib(n):\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)",
            "correct_answer": "시간 복잡도: O(2^n)\n이유: 각 호출에서 두 번의 재귀 호출이 발생하여 지수적으로 증가합니다. 동일한 값을 여러 번 계산하는 중복 계산 문제가 있습니다.",
            "explanation": "기본 재귀 피보나치는 매우 비효율적이며, 메모이제이션이나 동적 프로그래밍으로 최적화할 수 있습니다."
        },
        {
            "id": 19,
            "type": "practical",
            "question": "@lru_cache를 사용하여 피보나치 함수를 최적화하세요:",
            "correct_answer": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\n# 테스트\nprint(fib(50))  # 빠르게 계산됨",
            "explanation": "@lru_cache는 함수 결과를 캐싱하여 중복 계산을 방지합니다."
        },
        {
            "id": 20,
            "type": "multiple_choice",
            "question": "순수 함수(Pure Function)의 특징은?",
            "choices": [
                "전역 변수를 사용한다",
                "파일을 읽고 쓴다",
                "동일한 입력에 대해 항상 동일한 출력을 반환하고 부작용이 없다",
                "실행 시간이 항상 일정하다"
            ],
            "correct_answer": 2,
            "explanation": "순수 함수는 입력에만 의존하여 출력을 결정하며, 외부 상태를 변경하지 않습니다."
        },
        {
            "id": 21,
            "type": "code_comparison",
            "question": "다음 두 함수 중 순수 함수는?\n\n함수 A:\ncount = 0\ndef increment():\n    global count\n    count += 1\n    return count\n\n함수 B:\ndef add(x, y):\n    return x + y",
            "correct_answer": "함수 B가 순수 함수입니다.\n\n이유:\n- 함수 A: 전역 변수 count를 수정하므로 부작용이 있고, 호출할 때마다 다른 결과를 반환합니다.\n- 함수 B: 입력에만 의존하며, 동일한 입력에 대해 항상 동일한 결과를 반환하고 부작용이 없습니다.",
            "explanation": "순수 함수는 부작용이 없고 예측 가능해야 합니다."
        },
        {
            "id": 22,
            "type": "practical",
            "question": "함수 합성(Function Composition)을 구현하세요. pipe 함수를 만들어 여러 함수를 순서대로 적용:",
            "correct_answer": "def pipe(*functions):\n    def piped_function(x):\n        result = x\n        for func in functions:\n            result = func(result)\n        return result\n    return piped_function\n\n# 사용 예제\ndef add_one(x):\n    return x + 1\n\ndef multiply_by_two(x):\n    return x * 2\n\ndef to_string(x):\n    return str(x)\n\ntransform = pipe(add_one, multiply_by_two, to_string)\nresult = transform(5)  # \"12\"\nprint(result)",
            "explanation": "pipe는 함수들을 순서대로 적용하여 데이터를 변환하는 함수형 프로그래밍 패턴입니다."
        },
        {
            "id": 23,
            "type": "multiple_choice",
            "question": "커링(Currying)의 정의는?",
            "choices": [
                "함수를 더 빠르게 실행하는 기법",
                "여러 인수를 받는 함수를 단일 인수를 받는 함수들의 체인으로 변환하는 기법",
                "함수의 결과를 캐싱하는 기법",
                "함수를 병렬로 실행하는 기법"
            ],
            "correct_answer": 1,
            "explanation": "커링은 다중 인수 함수를 단일 인수 함수들의 연속으로 변환하는 함수형 프로그래밍 기법입니다."
        },
        {
            "id": 24,
            "type": "code_output",
            "question": "다음 커링 예제의 출력 결과는?\ndef curry_add(a):\n    def add_b(b):\n        def add_c(c):\n            return a + b + c\n        return add_c\n    return add_b\n\nresult = curry_add(1)(2)(3)\nprint(result)",
            "correct_answer": "6",
            "explanation": "커링된 함수는 curry_add(1)(2)(3) = 1 + 2 + 3 = 6을 계산합니다."
        },
        {
            "id": 25,
            "type": "practical",
            "question": "제너레이터를 사용하여 무한 피보나치 수열을 생성하는 함수를 작성하세요:",
            "correct_answer": "def fibonacci_generator():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\n# 사용 예제\nfib_gen = fibonacci_generator()\nfor i, num in enumerate(fib_gen):\n    if i >= 10:\n        break\n    print(num, end=' ')  # 0 1 1 2 3 5 8 13 21 34",
            "explanation": "제너레이터는 yield를 사용하여 메모리 효율적으로 무한 시퀀스를 생성할 수 있습니다."
        },
        {
            "id": 26,
            "type": "code_debugging",
            "question": "다음 재귀 함수에서 스택 오버플로우를 방지하는 방법은?\ndef factorial(n):\n    return n * factorial(n - 1)  # 기저 조건 없음",
            "correct_answer": "def factorial(n):\n    # 1. 기저 조건 추가\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\n# 또는 꼬리 재귀로 최적화\ndef factorial_tail(n, acc=1):\n    if n <= 1:\n        return acc\n    return factorial_tail(n - 1, n * acc)\n\n# 또는 반복문 사용\ndef factorial_iterative(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result",
            "explanation": "기저 조건이 없으면 무한 재귀가 발생하여 스택 오버플로우가 일어납니다."
        },
        {
            "id": 27,
            "type": "practical",
            "question": "데코레이터를 체이닝하여 사용하는 예제를 작성하세요. 로깅과 타이밍을 모두 적용:",
            "correct_answer": "import time\nimport functools\n\ndef logging_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(f\"[LOG] {func.__name__} 호출\")\n        result = func(*args, **kwargs)\n        print(f\"[LOG] {func.__name__} 완료\")\n        return result\n    return wrapper\n\ndef timing_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f\"[TIME] {func.__name__}: {end-start:.4f}초\")\n        return result\n    return wrapper\n\n@logging_decorator\n@timing_decorator\ndef slow_function():\n    time.sleep(1)\n    return \"완료\"\n\nslow_function()",
            "explanation": "여러 데코레이터를 체이닝하면 아래쪽 데코레이터부터 적용됩니다."
        },
        {
            "id": 28,
            "type": "multiple_choice",
            "question": "다음 중 고차 함수(Higher-Order Function)가 아닌 것은?",
            "choices": [
                "map()",
                "filter()",
                "reduce()",
                "len()"
            ],
            "correct_answer": 3,
            "explanation": "len()은 함수를 인수로 받지 않는 일반 함수입니다. 고차 함수는 함수를 인수로 받거나 함수를 반환하는 함수입니다."
        },
        {
            "id": 29,
            "type": "code_analysis",
            "question": "다음 코드에서 클로저가 캡처하는 변수를 분석하세요:\ndef create_multiplier(factor):\n    def multiplier(number):\n        return number * factor\n    return multiplier\n\ndouble = create_multiplier(2)\ntriple = create_multiplier(3)",
            "correct_answer": "클로저 분석:\n1. double 함수는 factor=2를 캡처\n2. triple 함수는 factor=3을 캡처\n3. 각 클로저는 독립적인 factor 값을 유지\n4. double(5) = 5 * 2 = 10\n5. triple(5) = 5 * 3 = 15\n\ndouble.__closure__[0].cell_contents = 2\ntriple.__closure__[0].cell_contents = 3",
            "explanation": "각 클로저는 독립적으로 외부 변수를 캡처하여 서로 다른 상태를 유지합니다."
        },
        {
            "id": 30,
            "type": "practical",
            "question": "메모이제이션을 직접 구현하는 데코레이터를 작성하세요:",
            "correct_answer": "def memoize(func):\n    cache = {}\n    \n    def wrapper(*args, **kwargs):\n        # 키 생성 (args와 kwargs를 모두 고려)\n        key = str(args) + str(sorted(kwargs.items()))\n        \n        if key in cache:\n            print(f\"캐시 히트: {func.__name__}\")\n            return cache[key]\n        \n        print(f\"캐시 미스: {func.__name__}\")\n        result = func(*args, **kwargs)\n        cache[key] = result\n        return result\n    \n    return wrapper\n\n@memoize\ndef expensive_function(n):\n    time.sleep(1)  # 시간이 오래 걸리는 작업 시뮬레이션\n    return n * n\n\nprint(expensive_function(5))  # 캐시 미스\nprint(expensive_function(5))  # 캐시 히트",
            "explanation": "메모이제이션은 함수 결과를 캐싱하여 동일한 입력에 대해 재계산을 방지합니다."
        },
        {
            "id": 31,
            "type": "code_output",
            "question": "다음 언패킹 코드의 출력 결과는?\ndef func(a, b, c):\n    return a + b + c\n\nargs = [1, 2, 3]\nkwargs = {'a': 10, 'b': 20, 'c': 30}\n\nprint(func(*args))\nprint(func(**kwargs))",
            "correct_answer": "6\n60",
            "explanation": "첫 번째 호출은 func(1, 2, 3) = 6, 두 번째 호출은 func(a=10, b=20, c=30) = 60입니다."
        },
        {
            "id": 32,
            "type": "practical",
            "question": "함수형 스타일로 리스트에서 짝수만 필터링하고 제곱한 후 합계를 구하는 코드를 작성하세요:",
            "correct_answer": "from functools import reduce\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# 함수형 스타일\nresult = reduce(\n    lambda x, y: x + y,\n    map(\n        lambda x: x ** 2,\n        filter(lambda x: x % 2 == 0, numbers)\n    )\n)\n\nprint(result)  # 2^2 + 4^2 + 6^2 + 8^2 + 10^2 = 4 + 16 + 36 + 64 + 100 = 220\n\n# 또는 더 간단하게\nresult2 = sum(x**2 for x in numbers if x % 2 == 0)\nprint(result2)  # 220",
            "explanation": "함수형 프로그래밍은 filter, map, reduce를 체이닝하여 데이터를 변환합니다."
        },
        {
            "id": 33,
            "type": "code_debugging",
            "question": "다음 클로저 코드에서 모든 함수가 같은 값을 반환하는 문제를 수정하세요:\nfunctions = []\nfor i in range(5):\n    functions.append(lambda: i)\n\nfor f in functions:\n    print(f())  # 모두 4 출력",
            "correct_answer": "# 문제: 모든 람다가 같은 변수 i를 참조\n# 해결책 1: 기본 매개변수 사용\nfunctions = []\nfor i in range(5):\n    functions.append(lambda x=i: x)\n\nfor f in functions:\n    print(f())  # 0, 1, 2, 3, 4 출력\n\n# 해결책 2: 클로저 함수 사용\ndef create_function(value):\n    return lambda: value\n\nfunctions = []\nfor i in range(5):\n    functions.append(create_function(i))\n\nfor f in functions:\n    print(f())  # 0, 1, 2, 3, 4 출력",
            "explanation": "늦은 바인딩(Late Binding) 문제로 모든 람다가 마지막 i 값을 참조합니다."
        },
        {
            "id": 34,
            "type": "practical",
            "question": "부분 적용(Partial Application)을 구현하는 함수를 작성하세요:",
            "correct_answer": "def partial(func, *partial_args, **partial_kwargs):\n    def wrapper(*args, **kwargs):\n        # 부분 적용된 인수와 새로운 인수를 결합\n        combined_args = partial_args + args\n        combined_kwargs = {**partial_kwargs, **kwargs}\n        return func(*combined_args, **combined_kwargs)\n    return wrapper\n\n# 사용 예제\ndef multiply(a, b, c):\n    return a * b * c\n\n# 부분 적용\nmultiply_by_2 = partial(multiply, 2)\nmultiply_by_2_and_3 = partial(multiply_by_2, 3)\n\nresult = multiply_by_2_and_3(4)  # 2 * 3 * 4 = 24\nprint(result)\n\n# functools.partial과 비교\nfrom functools import partial as functools_partial\nmultiply_by_5 = functools_partial(multiply, 5)\nprint(multiply_by_5(2, 3))  # 5 * 2 * 3 = 30",
            "explanation": "부분 적용은 함수의 일부 인수를 미리 고정하여 새로운 함수를 만드는 기법입니다."
        },
        {
            "id": 35,
            "type": "comprehensive",
            "question": "다음 요구사항을 만족하는 종합적인 함수 시스템을 설계하세요:\n1. 실행 시간 측정 데코레이터\n2. 재시도 기능이 있는 데코레이터 \n3. 결과를 캐싱하는 데코레이터\n4. 모든 데코레이터가 적용된 함수",
            "correct_answer": "import time\nimport functools\nimport random\n\n# 1. 실행 시간 측정 데코레이터\ndef timing(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f\"{func.__name__} 실행 시간: {end-start:.4f}초\")\n        return result\n    return wrapper\n\n# 2. 재시도 데코레이터\ndef retry(max_attempts=3, delay=1):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f\"시도 {attempt + 1} 실패: {e}, {delay}초 후 재시도\")\n                    time.sleep(delay)\n        return wrapper\n    return decorator\n\n# 3. 캐싱 데코레이터\ndef cache(func):\n    cache_dict = {}\n    \n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        key = str(args) + str(sorted(kwargs.items()))\n        if key in cache_dict:\n            print(f\"캐시에서 반환: {func.__name__}\")\n            return cache_dict[key]\n        \n        result = func(*args, **kwargs)\n        cache_dict[key] = result\n        print(f\"캐시에 저장: {func.__name__}\")\n        return result\n    return wrapper\n\n# 4. 모든 데코레이터 적용\n@timing\n@cache\n@retry(max_attempts=3, delay=0.5)\ndef unstable_calculation(n):\n    \"\"\"불안정한 계산 함수\"\"\"\n    if random.random() < 0.3:  # 30% 확률로 실패\n        raise ValueError(\"계산 실패\")\n    \n    time.sleep(0.1)  # 시간이 걸리는 작업 시뮬레이션\n    return n ** 2 + 2 * n + 1\n\n# 테스트\nprint(\"첫 번째 호출:\")\nresult1 = unstable_calculation(5)\nprint(f\"결과: {result1}\")\n\nprint(\"\\n두 번째 호출 (캐시 사용):\")\nresult2 = unstable_calculation(5)\nprint(f\"결과: {result2}\")",
            "explanation": "데코레이터 체이닝을 통해 복잡한 기능을 모듈화하여 조합할 수 있습니다. 각 데코레이터는 단일 책임을 가지며 재사용 가능합니다."
        }
    ],
    "difficulty_level": "intermediate",
    "estimated_time": "70 minutes",
    "learning_objectives": [
        "*args와 **kwargs를 활용한 유연한 함수 설계 능력",
        "람다 함수의 적절한 활용법과 한계 이해",
        "map, filter, reduce를 이용한 함수형 프로그래밍 패턴 습득",
        "데코레이터 패턴의 이해와 실용적 활용 능력",
        "클로저의 개념과 상태 캡슐화 활용법",
        "재귀 함수의 설계와 최적화 기법",
        "함수형 프로그래밍 패러다임 이해",
        "고급 함수 패턴을 조합한 복잡한 시스템 설계 능력"
    ]
}