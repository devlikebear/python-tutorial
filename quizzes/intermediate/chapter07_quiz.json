{
    "quiz_info": {
        "title": "Chapter 7: 모듈과 패키지",
        "description": "모듈과 패키지의 이해와 활용, 가상환경 관리, 패키지 배포, 고급 모듈 시스템에 대한 퀴즈입니다.",
        "total_questions": 35,
        "passing_score": 70,
        "time_limit_minutes": 45
    },
    "questions": [
        {
            "id": 1,
            "type": "multiple_choice",
            "difficulty": "easy",
            "question": "모듈(Module)에 대한 설명으로 올바른 것은?",
            "options": [
                "파이썬 코드가 담긴 .py 파일",
                "컴파일된 바이너리 파일",
                "웹에서 다운로드한 라이브러리",
                "함수만 포함할 수 있는 구조"
            ],
            "correct": 0,
            "explanation": "모듈은 파이썬 코드(함수, 클래스, 변수)가 담긴 .py 파일입니다."
        },
        {
            "id": 2,
            "type": "multiple_choice",
            "difficulty": "easy",
            "question": "다음 중 모듈을 import하는 올바른 방법이 아닌 것은?",
            "options": [
                "import math",
                "from math import pi",
                "import math as m",
                "include math"
            ],
            "correct": 3,
            "explanation": "Python에서는 include 키워드가 아닌 import 키워드를 사용합니다."
        },
        {
            "id": 3,
            "type": "true_false",
            "difficulty": "easy",
            "question": "from module_name import * 는 모든 상황에서 권장되는 import 방식이다.",
            "correct": false,
            "explanation": "* import는 네임스페이스 오염을 일으킬 수 있어 일반적으로 권장하지 않습니다."
        },
        {
            "id": 4,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "__name__ 변수의 역할은?",
            "options": [
                "모듈의 파일 경로를 저장",
                "모듈이 직접 실행되는지 import되는지 구분",
                "모듈의 크기 정보를 저장",
                "모듈의 작성자 정보를 저장"
            ],
            "correct": 1,
            "explanation": "__name__ 변수는 모듈이 직접 실행될 때는 '__main__', import될 때는 모듈명을 가집니다."
        },
        {
            "id": 5,
            "type": "code_output",
            "difficulty": "medium",
            "question": "다음 코드에서 __name__의 값은?\n\n# main.py\nprint(__name__)\n\n# 터미널에서 python main.py 실행 시",
            "options": [
                "'main'",
                "'main.py'",
                "'__main__'",
                "None"
            ],
            "correct": 2,
            "explanation": "스크립트를 직접 실행할 때 __name__은 '__main__' 값을 가집니다."
        },
        {
            "id": 6,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "모듈 검색 경로에서 첫 번째로 확인하는 위치는?",
            "options": [
                "site-packages 디렉토리",
                "현재 스크립트가 있는 디렉토리",
                "표준 라이브러리 디렉토리",
                "PYTHONPATH 환경변수"
            ],
            "correct": 1,
            "explanation": "Python은 먼저 현재 스크립트가 있는 디렉토리에서 모듈을 찾습니다."
        },
        {
            "id": 7,
            "type": "multiple_choice",
            "difficulty": "easy",
            "question": "패키지를 만들기 위해 필요한 특별한 파일은?",
            "options": [
                "__init__.py",
                "__package__.py",
                "setup.py",
                "config.py"
            ],
            "correct": 0,
            "explanation": "__init__.py 파일이 있어야 Python이 해당 디렉토리를 패키지로 인식합니다."
        },
        {
            "id": 8,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "__init__.py 파일의 역할이 아닌 것은?",
            "options": [
                "디렉토리를 패키지로 인식하게 함",
                "패키지 초기화 코드 실행",
                "패키지에서 노출할 모듈 지정",
                "패키지의 크기를 제한"
            ],
            "correct": 3,
            "explanation": "__init__.py는 패키지의 크기를 제한하는 역할을 하지 않습니다."
        },
        {
            "id": 9,
            "type": "code_completion",
            "difficulty": "medium",
            "question": "상대 import를 사용하여 같은 패키지의 다른 모듈을 import하는 문법은?\n\n____ . import utils",
            "answer": "from",
            "explanation": "상대 import는 'from . import module_name' 형태로 사용합니다."
        },
        {
            "id": 10,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "상대 import와 절대 import 중 권장되는 방식은?",
            "options": [
                "상대 import (더 간결함)",
                "절대 import (더 명확함)",
                "둘 다 동일함",
                "패키지 크기에 따라 결정"
            ],
            "correct": 1,
            "explanation": "절대 import가 더 명시적이고 명확하여 일반적으로 권장됩니다."
        },
        {
            "id": 11,
            "type": "multiple_choice",
            "difficulty": "easy",
            "question": "가상환경을 만드는 명령어는?",
            "options": [
                "python -m venv env_name",
                "python -create-env env_name",
                "pip install virtualenv env_name",
                "python -env env_name"
            ],
            "correct": 0,
            "explanation": "python -m venv env_name 명령어로 가상환경을 생성합니다."
        },
        {
            "id": 12,
            "type": "multiple_choice",
            "difficulty": "easy",
            "question": "가상환경이 필요한 주된 이유는?",
            "options": [
                "코드 실행 속도 향상",
                "프로젝트별 독립적인 패키지 관리",
                "메모리 사용량 감소",
                "디스크 공간 절약"
            ],
            "correct": 1,
            "explanation": "가상환경은 프로젝트별로 독립적인 패키지 환경을 제공하여 의존성 충돌을 방지합니다."
        },
        {
            "id": 13,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "Linux/Mac에서 가상환경을 활성화하는 명령어는?",
            "options": [
                "activate env_name",
                "source env_name/bin/activate",
                "python env_name/activate",
                "env_name/Scripts/activate"
            ],
            "correct": 1,
            "explanation": "Linux/Mac에서는 'source env_name/bin/activate' 명령어로 가상환경을 활성화합니다."
        },
        {
            "id": 14,
            "type": "multiple_choice",
            "difficulty": "easy",
            "question": "pip로 패키지를 설치하는 명령어는?",
            "options": [
                "pip install package_name",
                "pip get package_name",
                "pip download package_name",
                "pip add package_name"
            ],
            "correct": 0,
            "explanation": "pip install package_name 명령어로 패키지를 설치합니다."
        },
        {
            "id": 15,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "특정 버전의 패키지를 설치하려면?",
            "options": [
                "pip install package_name -v 1.2.3",
                "pip install package_name==1.2.3",
                "pip install package_name version=1.2.3",
                "pip install package_name@1.2.3"
            ],
            "correct": 1,
            "explanation": "==를 사용하여 특정 버전을 지정합니다: pip install package_name==1.2.3"
        },
        {
            "id": 16,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "requirements.txt 파일의 목적은?",
            "options": [
                "프로젝트 문서화",
                "의존성 패키지 목록 관리",
                "코드 스타일 가이드",
                "테스트 케이스 정의"
            ],
            "correct": 1,
            "explanation": "requirements.txt는 프로젝트에 필요한 패키지와 버전을 명시하여 의존성을 관리합니다."
        },
        {
            "id": 17,
            "type": "code_completion",
            "difficulty": "medium",
            "question": "현재 설치된 패키지 목록을 requirements.txt에 저장하는 명령어는?\n\npip ______ > requirements.txt",
            "answer": "freeze",
            "explanation": "pip freeze 명령어는 현재 설치된 패키지 목록을 requirements.txt 형태로 출력합니다."
        },
        {
            "id": 18,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "package>=1.2,<1.4 버전 지정의 의미는?",
            "options": [
                "1.2 이상 1.4 이하",
                "1.2 이상 1.4 미만",
                "정확히 1.2 또는 1.4",
                "1.2와 1.4 사이의 모든 버전"
            ],
            "correct": 1,
            "explanation": ">= 는 이상, < 는 미만을 의미하므로 1.2 이상 1.4 미만의 버전을 설치합니다."
        },
        {
            "id": 19,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "동적 import를 위해 사용하는 모듈은?",
            "options": [
                "importlib",
                "dynimport",
                "moduleloader",
                "pyimport"
            ],
            "correct": 0,
            "explanation": "importlib 모듈을 사용하여 런타임에 동적으로 모듈을 import할 수 있습니다."
        },
        {
            "id": 20,
            "type": "coding",
            "difficulty": "hard",
            "question": "importlib를 사용하여 'math' 모듈을 동적으로 import하고 pi 값을 출력하는 코드를 작성하세요.",
            "answer": "import importlib\nmath_module = importlib.import_module('math')\nprint(math_module.pi)",
            "explanation": "importlib.import_module()을 사용하여 문자열로 모듈명을 지정해 동적 import를 수행합니다."
        },
        {
            "id": 21,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "모듈이 import될 때마다 코드가 실행되는가?",
            "options": [
                "매번 실행됨",
                "첫 번째 import시에만 실행됨",
                "명시적으로 지정했을 때만",
                "가상환경에서만"
            ],
            "correct": 1,
            "explanation": "모듈은 sys.modules에 캐시되어 첫 번째 import시에만 코드가 실행됩니다."
        },
        {
            "id": 22,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "모듈을 다시 로드하려면 어떤 함수를 사용해야 하는가?",
            "options": [
                "importlib.reload()",
                "sys.reload()",
                "module.reload()",
                "import.refresh()"
            ],
            "correct": 0,
            "explanation": "importlib.reload() 함수를 사용하여 이미 로드된 모듈을 다시 로드할 수 있습니다."
        },
        {
            "id": 23,
            "type": "true_false",
            "difficulty": "medium",
            "question": "네임스페이스 패키지는 __init__.py 파일이 없어도 된다.",
            "correct": true,
            "explanation": "Python 3.3+의 네임스페이스 패키지는 __init__.py 파일 없이도 패키지로 인식됩니다."
        },
        {
            "id": 24,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "setup.py 파일의 주요 목적은?",
            "options": [
                "프로젝트 설정 파일",
                "패키지 배포를 위한 메타데이터 정의",
                "테스트 설정",
                "문서 생성 설정"
            ],
            "correct": 1,
            "explanation": "setup.py는 패키지의 메타데이터와 배포 설정을 정의하는 파일입니다."
        },
        {
            "id": 25,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "sys.path에 포함되지 않는 것은?",
            "options": [
                "현재 스크립트 디렉토리",
                "PYTHONPATH 환경변수 경로",
                "site-packages 디렉토리",
                "사용자 홈 디렉토리"
            ],
            "correct": 3,
            "explanation": "사용자 홈 디렉토리는 기본적으로 sys.path에 포함되지 않습니다."
        },
        {
            "id": 26,
            "type": "code_analysis",
            "difficulty": "hard",
            "question": "다음 패키지 구조에서 문제점을 찾으세요.\n\nmypackage/\n├── subpackage/\n│   ├── module1.py\n│   └── module2.py\n└── main.py",
            "answer": "__init__.py 파일이 없습니다. mypackage/와 subpackage/ 디렉토리에 각각 __init__.py 파일이 필요합니다.",
            "explanation": "디렉토리를 패키지로 인식시키려면 __init__.py 파일이 있어야 합니다."
        },
        {
            "id": 27,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "__all__ 변수의 역할은?",
            "options": [
                "모듈의 모든 함수를 저장",
                "from module import *에서 import될 항목 지정",
                "모듈의 버전 정보 저장",
                "모듈의 의존성 정의"
            ],
            "correct": 1,
            "explanation": "__all__ 리스트는 from module import * 실행 시 import될 항목들을 명시적으로 지정합니다."
        },
        {
            "id": 28,
            "type": "coding",
            "difficulty": "expert",
            "question": "플러그인 시스템을 구현하세요. plugins 디렉토리의 모든 .py 파일을 동적으로 로드하는 load_plugins() 함수를 작성하세요.",
            "answer": "import importlib\nimport os\nimport sys\n\ndef load_plugins(plugin_dir='plugins'):\n    plugins = []\n    if not os.path.exists(plugin_dir):\n        return plugins\n    \n    sys.path.insert(0, plugin_dir)\n    \n    for filename in os.listdir(plugin_dir):\n        if filename.endswith('.py') and not filename.startswith('__'):\n            module_name = filename[:-3]\n            try:\n                module = importlib.import_module(module_name)\n                plugins.append(module)\n            except ImportError as e:\n                print(f'Failed to load plugin {module_name}: {e}')\n    \n    return plugins",
            "explanation": "동적 import를 사용하여 디렉토리의 모든 Python 파일을 모듈로 로드하는 플러그인 시스템입니다."
        },
        {
            "id": 29,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "패키지 배포 시 wheel 파일의 장점은?",
            "options": [
                "소스 코드가 공개됨",
                "빠른 설치 속도",
                "용량이 작음",
                "모든 플랫폼에서 동일"
            ],
            "correct": 1,
            "explanation": "wheel 파일은 미리 빌드된 바이너리 배포 형태로 빠른 설치가 가능합니다."
        },
        {
            "id": 30,
            "type": "true_false",
            "difficulty": "hard",
            "question": "상대 import는 스크립트를 직접 실행할 때도 정상적으로 작동한다.",
            "correct": false,
            "explanation": "상대 import는 패키지 내부에서만 작동하며, 스크립트를 직접 실행할 때는 오류가 발생할 수 있습니다."
        },
        {
            "id": 31,
            "type": "coding",
            "difficulty": "expert",
            "question": "설정 관리 클래스를 구현하세요. 딕셔너리와 환경변수에서 설정을 로드하고 점 표기법(dot notation)으로 접근할 수 있어야 합니다.",
            "answer": "import os\n\nclass ConfigManager:\n    def __init__(self):\n        self.config = {}\n    \n    def load_dict(self, config_dict):\n        self.config.update(config_dict)\n    \n    def load_env(self, prefix='APP_'):\n        for key, value in os.environ.items():\n            if key.startswith(prefix):\n                config_key = key[len(prefix):].lower().replace('_', '.')\n                self.set(config_key, value)\n    \n    def get(self, key, default=None):\n        keys = key.split('.')\n        value = self.config\n        for k in keys:\n            if isinstance(value, dict) and k in value:\n                value = value[k]\n            else:\n                return default\n        return value\n    \n    def set(self, key, value):\n        keys = key.split('.')\n        config = self.config\n        for k in keys[:-1]:\n            if k not in config:\n                config[k] = {}\n            config = config[k]\n        config[keys[-1]] = value",
            "explanation": "점 표기법을 지원하는 설정 관리 클래스로 딕셔너리와 환경변수에서 설정을 로드할 수 있습니다."
        },
        {
            "id": 32,
            "type": "debugging",
            "difficulty": "hard",
            "question": "다음 import 코드의 문제점을 찾아 수정하세요.\n\n# main.py\nfrom . import utils\n\nutils.helper_function()",
            "answer": "스크립트를 직접 실행할 때는 상대 import를 사용할 수 없습니다. 절대 import를 사용하거나 패키지 내에서 실행해야 합니다:\n\n# 수정된 코드\nimport utils\n# 또는\nfrom mypackage import utils",
            "explanation": "상대 import는 패키지 내부에서만 작동하며, 스크립트를 직접 실행할 때는 절대 import를 사용해야 합니다."
        },
        {
            "id": 33,
            "type": "multiple_choice",
            "difficulty": "expert",
            "question": "Python Package Index (PyPI)에 패키지를 업로드하는 도구는?",
            "options": [
                "pip",
                "setuptools",
                "twine",
                "wheel"
            ],
            "correct": 2,
            "explanation": "twine은 PyPI에 패키지를 안전하게 업로드하기 위한 도구입니다."
        },
        {
            "id": 34,
            "type": "comprehensive",
            "difficulty": "expert",
            "question": "모듈 문서화 시스템을 구현하세요. 주어진 모듈에서 모든 함수와 클래스의 docstring을 추출하여 마크다운 형태로 출력하는 함수를 작성하세요.",
            "answer": "import inspect\n\ndef generate_docs(module):\n    docs = [f\"# {module.__name__} 모듈 문서\\n\"]\n    \n    # 모듈 docstring\n    if module.__doc__:\n        docs.append(f\"## 설명\\n{module.__doc__}\\n\")\n    \n    # 함수 문서화\n    functions = inspect.getmembers(module, inspect.isfunction)\n    if functions:\n        docs.append(\"## 함수\\n\")\n        for name, func in functions:\n            if not name.startswith('_'):\n                docs.append(f\"### {name}\\n\")\n                if func.__doc__:\n                    docs.append(f\"{func.__doc__}\\n\")\n                sig = inspect.signature(func)\n                docs.append(f\"**시그니처:** `{name}{sig}`\\n\")\n    \n    # 클래스 문서화\n    classes = inspect.getmembers(module, inspect.isclass)\n    if classes:\n        docs.append(\"## 클래스\\n\")\n        for name, cls in classes:\n            if not name.startswith('_'):\n                docs.append(f\"### {name}\\n\")\n                if cls.__doc__:\n                    docs.append(f\"{cls.__doc__}\\n\")\n                \n                # 클래스 메서드\n                methods = inspect.getmembers(cls, inspect.isfunction)\n                for method_name, method in methods:\n                    if not method_name.startswith('_') or method_name == '__init__':\n                        docs.append(f\"#### {method_name}\\n\")\n                        if method.__doc__:\n                            docs.append(f\"{method.__doc__}\\n\")\n    \n    return '\\n'.join(docs)",
            "explanation": "inspect 모듈을 사용하여 모듈의 구조를 분석하고 docstring을 추출하여 마크다운 문서를 생성합니다."
        },
        {
            "id": 35,
            "type": "design_pattern",
            "difficulty": "expert",
            "question": "싱글톤 패턴을 사용하여 로거 시스템을 구현하세요. 모듈 수준에서 하나의 로거 인스턴스만 생성되도록 하고, 여러 핸들러를 지원해야 합니다.",
            "answer": "import datetime\nfrom enum import Enum\n\nclass LogLevel(Enum):\n    DEBUG = 1\n    INFO = 2\n    WARNING = 3\n    ERROR = 4\n    CRITICAL = 5\n\nclass Logger:\n    _instance = None\n    _initialized = False\n    \n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(Logger, cls).__new__(cls)\n        return cls._instance\n    \n    def __init__(self):\n        if not self._initialized:\n            self.handlers = []\n            self.level = LogLevel.INFO\n            self._initialized = True\n    \n    def add_handler(self, handler):\n        self.handlers.append(handler)\n    \n    def set_level(self, level):\n        self.level = level\n    \n    def log(self, level, message, **kwargs):\n        if level.value >= self.level.value:\n            log_record = {\n                'timestamp': datetime.datetime.now().isoformat(),\n                'level': level.name,\n                'message': message,\n                'extra': kwargs\n            }\n            for handler in self.handlers:\n                handler.handle(log_record)\n    \n    def debug(self, message, **kwargs):\n        self.log(LogLevel.DEBUG, message, **kwargs)\n    \n    def info(self, message, **kwargs):\n        self.log(LogLevel.INFO, message, **kwargs)\n    \n    def warning(self, message, **kwargs):\n        self.log(LogLevel.WARNING, message, **kwargs)\n    \n    def error(self, message, **kwargs):\n        self.log(LogLevel.ERROR, message, **kwargs)\n    \n    def critical(self, message, **kwargs):\n        self.log(LogLevel.CRITICAL, message, **kwargs)\n\nclass ConsoleHandler:\n    def handle(self, log_record):\n        print(f\"[{log_record['level']}] {log_record['message']}\")\n\n# 모듈 수준 로거 인스턴스\nlogger = Logger()",
            "explanation": "싱글톤 패턴을 사용하여 애플리케이션 전체에서 하나의 로거 인스턴스를 공유하는 로깅 시스템입니다."
        }
    ]
}