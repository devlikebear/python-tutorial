{
    "quiz_info": {
        "title": "Chapter 9: 이터레이터와 제너레이터",
        "description": "이터레이터와 이터러블의 개념, 커스텀 이터레이터 구현, 제너레이터 함수, yield 키워드 활용, itertools 모듈, 메모리 효율적인 데이터 처리에 대한 퀴즈입니다.",
        "total_questions": 38,
        "passing_score": 70,
        "time_limit_minutes": 45
    },
    "questions": [
        {
            "id": 1,
            "type": "multiple_choice",
            "difficulty": "easy",
            "question": "이터러블(Iterable) 객체가 가져야 하는 메서드는?",
            "options": [
                "__next__",
                "__iter__",
                "__len__",
                "__getitem__"
            ],
            "correct": 1,
            "explanation": "이터러블 객체는 __iter__ 메서드를 가져야 하며, 이 메서드는 이터레이터를 반환합니다."
        },
        {
            "id": 2,
            "type": "multiple_choice",
            "difficulty": "easy",
            "question": "이터레이터(Iterator) 객체가 가져야 하는 메서드는?",
            "options": [
                "__iter__만",
                "__next__만",
                "__iter__와 __next__ 모두",
                "__len__과 __getitem__"
            ],
            "correct": 2,
            "explanation": "이터레이터는 __iter__와 __next__ 메서드를 모두 가져야 합니다."
        },
        {
            "id": 3,
            "type": "true_false",
            "difficulty": "easy",
            "question": "for 문은 내부적으로 iter()와 next() 함수를 사용한다.",
            "correct": true,
            "explanation": "for 문은 iter()로 이터레이터를 생성하고 next()로 값을 가져오며, StopIteration 예외로 반복을 종료합니다."
        },
        {
            "id": 4,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "이터레이터가 모든 요소를 소비한 후 다시 사용하려면?",
            "options": [
                "reset() 메서드 호출",
                "새로운 이터레이터를 생성",
                "restart() 메서드 호출",
                "자동으로 재시작됨"
            ],
            "correct": 1,
            "explanation": "이터레이터는 한 번만 사용 가능하므로, 재사용하려면 새로운 이터레이터를 생성해야 합니다."
        },
        {
            "id": 5,
            "type": "coding",
            "difficulty": "medium",
            "question": "1부터 n까지의 숫자를 반환하는 커스텀 이터레이터 클래스 Counter를 구현하세요.",
            "answer": "class Counter:\n    def __init__(self, n):\n        self.n = n\n        self.current = 1\n    \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.current > self.n:\n            raise StopIteration\n        value = self.current\n        self.current += 1\n        return value",
            "explanation": "__iter__는 self를 반환하고, __next__는 다음 값을 반환하거나 StopIteration을 발생시킵니다."
        },
        {
            "id": 6,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "제너레이터 함수의 특징이 아닌 것은?",
            "options": [
                "yield 키워드를 사용한다",
                "호출 시 제너레이터 객체를 반환한다",
                "메모리 효율적이다",
                "한 번에 모든 값을 생성한다"
            ],
            "correct": 3,
            "explanation": "제너레이터는 필요할 때마다 값을 하나씩 생성하므로 메모리 효율적입니다."
        },
        {
            "id": 7,
            "type": "coding",
            "difficulty": "easy",
            "question": "피보나치 수열의 처음 n개를 생성하는 제너레이터 함수를 작성하세요.",
            "answer": "def fibonacci(n):\n    a, b = 0, 1\n    for i in range(n):\n        yield a\n        a, b = b, a + b",
            "explanation": "yield를 사용하여 피보나치 수열의 값을 하나씩 생성합니다."
        },
        {
            "id": 8,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "제너레이터 표현식과 리스트 컴프리헨션의 주요 차이점은?",
            "options": [
                "문법이 다르다",
                "제너레이터는 메모리 효율적이다",
                "제너레이터는 더 빠르다",
                "기능상 차이가 없다"
            ],
            "correct": 1,
            "explanation": "제너레이터 표현식은 필요할 때마다 값을 생성하므로 메모리 효율적입니다."
        },
        {
            "id": 9,
            "type": "code_completion",
            "difficulty": "medium",
            "question": "다음 제너레이터 표현식을 완성하세요. 1부터 10까지의 짝수의 제곱을 생성합니다.\n\neven_squares = (_____ for x in range(1, 11) if _____)",
            "answer": "x**2, x % 2 == 0",
            "explanation": "x**2로 제곱을 구하고, x % 2 == 0으로 짝수를 필터링합니다."
        },
        {
            "id": 10,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "yield from의 주요 목적은?",
            "options": [
                "성능 향상",
                "다른 제너레이터에 위임",
                "메모리 절약",
                "코드 단축"
            ],
            "correct": 1,
            "explanation": "yield from은 다른 제너레이터나 이터러블에 제어를 위임하는 용도로 사용됩니다."
        },
        {
            "id": 11,
            "type": "coding",
            "difficulty": "hard",
            "question": "제너레이터의 send() 메서드를 사용하여 값을 누적하는 accumulator 제너레이터를 구현하세요.",
            "answer": "def accumulator():\n    total = 0\n    while True:\n        value = yield total\n        if value is not None:\n            total += value",
            "explanation": "yield로 현재 총합을 반환하고, send()로 받은 값을 누적합니다."
        },
        {
            "id": 12,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "itertools.count()의 기능은?",
            "options": [
                "요소의 개수를 센다",
                "무한 카운터를 생성한다",
                "리스트를 카운트한다",
                "시간을 카운트한다"
            ],
            "correct": 1,
            "explanation": "itertools.count()는 지정된 시작값부터 무한히 증가하는 카운터를 생성합니다."
        },
        {
            "id": 13,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "itertools.chain()의 기능은?",
            "options": [
                "체인을 만든다",
                "여러 이터러블을 연결한다",
                "링크드 리스트를 만든다",
                "순환 구조를 만든다"
            ],
            "correct": 1,
            "explanation": "itertools.chain()은 여러 이터러블을 하나로 연결하여 순차적으로 순회할 수 있게 합니다."
        },
        {
            "id": 14,
            "type": "code_analysis",
            "difficulty": "hard",
            "question": "다음 코드의 출력 결과를 예측하세요.\n\nimport itertools\ndata = [1, 2, 3]\nresult = list(itertools.combinations(data, 2))\nprint(result)",
            "answer": "[(1, 2), (1, 3), (2, 3)]",
            "explanation": "combinations(data, 2)는 3개 요소 중 2개를 선택하는 모든 조합을 생성합니다."
        },
        {
            "id": 15,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "itertools.permutations()와 itertools.combinations()의 차이점은?",
            "options": [
                "기능상 동일하다",
                "permutations는 순서가 중요하고, combinations는 순서가 중요하지 않다",
                "permutations는 더 빠르다",
                "combinations는 중복을 허용한다"
            ],
            "correct": 1,
            "explanation": "permutations는 순열(순서 중요), combinations는 조합(순서 무관)을 생성합니다."
        },
        {
            "id": 16,
            "type": "coding",
            "difficulty": "medium",
            "question": "itertools.islice()를 사용하여 무한 이터레이터에서 처음 5개 요소만 가져오는 코드를 작성하세요.",
            "answer": "import itertools\n\ninfinite_counter = itertools.count()\nfirst_five = list(itertools.islice(infinite_counter, 5))",
            "explanation": "islice()는 이터레이터에서 지정된 개수만큼만 요소를 가져옵니다."
        },
        {
            "id": 17,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "대용량 데이터를 처리할 때 제너레이터를 사용하는 주된 이유는?",
            "options": [
                "처리 속도가 빠르다",
                "메모리 사용량을 줄인다",
                "코드가 간단해진다",
                "병렬 처리가 가능하다"
            ],
            "correct": 1,
            "explanation": "제너레이터는 필요할 때마다 값을 생성하므로 메모리 사용량을 크게 줄일 수 있습니다."
        },
        {
            "id": 18,
            "type": "design_pattern",
            "difficulty": "hard",
            "question": "슬라이딩 윈도우를 구현하는 제너레이터 함수를 작성하세요. 윈도우 크기만큼의 연속된 요소들을 튜플로 반환해야 합니다.",
            "answer": "def sliding_window(iterable, window_size):\n    iterator = iter(iterable)\n    window = []\n    \n    # 초기 윈도우 채우기\n    for _ in range(window_size):\n        try:\n            window.append(next(iterator))\n        except StopIteration:\n            return\n    \n    yield tuple(window)\n    \n    # 슬라이딩\n    for item in iterator:\n        window.pop(0)\n        window.append(item)\n        yield tuple(window)",
            "explanation": "초기 윈도우를 채운 후, 새 요소를 추가하고 첫 번째 요소를 제거하면서 슬라이딩합니다."
        },
        {
            "id": 19,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "제너레이터에서 예외가 발생했을 때 정리 작업을 수행하려면?",
            "options": [
                "finally 블록 사용",
                "GeneratorExit 예외 처리",
                "close() 메서드 오버라이드",
                "except 블록만으로 충분"
            ],
            "correct": 1,
            "explanation": "제너레이터가 종료될 때 GeneratorExit 예외가 발생하므로 이를 처리하여 정리 작업을 수행합니다."
        },
        {
            "id": 20,
            "type": "code_completion",
            "difficulty": "medium",
            "question": "다음 코드를 완성하세요. 파일을 한 줄씩 읽는 제너레이터입니다.\n\ndef read_lines(filename):\n    with open(filename, 'r') as file:\n        for line in file:\n            yield _____",
            "answer": "line.strip()",
            "explanation": "strip()을 사용하여 줄바꿈 문자와 공백을 제거한 후 yield합니다."
        },
        {
            "id": 21,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "비동기 이터레이터를 구현하기 위해 필요한 메서드는?",
            "options": [
                "__iter__와 __next__",
                "__aiter__와 __anext__",
                "__async__와 __await__",
                "__enter__와 __exit__"
            ],
            "correct": 1,
            "explanation": "비동기 이터레이터는 __aiter__와 __anext__ 메서드를 구현해야 합니다."
        },
        {
            "id": 22,
            "type": "true_false",
            "difficulty": "medium",
            "question": "제너레이터 함수는 호출될 때마다 새로운 제너레이터 객체를 생성한다.",
            "correct": true,
            "explanation": "제너레이터 함수를 호출할 때마다 독립적인 새로운 제너레이터 객체가 생성됩니다."
        },
        {
            "id": 23,
            "type": "coding",
            "difficulty": "hard",
            "question": "데이터를 지정된 크기의 배치로 나누는 제너레이터 함수를 구현하세요.",
            "answer": "def batch_data(iterable, batch_size):\n    iterator = iter(iterable)\n    while True:\n        batch = []\n        for _ in range(batch_size):\n            try:\n                batch.append(next(iterator))\n            except StopIteration:\n                if batch:\n                    yield batch\n                return\n        yield batch",
            "explanation": "지정된 크기만큼 요소를 수집하여 배치로 만들고, 남은 요소가 있으면 마지막 배치로 반환합니다."
        },
        {
            "id": 24,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "itertools.tee()의 기능은?",
            "options": [
                "이터레이터를 복제한다",
                "티(T) 모양으로 분기한다",
                "두 개의 이터레이터를 합친다",
                "이터레이터를 초기화한다"
            ],
            "correct": 0,
            "explanation": "itertools.tee()는 하나의 이터레이터를 여러 개의 독립적인 이터레이터로 복제합니다."
        },
        {
            "id": 25,
            "type": "code_analysis",
            "difficulty": "hard",
            "question": "다음 코드에서 메모리 사용량이 더 효율적인 것은?\n\n# 방법 1\ndata = [x**2 for x in range(1000000)]\nresult = sum(data)\n\n# 방법 2\ndata = (x**2 for x in range(1000000))\nresult = sum(data)",
            "answer": "방법 2가 더 효율적입니다. 제너레이터 표현식을 사용하여 모든 값을 메모리에 저장하지 않고 필요할 때마다 생성하므로 메모리 사용량이 훨씬 적습니다.",
            "explanation": "리스트 컴프리헨션은 모든 값을 메모리에 저장하지만, 제너레이터는 필요할 때만 값을 생성합니다."
        },
        {
            "id": 26,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "itertools.groupby()를 사용하기 전에 주의할 점은?",
            "options": [
                "데이터를 정렬해야 한다",
                "중복을 제거해야 한다",
                "크기를 확인해야 한다",
                "타입을 통일해야 한다"
            ],
            "correct": 0,
            "explanation": "groupby()는 연속된 동일한 키를 가진 요소들을 그룹화하므로, 원하는 결과를 얻으려면 미리 정렬해야 합니다."
        },
        {
            "id": 27,
            "type": "coding",
            "difficulty": "expert",
            "question": "이터러블과 이터레이터를 모두 지원하는 재사용 가능한 Range 클래스를 구현하세요.",
            "answer": "class Range:\n    def __init__(self, start, end, step=1):\n        self.start = start\n        self.end = end\n        self.step = step\n    \n    def __iter__(self):\n        return RangeIterator(self.start, self.end, self.step)\n\nclass RangeIterator:\n    def __init__(self, start, end, step):\n        self.current = start\n        self.end = end\n        self.step = step\n    \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.current >= self.end:\n            raise StopIteration\n        value = self.current\n        self.current += self.step\n        return value",
            "explanation": "이터러블 클래스는 __iter__에서 새로운 이터레이터를 반환하여 재사용을 가능하게 합니다."
        },
        {
            "id": 28,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "제너레이터에서 return 문을 사용하면?",
            "options": [
                "오류가 발생한다",
                "StopIteration 예외가 발생한다",
                "제너레이터가 재시작된다",
                "값이 yield된다"
            ],
            "correct": 1,
            "explanation": "제너레이터에서 return 문은 StopIteration 예외를 발생시키며, return 값은 예외의 value 속성에 저장됩니다."
        },
        {
            "id": 29,
            "type": "design_pattern",
            "difficulty": "expert",
            "question": "CSV 파일을 스트리밍 방식으로 처리하는 파이프라인을 구현하세요. 파일 읽기 → 파싱 → 필터링 → 변환의 단계를 포함해야 합니다.",
            "answer": "def read_csv_stream(filename):\n    with open(filename, 'r') as file:\n        header = file.readline().strip().split(',')\n        for line in file:\n            values = line.strip().split(',')\n            yield dict(zip(header, values))\n\ndef parse_types(rows):\n    for row in rows:\n        try:\n            row['age'] = int(row['age'])\n            row['salary'] = float(row['salary'])\n        except (ValueError, KeyError):\n            continue\n        yield row\n\ndef filter_adults(rows):\n    for row in rows:\n        if row.get('age', 0) >= 18:\n            yield row\n\ndef transform_data(rows):\n    for row in rows:\n        row['annual_salary'] = row.get('salary', 0) * 12\n        yield row\n\n# 사용법\nrows = read_csv_stream('data.csv')\nparsed = parse_types(rows)\nfiltered = filter_adults(parsed)\ntransformed = transform_data(filtered)",
            "explanation": "각 단계를 제너레이터로 구현하여 메모리 효율적인 스트리밍 파이프라인을 만듭니다."
        },
        {
            "id": 30,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "itertools.cycle()과 itertools.repeat()의 차이점은?",
            "options": [
                "기능상 동일하다",
                "cycle은 시퀀스를 반복하고, repeat은 단일 값을 반복한다",
                "cycle이 더 빠르다",
                "repeat은 유한하다"
            ],
            "correct": 1,
            "explanation": "cycle()은 이터러블의 요소들을 순환하며 반복하고, repeat()은 단일 값을 반복합니다."
        },
        {
            "id": 31,
            "type": "coding",
            "difficulty": "hard",
            "question": "두 개의 정렬된 이터레이터를 병합하는 제너레이터 함수를 구현하세요.",
            "answer": "def merge_sorted(iter1, iter2):\n    i1, i2 = iter(iter1), iter(iter2)\n    \n    try:\n        val1 = next(i1)\n    except StopIteration:\n        yield from i2\n        return\n    \n    try:\n        val2 = next(i2)\n    except StopIteration:\n        yield val1\n        yield from i1\n        return\n    \n    while True:\n        if val1 <= val2:\n            yield val1\n            try:\n                val1 = next(i1)\n            except StopIteration:\n                yield val2\n                yield from i2\n                return\n        else:\n            yield val2\n            try:\n                val2 = next(i2)\n            except StopIteration:\n                yield val1\n                yield from i1\n                return",
            "explanation": "두 이터레이터에서 값을 비교하며 작은 값부터 순서대로 yield합니다."
        },
        {
            "id": 32,
            "type": "true_false",
            "difficulty": "medium",
            "question": "제너레이터는 항상 이터레이터이지만, 이터레이터가 항상 제너레이터는 아니다.",
            "correct": true,
            "explanation": "제너레이터는 이터레이터 프로토콜을 구현하므로 항상 이터레이터이지만, 클래스로 구현된 이터레이터는 제너레이터가 아닙니다."
        },
        {
            "id": 33,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "yield from의 고급 기능 중 하나는?",
            "options": [
                "성능 최적화만",
                "예외와 반환값 전달",
                "메모리 절약만",
                "타입 검사"
            ],
            "correct": 1,
            "explanation": "yield from은 하위 제너레이터의 예외와 반환값을 상위 제너레이터로 투명하게 전달합니다."
        },
        {
            "id": 34,
            "type": "code_analysis",
            "difficulty": "expert",
            "question": "다음 코드에서 제너레이터의 동작을 분석하세요.\n\ndef gen():\n    try:\n        yield 1\n        yield 2\n    except GeneratorExit:\n        print('정리 중')\n        yield 3\n\ng = gen()\nprint(next(g))\ng.close()\nprint(next(g))",
            "answer": "출력: 1, '정리 중', RuntimeError 발생\n\nGeneratorExit 예외 처리 중에 yield를 사용하면 RuntimeError가 발생합니다. GeneratorExit 핸들러에서는 yield를 사용할 수 없습니다.",
            "explanation": "GeneratorExit 예외 처리기에서 yield를 사용하면 RuntimeError가 발생합니다."
        },
        {
            "id": 35,
            "type": "performance",
            "difficulty": "expert",
            "question": "대용량 로그 파일(1GB)에서 특정 패턴을 검색할 때 메모리 효율적인 방법을 제안하세요.",
            "answer": "import re\n\ndef search_log_pattern(filename, pattern):\n    compiled_pattern = re.compile(pattern)\n    \n    with open(filename, 'r', encoding='utf-8') as file:\n        for line_num, line in enumerate(file, 1):\n            if compiled_pattern.search(line):\n                yield line_num, line.strip()\n\ndef batch_process_matches(matches, batch_size=1000):\n    batch = []\n    for match in matches:\n        batch.append(match)\n        if len(batch) >= batch_size:\n            yield batch\n            batch = []\n    if batch:\n        yield batch\n\n# 사용법\nmatches = search_log_pattern('large.log', r'ERROR.*database')\nfor batch in batch_process_matches(matches):\n    # 배치 단위로 처리\n    process_error_batch(batch)",
            "explanation": "파일을 한 줄씩 스트리밍하고, 배치 단위로 처리하여 메모리 사용량을 최소화합니다."
        },
        {
            "id": 36,
            "type": "debugging",
            "difficulty": "hard",
            "question": "다음 코드의 문제점을 찾아 수정하세요.\n\ndef problematic_generator():\n    data = [1, 2, 3, 4, 5]\n    for item in data:\n        yield item\n        data.append(item * 2)  # 문제가 있는 부분\n\nresult = list(problematic_generator())",
            "answer": "문제점: 이터레이션 중에 리스트를 수정하면 무한 루프가 발생할 수 있습니다.\n\n수정된 코드:\ndef fixed_generator():\n    data = [1, 2, 3, 4, 5]\n    original_length = len(data)\n    for i in range(original_length):\n        yield data[i]\n        # 또는 data를 복사하여 사용\n        # data_copy = data.copy()\n        # for item in data_copy:\n        #     yield item",
            "explanation": "이터레이션 중인 컬렉션을 수정하면 예상치 못한 동작이 발생할 수 있습니다."
        },
        {
            "id": 37,
            "type": "comprehensive",
            "difficulty": "expert",
            "question": "실시간 데이터 스트림을 처리하는 시스템을 설계하세요. 다음 요구사항을 만족해야 합니다: 1) 무한 데이터 스트림 처리 2) 윈도우 기반 집계 3) 메모리 효율성 4) 백프레셔 처리",
            "answer": "from collections import deque\nimport time\n\nclass StreamProcessor:\n    def __init__(self, window_size=1000, max_buffer=10000):\n        self.window_size = window_size\n        self.max_buffer = max_buffer\n        self.buffer = deque(maxlen=max_buffer)\n        self.window = deque(maxlen=window_size)\n    \n    def data_stream(self):\n        \"\"\"무한 데이터 스트림 시뮬레이션\"\"\"\n        counter = 0\n        while True:\n            # 백프레셔 처리: 버퍼가 가득 차면 대기\n            if len(self.buffer) >= self.max_buffer:\n                yield None  # 백프레셔 신호\n                continue\n            \n            data_point = {\n                'timestamp': time.time(),\n                'value': counter % 100,\n                'id': counter\n            }\n            counter += 1\n            yield data_point\n    \n    def windowed_aggregation(self, stream):\n        \"\"\"윈도우 기반 집계\"\"\"\n        for data in stream:\n            if data is None:  # 백프레셔 처리\n                time.sleep(0.01)\n                continue\n            \n            self.window.append(data)\n            \n            if len(self.window) >= self.window_size:\n                # 윈도우 집계 수행\n                values = [item['value'] for item in self.window]\n                aggregation = {\n                    'window_start': self.window[0]['timestamp'],\n                    'window_end': self.window[-1]['timestamp'],\n                    'count': len(values),\n                    'sum': sum(values),\n                    'avg': sum(values) / len(values),\n                    'min': min(values),\n                    'max': max(values)\n                }\n                yield aggregation\n    \n    def process_stream(self):\n        \"\"\"스트림 처리 파이프라인\"\"\"\n        stream = self.data_stream()\n        aggregated = self.windowed_aggregation(stream)\n        \n        for result in aggregated:\n            # 결과 처리 (저장, 알림 등)\n            yield result\n\n# 사용법\nprocessor = StreamProcessor(window_size=100)\nfor aggregation in processor.process_stream():\n    print(f\"윈도우 집계: 평균={aggregation['avg']:.2f}, 개수={aggregation['count']}\")\n    # 실제 환경에서는 break 조건 추가 필요",
            "explanation": "deque를 사용한 효율적인 윈도우 관리, 백프레셔 처리, 제너레이터 기반 스트림 처리를 구현합니다."
        },
        {
            "id": 38,
            "type": "reflection",
            "difficulty": "expert",
            "question": "이터레이터와 제너레이터의 실무 활용에서 가장 중요한 고려사항 3가지를 설명하고, 각각에 대한 실제 예시를 제시하세요.",
            "answer": "1. **메모리 효율성**: 대용량 데이터 처리 시 모든 데이터를 메모리에 로드하지 않고 스트리밍 방식으로 처리\n   예시: 수 GB 크기의 로그 파일을 분석할 때 한 줄씩 읽어서 처리\n\n2. **지연 평가(Lazy Evaluation)**: 필요할 때까지 계산을 연기하여 불필요한 연산 방지\n   예시: 조건에 맞는 첫 번째 결과만 필요한 경우, 모든 데이터를 처리하지 않고 조건 만족 시 즉시 중단\n\n3. **무한 시퀀스 처리**: 끝이 없는 데이터 스트림을 효율적으로 처리\n   예시: 실시간 센서 데이터, 네트워크 스트림, 사용자 이벤트 등을 지속적으로 처리\n\n추가 고려사항:\n- 상태 관리: 이터레이터는 한 번만 사용 가능하므로 재사용이 필요한 경우 이터러블 클래스 구현\n- 예외 처리: GeneratorExit, StopIteration 등의 예외를 적절히 처리\n- 성능: 복잡한 제너레이터보다 단순한 반복문이 더 빠를 수 있음",
            "explanation": "이터레이터와 제너레이터는 메모리 효율성, 지연 평가, 무한 시퀀스 처리에서 강력한 도구가 됩니다."
        }
    ]
}