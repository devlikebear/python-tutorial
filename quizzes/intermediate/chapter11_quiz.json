{
    "quiz_info": {
        "title": "Chapter 11: 테스팅과 디버깅 퀴즈",
        "description": "unittest, pytest, TDD, 디버깅 기법, 코드 커버리지, CI/CD에 대한 종합 평가",
        "total_questions": 40,
        "time_limit_minutes": 50,
        "passing_score": 70,
        "difficulty_distribution": {
            "beginner": 10,
            "intermediate": 15,
            "advanced": 10,
            "expert": 5
        }
    },
    "questions": [
        {
            "id": 1,
            "type": "multiple_choice",
            "difficulty": "beginner",
            "question": "FIRST 원칙에서 'F'는 무엇을 의미하나요?",
            "options": [
                "Fast (빠른 실행)",
                "Functional (기능적)",
                "Flexible (유연한)",
                "Final (최종)"
            ],
            "correct_answer": 0,
            "explanation": "FIRST 원칙에서 F는 Fast(빠른 실행)를 의미합니다. 테스트는 빠르게 실행되어야 합니다."
        },
        {
            "id": 2,
            "type": "multiple_choice",
            "difficulty": "beginner",
            "question": "unittest에서 각 테스트 메서드 실행 전에 호출되는 메서드는?",
            "options": [
                "setUp()",
                "initialize()",
                "before()",
                "prepare()"
            ],
            "correct_answer": 0,
            "explanation": "unittest에서 setUp() 메서드는 각 테스트 메서드 실행 전에 호출되어 테스트 환경을 준비합니다."
        },
        {
            "id": 3,
            "type": "multiple_choice",
            "difficulty": "beginner",
            "question": "AAA 패턴에서 세 단계의 올바른 순서는?",
            "options": [
                "Act - Arrange - Assert",
                "Arrange - Act - Assert",
                "Assert - Arrange - Act",
                "Arrange - Assert - Act"
            ],
            "correct_answer": 1,
            "explanation": "AAA 패턴은 Arrange(준비) - Act(실행) - Assert(검증) 순서로 진행됩니다."
        },
        {
            "id": 4,
            "type": "true_false",
            "difficulty": "beginner",
            "question": "단위 테스트는 개별 함수나 메서드를 테스트하는 것입니다.",
            "correct_answer": true,
            "explanation": "단위 테스트는 가장 작은 단위인 개별 함수나 메서드를 테스트합니다."
        },
        {
            "id": 5,
            "type": "multiple_choice",
            "difficulty": "beginner",
            "question": "pytest의 주요 장점이 아닌 것은?",
            "options": [
                "간단한 assert 문 사용",
                "자동 테스트 발견",
                "복잡한 설정 필요",
                "풍부한 플러그인 생태계"
            ],
            "correct_answer": 2,
            "explanation": "pytest는 설정이 간단하다는 것이 장점입니다. 복잡한 설정이 필요하지 않습니다."
        },
        {
            "id": 6,
            "type": "fill_in_blank",
            "difficulty": "beginner",
            "question": "TDD의 Red-Green-Refactor 사이클에서 Red 단계는 ______ 테스트를 작성하는 단계입니다.",
            "correct_answer": "실패하는",
            "explanation": "Red 단계에서는 아직 구현되지 않은 기능에 대한 실패하는 테스트를 먼저 작성합니다."
        },
        {
            "id": 7,
            "type": "multiple_choice",
            "difficulty": "beginner",
            "question": "디버깅에서 print문을 사용하는 방법의 단점은?",
            "options": [
                "성능에 영향을 줌",
                "프로덕션 코드에 남을 수 있음",
                "로그 레벨 조절 불가",
                "모든 것"
            ],
            "correct_answer": 3,
            "explanation": "print문을 사용한 디버깅은 성능 영향, 프로덕션 코드 오염, 로그 레벨 조절 불가 등의 문제가 있습니다."
        },
        {
            "id": 8,
            "type": "true_false",
            "difficulty": "beginner",
            "question": "100% 코드 커버리지를 달성하면 완벽한 테스트가 보장됩니다.",
            "correct_answer": false,
            "explanation": "100% 커버리지가 완벽한 테스트를 보장하지는 않습니다. 커버리지는 하나의 지표일 뿐입니다."
        },
        {
            "id": 9,
            "type": "multiple_choice",
            "difficulty": "beginner",
            "question": "테스트 피라미드에서 가장 많은 비중을 차지해야 하는 테스트는?",
            "options": [
                "단위 테스트",
                "통합 테스트",
                "시스템 테스트",
                "인수 테스트"
            ],
            "correct_answer": 0,
            "explanation": "테스트 피라미드에서 단위 테스트가 가장 많은 비중을 차지해야 합니다. 빠르고 안정적이기 때문입니다."
        },
        {
            "id": 10,
            "type": "multiple_choice",
            "difficulty": "beginner",
            "question": "logging 모듈에서 가장 낮은 로그 레벨은?",
            "options": [
                "DEBUG",
                "INFO",
                "WARNING",
                "ERROR"
            ],
            "correct_answer": 0,
            "explanation": "DEBUG가 가장 낮은 로그 레벨로, 상세한 디버깅 정보를 출력합니다."
        },
        {
            "id": 11,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "unittest.mock에서 외부 API 호출을 모킹할 때 사용하는 데코레이터는?",
            "options": [
                "@mock",
                "@patch",
                "@stub",
                "@fake"
            ],
            "correct_answer": 1,
            "explanation": "@patch 데코레이터를 사용하여 외부 의존성을 모킹할 수 있습니다."
        },
        {
            "id": 12,
            "type": "coding",
            "difficulty": "intermediate",
            "question": "다음 함수에 대한 unittest 테스트 케이스를 작성하세요:\n\ndef divide(a, b):\n    if b == 0:\n        raise ValueError('Cannot divide by zero')\n    return a / b",
            "correct_answer": "class TestDivide(unittest.TestCase):\n    def test_normal_division(self):\n        self.assertEqual(divide(10, 2), 5)\n    \n    def test_divide_by_zero(self):\n        with self.assertRaises(ValueError):\n            divide(10, 0)",
            "explanation": "정상 케이스와 예외 케이스를 모두 테스트해야 합니다."
        },
        {
            "id": 13,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "pytest의 fixture에서 scope='session'은 언제까지 유지되나요?",
            "options": [
                "각 테스트 함수마다",
                "각 테스트 클래스마다",
                "각 테스트 모듈마다",
                "전체 테스트 세션 동안"
            ],
            "correct_answer": 3,
            "explanation": "scope='session'인 fixture는 전체 테스트 세션 동안 한 번만 생성되어 유지됩니다."
        },
        {
            "id": 14,
            "type": "true_false",
            "difficulty": "intermediate",
            "question": "TDD에서 Refactor 단계는 테스트가 실패한 상태에서 진행됩니다.",
            "correct_answer": false,
            "explanation": "Refactor 단계는 테스트가 통과한 상태에서 코드 품질을 개선하는 단계입니다."
        },
        {
            "id": 15,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "코드 커버리지 측정에서 Branch Coverage는 무엇을 측정하나요?",
            "options": [
                "실행된 코드 라인의 비율",
                "실행된 분기문의 비율",
                "호출된 함수의 비율",
                "실행된 루프의 비율"
            ],
            "correct_answer": 1,
            "explanation": "Branch Coverage는 if-else, switch 등의 분기문에서 각 분기가 실행된 비율을 측정합니다."
        },
        {
            "id": 16,
            "type": "fill_in_blank",
            "difficulty": "intermediate",
            "question": "순환 복잡도(Cyclomatic Complexity)는 함수당 ______ 이하로 유지하는 것이 권장됩니다.",
            "correct_answer": "10",
            "explanation": "일반적으로 함수당 순환 복잡도는 10 이하로 유지하는 것이 권장됩니다."
        },
        {
            "id": 17,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "pytest의 parametrize 데코레이터의 주요 목적은?",
            "options": [
                "테스트 실행 순서 제어",
                "동일한 테스트를 다른 입력값으로 반복 실행",
                "테스트 실행 시간 측정",
                "테스트 결과 포맷팅"
            ],
            "correct_answer": 1,
            "explanation": "@pytest.mark.parametrize는 동일한 테스트 로직을 다양한 입력값으로 반복 실행할 때 사용합니다."
        },
        {
            "id": 18,
            "type": "coding",
            "difficulty": "intermediate",
            "question": "다음 클래스의 deposit 메서드에 대한 TDD 스타일 테스트를 작성하세요:\n\nclass BankAccount:\n    def __init__(self, balance=0):\n        self.balance = balance\n    \n    def deposit(self, amount):\n        if amount <= 0:\n            raise ValueError('Amount must be positive')\n        self.balance += amount\n        return self.balance",
            "correct_answer": "def test_deposit_positive_amount():\n    account = BankAccount(100)\n    result = account.deposit(50)\n    assert result == 150\n    assert account.balance == 150\n\ndef test_deposit_negative_amount_raises_error():\n    account = BankAccount(100)\n    with pytest.raises(ValueError):\n        account.deposit(-10)",
            "explanation": "TDD에서는 정상 케이스와 예외 케이스를 모두 테스트해야 합니다."
        },
        {
            "id": 19,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "CI/CD 파이프라인에서 보통 어떤 순서로 테스트가 실행되나요?",
            "options": [
                "통합 테스트 → 단위 테스트 → 성능 테스트",
                "단위 테스트 → 통합 테스트 → 성능 테스트",
                "성능 테스트 → 단위 테스트 → 통합 테스트",
                "통합 테스트 → 성능 테스트 → 단위 테스트"
            ],
            "correct_answer": 1,
            "explanation": "일반적으로 빠르고 안정적인 단위 테스트를 먼저 실행하고, 통합 테스트, 성능 테스트 순으로 진행합니다."
        },
        {
            "id": 20,
            "type": "true_false",
            "difficulty": "intermediate",
            "question": "assertion은 프로덕션 코드에서 자동으로 제거되므로 성능에 영향을 주지 않습니다.",
            "correct_answer": false,
            "explanation": "Python의 assertion은 -O 플래그로 최적화할 때만 제거됩니다. 기본적으로는 프로덕션에서도 실행됩니다."
        },
        {
            "id": 21,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "다음 중 통합 테스트의 특징이 아닌 것은?",
            "options": [
                "모듈 간 상호작용 테스트",
                "외부 의존성 포함",
                "단위 테스트보다 느림",
                "모든 외부 의존성을 모킹"
            ],
            "correct_answer": 3,
            "explanation": "통합 테스트는 실제 외부 의존성을 사용하여 모듈 간 상호작용을 테스트합니다."
        },
        {
            "id": 22,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "로깅과 print의 차이점으로 올바른 것은?",
            "options": [
                "로깅은 레벨별 출력 제어가 가능하다",
                "로깅은 파일 출력이 가능하다",
                "로깅은 포맷팅이 가능하다",
                "모든 것"
            ],
            "correct_answer": 3,
            "explanation": "로깅은 레벨 제어, 파일 출력, 포맷팅 등 print보다 훨씬 많은 기능을 제공합니다."
        },
        {
            "id": 23,
            "type": "fill_in_blank",
            "difficulty": "intermediate",
            "question": "pytest에서 테스트 함수는 반드시 ______로 시작해야 합니다.",
            "correct_answer": "test_",
            "explanation": "pytest는 'test_'로 시작하는 함수를 자동으로 테스트 함수로 인식합니다."
        },
        {
            "id": 24,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "다음 중 테스트 더블(Test Double)의 종류가 아닌 것은?",
            "options": [
                "Mock",
                "Stub",
                "Spy",
                "Clone"
            ],
            "correct_answer": 3,
            "explanation": "테스트 더블의 주요 종류는 Mock, Stub, Spy, Fake, Dummy입니다. Clone은 포함되지 않습니다."
        },
        {
            "id": 25,
            "type": "coding",
            "difficulty": "intermediate",
            "question": "다음 코드의 순환 복잡도를 계산하세요:\n\ndef process_grade(score):\n    if score >= 90:\n        return 'A'\n    elif score >= 80:\n        return 'B'\n    elif score >= 70:\n        return 'C'\n    elif score >= 60:\n        return 'D'\n    else:\n        return 'F'",
            "correct_answer": "5",
            "explanation": "기본 복잡도 1 + if문 4개 = 5입니다. 각 분기점이 복잡도를 1씩 증가시킵니다."
        },
        {
            "id": 26,
            "type": "multiple_choice",
            "difficulty": "advanced",
            "question": "테스트 격리(Test Isolation)를 보장하기 위한 가장 좋은 방법은?",
            "options": [
                "전역 변수 사용 금지",
                "각 테스트마다 독립적인 설정",
                "테스트 간 순서 의존성 제거",
                "모든 것"
            ],
            "correct_answer": 3,
            "explanation": "테스트 격리를 위해서는 전역 변수 사용 금지, 독립적인 설정, 순서 의존성 제거 등이 모두 필요합니다."
        },
        {
            "id": 27,
            "type": "design_pattern",
            "difficulty": "advanced",
            "question": "대용량 데이터를 처리하는 함수의 성능 테스트 전략을 설계하세요. 메모리 사용량과 실행 시간을 모두 고려해야 합니다.",
            "correct_answer": "1. 프로파일링 도구(cProfile, memory_profiler) 사용\n2. 다양한 데이터 크기로 벤치마크 테스트\n3. 메모리 사용량 모니터링\n4. 시간 복잡도 분석\n5. 리소스 제한 환경에서 테스트\n6. 가비지 컬렉션 패턴 확인",
            "explanation": "성능 테스트는 다양한 측면에서 종합적으로 접근해야 합니다."
        },
        {
            "id": 28,
            "type": "multiple_choice",
            "difficulty": "advanced",
            "question": "pytest-xdist 플러그인의 주요 기능은?",
            "options": [
                "테스트 코드 커버리지 측정",
                "테스트 병렬 실행",
                "테스트 결과 HTML 리포트 생성",
                "테스트 실행 시간 측정"
            ],
            "correct_answer": 1,
            "explanation": "pytest-xdist는 테스트를 여러 프로세스에서 병렬로 실행할 수 있게 해주는 플러그인입니다."
        },
        {
            "id": 29,
            "type": "debugging",
            "difficulty": "advanced",
            "question": "다음 코드에서 발생할 수 있는 문제를 식별하고 디버깅 전략을 제시하세요:\n\ndef calculate_average(numbers):\n    total = sum(numbers)\n    return total / len(numbers)",
            "correct_answer": "문제: 빈 리스트에 대해 ZeroDivisionError 발생\n디버깅 전략:\n1. 입력 검증 추가 (빈 리스트 체크)\n2. 예외 처리 추가\n3. 로깅으로 입력값 확인\n4. 단위 테스트로 경계 케이스 검증\n5. assertion으로 전제 조건 확인",
            "explanation": "경계 케이스에 대한 방어적 프로그래밍과 체계적인 디버깅이 필요합니다."
        },
        {
            "id": 30,
            "type": "true_false",
            "difficulty": "advanced",
            "question": "Mock 객체는 실제 객체의 행동을 완전히 시뮬레이션해야 합니다.",
            "correct_answer": false,
            "explanation": "Mock 객체는 테스트에 필요한 최소한의 행동만 시뮬레이션하면 됩니다. 완전한 시뮬레이션은 오히려 테스트를 복잡하게 만들 수 있습니다."
        },
        {
            "id": 31,
            "type": "multiple_choice",
            "difficulty": "advanced",
            "question": "테스트에서 시간 의존적인 코드를 테스트하는 가장 좋은 방법은?",
            "options": [
                "실제 시간을 기다리기",
                "시간 관련 함수를 모킹",
                "테스트 실행 시간을 늘리기",
                "시간 의존성 무시하기"
            ],
            "correct_answer": 1,
            "explanation": "시간 관련 함수(datetime.now(), time.sleep() 등)를 모킹하여 테스트의 결정성과 속도를 보장해야 합니다."
        },
        {
            "id": 32,
            "type": "performance",
            "difficulty": "advanced",
            "question": "1000개의 테스트가 있는 프로젝트에서 테스트 실행 시간을 최적화하는 방법을 제시하세요.",
            "correct_answer": "1. 병렬 테스트 실행 (pytest-xdist)\n2. 테스트 분류 및 선택적 실행\n3. 픽스처 스코프 최적화\n4. 외부 의존성 모킹\n5. 느린 테스트 식별 및 개선\n6. 테스트 데이터 최소화\n7. CI/CD에서 테스트 캐싱",
            "explanation": "다양한 최적화 기법을 조합하여 테스트 실행 시간을 단축할 수 있습니다."
        },
        {
            "id": 33,
            "type": "multiple_choice",
            "difficulty": "advanced",
            "question": "Mutation Testing의 목적은 무엇인가요?",
            "options": [
                "코드 변경 시 테스트 실행",
                "테스트의 품질 평가",
                "코드 커버리지 향상",
                "성능 테스트"
            ],
            "correct_answer": 1,
            "explanation": "Mutation Testing은 코드를 의도적으로 변경(변이)시켜 테스트가 이를 감지하는지 확인하여 테스트의 품질을 평가합니다."
        },
        {
            "id": 34,
            "type": "coding",
            "difficulty": "advanced",
            "question": "Context Manager를 사용하여 데이터베이스 트랜잭션을 테스트하는 코드를 작성하세요. 테스트 후 롤백이 되어야 합니다.",
            "correct_answer": "import pytest\nfrom contextlib import contextmanager\n\n@contextmanager\ndef database_transaction():\n    connection = get_db_connection()\n    transaction = connection.begin()\n    try:\n        yield connection\n    finally:\n        transaction.rollback()\n        connection.close()\n\n@pytest.fixture\ndef db_session():\n    with database_transaction() as conn:\n        yield conn",
            "explanation": "Context Manager를 사용하여 테스트 후 자동으로 롤백되는 안전한 데이터베이스 테스트 환경을 구성할 수 있습니다."
        },
        {
            "id": 35,
            "type": "multiple_choice",
            "difficulty": "advanced",
            "question": "테스트 더블 중에서 '실제 객체의 간단한 구현체'를 의미하는 것은?",
            "options": [
                "Mock",
                "Stub",
                "Fake",
                "Spy"
            ],
            "correct_answer": 2,
            "explanation": "Fake는 실제 객체의 간단한 작동하는 구현체입니다. 예를 들어, 인메모리 데이터베이스가 실제 데이터베이스의 Fake입니다."
        },
        {
            "id": 36,
            "type": "expert",
            "difficulty": "expert",
            "question": "마이크로서비스 아키텍처에서 서비스 간 통신을 테스트하는 전략을 설계하세요. Contract Testing과 End-to-End Testing을 모두 고려해야 합니다.",
            "correct_answer": "1. Contract Testing (Pact 등):\n   - Producer/Consumer 계약 정의\n   - API 스키마 검증\n   - 서비스별 독립적 테스트\n\n2. Component Testing:\n   - 외부 서비스 모킹\n   - 서비스 단위 통합 테스트\n\n3. End-to-End Testing:\n   - 전체 워크플로우 테스트\n   - 실제 환경과 유사한 테스트 환경\n   - 제한적 실행 (비용/시간 고려)\n\n4. 모니터링 기반 테스트:\n   - 프로덕션 환경 Health Check\n   - Canary 배포 테스트",
            "explanation": "마이크로서비스 환경에서는 다양한 레벨의 테스트 전략이 필요합니다."
        },
        {
            "id": 37,
            "type": "architecture",
            "difficulty": "expert",
            "question": "Legacy 코드베이스에 테스트를 도입하는 점진적 전략을 수립하세요. 기존 코드 변경을 최소화하면서 테스트 커버리지를 높여야 합니다.",
            "correct_answer": "1. Characterization Tests:\n   - 기존 동작 보존 테스트\n   - 입출력 중심 블랙박스 테스트\n\n2. Seam 식별:\n   - 테스트 가능한 진입점 찾기\n   - 의존성 주입 지점 생성\n\n3. 점진적 리팩토링:\n   - 테스트 작성 → 리팩토링 → 테스트 확장\n   - 안전한 변경 보장\n\n4. 우선순위 기반 접근:\n   - 비즈니스 크리티컬 코드 우선\n   - 변경 빈도 높은 코드 우선\n\n5. 도구 활용:\n   - 코드 커버리지 도구\n   - 정적 분석 도구\n   - 자동화된 리팩토링 도구",
            "explanation": "Legacy 코드에는 기존 시스템을 깨뜨리지 않으면서 점진적으로 개선하는 전략이 필요합니다."
        },
        {
            "id": 38,
            "type": "multiple_choice",
            "difficulty": "expert",
            "question": "Property-based Testing의 핵심 개념은 무엇인가요?",
            "options": [
                "특정 입력값으로 테스트",
                "속성과 불변조건으로 테스트",
                "성능 측정 중심 테스트",
                "UI 테스트 자동화"
            ],
            "correct_answer": 1,
            "explanation": "Property-based Testing은 특정 입력값 대신 데이터의 속성과 불변조건을 정의하여 자동으로 생성된 다양한 입력값으로 테스트합니다."
        },
        {
            "id": 39,
            "type": "comprehensive",
            "difficulty": "expert",
            "question": "대규모 팀에서 테스트 전략을 표준화하고 품질을 유지하는 방법을 제시하세요. 개발자 교육, 도구 선택, 프로세스 정의를 모두 포함해야 합니다.",
            "correct_answer": "1. 테스트 표준 정의:\n   - 테스트 작성 가이드라인\n   - 명명 규칙 및 구조 표준\n   - 커버리지 목표 설정\n\n2. 도구 표준화:\n   - 공통 테스트 프레임워크\n   - CI/CD 파이프라인 템플릿\n   - 코드 품질 도구 통합\n\n3. 교육 프로그램:\n   - TDD/BDD 워크숍\n   - 코드 리뷰 가이드라인\n   - 베스트 프랙티스 공유\n\n4. 품질 게이트:\n   - 코드 리뷰 체크리스트\n   - 자동화된 품질 검사\n   - 배포 전 테스트 요구사항\n\n5. 지속적 개선:\n   - 메트릭 수집 및 분석\n   - 회고 및 프로세스 개선\n   - 도구 및 기법 업데이트",
            "explanation": "대규모 팀에서는 일관성 있는 품질 관리를 위한 체계적인 접근이 필요합니다."
        },
        {
            "id": 40,
            "type": "reflection",
            "difficulty": "expert",
            "question": "테스팅과 디버깅에서 AI/ML 기반 도구들이 어떻게 활용될 수 있는지 미래 전망을 제시하세요.",
            "correct_answer": "1. 자동 테스트 생성:\n   - 코드 분석 기반 테스트 케이스 자동 생성\n   - 엣지 케이스 발견 AI\n\n2. 버그 예측 및 감지:\n   - 코드 패턴 분석으로 버그 위험도 예측\n   - 실시간 이상 탐지\n\n3. 테스트 최적화:\n   - 효과적인 테스트 선택 AI\n   - 테스트 실행 순서 최적화\n\n4. 자동 디버깅:\n   - 오류 원인 분석 및 수정 제안\n   - 코드 리뷰 자동화\n\n5. 품질 예측:\n   - 코드 품질 메트릭 예측\n   - 리팩토링 우선순위 제안\n\n도전과제: 오버엔지니어링 방지, 인간의 창의성과 균형",
            "explanation": "AI/ML은 테스팅 분야에서 자동화와 지능화를 통해 개발자 생산성을 크게 향상시킬 수 있습니다."
        }
    ]
}