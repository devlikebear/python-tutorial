{
    "quiz_info": {
        "title": "Chapter 1: 파이썬 내부 구조와 메모리 관리 퀴즈",
        "description": "CPython 인터프리터 내부 구조, 메모리 관리 메커니즘, 성능 최적화 기법에 대한 전문가 수준 퀴즈",
        "total_questions": 48,
        "time_limit": 65,
        "passing_score": 70,
        "difficulty_distribution": {
            "기본": 14,
            "중급": 18,
            "고급": 12,
            "전문가": 4
        }
    },
    "questions": [
        {
            "id": 1,
            "type": "multiple_choice",
            "difficulty": "기본",
            "question": "CPython 인터프리터에서 Python 소스 코드가 실행되는 과정의 올바른 순서는?",
            "options": [
                "소스 코드 → AST → 바이트코드 → 실행",
                "소스 코드 → 바이트코드 → AST → 실행",
                "소스 코드 → 컴파일 → 바이너리 → 실행",
                "소스 코드 → 토큰화 → 실행"
            ],
            "correct_answer": 0,
            "explanation": "CPython은 소스 코드를 먼저 AST(Abstract Syntax Tree)로 파싱한 후 바이트코드로 컴파일하여 가상 머신에서 실행합니다."
        },
        {
            "id": 2,
            "type": "multiple_choice",
            "difficulty": "기본",
            "question": "Python 바이트코드를 분석할 수 있는 표준 라이브러리 모듈은?",
            "options": [
                "inspect",
                "dis",
                "ast",
                "compile"
            ],
            "correct_answer": 1,
            "explanation": "dis 모듈은 Python 바이트코드를 분해하고 분석할 수 있는 도구를 제공합니다."
        },
        {
            "id": 3,
            "type": "multiple_choice",
            "difficulty": "기본",
            "question": "CPython에서 작은 정수(-5~256)의 메모리 관리 특징은?",
            "options": [
                "매번 새로운 객체를 생성",
                "미리 생성된 객체를 재사용",
                "가비지 컬렉션 대상에서 제외",
                "별도의 메모리 풀에서 관리"
            ],
            "correct_answer": 1,
            "explanation": "CPython은 작은 정수 범위(-5~256)에 대해 미리 생성된 객체를 재사용하여 메모리 효율성을 높입니다."
        },
        {
            "id": 4,
            "type": "true_false",
            "difficulty": "기본",
            "question": "Python의 가비지 컬렉터는 레퍼런스 카운팅과 순환 참조 탐지를 모두 사용합니다.",
            "correct_answer": true,
            "explanation": "CPython은 기본적으로 레퍼런스 카운팅을 사용하고, 추가로 순환 참조를 탐지하는 가비지 컬렉터를 운영합니다."
        },
        {
            "id": 5,
            "type": "multiple_choice",
            "difficulty": "기본",
            "question": "sys.getsizeof() 함수가 반환하는 값은?",
            "options": [
                "객체의 실제 메모리 사용량",
                "객체의 기본 크기만",
                "객체와 참조된 모든 객체의 크기",
                "객체의 타입 크기"
            ],
            "correct_answer": 1,
            "explanation": "sys.getsizeof()는 객체 자체의 기본 크기만 반환하며, 참조된 다른 객체들의 크기는 포함하지 않습니다."
        },
        {
            "id": 6,
            "type": "fill_blank",
            "difficulty": "기본",
            "question": "Python에서 메모리 할당과 사용량을 추적하는 표준 라이브러리 모듈은 _____입니다.",
            "correct_answer": "tracemalloc",
            "explanation": "tracemalloc 모듈은 Python의 메모리 할당을 추적하고 스냅샷을 생성하여 메모리 사용 패턴을 분석할 수 있게 해줍니다."
        },
        {
            "id": 7,
            "type": "multiple_choice",
            "difficulty": "기본",
            "question": "__slots__을 사용하는 주된 목적은?",
            "options": [
                "메서드 실행 속도 향상",
                "메모리 사용량 감소",
                "상속 구조 최적화",
                "가비지 컬렉션 성능 향상"
            ],
            "correct_answer": 1,
            "explanation": "__slots__은 인스턴스의 __dict__를 제거하여 메모리 사용량을 크게 줄일 수 있습니다."
        },
        {
            "id": 8,
            "type": "multiple_choice",
            "difficulty": "기본",
            "question": "Python의 가비지 컬렉션에서 세대(generation) 개념이 사용되는 이유는?",
            "options": [
                "메모리 할당 속도 향상",
                "오래된 객체는 살아남을 가능성이 높다는 가정",
                "멀티스레딩 성능 향상",
                "메모리 단편화 방지"
            ],
            "correct_answer": 1,
            "explanation": "세대별 가비지 컬렉션은 '오래 살아남은 객체는 계속 살아남을 가능성이 높다'는 약한 세대 가설을 기반으로 합니다."
        },
        {
            "id": 9,
            "type": "code",
            "difficulty": "기본",
            "question": "다음 코드의 결과는?\n```python\nimport sys\na = 256\nb = 256\nc = 257\nd = 257\nprint(id(a) == id(b), id(c) == id(d))\n```",
            "correct_answer": "True False",
            "explanation": "256은 작은 정수 범위(-5~256)에 속해 캐시된 객체를 재사용하지만, 257은 매번 새 객체를 생성합니다."
        },
        {
            "id": 10,
            "type": "multiple_choice",
            "difficulty": "기본",
            "question": "weakref 모듈의 주된 용도는?",
            "options": [
                "성능 최적화",
                "순환 참조 방지",
                "메모리 캐싱",
                "스레드 동기화"
            ],
            "correct_answer": 1,
            "explanation": "weakref는 객체에 대한 약한 참조를 생성하여 순환 참조를 방지하고 메모리 누수를 막는 데 사용됩니다."
        },
        {
            "id": 11,
            "type": "multiple_choice",
            "difficulty": "기본",
            "question": "cProfile 모듈의 주된 기능은?",
            "options": [
                "메모리 사용량 분석",
                "함수 호출 및 실행 시간 분석",
                "코드 커버리지 측정",
                "바이트코드 최적화"
            ],
            "correct_answer": 1,
            "explanation": "cProfile은 함수별 호출 횟수와 실행 시간을 측정하여 성능 병목점을 찾는 프로파일링 도구입니다."
        },
        {
            "id": 12,
            "type": "true_false",
            "difficulty": "기본",
            "question": "Python에서 문자열 인터닝(interning)은 모든 문자열에 대해 자동으로 수행됩니다.",
            "correct_answer": false,
            "explanation": "문자열 인터닝은 식별자로 사용될 수 있는 문자열에 대해서만 자동으로 수행되며, 일반 문자열은 intern() 함수를 명시적으로 사용해야 합니다."
        },
        {
            "id": 13,
            "type": "multiple_choice",
            "difficulty": "기본",
            "question": "리스트와 튜플의 메모리 사용량 차이의 주된 원인은?",
            "options": [
                "튜플의 불변성",
                "리스트의 동적 크기 조정 여유 공간",
                "튜플의 해시 가능성",
                "리스트의 메서드 오버헤드"
            ],
            "correct_answer": 1,
            "explanation": "리스트는 동적 크기 조정을 위해 여유 공간을 미리 할당하므로 같은 요소를 가진 튜플보다 더 많은 메모리를 사용합니다."
        },
        {
            "id": 14,
            "type": "multiple_choice",
            "difficulty": "기본",
            "question": "timeit 모듈을 사용하는 주된 이유는?",
            "options": [
                "메모리 사용량 측정",
                "정확한 실행 시간 측정",
                "코드 복잡도 분석",
                "동시성 성능 테스트"
            ],
            "correct_answer": 1,
            "explanation": "timeit은 반복 실행을 통해 평균 실행 시간을 정확히 측정하고, 다른 프로세스의 영향을 최소화합니다."
        },
        {
            "id": 15,
            "type": "bytecode_analysis",
            "difficulty": "중급",
            "question": "다음 함수의 바이트코드에서 LOAD_FAST와 STORE_FAST의 차이점은?\n```python\ndef example(x):\n    y = x + 1\n    return y\n```",
            "correct_answer": "LOAD_FAST는 지역 변수를 스택에 로드하고, STORE_FAST는 스택 값을 지역 변수에 저장합니다",
            "explanation": "LOAD_FAST는 지역 변수의 값을 평가 스택에 푸시하고, STORE_FAST는 스택의 최상단 값을 지역 변수에 저장합니다."
        },
        {
            "id": 16,
            "type": "memory_management",
            "difficulty": "중급",
            "question": "CPython의 메모리 할당자가 사용하는 Arena-Pool-Block 구조에서 각 레벨의 역할은?",
            "correct_answer": "Arena: 큰 메모리 블록 관리, Pool: 같은 크기 객체들의 그룹, Block: 개별 객체 저장 단위",
            "explanation": "Arena는 시스템에서 할당받은 큰 메모리 영역이고, Pool은 같은 크기의 객체들을 관리하며, Block은 실제 객체가 저장되는 최소 단위입니다."
        },
        {
            "id": 17,
            "type": "gc_analysis",
            "difficulty": "중급",
            "question": "gc.get_threshold() 함수가 반환하는 세 개의 값의 의미는?",
            "correct_answer": "각 세대(0, 1, 2)에서 가비지 컬렉션을 트리거하는 임계값",
            "explanation": "세대 0, 1, 2에 대한 가비지 컬렉션 임계값으로, 해당 세대의 객체 수가 임계값을 초과하면 컬렉션이 실행됩니다."
        },
        {
            "id": 18,
            "type": "object_model",
            "difficulty": "중급",
            "question": "Python 객체의 타입 객체에서 __basicsize__와 __itemsize__의 차이는?",
            "options": [
                "__basicsize__는 고정 크기, __itemsize__는 가변 크기 부분",
                "__basicsize__는 최소 크기, __itemsize__는 최대 크기",
                "__basicsize__는 메모리 크기, __itemsize__는 디스크 크기",
                "__basicsize__는 객체 크기, __itemsize__는 메서드 크기"
            ],
            "correct_answer": 0,
            "explanation": "__basicsize__는 객체의 기본 고정 크기이고, __itemsize__는 가변 길이 객체(리스트, 문자열 등)의 각 항목당 추가 크기입니다."
        },
        {
            "id": 19,
            "type": "frame_analysis",
            "difficulty": "중급",
            "question": "Python 프레임 객체에서 f_locals와 f_globals의 차이점과 수정 시 주의사항은?",
            "correct_answer": "f_locals는 지역 변수 딕셔너리, f_globals는 전역 변수 딕셔너리. f_locals 수정은 실제 변수에 반영되지 않을 수 있음",
            "explanation": "f_locals는 읽기 전용 스냅샷일 수 있어 수정이 실제 지역 변수에 반영되지 않지만, f_globals는 실제 전역 네임스페이스에 연결되어 있습니다."
        },
        {
            "id": 20,
            "type": "code",
            "difficulty": "중급",
            "question": "다음 코드에서 메모리 누수가 발생하는 이유는?\n```python\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.parent = None\n        self.children = []\n    \n    def add_child(self, child):\n        child.parent = self\n        self.children.append(child)\n```",
            "correct_answer": "부모-자식 간 순환 참조로 인해 가비지 컬렉션이 어려워짐",
            "explanation": "부모 노드가 자식을 참조하고 자식이 다시 부모를 참조하는 순환 참조 구조로, 적절히 해제하지 않으면 메모리 누수가 발생할 수 있습니다."
        },
        {
            "id": 21,
            "type": "optimization",
            "difficulty": "중급",
            "question": "리스트 컴프리헨션이 일반 for 루프보다 빠른 주된 이유는?",
            "options": [
                "C 레벨에서 최적화됨",
                "메모리 할당이 한 번에 수행됨",
                "바이트코드가 더 효율적임",
                "모든 답이 맞음"
            ],
            "correct_answer": 3,
            "explanation": "리스트 컴프리헨션은 C 레벨 최적화, 효율적인 메모리 할당, 최적화된 바이트코드 생성 등 여러 요인으로 성능이 향상됩니다."
        },
        {
            "id": 22,
            "type": "profiling",
            "difficulty": "중급",
            "question": "cProfile과 profile 모듈의 주된 차이점은?",
            "options": [
                "cProfile은 C로 구현되어 더 빠름",
                "profile은 더 많은 기능을 제공",
                "cProfile은 메모리도 측정",
                "profile은 더 정확한 측정"
            ],
            "correct_answer": 0,
            "explanation": "cProfile은 C로 구현된 확장 모듈로 profile보다 오버헤드가 적고 실행 속도가 빠릅니다."
        },
        {
            "id": 23,
            "type": "memory_optimization",
            "difficulty": "중급",
            "question": "제너레이터가 메모리 효율적인 이유는?",
            "correct_answer": "값을 필요할 때마다 생성하여 모든 값을 메모리에 동시에 저장하지 않음",
            "explanation": "제너레이터는 지연 평가(lazy evaluation)를 사용하여 값을 요청할 때마다 생성하므로, 전체 시퀀스를 메모리에 저장할 필요가 없습니다."
        },
        {
            "id": 24,
            "type": "string_optimization",
            "difficulty": "중급",
            "question": "문자열 연결에서 '+=' 연산보다 join()이 효율적인 이유는?",
            "correct_answer": "문자열의 불변성으로 인해 +=는 매번 새 문자열을 생성하지만, join()은 한 번에 연결함",
            "explanation": "문자열은 불변 객체이므로 += 연산은 매번 새로운 문자열 객체를 생성하지만, join()은 모든 문자열을 한 번에 연결하여 효율적입니다."
        },
        {
            "id": 25,
            "type": "cache_optimization",
            "difficulty": "중급",
            "question": "functools.lru_cache의 메모리 관리 전략은?",
            "options": [
                "LRU(Least Recently Used) 알고리즘 사용",
                "크기 제한으로 메모리 사용량 제어",
                "해시 테이블 기반 빠른 조회",
                "모든 답이 맞음"
            ],
            "correct_answer": 3,
            "explanation": "lru_cache는 LRU 알고리즘으로 가장 오래된 항목을 제거하고, maxsize로 크기를 제한하며, 해시 테이블로 빠른 조회를 제공합니다."
        },
        {
            "id": 26,
            "type": "weak_references",
            "difficulty": "중급",
            "question": "WeakValueDictionary와 일반 딕셔너리의 차이점은?",
            "correct_answer": "WeakValueDictionary는 값 객체가 다른 곳에서 참조되지 않으면 자동으로 제거됨",
            "explanation": "WeakValueDictionary는 값에 대해 약한 참조를 사용하여, 해당 객체가 다른 곳에서 참조되지 않으면 딕셔너리에서 자동으로 제거됩니다."
        },
        {
            "id": 27,
            "type": "data_structure_choice",
            "difficulty": "중급",
            "question": "대량의 정수를 저장할 때 list 대신 array.array를 사용하는 이유는?",
            "correct_answer": "array.array는 동일한 타입의 데이터를 더 컴팩트하게 저장하여 메모리 효율성이 높음",
            "explanation": "array.array는 C 배열과 유사하게 동일한 타입의 데이터를 연속된 메모리에 저장하여 Python 객체의 오버헤드를 줄입니다."
        },
        {
            "id": 28,
            "type": "concurrent_optimization",
            "difficulty": "중급",
            "question": "I/O 집약적 작업에서 멀티스레딩이 CPU 집약적 작업보다 효과적인 이유는?",
            "correct_answer": "I/O 대기 시간 동안 다른 스레드가 실행될 수 있어 GIL의 영향을 덜 받음",
            "explanation": "I/O 작업 중에는 GIL이 해제되어 다른 스레드가 실행될 수 있지만, CPU 집약적 작업에서는 GIL로 인해 진정한 병렬 처리가 어렵습니다."
        },
        {
            "id": 29,
            "type": "memory_layout",
            "difficulty": "중급",
            "question": "행 우선(row-major) 접근이 열 우선(column-major) 접근보다 빠른 이유는?",
            "correct_answer": "메모리 지역성(locality) 때문에 캐시 미스가 적게 발생함",
            "explanation": "행 우선 접근은 연속된 메모리 위치를 순차적으로 접근하여 CPU 캐시의 지역성을 활용할 수 있어 성능이 향상됩니다."
        },
        {
            "id": 30,
            "type": "object_pooling",
            "difficulty": "중급",
            "question": "객체 풀링 패턴이 효과적인 시나리오는?",
            "options": [
                "객체 생성 비용이 높은 경우",
                "객체가 자주 생성/해제되는 경우",
                "메모리 단편화를 줄이고 싶은 경우",
                "모든 답이 맞음"
            ],
            "correct_answer": 3,
            "explanation": "객체 풀링은 생성 비용이 높거나 자주 생성/해제되는 객체, 메모리 단편화 방지가 필요한 모든 상황에서 유용합니다."
        },
        {
            "id": 31,
            "type": "lazy_loading",
            "difficulty": "중급",
            "question": "지연 로딩(lazy loading) 패턴의 주된 장점은?",
            "correct_answer": "필요할 때까지 리소스 로딩을 지연하여 초기 메모리 사용량과 시작 시간을 줄임",
            "explanation": "지연 로딩은 실제로 필요한 시점까지 무거운 작업이나 메모리 할당을 지연하여 초기 성능을 향상시킵니다."
        },
        {
            "id": 32,
            "type": "tracemalloc_usage",
            "difficulty": "중급",
            "question": "tracemalloc.take_snapshot()으로 생성한 스냅샷을 비교할 때 주의할 점은?",
            "correct_answer": "스냅샷 간 메모리 차이를 정확히 비교하려면 가비지 컬렉션을 수행한 후 촬영해야 함",
            "explanation": "정확한 메모리 사용량 비교를 위해서는 스냅샷 촬영 전에 gc.collect()를 호출하여 불필요한 객체를 정리해야 합니다."
        },
        {
            "id": 33,
            "type": "interpreter_internals",
            "difficulty": "고급",
            "question": "CPython의 바이트코드 인터프리터가 스택 기반 머신인 이유와 장점은?",
            "correct_answer": "스택 기반 설계는 구현이 단순하고, 중간 결과 저장이 용이하며, 표현식 평가가 자연스러움",
            "explanation": "스택 기반 가상 머신은 레지스터 기반에 비해 구현이 간단하고, 표현식의 중간 결과를 스택에 자연스럽게 저장할 수 있습니다."
        },
        {
            "id": 34,
            "type": "memory_allocator",
            "difficulty": "고급",
            "question": "CPython의 PyMalloc 할당자가 시스템 malloc보다 효율적인 이유는?",
            "correct_answer": "작은 객체에 특화된 풀 기반 할당, 메모리 단편화 감소, 할당/해제 속도 향상",
            "explanation": "PyMalloc은 작은 객체(<512바이트)에 최적화된 풀 기반 메모리 할당자로, 단편화를 줄이고 할당 속도를 향상시킵니다."
        },
        {
            "id": 35,
            "type": "gc_cycles",
            "difficulty": "고급",
            "question": "Python의 순환 참조 탐지 알고리즘의 핵심 아이디어는?",
            "correct_answer": "모든 컨테이너 객체의 참조 카운트를 감소시켜 0이 되는 객체들을 순환 참조로 판단",
            "explanation": "순환 참조 탐지는 각 컨테이너 객체가 참조하는 다른 객체들의 참조 카운트를 가상으로 감소시켜 순환 구조를 찾아냅니다."
        },
        {
            "id": 36,
            "type": "code_objects",
            "difficulty": "고급",
            "question": "Python 코드 객체의 co_flags 필드에서 확인할 수 있는 정보는?",
            "correct_answer": "함수의 특성(제너레이터, 코루틴, *args, **kwargs 사용 여부 등)에 대한 비트 플래그",
            "explanation": "co_flags는 함수가 제너레이터인지, 코루틴인지, 가변 인수를 사용하는지 등의 메타 정보를 비트 플래그로 저장합니다."
        },
        {
            "id": 37,
            "type": "performance_analysis",
            "difficulty": "고급",
            "question": "병목점 분석 시 cProfile과 line_profiler, memory_profiler를 함께 사용하는 이유는?",
            "correct_answer": "각각 함수 레벨, 라인 레벨, 메모리 사용량을 측정하여 다각도로 성능을 분석",
            "explanation": "cProfile은 함수별 전체 성능을, line_profiler는 라인별 상세 분석을, memory_profiler는 메모리 사용 패턴을 제공하여 종합적인 분석이 가능합니다."
        },
        {
            "id": 38,
            "type": "optimization_strategy",
            "difficulty": "고급",
            "question": "대용량 데이터 처리 시 메모리 효율성을 위한 고급 전략은?",
            "correct_answer": "스트리밍 처리, 청킹, 제너레이터 체인, 메모리 맵핑, 압축 등을 조합하여 사용",
            "explanation": "대용량 데이터는 한 번에 로드하지 않고 스트리밍이나 청킹으로 처리하며, 제너레이터와 메모리 맵핑 등을 활용합니다."
        },
        {
            "id": 39,
            "type": "custom_allocator",
            "difficulty": "고급",
            "question": "특정 애플리케이션을 위한 커스텀 메모리 할당자 설계 시 고려사항은?",
            "correct_answer": "할당 패턴 분석, 단편화 최소화, 스레드 안전성, 디버깅 지원, 성능 모니터링",
            "explanation": "커스텀 할당자는 애플리케이션의 메모리 사용 패턴을 분석하고, 단편화를 줄이며, 멀티스레딩 환경에서의 안전성을 보장해야 합니다."
        },
        {
            "id": 40,
            "type": "interpreter_optimization",
            "difficulty": "고급",
            "question": "CPython 인터프리터의 성능 한계와 개선 방향은?",
            "correct_answer": "GIL 제거, JIT 컴파일, 바이트코드 최적화, 타입 특화 등이 주요 개선 방향",
            "explanation": "CPython의 주요 성능 제약은 GIL과 인터프리터 오버헤드이며, PyPy의 JIT이나 타입 정보 활용 등이 개선 방향입니다."
        },
        {
            "id": 41,
            "type": "memory_debugging",
            "difficulty": "고급",
            "question": "프로덕션 환경에서 메모리 누수를 탐지하고 디버깅하는 고급 기법은?",
            "correct_answer": "정기적 스냅샷 수집, 객체 증가 패턴 분석, 프로파일링 데이터 시각화, A/B 테스트",
            "explanation": "프로덕션 환경에서는 정기적인 메모리 스냅샷을 수집하고, 객체 생성/해제 패턴을 분석하여 누수를 탐지합니다."
        },
        {
            "id": 42,
            "type": "concurrent_gc",
            "difficulty": "고급",
            "question": "멀티스레드 환경에서 가비지 컬렉션의 동기화 이슈와 해결 방안은?",
            "correct_answer": "GIL을 통한 동기화, 세대별 수집 시 일시 정지, 증분적 컬렉션 기법 사용",
            "explanation": "멀티스레드 환경에서 GC는 모든 스레드를 일시 정지시키고 동기화하여 안전하게 수행되며, 정지 시간을 최소화하는 기법들이 사용됩니다."
        },
        {
            "id": 43,
            "type": "architecture_design",
            "difficulty": "전문가",
            "question": "대규모 Python 애플리케이션의 메모리 아키텍처 설계 원칙은?",
            "correct_answer": "계층화된 메모리 관리, 풀링 전략, 캐시 계층 구조, 모니터링 및 알람 시스템, 백프레셔 메커니즘",
            "explanation": "대규모 시스템에서는 메모리를 계층적으로 관리하고, 다양한 풀링 전략과 캐시를 활용하며, 실시간 모니터링과 백프레셔 제어가 필요합니다."
        },
        {
            "id": 44,
            "type": "future_trends",
            "difficulty": "전문가",
            "question": "Python 성능 최적화의 미래 트렌드와 기술 방향은?",
            "correct_answer": "JIT 컴파일러 발전, 타입 힌트 활용 최적화, 병렬 GC, WASM 지원, AI 기반 최적화",
            "explanation": "미래의 Python은 JIT 컴파일러 개선, 정적 타입 정보 활용, 병렬 가비지 컬렉션, WebAssembly 지원, AI를 활용한 자동 최적화 등이 주요 발전 방향입니다."
        },
        {
            "id": 45,
            "type": "cross_platform",
            "difficulty": "전문가",
            "question": "다양한 플랫폼(Windows, Linux, macOS)에서 Python 메모리 관리의 차이점과 최적화 전략은?",
            "correct_answer": "가상 메모리 시스템 차이, 페이지 크기 최적화, OS별 메모리 할당자 특성 활용, 플랫폼별 프로파일링",
            "explanation": "각 OS마다 가상 메모리 관리 방식이 다르므로, 플랫폼별 특성을 이해하고 최적화된 메모리 전략을 수립해야 합니다."
        },
        {
            "id": 46,
            "type": "distributed_systems",
            "difficulty": "전문가",
            "question": "분산 Python 애플리케이션에서 메모리 최적화 고려사항은?",
            "correct_answer": "노드 간 메모리 사용량 균형, 분산 캐싱, 직렬화 최적화, 네트워크 오버헤드 최소화, 장애 격리",
            "explanation": "분산 환경에서는 노드 간 메모리 부하 균형, 효율적인 직렬화/역직렬화, 분산 캐시 전략, 장애 시 격리 등을 고려해야 합니다."
        },
        {
            "id": 47,
            "type": "performance_philosophy",
            "difficulty": "전문가",
            "question": "성능 최적화 시 '조기 최적화는 만악의 근원'이라는 원칙의 올바른 해석과 적용 방법은?",
            "correct_answer": "측정 없는 최적화를 피하고, 병목점 식별 후 단계적 최적화, 가독성과 성능의 균형, 비즈니스 가치 중심 접근",
            "explanation": "조기 최적화 방지는 측정 기반 최적화의 중요성을 강조하며, 실제 병목점을 찾아 비즈니스 가치와 균형을 맞춰 최적화해야 합니다."
        },
        {
            "id": 48,
            "type": "holistic_optimization",
            "difficulty": "전문가",
            "question": "Python 애플리케이션의 전체적(holistic) 성능 최적화 접근 방법론은?",
            "correct_answer": "프로파일링 기반 현황 분석, 아키텍처 레벨 설계, 알고리즘 최적화, 시스템 레벨 튜닝, 지속적 모니터링 및 개선",
            "explanation": "전체적 최적화는 코드부터 시스템까지 모든 레벨을 고려하며, 측정-분석-개선의 지속적인 사이클을 통해 전체 성능을 향상시킵니다."
        }
    ]
}