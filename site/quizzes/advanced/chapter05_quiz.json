{
    "chapter": 5,
    "title": "네트워킹과 소켓 프로그래밍",
    "total_questions": 25,
    "questions": [
        {
            "id": 1,
            "type": "multiple_choice",
            "difficulty": "basic",
            "question": "소켓 프로그래밍에서 TCP_NODELAY 옵션의 목적은 무엇인가요?",
            "options": [
                "연결 재사용을 가능하게 함",
                "Nagle 알고리즘을 비활성화하여 지연시간 감소",
                "소켓 버퍼 크기를 증가시킴",
                "동시 연결 수를 제한함"
            ],
            "correct": 1,
            "explanation": "TCP_NODELAY는 Nagle 알고리즘을 비활성화하여 작은 패킷을 즉시 전송하도록 하여 지연시간을 줄입니다."
        },
        {
            "id": 2,
            "type": "multiple_choice",
            "difficulty": "basic",
            "question": "NetworkMessage 클래스에서 메시지 직렬화 시 헤더에 포함되는 정보는?",
            "options": [
                "메시지 타입",
                "전송 시간",
                "메시지 길이",
                "송신자 ID"
            ],
            "correct": 2,
            "explanation": "메시지 직렬화 시 4바이트 헤더에는 메시지 본문의 길이 정보가 빅엔디안 형태로 저장됩니다."
        },
        {
            "id": 3,
            "type": "multiple_choice",
            "difficulty": "basic",
            "question": "SocketPool에서 소켓 재사용의 주요 이점은?",
            "options": [
                "메모리 사용량 감소",
                "소켓 생성 오버헤드 감소",
                "네트워크 대역폭 절약",
                "보안 강화"
            ],
            "correct": 1,
            "explanation": "소켓 풀을 사용하면 새로운 소켓 생성과 해제에 드는 시스템 리소스 오버헤드를 줄일 수 있습니다."
        },
        {
            "id": 4,
            "type": "multiple_choice",
            "difficulty": "basic",
            "question": "UDP 서버와 TCP 서버의 주요 차이점은?",
            "options": [
                "UDP는 연결 지향적이다",
                "TCP는 신뢰성 있는 전송을 보장한다",
                "UDP는 오류 검출을 수행하지 않는다",
                "TCP는 브로드캐스트를 지원한다"
            ],
            "correct": 1,
            "explanation": "TCP는 연결 지향적이며 패킷 순서 보장, 오류 검출 및 복구 등을 통해 신뢰성 있는 전송을 보장합니다."
        },
        {
            "id": 5,
            "type": "multiple_choice",
            "difficulty": "basic",
            "question": "비동기 네트워킹에서 StreamReader와 StreamWriter의 역할은?",
            "options": [
                "파일 입출력 처리",
                "네트워크 스트림 읽기/쓰기 추상화",
                "데이터베이스 연결 관리",
                "메모리 스트림 처리"
            ],
            "correct": 1,
            "explanation": "StreamReader와 StreamWriter는 네트워크 연결을 통한 데이터 읽기와 쓰기를 추상화한 비동기 인터페이스입니다."
        },
        {
            "id": 6,
            "type": "multiple_choice",
            "difficulty": "basic",
            "question": "HTTP 요청 파싱에서 쿠키 정보는 어떤 헤더에서 추출하나요?",
            "options": [
                "Set-Cookie",
                "Cookie",
                "Authorization",
                "Session"
            ],
            "correct": 1,
            "explanation": "클라이언트가 서버로 보내는 쿠키 정보는 'Cookie' 헤더에 포함되어 전송됩니다."
        },
        {
            "id": 7,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "AsyncIO에서 미들웨어 패턴의 주요 용도는?",
            "options": [
                "데이터베이스 연결 관리",
                "횡단 관심사(로깅, 인증 등) 처리",
                "메모리 최적화",
                "에러 처리"
            ],
            "correct": 1,
            "explanation": "미들웨어는 로깅, 인증, 속도 제한 등의 횡단 관심사를 모듈화하여 처리하는 패턴입니다."
        },
        {
            "id": 8,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "비동기 서버에서 약한 참조(WeakSet) 사용의 이유는?",
            "options": [
                "성능 향상",
                "메모리 누수 방지",
                "보안 강화",
                "동시성 제어"
            ],
            "correct": 1,
            "explanation": "약한 참조를 사용하면 클라이언트 객체가 다른 곳에서 참조되지 않을 때 자동으로 가비지 컬렉션되어 메모리 누수를 방지합니다."
        },
        {
            "id": 9,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "HTTP 라우터에서 와일드카드 패턴 매칭의 예시는?",
            "options": [
                "/api/:id",
                "/static/*",
                "/user/{id}",
                "/path/[param]"
            ],
            "correct": 1,
            "explanation": "구현된 라우터에서는 '/static/*' 형태로 와일드카드 패턴을 지원하여 정적 파일 서빙을 처리합니다."
        },
        {
            "id": 10,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "AsyncNetworkMessage에서 correlation_id의 주요 용도는?",
            "options": [
                "메시지 암호화",
                "요청-응답 매칭",
                "메시지 압축",
                "오류 검출"
            ],
            "correct": 1,
            "explanation": "correlation_id는 비동기 환경에서 특정 요청에 대한 응답을 식별하고 매칭하는 데 사용됩니다."
        },
        {
            "id": 11,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "HTTP 서버에서 정적 파일 서빙 시 보안 고려사항은?",
            "options": [
                "파일 압축",
                "디렉토리 트래버설 공격 방지",
                "캐싱 최적화",
                "대역폭 제한"
            ],
            "correct": 1,
            "explanation": "'..' 같은 경로를 통한 디렉토리 트래버설 공격을 방지하여 허용되지 않은 파일에 접근하는 것을 막아야 합니다."
        },
        {
            "id": 12,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "비동기 브로드캐스트에서 asyncio.gather의 역할은?",
            "options": [
                "순차적 메시지 전송",
                "병렬 메시지 전송 및 결과 수집",
                "메시지 큐잉",
                "에러 복구"
            ],
            "correct": 1,
            "explanation": "asyncio.gather는 여러 비동기 작업을 병렬로 실행하고 모든 결과를 수집하여 효율적인 브로드캐스트를 가능하게 합니다."
        },
        {
            "id": 13,
            "type": "multiple_choice",
            "difficulty": "intermediate",
            "question": "소켓 콜백 시스템에서 오류 처리 방식은?",
            "options": [
                "오류 발생 시 프로그램 종료",
                "try-catch로 콜백 예외 격리",
                "오류 무시",
                "자동 재시도"
            ],
            "correct": 1,
            "explanation": "콜백 실행 중 발생하는 예외는 try-catch로 격리하여 메인 프로그램 흐름에 영향을 주지 않도록 처리합니다."
        },
        {
            "id": 14,
            "type": "multiple_choice",
            "difficulty": "advanced",
            "question": "고성능 네트워킹에서 SO_REUSEADDR 옵션의 중요성은?",
            "options": [
                "포트 재사용으로 서버 재시작 시간 단축",
                "동시 연결 수 증가",
                "데이터 전송 속도 향상",
                "메모리 사용량 감소"
            ],
            "correct": 0,
            "explanation": "SO_REUSEADDR는 TIME_WAIT 상태의 소켓이 바인딩된 포트를 즉시 재사용할 수 있게 하여 서버 재시작을 빠르게 합니다."
        },
        {
            "id": 15,
            "type": "multiple_choice",
            "difficulty": "advanced",
            "question": "TCP 서버에서 ThreadPoolExecutor 사용의 이점은?",
            "options": [
                "메모리 사용량 감소",
                "스레드 생성 오버헤드 제어",
                "네트워크 지연 감소",
                "프로토콜 호환성 향상"
            ],
            "correct": 1,
            "explanation": "ThreadPoolExecutor는 스레드 풀을 사용하여 클라이언트마다 새 스레드를 생성하는 오버헤드를 줄이고 동시 처리를 제한합니다."
        },
        {
            "id": 16,
            "type": "multiple_choice",
            "difficulty": "advanced",
            "question": "AsyncIO의 run_in_executor 사용 목적은?",
            "options": [
                "비동기 함수 최적화",
                "CPU 집약적 작업을 별도 스레드에서 실행",
                "메모리 관리 최적화",
                "네트워크 I/O 가속화"
            ],
            "correct": 1,
            "explanation": "run_in_executor는 CPU 집약적인 동기 작업을 별도 스레드풀에서 실행하여 이벤트 루프를 차단하지 않게 합니다."
        },
        {
            "id": 17,
            "type": "multiple_choice",
            "difficulty": "advanced",
            "question": "HTTP 응답에서 MIME 타입 자동 감지의 장점은?",
            "options": [
                "보안 강화",
                "클라이언트 렌더링 최적화",
                "네트워크 효율성",
                "서버 성능 향상"
            ],
            "correct": 1,
            "explanation": "올바른 MIME 타입을 제공하면 브라우저가 파일을 적절히 처리하고 렌더링할 수 있어 사용자 경험이 향상됩니다."
        },
        {
            "id": 18,
            "type": "multiple_choice",
            "difficulty": "advanced",
            "question": "UDP 서버에서 클라이언트 추적 시 last_seen 타임스탬프의 용도는?",
            "options": [
                "메시지 순서 보장",
                "비활성 클라이언트 정리",
                "데이터 무결성 검증",
                "로드 밸런싱"
            ],
            "correct": 1,
            "explanation": "UDP는 연결이 없으므로 last_seen 타임스탬프로 일정 시간 이상 비활성 상태인 클라이언트를 식별하고 정리합니다."
        },
        {
            "id": 19,
            "type": "code_analysis",
            "difficulty": "advanced",
            "question": "다음 소켓 버퍼 관리 코드에서 잠재적 문제점을 분석하세요:\n\n```python\ndef receive_message(self):\n    while len(self.buffer) < 4:\n        chunk = self.socket.recv(1024)\n        self.buffer += chunk\n    msg_length = struct.unpack('>I', self.buffer[:4])[0]\n    # 메시지 본문 읽기\n    return parse_message(self.buffer[4:4+msg_length])\n```",
            "options": [
                "recv()가 빈 데이터를 반환할 경우 무한 루프",
                "버퍼 크기 제한 없음",
                "메시지 경계 처리 부족",
                "모든 문제점 해당"
            ],
            "correct": 3,
            "explanation": "recv()가 빈 데이터 반환 시 무한루프, 버퍼 크기 제한 없어 메모리 공격 가능, 메시지 경계 처리 부족으로 데이터 손실 가능성이 있습니다."
        },
        {
            "id": 20,
            "type": "code_analysis",
            "difficulty": "expert",
            "question": "고성능 웹 서버 설계에서 고려해야 할 핵심 요소들은?",
            "options": [
                "단일 스레드 처리만 사용",
                "이벤트 기반 I/O, 연결 풀링, 비동기 처리, 캐싱",
                "동기식 블로킹 I/O 우선 사용",
                "메모리 사용량 무시하고 성능 우선"
            ],
            "correct": 1,
            "explanation": "고성능 웹 서버는 이벤트 기반 논블로킹 I/O, 연결 풀링, 비동기 처리, 효율적인 캐싱 전략을 조합하여 구현해야 합니다."
        },
        {
            "id": 21,
            "type": "design_question",
            "difficulty": "expert",
            "question": "마이크로서비스 환경에서 서비스 간 통신 최적화 전략은?",
            "options": [
                "모든 통신을 HTTP REST로 통일",
                "프로토콜 다양화, 회로 차단기, 타임아웃, 재시도, 백프레셔",
                "TCP만 사용하여 단순화",
                "동기식 통신만 사용"
            ],
            "correct": 1,
            "explanation": "마이크로서비스에서는 상황에 맞는 프로토콜 선택, 회로 차단기 패턴, 적절한 타임아웃과 재시도, 백프레셔 제어가 중요합니다."
        },
        {
            "id": 22,
            "type": "performance_analysis",
            "difficulty": "expert",
            "question": "네트워크 애플리케이션에서 메모리 사용량 최적화 방법은?",
            "options": [
                "무제한 버퍼 크기 사용",
                "객체 풀링, 스트리밍 처리, 압축, 적응형 버퍼 크기",
                "모든 데이터를 메모리에 로드",
                "가비지 컬렉션 비활성화"
            ],
            "correct": 1,
            "explanation": "객체 풀링으로 할당 오버헤드 감소, 스트리밍으로 대용량 데이터 처리, 압축으로 메모리 절약, 적응형 버퍼로 효율성 향상이 필요합니다."
        },
        {
            "id": 23,
            "type": "troubleshooting",
            "difficulty": "expert",
            "question": "분산 시스템에서 네트워크 분할(Network Partition) 상황 대응 전략은?",
            "options": [
                "시스템 완전 중단",
                "CAP 정리 기반 일관성 vs 가용성 선택, 상태 복제, 합의 알고리즘",
                "모든 요청 거부",
                "데이터 무결성 무시"
            ],
            "correct": 1,
            "explanation": "네트워크 분할 시 CAP 정리에 따라 일관성 또는 가용성을 선택하고, 상태 복제와 합의 알고리즘으로 시스템 안정성을 유지해야 합니다."
        },
        {
            "id": 24,
            "type": "security",
            "difficulty": "expert",
            "question": "네트워크 서버 보안에서 중요한 고려사항은?",
            "options": [
                "포트 숨기기만으로 충분",
                "입력 검증, 속도 제한, TLS, DDoS 방어, 최소 권한",
                "방화벽만 설정",
                "보안보다 성능 우선"
            ],
            "correct": 1,
            "explanation": "네트워크 서버는 모든 입력 검증, 속도 제한, TLS 암호화, DDoS 방어, 최소 권한 원칙 등 다층 보안 전략이 필요합니다."
        },
        {
            "id": 25,
            "type": "architecture",
            "difficulty": "expert",
            "question": "실시간 대규모 트래픽 처리를 위한 네트워크 아키텍처 설계 원칙은?",
            "options": [
                "단일 서버로 모든 처리",
                "수평 확장, 로드 밸런싱, 캐싱 계층, 비동기 처리, 모니터링",
                "수직 확장만 사용",
                "데이터베이스 직접 연결"
            ],
            "correct": 1,
            "explanation": "대규모 트래픽 처리를 위해서는 수평 확장 가능한 아키텍처, 효율적인 로드 밸런싱, 다계층 캐싱, 비동기 처리, 실시간 모니터링이 필수입니다."
        }
    ]
}