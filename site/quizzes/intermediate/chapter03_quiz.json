{
    "quiz_info": {
        "title": "Chapter 3: 정규표현식 (Regular Expressions)",
        "chapter": 3,
        "level": "intermediate",
        "total_questions": 35,
        "estimated_time": "70분",
        "passing_score": 25,
        "description": "정규표현식의 기본 문법, re 모듈 활용, 그룹화, 고급 기법 및 실무 활용에 대한 종합 평가"
    },
    "learning_objectives": [
        "정규표현식 기본 문법과 메타 문자 이해",
        "re 모듈의 다양한 함수 활용 능력",
        "그룹화와 캡처 기법 습득",
        "고급 정규표현식 패턴 작성 능력",
        "실무에서의 정규표현식 활용 능력"
    ],
    "questions": [
        {
            "id": 1,
            "type": "multiple_choice",
            "question": "정규표현식에서 . (점) 메타 문자의 의미는?",
            "options": [
                "공백 문자",
                "숫자",
                "임의의 한 문자 (개행문자 제외)",
                "단어 문자"
            ],
            "correct_answer": 2,
            "explanation": ". (점)은 개행문자를 제외한 임의의 한 문자와 매칭됩니다.",
            "difficulty": "easy"
        },
        {
            "id": 2,
            "type": "multiple_choice",
            "question": "정규표현식에서 \\d는 무엇을 나타내나요?",
            "options": [
                "문자 d",
                "숫자 (0-9)",
                "공백",
                "단어의 끝"
            ],
            "correct_answer": 1,
            "explanation": "\\d는 숫자 0-9와 매칭되는 문자 클래스입니다.",
            "difficulty": "easy"
        },
        {
            "id": 3,
            "type": "multiple_choice",
            "question": "+ 수량자의 의미는?",
            "options": [
                "0개 또는 1개",
                "1개 이상",
                "0개 이상",
                "정확히 1개"
            ],
            "correct_answer": 1,
            "explanation": "+ 수량자는 앞의 패턴이 1개 이상 반복될 때 매칭됩니다.",
            "difficulty": "easy"
        },
        {
            "id": 4,
            "type": "code_output",
            "question": "다음 코드의 실행 결과는?\n\n```python\nimport re\ntext = \"hello123world456\"\nresult = re.findall(r'\\d+', text)\nprint(result)\n```",
            "options": [
                "['1', '2', '3', '4', '5', '6']",
                "['123', '456']",
                "['hello', 'world']",
                "[]"
            ],
            "correct_answer": 1,
            "explanation": "\\d+는 연속된 숫자들을 찾아 ['123', '456']을 반환합니다.",
            "difficulty": "easy"
        },
        {
            "id": 5,
            "type": "multiple_choice",
            "question": "re.search()와 re.match()의 차이점은?",
            "options": [
                "차이가 없다",
                "search는 전체 문자열에서 찾고, match는 시작부분에서만 찾는다",
                "match는 전체 문자열에서 찾고, search는 시작부분에서만 찾는다",
                "search는 첫 번째만 찾고, match는 모든 것을 찾는다"
            ],
            "correct_answer": 1,
            "explanation": "re.search()는 문자열 전체에서 패턴을 찾지만, re.match()는 문자열 시작부분에서만 매칭을 시도합니다.",
            "difficulty": "medium"
        },
        {
            "id": 6,
            "type": "practical_coding",
            "question": "이메일 주소의 형식을 검증하는 정규표현식을 작성하세요. (기본 형식: username@domain.extension)",
            "sample_answer": "```python\nimport re\n\nemail_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n\ndef validate_email(email):\n    return bool(re.match(email_pattern, email))\n\n# 테스트\ntest_emails = [\n    'user@example.com',  # True\n    'test.email@domain.org',  # True\n    'invalid-email',  # False\n    'user@',  # False\n    '@domain.com'  # False\n]\n\nfor email in test_emails:\n    print(f\"{email}: {validate_email(email)}\")\n```",
            "difficulty": "medium"
        },
        {
            "id": 7,
            "type": "multiple_choice",
            "question": "[^abc] 패턴의 의미는?",
            "options": [
                "a, b, c 중 하나",
                "a, b, c가 아닌 문자",
                "^, a, b, c 중 하나",
                "문자열의 시작"
            ],
            "correct_answer": 1,
            "explanation": "[^abc]는 부정 문자 클래스로 a, b, c가 아닌 모든 문자와 매칭됩니다.",
            "difficulty": "medium"
        },
        {
            "id": 8,
            "type": "code_output",
            "question": "다음 코드의 결과는?\n\n```python\nimport re\ntext = \"010-1234-5678\"\npattern = r'(\\d{3})-(\\d{4})-(\\d{4})'\nmatch = re.match(pattern, text)\nif match:\n    print(match.groups())\n```",
            "options": [
                "('010', '1234', '5678')",
                "['010', '1234', '5678']",
                "('010-1234-5678',)",
                "None"
            ],
            "correct_answer": 0,
            "explanation": "그룹화된 패턴의 각 그룹이 튜플 형태로 반환됩니다.",
            "difficulty": "medium"
        },
        {
            "id": 9,
            "type": "multiple_choice",
            "question": "re.sub() 함수의 역할은?",
            "options": [
                "패턴을 찾아서 삭제",
                "패턴을 찾아서 치환",
                "패턴을 찾아서 분할",
                "패턴의 개수 세기"
            ],
            "correct_answer": 1,
            "explanation": "re.sub()는 패턴과 매칭되는 부분을 지정된 문자열로 치환합니다.",
            "difficulty": "easy"
        },
        {
            "id": 10,
            "type": "practical_coding",
            "question": "한국 휴대폰 번호 형식(010-XXXX-XXXX)을 검증하는 함수를 작성하세요.",
            "sample_answer": "```python\nimport re\n\ndef validate_korean_mobile(phone):\n    # 한국 휴대폰 번호: 010, 011, 016, 017, 018, 019로 시작\n    pattern = r'^01[016789]-\\d{3,4}-\\d{4}$'\n    return bool(re.match(pattern, phone))\n\n# 또는 더 상세한 패턴\ndef validate_mobile_detailed(phone):\n    pattern = r'^(010|011|016|017|018|019)-(\\d{3,4})-(\\d{4})$'\n    match = re.match(pattern, phone)\n    if match:\n        return True, match.groups()\n    return False, None\n\n# 테스트\ntest_numbers = [\n    '010-1234-5678',  # True\n    '011-123-4567',   # True\n    '02-123-4567',    # False (지역번호)\n    '010-12-3456'     # False (잘못된 형식)\n]\n\nfor number in test_numbers:\n    print(f\"{number}: {validate_korean_mobile(number)}\")\n```",
            "difficulty": "medium"
        },
        {
            "id": 11,
            "type": "multiple_choice",
            "question": "정규표현식에서 ^ 기호의 의미는?",
            "options": [
                "문자열의 끝",
                "문자열의 시작",
                "NOT 연산",
                "XOR 연산"
            ],
            "correct_answer": 1,
            "explanation": "^는 문자열의 시작을 나타내는 앵커입니다. 단, [^] 안에서는 부정의 의미입니다.",
            "difficulty": "easy"
        },
        {
            "id": 12,
            "type": "multiple_choice",
            "question": "명명된 그룹(Named Group)의 문법은?",
            "options": [
                "(?<name>pattern)",
                "(?P<name>pattern)",
                "(?name:pattern)",
                "(name:pattern)"
            ],
            "correct_answer": 1,
            "explanation": "파이썬에서 명명된 그룹은 (?P<name>pattern) 형식으로 작성합니다.",
            "difficulty": "medium"
        },
        {
            "id": 13,
            "type": "code_analysis",
            "question": "다음 패턴의 의미를 설명하세요: r'(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*])[A-Za-z\\d!@#$%^&*]{8,}'",
            "options": [
                "8자 이상의 문자열",
                "소문자, 대문자, 숫자, 특수문자를 모두 포함한 8자 이상의 강한 비밀번호",
                "영문자와 숫자만 포함한 문자열",
                "특수문자만 포함한 문자열"
            ],
            "correct_answer": 1,
            "explanation": "이는 강한 비밀번호 패턴으로, 소문자, 대문자, 숫자, 특수문자를 모두 포함하면서 8자 이상이어야 합니다.",
            "difficulty": "hard"
        },
        {
            "id": 14,
            "type": "practical_coding",
            "question": "문자열에서 모든 HTML 태그를 제거하는 함수를 정규표현식으로 작성하세요.",
            "sample_answer": "```python\nimport re\n\ndef remove_html_tags(text):\n    # HTML 태그 패턴: < 로 시작해서 > 로 끝나는 모든 것\n    html_pattern = r'<[^>]+>'\n    clean_text = re.sub(html_pattern, '', text)\n    \n    # 연속된 공백을 하나로 정리\n    clean_text = re.sub(r'\\s+', ' ', clean_text)\n    return clean_text.strip()\n\n# 고급 버전 (중첩된 태그도 처리)\ndef remove_html_advanced(text):\n    # HTML 엔티티도 함께 처리\n    # &nbsp; &lt; &gt; &amp; 등\n    text = re.sub(r'&[a-zA-Z0-9#]+;', ' ', text)\n    \n    # HTML 태그 제거\n    text = re.sub(r'<[^>]+>', '', text)\n    \n    # 연속된 공백 정리\n    text = re.sub(r'\\s+', ' ', text)\n    \n    return text.strip()\n\n# 테스트\nhtml_text = '<p>안녕하세요! <strong>파이썬</strong> 학습 중입니다.</p><br/>감사합니다.'\nprint(remove_html_tags(html_text))\n# 출력: 안녕하세요! 파이썬 학습 중입니다. 감사합니다.\n```",
            "difficulty": "medium"
        },
        {
            "id": 15,
            "type": "multiple_choice",
            "question": "정규표현식에서 {3,5}의 의미는?",
            "options": [
                "정확히 3개 또는 5개",
                "3개 이상 5개 이하",
                "3개 미만 5개 초과",
                "3개 또는 5개"
            ],
            "correct_answer": 1,
            "explanation": "{3,5}는 앞의 패턴이 최소 3개에서 최대 5개까지 반복되는 것을 의미합니다.",
            "difficulty": "easy"
        },
        {
            "id": 16,
            "type": "code_output",
            "question": "다음 코드의 결과는?\n\n```python\nimport re\ntext = \"apple,banana;orange:grape\"\nresult = re.split(r'[,;:]', text)\nprint(result)\n```",
            "options": [
                "['apple', 'banana', 'orange', 'grape']",
                "['apple,banana;orange:grape']",
                "['apple', ',banana;orange:grape']",
                "[]"
            ],
            "correct_answer": 0,
            "explanation": "re.split()이 문자 클래스 [,;:]로 문자열을 분할하여 과일 이름들이 리스트로 반환됩니다.",
            "difficulty": "medium"
        },
        {
            "id": 17,
            "type": "multiple_choice",
            "question": "비캡처 그룹(Non-capturing group)의 문법은?",
            "options": [
                "(?:pattern)",
                "(?!pattern)",
                "(?=pattern)",
                "(?<pattern)"
            ],
            "correct_answer": 0,
            "explanation": "(?:pattern)은 비캡처 그룹으로, 그룹화는 하지만 결과에서 캡처하지 않습니다.",
            "difficulty": "medium"
        },
        {
            "id": 18,
            "type": "practical_coding",
            "question": "URL에서 프로토콜, 도메인, 경로를 분리하는 정규표현식을 작성하세요.",
            "sample_answer": "```python\nimport re\n\ndef parse_url(url):\n    pattern = r'^(?P<protocol>https?://)(?P<domain>[a-zA-Z0-9.-]+)(?P<path>/.*)?$'\n    match = re.match(pattern, url)\n    \n    if match:\n        return match.groupdict()\n    return None\n\n# 더 상세한 URL 파싱\ndef parse_url_detailed(url):\n    pattern = r'''\n        ^(?P<protocol>https?://)  # 프로토콜\n        (?P<domain>[a-zA-Z0-9.-]+)  # 도메인\n        (?::(?P<port>\\d+))?  # 포트 (선택적)\n        (?P<path>/[^?#]*)?  # 경로\n        (?:\\?(?P<query>[^#]*))?  # 쿼리 (선택적)\n        (?:#(?P<fragment>.*))?  # 프래그먼트 (선택적)\n    '''\n    \n    match = re.match(pattern, url, re.VERBOSE)\n    if match:\n        return {k: v for k, v in match.groupdict().items() if v is not None}\n    return None\n\n# 테스트\ntest_urls = [\n    'https://www.python.org/docs/',\n    'http://example.com:8080/path?query=value#section',\n    'https://github.com/python/cpython'\n]\n\nfor url in test_urls:\n    result = parse_url_detailed(url)\n    print(f\"{url}:\")\n    for key, value in result.items():\n        print(f\"  {key}: {value}\")\n    print()\n```",
            "difficulty": "hard"
        },
        {
            "id": 19,
            "type": "multiple_choice",
            "question": "긍정적 룩어헤드(Positive lookahead) (?=pattern)의 의미는?",
            "options": [
                "패턴이 앞에 있어야 함",
                "패턴이 뒤에 있어야 하지만 매칭에 포함하지 않음",
                "패턴이 뒤에 없어야 함",
                "패턴을 그룹화함"
            ],
            "correct_answer": 1,
            "explanation": "(?=pattern)은 현재 위치 뒤에 패턴이 있는지 확인하지만, 실제 매칭에는 포함하지 않습니다.",
            "difficulty": "hard"
        },
        {
            "id": 20,
            "type": "code_output",
            "question": "다음 코드의 결과는?\n\n```python\nimport re\ntext = \"password123\"\npattern = r'\\w+(?=\\d)'\nresult = re.findall(pattern, text)\nprint(result)\n```",
            "options": [
                "['password123']",
                "['password']",
                "['123']",
                "[]"
            ],
            "correct_answer": 1,
            "explanation": "(?=\\d)는 숫자가 뒤따르는지만 확인하고 매칭에 포함하지 않으므로 'password'만 매칭됩니다.",
            "difficulty": "hard"
        },
        {
            "id": 21,
            "type": "multiple_choice",
            "question": "re.IGNORECASE 플래그의 효과는?",
            "options": [
                "공백을 무시",
                "대소문자를 구분하지 않음",
                "특수문자를 무시",
                "숫자를 무시"
            ],
            "correct_answer": 1,
            "explanation": "re.IGNORECASE (또는 re.I) 플래그는 대소문자를 구분하지 않고 매칭합니다.",
            "difficulty": "easy"
        },
        {
            "id": 22,
            "type": "practical_coding",
            "question": "문자열에서 개인정보(이메일, 전화번호)를 마스킹하는 함수를 작성하세요.",
            "sample_answer": "```python\nimport re\n\ndef mask_personal_info(text):\n    # 이메일 마스킹\n    def mask_email(match):\n        email = match.group()\n        username, domain = email.split('@')\n        masked_username = username[0] + '*' * (len(username) - 1)\n        return f\"{masked_username}@{domain}\"\n    \n    # 전화번호 마스킹\n    def mask_phone(match):\n        phone = match.group()\n        # 숫자를 *로 대체하되 형식은 유지\n        return re.sub(r'\\d', '*', phone)\n    \n    # 이메일 패턴과 치환\n    email_pattern = r'\\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\\b'\n    text = re.sub(email_pattern, mask_email, text)\n    \n    # 전화번호 패턴과 치환\n    phone_pattern = r'\\b\\d{2,3}-\\d{3,4}-\\d{4}\\b'\n    text = re.sub(phone_pattern, mask_phone, text)\n    \n    return text\n\n# 더 고급 버전\ndef advanced_mask_info(text):\n    patterns = {\n        'email': (r'\\b([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\\b', \n                 lambda m: f\"{m.group(1)[0]}***@{m.group(2)}\"),\n        'phone': (r'\\b(\\d{2,3})-(\\d{3,4})-(\\d{4})\\b',\n                 lambda m: f\"{m.group(1)}-****-{m.group(3)}\"),\n        'card': (r'\\b(\\d{4})-(\\d{4})-(\\d{4})-(\\d{4})\\b',\n                lambda m: f\"{m.group(1)}-****-****-{m.group(4)}\")\n    }\n    \n    for info_type, (pattern, replacer) in patterns.items():\n        text = re.sub(pattern, replacer, text)\n    \n    return text\n\n# 테스트\ntest_text = \"\"\"\n연락처: john.doe@company.com\n전화번호: 010-1234-5678\n카드번호: 1234-5678-9012-3456\n\"\"\"\n\nprint(\"원본:\")\nprint(test_text)\nprint(\"\\n마스킹된 결과:\")\nprint(advanced_mask_info(test_text))\n```",
            "difficulty": "hard"
        },
        {
            "id": 23,
            "type": "multiple_choice",
            "question": "\\b의 의미는?",
            "options": [
                "백스페이스",
                "단어 경계",
                "공백",
                "줄바꿈"
            ],
            "correct_answer": 1,
            "explanation": "\\b는 단어 경계(word boundary)를 나타내며, 단어 문자와 비단어 문자 사이의 위치를 의미합니다.",
            "difficulty": "medium"
        },
        {
            "id": 24,
            "type": "practical_coding",
            "question": "로그 파일에서 에러 레벨과 메시지를 추출하는 정규표현식을 작성하세요.",
            "sample_answer": "```python\nimport re\nfrom collections import Counter\n\ndef parse_log_entries(log_lines):\n    # 다양한 로그 형식에 대응\n    patterns = {\n        'python_logging': r'(?P<timestamp>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3}) - (?P<logger>\\S+) - (?P<level>\\w+) - (?P<message>.*)',\n        'apache_error': r'\\[(?P<timestamp>[^\\]]+)\\] \\[(?P<level>\\w+)\\] (?P<message>.*)',\n        'syslog': r'(?P<timestamp>\\w{3}\\s+\\d{1,2} \\d{2}:\\d{2}:\\d{2}) (?P<hostname>\\S+) (?P<program>\\S+): (?P<message>.*)',\n        'generic': r'(?P<timestamp>[\\d\\-\\s:,]+).*?(?P<level>ERROR|WARN|INFO|DEBUG|CRITICAL).*?(?P<message>.*?)$'\n    }\n    \n    parsed_logs = []\n    \n    for line in log_lines:\n        line = line.strip()\n        if not line:\n            continue\n            \n        for log_type, pattern in patterns.items():\n            match = re.match(pattern, line, re.IGNORECASE)\n            if match:\n                log_entry = match.groupdict()\n                log_entry['log_type'] = log_type\n                parsed_logs.append(log_entry)\n                break\n    \n    return parsed_logs\n\ndef analyze_log_levels(parsed_logs):\n    level_counts = Counter()\n    error_messages = []\n    \n    for log in parsed_logs:\n        level = log.get('level', 'UNKNOWN').upper()\n        level_counts[level] += 1\n        \n        if level in ['ERROR', 'CRITICAL']:\n            error_messages.append({\n                'timestamp': log.get('timestamp', ''),\n                'level': level,\n                'message': log.get('message', '')\n            })\n    \n    return level_counts, error_messages\n\n# 테스트\nsample_logs = [\n    '2024-01-15 14:30:25,123 - myapp.database - ERROR - Connection failed',\n    '2024-01-15 14:30:26,124 - myapp.auth - INFO - User logged in',\n    '[Mon Jan 15 14:30:27 2024] [error] File not found: /var/www/missing.html',\n    '2024-01-15 14:30:28,125 - myapp.api - CRITICAL - System overload detected'\n]\n\nparsed = parse_log_entries(sample_logs)\nlevels, errors = analyze_log_levels(parsed)\n\nprint(\"로그 레벨 분포:\")\nfor level, count in levels.most_common():\n    print(f\"  {level}: {count}\")\n\nprint(\"\\n에러 메시지:\")\nfor error in errors:\n    print(f\"  [{error['level']}] {error['timestamp']}: {error['message']}\")\n```",
            "difficulty": "hard"
        },
        {
            "id": 25,
            "type": "multiple_choice",
            "question": "re.compile()을 사용하는 이유는?",
            "options": [
                "메모리 절약",
                "성능 향상 (반복 사용 시)",
                "코드 단순화",
                "에러 방지"
            ],
            "correct_answer": 1,
            "explanation": "패턴을 미리 컴파일하면 같은 패턴을 반복 사용할 때 매번 컴파일하지 않아도 되어 성능이 향상됩니다.",
            "difficulty": "medium"
        },
        {
            "id": 26,
            "type": "code_analysis",
            "question": "다음 패턴의 문제점을 찾으세요: r'.*'",
            "options": [
                "문법 오류",
                "너무 탐욕적(greedy)이어서 예상보다 많이 매칭할 수 있음",
                "아무것도 매칭하지 않음",
                "문제없음"
            ],
            "correct_answer": 1,
            "explanation": ".*는 매우 탐욕적인 패턴으로 가능한 한 많은 문자를 매칭하려 하므로, 의도하지 않은 결과를 가져올 수 있습니다.",
            "difficulty": "medium"
        },
        {
            "id": 27,
            "type": "practical_coding",
            "question": "주민등록번호 형식을 검증하되 뒷자리는 마스킹하는 함수를 작성하세요.",
            "sample_answer": "```python\nimport re\n\ndef validate_and_mask_ssn(ssn):\n    # 주민등록번호 패턴: YYMMDD-NNNNNNN\n    pattern = r'^(\\d{2})(\\d{2})(\\d{2})-(\\d{7})$'\n    match = re.match(pattern, ssn)\n    \n    if not match:\n        return False, \"잘못된 주민등록번호 형식\"\n    \n    year, month, day, back_digits = match.groups()\n    \n    # 월과 일 유효성 검사\n    if not (1 <= int(month) <= 12):\n        return False, \"잘못된 월\"\n    \n    if not (1 <= int(day) <= 31):\n        return False, \"잘못된 일\"\n    \n    # 성별 코드 검사 (첫 번째 뒷자리)\n    gender_code = int(back_digits[0])\n    if gender_code not in [1, 2, 3, 4]:\n        return False, \"잘못된 성별 코드\"\n    \n    # 마스킹된 형태로 반환\n    masked = f\"{year}{month}{day}-{back_digits[0]}******\"\n    \n    # 추가 정보\n    info = {\n        'birth_date': f\"19{year if gender_code in [1, 2] else '20'}{year}-{month}-{day}\",\n        'gender': '남성' if gender_code in [1, 3] else '여성',\n        'masked_ssn': masked\n    }\n    \n    return True, info\n\n# 더 간단한 버전\ndef mask_ssn_simple(text):\n    # 텍스트에서 주민등록번호를 찾아 마스킹\n    pattern = r'(\\d{6})-(\\d{7})'\n    \n    def mask_match(match):\n        front, back = match.groups()\n        return f\"{front}-{back[0]}******\"\n    \n    return re.sub(pattern, mask_match, text)\n\n# 테스트\ntest_ssns = [\n    '901215-1234567',  # 유효\n    '051230-2345678',  # 유효\n    '901315-1234567',  # 무효 (13월)\n    '901232-1234567',  # 무효 (32일)\n    '901215-5234567'   # 무효 (성별코드)\n]\n\nfor ssn in test_ssns:\n    is_valid, result = validate_and_mask_ssn(ssn)\n    print(f\"{ssn}: {is_valid}\")\n    if is_valid:\n        print(f\"  마스킹: {result['masked_ssn']}\")\n        print(f\"  생년월일: {result['birth_date']}\")\n        print(f\"  성별: {result['gender']}\")\n    else:\n        print(f\"  오류: {result}\")\n    print()\n```",
            "difficulty": "hard"
        },
        {
            "id": 28,
            "type": "multiple_choice",
            "question": "re.MULTILINE 플래그의 효과는?",
            "options": [
                "여러 줄의 문자열을 한 줄로 처리",
                "^ 와 $가 각 줄의 시작과 끝에 매칭",
                "개행문자를 무시",
                "각 줄을 별도로 처리"
            ],
            "correct_answer": 1,
            "explanation": "re.MULTILINE 플래그를 사용하면 ^와 $가 전체 문자열이 아닌 각 줄의 시작과 끝에 매칭됩니다.",
            "difficulty": "medium"
        },
        {
            "id": 29,
            "type": "debugging",
            "question": "다음 코드에서 문제점을 찾고 수정하세요.\n\n```python\nimport re\ntext = \"가격: $100.50, €200.75, ¥300\"\npattern = r'\\$\\d+.\\d+'\nprices = re.findall(pattern, text)\nprint(prices)\n```",
            "sample_answer": "**문제점:**\n1. `.` 문자가 이스케이프되지 않아 임의의 문자를 의미함\n2. 소수점이 없는 가격(¥300)은 매칭되지 않음\n3. 다른 통화 기호들은 고려되지 않음\n\n**수정된 코드:**\n```python\nimport re\n\ntext = \"가격: $100.50, €200.75, ¥300\"\n\n# 문제 1 수정: . 이스케이프\npattern1 = r'\\$\\d+\\.\\d+'\nprices1 = re.findall(pattern1, text)\nprint(f\"달러만: {prices1}\")\n\n# 완전한 수정: 모든 통화와 소수점 선택적 처리\npattern2 = r'[$€¥]\\d+(?:\\.\\d+)?'\nprices2 = re.findall(pattern2, text)\nprint(f\"모든 가격: {prices2}\")\n\n# 더 상세한 패턴 (통화별 분리)\npattern3 = r'([$€¥])(\\d+(?:\\.\\d+)?)'\nprices3 = re.findall(pattern3, text)\nprint(f\"통화와 금액 분리: {prices3}\")\n\n# 명명된 그룹 사용\npattern4 = r'(?P<currency>[$€¥])(?P<amount>\\d+(?:\\.\\d+)?)'\nfor match in re.finditer(pattern4, text):\n    print(f\"통화: {match.group('currency')}, 금액: {match.group('amount')}\")\n```",
            "difficulty": "medium"
        },
        {
            "id": 30,
            "type": "comprehensive",
            "question": "웹 스크래핑에서 사용할 수 있는 다양한 패턴들을 정의하는 클래스를 설계하세요.",
            "sample_answer": "```python\nimport re\nfrom typing import Dict, List, Optional, Tuple\n\nclass WebScrapingPatterns:\n    \"\"\"웹 스크래핑용 정규표현식 패턴 모음\"\"\"\n    \n    def __init__(self):\n        self.patterns = {\n            # HTML 태그 관련\n            'html_tag': re.compile(r'<([a-zA-Z][a-zA-Z0-9]*)[^>]*>.*?</\\1>', re.DOTALL),\n            'remove_tags': re.compile(r'<[^>]+>'),\n            'img_src': re.compile(r'<img[^>]+src=[\"\\']([^\"\\'>]+)[\"\\'][^>]*>', re.IGNORECASE),\n            'link_href': re.compile(r'<a[^>]+href=[\"\\']([^\"\\'>]+)[\"\\'][^>]*>(.*?)</a>', re.IGNORECASE | re.DOTALL),\n            \n            # URL 및 링크\n            'url_absolute': re.compile(r'https?://[a-zA-Z0-9.-]+(?:/[^\\s]*)?'),\n            'url_relative': re.compile(r'/[a-zA-Z0-9./_-]+'),\n            'domain': re.compile(r'https?://([a-zA-Z0-9.-]+)'),\n            \n            # 연락처 정보\n            'email': re.compile(r'\\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\\b'),\n            'phone_international': re.compile(r'\\+\\d{1,4}[\\s-]?\\d{1,4}[\\s-]?\\d{4,}'),\n            'phone_us': re.compile(r'\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}'),\n            'phone_kr': re.compile(r'\\d{2,3}-\\d{3,4}-\\d{4}'),\n            \n            # 가격 및 숫자\n            'price_usd': re.compile(r'\\$\\d+(?:,\\d{3})*(?:\\.\\d{2})?'),\n            'price_eur': re.compile(r'€\\d+(?:,\\d{3})*(?:\\.\\d{2})?'),\n            'number_comma': re.compile(r'\\d{1,3}(?:,\\d{3})*'),\n            \n            # 날짜 형식\n            'date_ymd': re.compile(r'\\d{4}-\\d{2}-\\d{2}'),\n            'date_mdy': re.compile(r'\\d{1,2}/\\d{1,2}/\\d{4}'),\n            'date_dmy': re.compile(r'\\d{1,2}/\\d{1,2}/\\d{4}'),\n            \n            # 소셜 미디어\n            'hashtag': re.compile(r'#\\w+'),\n            'mention': re.compile(r'@\\w+'),\n            'twitter_handle': re.compile(r'@[a-zA-Z0-9_]{1,15}'),\n            \n            # HTML 엔티티\n            'html_entities': re.compile(r'&[a-zA-Z0-9#]+;')\n        }\n    \n    def extract_all_links(self, html_content: str) -> List[Dict[str, str]]:\n        \"\"\"HTML에서 모든 링크 추출\"\"\"\n        links = []\n        for match in self.patterns['link_href'].finditer(html_content):\n            links.append({\n                'url': match.group(1),\n                'text': self.clean_html(match.group(2)).strip()\n            })\n        return links\n    \n    def extract_images(self, html_content: str) -> List[str]:\n        \"\"\"HTML에서 이미지 URL 추출\"\"\"\n        return self.patterns['img_src'].findall(html_content)\n    \n    def extract_contact_info(self, text: str) -> Dict[str, List[str]]:\n        \"\"\"텍스트에서 연락처 정보 추출\"\"\"\n        return {\n            'emails': self.patterns['email'].findall(text),\n            'phones_kr': self.patterns['phone_kr'].findall(text),\n            'phones_us': self.patterns['phone_us'].findall(text),\n            'phones_intl': self.patterns['phone_international'].findall(text)\n        }\n    \n    def extract_prices(self, text: str) -> Dict[str, List[str]]:\n        \"\"\"텍스트에서 가격 정보 추출\"\"\"\n        return {\n            'usd': self.patterns['price_usd'].findall(text),\n            'eur': self.patterns['price_eur'].findall(text)\n        }\n    \n    def clean_html(self, html_content: str) -> str:\n        \"\"\"HTML 태그 제거 및 정리\"\"\"\n        # HTML 엔티티 디코딩\n        html_entities = {\n            '&amp;': '&', '&lt;': '<', '&gt;': '>', \n            '&quot;': '\"', '&apos;': \"'\", '&nbsp;': ' '\n        }\n        \n        text = html_content\n        for entity, char in html_entities.items():\n            text = text.replace(entity, char)\n        \n        # 태그 제거\n        text = self.patterns['remove_tags'].sub('', text)\n        \n        # 연속된 공백 정리\n        text = re.sub(r'\\s+', ' ', text)\n        \n        return text.strip()\n    \n    def extract_social_media(self, text: str) -> Dict[str, List[str]]:\n        \"\"\"소셜 미디어 관련 정보 추출\"\"\"\n        return {\n            'hashtags': self.patterns['hashtag'].findall(text),\n            'mentions': self.patterns['mention'].findall(text),\n            'twitter_handles': self.patterns['twitter_handle'].findall(text)\n        }\n    \n    def normalize_urls(self, urls: List[str], base_url: str) -> List[str]:\n        \"\"\"상대 URL을 절대 URL로 변환\"\"\"\n        normalized = []\n        base_domain = self.patterns['domain'].search(base_url)\n        \n        if not base_domain:\n            return urls\n        \n        base_domain = base_domain.group(1)\n        \n        for url in urls:\n            if url.startswith('http'):\n                normalized.append(url)\n            elif url.startswith('/'):\n                normalized.append(f\"https://{base_domain}{url}\")\n            else:\n                normalized.append(f\"{base_url.rstrip('/')}/{url}\")\n        \n        return normalized\n    \n    def find_custom_pattern(self, text: str, pattern: str, flags: int = 0) -> List[str]:\n        \"\"\"커스텀 패턴으로 검색\"\"\"\n        try:\n            compiled_pattern = re.compile(pattern, flags)\n            return compiled_pattern.findall(text)\n        except re.error as e:\n            print(f\"패턴 오류: {e}\")\n            return []\n\n# 사용 예제\nif __name__ == \"__main__\":\n    scraper = WebScrapingPatterns()\n    \n    sample_html = \"\"\"\n    <html>\n    <body>\n        <h1>상품 페이지</h1>\n        <p>가격: $29.99</p>\n        <p>연락처: contact@shop.com, 010-1234-5678</p>\n        <a href=\"/products/123\">상품 상세</a>\n        <a href=\"https://external.com\">외부 링크</a>\n        <img src=\"/images/product.jpg\" alt=\"상품 이미지\">\n        <p>#sale #discount @customer_service</p>\n    </body>\n    </html>\n    \"\"\"\n    \n    # 모든 정보 추출\n    print(\"링크:\", scraper.extract_all_links(sample_html))\n    print(\"이미지:\", scraper.extract_images(sample_html))\n    \n    clean_text = scraper.clean_html(sample_html)\n    print(\"\\n정리된 텍스트:\", clean_text)\n    \n    print(\"\\n연락처:\", scraper.extract_contact_info(clean_text))\n    print(\"가격:\", scraper.extract_prices(clean_text))\n    print(\"소셜미디어:\", scraper.extract_social_media(clean_text))\n```",
            "difficulty": "expert"
        },
        {
            "id": 31,
            "type": "performance",
            "question": "다음 두 패턴 중 성능이 더 좋은 것은?\nA: r'.*abc.*'\nB: r'abc'",
            "options": [
                "A가 더 빠름",
                "B가 더 빠름",
                "동일함",
                "상황에 따라 다름"
            ],
            "correct_answer": 1,
            "explanation": "B가 더 빠릅니다. A는 탐욕적 매칭으로 인해 백트래킹이 많이 발생할 수 있지만, B는 단순히 'abc' 문자열만 찾으면 됩니다.",
            "difficulty": "medium"
        },
        {
            "id": 32,
            "type": "real_world_application",
            "question": "로그 모니터링 시스템에서 실시간으로 특정 패턴을 감지하는 정규표현식 기반 알림 시스템을 설계하세요.",
            "sample_answer": "```python\nimport re\nimport time\nimport threading\nfrom datetime import datetime\nfrom collections import deque, defaultdict\nfrom typing import Dict, List, Callable, Optional\n\nclass LogMonitor:\n    \"\"\"실시간 로그 모니터링 시스템\"\"\"\n    \n    def __init__(self, max_history: int = 1000):\n        self.alert_patterns = {}\n        self.log_history = deque(maxlen=max_history)\n        self.alert_callbacks = defaultdict(list)\n        self.monitoring = False\n        self.stats = defaultdict(int)\n        \n        # 기본 위험 패턴들\n        self.add_alert_pattern(\n            'security_breach',\n            r'(?i)(failed login|unauthorized access|security breach|intrusion detected)',\n            severity='CRITICAL'\n        )\n        \n        self.add_alert_pattern(\n            'error_rate',\n            r'(?i)(error|exception|failed|timeout)',\n            severity='HIGH',\n            threshold=5,  # 5분간 5번 이상 발생시 알림\n            time_window=300\n        )\n        \n        self.add_alert_pattern(\n            'sql_injection',\n            r'(?i)(union select|drop table|; delete|; update)',\n            severity='CRITICAL'\n        )\n        \n        self.add_alert_pattern(\n            'high_response_time',\n            r'response_time[:\\s]*(\\d+)ms',\n            severity='MEDIUM',\n            condition=lambda match: int(match.group(1)) > 5000\n        )\n    \n    def add_alert_pattern(self, name: str, pattern: str, \n                         severity: str = 'LOW',\n                         threshold: int = 1,\n                         time_window: int = 60,\n                         condition: Optional[Callable] = None):\n        \"\"\"알림 패턴 추가\"\"\"\n        self.alert_patterns[name] = {\n            'pattern': re.compile(pattern),\n            'severity': severity,\n            'threshold': threshold,\n            'time_window': time_window,\n            'condition': condition,\n            'matches': deque(),\n            'last_alert': 0\n        }\n    \n    def add_callback(self, pattern_name: str, callback: Callable):\n        \"\"\"알림 콜백 함수 추가\"\"\"\n        self.alert_callbacks[pattern_name].append(callback)\n    \n    def process_log_line(self, log_line: str, timestamp: Optional[float] = None):\n        \"\"\"로그 라인 처리\"\"\"\n        if timestamp is None:\n            timestamp = time.time()\n        \n        log_entry = {\n            'timestamp': timestamp,\n            'line': log_line,\n            'datetime': datetime.fromtimestamp(timestamp)\n        }\n        \n        self.log_history.append(log_entry)\n        self.stats['total_logs'] += 1\n        \n        # 각 패턴에 대해 검사\n        for pattern_name, pattern_info in self.alert_patterns.items():\n            self._check_pattern(pattern_name, pattern_info, log_entry)\n    \n    def _check_pattern(self, pattern_name: str, pattern_info: Dict, log_entry: Dict):\n        \"\"\"패턴 매칭 검사\"\"\"\n        pattern = pattern_info['pattern']\n        match = pattern.search(log_entry['line'])\n        \n        if match:\n            # 조건 함수가 있으면 추가 검사\n            if pattern_info['condition'] and not pattern_info['condition'](match):\n                return\n            \n            # 매칭 기록\n            pattern_info['matches'].append({\n                'timestamp': log_entry['timestamp'],\n                'match': match,\n                'log_line': log_entry['line']\n            })\n            \n            self.stats[f'{pattern_name}_matches'] += 1\n            \n            # 임계치 검사\n            self._check_threshold(pattern_name, pattern_info)\n    \n    def _check_threshold(self, pattern_name: str, pattern_info: Dict):\n        \"\"\"임계치 검사 및 알림 발생\"\"\"\n        current_time = time.time()\n        time_window = pattern_info['time_window']\n        threshold = pattern_info['threshold']\n        \n        # 시간 윈도우 내의 매칭들만 필터링\n        recent_matches = [\n            m for m in pattern_info['matches']\n            if current_time - m['timestamp'] <= time_window\n        ]\n        \n        # 오래된 매칭들 제거\n        pattern_info['matches'] = deque(recent_matches, maxlen=1000)\n        \n        # 임계치 초과 검사\n        if len(recent_matches) >= threshold:\n            # 중복 알림 방지 (마지막 알림으로부터 최소 시간 간격)\n            if current_time - pattern_info['last_alert'] > 60:  # 1분 간격\n                self._trigger_alert(pattern_name, pattern_info, recent_matches)\n                pattern_info['last_alert'] = current_time\n    \n    def _trigger_alert(self, pattern_name: str, pattern_info: Dict, matches: List[Dict]):\n        \"\"\"알림 발생\"\"\"\n        alert = {\n            'pattern_name': pattern_name,\n            'severity': pattern_info['severity'],\n            'timestamp': time.time(),\n            'match_count': len(matches),\n            'time_window': pattern_info['time_window'],\n            'sample_logs': [m['log_line'] for m in matches[-3:]]  # 최근 3개\n        }\n        \n        self.stats['alerts_triggered'] += 1\n        \n        # 콜백 함수들 실행\n        for callback in self.alert_callbacks[pattern_name]:\n            try:\n                callback(alert)\n            except Exception as e:\n                print(f\"알림 콜백 오류: {e}\")\n        \n        # 기본 로깅\n        self._log_alert(alert)\n    \n    def _log_alert(self, alert: Dict):\n        \"\"\"알림 로깅\"\"\"\n        timestamp = datetime.fromtimestamp(alert['timestamp']).strftime('%Y-%m-%d %H:%M:%S')\n        print(f\"\\n🚨 [{alert['severity']}] {timestamp}\")\n        print(f\"패턴: {alert['pattern_name']}\")\n        print(f\"매칭 수: {alert['match_count']} (지난 {alert['time_window']}초간)\")\n        print(\"샘플 로그:\")\n        for log in alert['sample_logs']:\n            print(f\"  • {log}\")\n    \n    def monitor_file(self, file_path: str, poll_interval: float = 1.0):\n        \"\"\"파일 모니터링 시작\"\"\"\n        def monitor_loop():\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    # 파일 끝으로 이동\n                    f.seek(0, 2)\n                    \n                    while self.monitoring:\n                        line = f.readline()\n                        if line:\n                            self.process_log_line(line.strip())\n                        else:\n                            time.sleep(poll_interval)\n            except Exception as e:\n                print(f\"파일 모니터링 오류: {e}\")\n        \n        self.monitoring = True\n        monitor_thread = threading.Thread(target=monitor_loop, daemon=True)\n        monitor_thread.start()\n        return monitor_thread\n    \n    def stop_monitoring(self):\n        \"\"\"모니터링 중지\"\"\"\n        self.monitoring = False\n    \n    def get_stats(self) -> Dict:\n        \"\"\"통계 정보 반환\"\"\"\n        stats = dict(self.stats)\n        stats['active_patterns'] = len(self.alert_patterns)\n        stats['log_history_size'] = len(self.log_history)\n        return stats\n    \n    def search_history(self, pattern: str, limit: int = 100) -> List[Dict]:\n        \"\"\"로그 히스토리에서 패턴 검색\"\"\"\n        compiled_pattern = re.compile(pattern, re.IGNORECASE)\n        results = []\n        \n        for log_entry in reversed(self.log_history):\n            if compiled_pattern.search(log_entry['line']):\n                results.append(log_entry)\n                if len(results) >= limit:\n                    break\n        \n        return results\n\n# 사용 예제\ndef email_alert(alert):\n    \"\"\"이메일 알림 시뮬레이션\"\"\"\n    print(f\"📧 이메일 발송: [{alert['severity']}] {alert['pattern_name']}\")\n\ndef slack_alert(alert):\n    \"\"\"슬랙 알림 시뮬레이션\"\"\"\n    print(f\"💬 슬랙 메시지: 긴급! {alert['pattern_name']} 감지됨\")\n\nif __name__ == \"__main__\":\n    # 모니터 설정\n    monitor = LogMonitor()\n    \n    # 알림 콜백 추가\n    monitor.add_callback('security_breach', email_alert)\n    monitor.add_callback('security_breach', slack_alert)\n    monitor.add_callback('sql_injection', email_alert)\n    \n    # 테스트 로그들\n    test_logs = [\n        \"2024-01-15 10:00:01 INFO User login successful\",\n        \"2024-01-15 10:00:02 ERROR Database connection failed\",\n        \"2024-01-15 10:00:03 WARNING Failed login attempt for user admin\",\n        \"2024-01-15 10:00:04 CRITICAL Security breach detected from IP 192.168.1.100\",\n        \"2024-01-15 10:00:05 ERROR SQL: SELECT * FROM users UNION SELECT * FROM passwords\",\n        \"2024-01-15 10:00:06 INFO API response_time: 6000ms\"\n    ]\n    \n    # 로그 처리 시뮬레이션\n    for log in test_logs:\n        monitor.process_log_line(log)\n        time.sleep(0.1)\n    \n    # 통계 출력\n    print(\"\\n📊 모니터링 통계:\")\n    stats = monitor.get_stats()\n    for key, value in stats.items():\n        print(f\"  {key}: {value}\")\n    \n    # 히스토리 검색\n    print(\"\\n🔍 'ERROR' 검색 결과:\")\n    error_logs = monitor.search_history('ERROR', limit=3)\n    for log in error_logs:\n        print(f\"  {log['datetime'].strftime('%H:%M:%S')}: {log['line']}\")\n```",
            "difficulty": "expert"
        },
        {
            "id": 33,
            "type": "optimization",
            "question": "대용량 텍스트 파일에서 정규표현식 성능을 최적화하는 방법은?",
            "options": [
                "패턴을 미리 컴파일하고, 비탐욕적 매칭 사용, 불필요한 캡처 그룹 제거",
                "더 복잡한 패턴 사용",
                "모든 매칭을 한 번에 처리",
                "메모리를 더 많이 사용"
            ],
            "correct_answer": 0,
            "explanation": "성능 최적화를 위해서는 패턴 컴파일, 비탐욕적 매칭, 비캡처 그룹 사용, 적절한 앵커 사용 등이 중요합니다.",
            "difficulty": "hard"
        },
        {
            "id": 34,
            "type": "edge_cases",
            "question": "다음 중 정규표현식에서 주의해야 할 엣지 케이스는?",
            "options": [
                "빈 문자열 매칭",
                "유니코드 문자 처리",
                "개행문자가 포함된 텍스트",
                "모든 것"
            ],
            "correct_answer": 3,
            "explanation": "정규표현식 사용 시 빈 문자열, 유니코드, 개행문자, 특수문자 이스케이프 등 모든 엣지 케이스를 고려해야 합니다.",
            "difficulty": "hard"
        },
        {
            "id": 35,
            "type": "best_practices",
            "question": "정규표현식 사용 시 권장되는 모범 사례는?",
            "options": [
                "복잡한 패턴보다는 여러 개의 간단한 패턴 사용",
                "가독성을 위한 주석과 명명된 그룹 사용",
                "성능을 고려한 패턴 최적화",
                "모든 것"
            ],
            "correct_answer": 3,
            "explanation": "정규표현식 모범 사례로는 가독성, 성능, 유지보수성을 모두 고려해야 하며, 간단하고 명확한 패턴을 선호해야 합니다.",
            "difficulty": "medium"
        }
    ]
}