{
    "quiz_info": {
        "title": "Chapter 6: 특수 메서드 (Magic Methods)",
        "description": "특수 메서드의 이해와 활용, 연산자 오버로딩, 컨테이너 메서드, 컨텍스트 매니저, 이터레이터 프로토콜에 대한 퀴즈입니다.",
        "total_questions": 30,
        "passing_score": 70,
        "time_limit_minutes": 40
    },
    "questions": [
        {
            "id": 1,
            "type": "multiple_choice",
            "difficulty": "easy",
            "question": "특수 메서드(Magic Methods)의 특징으로 올바른 것은?",
            "options": [
                "이름이 언더스코어 두 개(__) 로 시작하고 끝난다",
                "사용자가 직접 호출해야 한다",
                "클래스에 하나만 정의할 수 있다",
                "상속받을 수 없다"
            ],
            "correct": 0,
            "explanation": "특수 메서드는 이름이 __로 시작하고 끝나며, Python 인터프리터가 자동으로 호출합니다."
        },
        {
            "id": 2,
            "type": "multiple_choice",
            "difficulty": "easy",
            "question": "__str__과 __repr__ 메서드의 차이점은?",
            "options": [
                "__str__은 사용자용, __repr__은 개발자용 표현",
                "__str__은 숫자용, __repr__은 문자열용",
                "__str__은 긴 표현, __repr__은 짧은 표현",
                "차이가 없다"
            ],
            "correct": 0,
            "explanation": "__str__은 사용자 친화적인 표현을, __repr__은 개발자를 위한 정확하고 명확한 표현을 제공합니다."
        },
        {
            "id": 3,
            "type": "code_output",
            "difficulty": "easy",
            "question": "다음 코드의 출력 결과는?\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\n\np = Point(3, 4)\nprint(p)",
            "options": [
                "(3, 4)",
                "Point(3, 4)",
                "<Point object at 0x...>",
                "3, 4"
            ],
            "correct": 0,
            "explanation": "__str__ 메서드가 정의되어 있으므로 print()나 str() 호출 시 해당 메서드의 반환값이 출력됩니다."
        },
        {
            "id": 4,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "연산자 오버로딩에서 __add__ 메서드가 호출되는 경우는?",
            "options": [
                "obj1 + obj2에서 obj1이 __add__를 가지고 있을 때",
                "obj1 + obj2에서 obj2가 __add__를 가지고 있을 때",
                "두 객체 모두 __add__를 가지고 있을 때만",
                "내장 타입과 연산할 때만"
            ],
            "correct": 0,
            "explanation": "a + b 연산에서 먼저 a.__add__(b)가 호출되고, 실패하면 b.__radd__(a)가 호출됩니다."
        },
        {
            "id": 5,
            "type": "code_completion",
            "difficulty": "medium",
            "question": "다음 벡터 클래스에서 덧셈 연산자를 구현하세요.\n\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def _______(self, other):\n        return Vector(self.x + other.x, self.y + other.y)",
            "answer": "__add__",
            "explanation": "__add__ 메서드를 구현하면 + 연산자를 사용할 수 있습니다."
        },
        {
            "id": 6,
            "type": "true_false",
            "difficulty": "medium",
            "question": "__radd__ 메서드는 역방향 덧셈을 위한 것으로, a + b에서 a가 __add__를 지원하지 않을 때 b.__radd__(a)가 호출된다.",
            "correct": true,
            "explanation": "__radd__는 좌측 피연산자가 해당 연산을 지원하지 않을 때 우측 피연산자에서 호출되는 역방향 연산 메서드입니다."
        },
        {
            "id": 7,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "@total_ordering 데코레이터의 역할은?",
            "options": [
                "__eq__와 __lt__만 정의하면 나머지 비교 연산자를 자동 생성",
                "모든 비교 연산자를 자동으로 정의",
                "객체를 정렬 가능하게 만듦",
                "해시 값을 자동으로 생성"
            ],
            "correct": 0,
            "explanation": "@total_ordering은 __eq__와 __lt__ (또는 다른 하나의 순서 비교 메서드)만 정의하면 나머지 비교 연산자들을 자동으로 생성해줍니다."
        },
        {
            "id": 8,
            "type": "coding",
            "difficulty": "medium",
            "question": "Money 클래스를 구현하세요. 생성자는 amount를 받고, 덧셈과 문자열 표현을 지원해야 합니다.",
            "answer": "class Money:\n    def __init__(self, amount):\n        self.amount = amount\n    \n    def __add__(self, other):\n        if isinstance(other, Money):\n            return Money(self.amount + other.amount)\n        return Money(self.amount + other)\n    \n    def __str__(self):\n        return f\"{self.amount}원\"",
            "explanation": "Money 클래스는 생성자, 덧셈 연산자, 문자열 표현 메서드를 구현하여 기본적인 연산과 출력을 지원합니다."
        },
        {
            "id": 9,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "컨테이너 프로토콜에서 __getitem__ 메서드의 역할은?",
            "options": [
                "인덱싱과 슬라이싱 지원 (obj[key])",
                "항목 추가 지원",
                "항목 삭제 지원",
                "길이 반환 지원"
            ],
            "correct": 0,
            "explanation": "__getitem__ 메서드는 obj[key] 형태의 인덱싱과 슬라이싱을 지원합니다."
        },
        {
            "id": 10,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "__contains__ 메서드가 정의되었을 때 사용할 수 있는 연산자는?",
            "options": [
                "in과 not in",
                "== 와 !=",
                "< 와 >",
                "+ 와 -"
            ],
            "correct": 0,
            "explanation": "__contains__ 메서드는 'in' 연산자와 'not in' 연산자를 지원합니다."
        },
        {
            "id": 11,
            "type": "code_output",
            "difficulty": "hard",
            "question": "다음 코드의 출력 결과는?\n\nclass Container:\n    def __init__(self):\n        self.items = [1, 2, 3]\n    \n    def __len__(self):\n        return len(self.items)\n    \n    def __getitem__(self, index):\n        return self.items[index]\n    \n    def __contains__(self, item):\n        print(f\"Checking {item}\")\n        return item in self.items\n\nc = Container()\nresult = 2 in c\nprint(result)",
            "options": [
                "Checking 2\\nTrue",
                "True\\nChecking 2",
                "True",
                "Checking 2"
            ],
            "correct": 0,
            "explanation": "__contains__ 메서드가 호출되어 먼저 \"Checking 2\"가 출력되고, 그 다음 결과인 True가 출력됩니다."
        },
        {
            "id": 12,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "컨텍스트 매니저의 __enter__ 메서드에서 반환된 값은 어디에 할당되는가?",
            "options": [
                "with문의 as 뒤에 지정된 변수",
                "with문의 조건 부분",
                "자동으로 무시됨",
                "__exit__ 메서드의 매개변수"
            ],
            "correct": 0,
            "explanation": "__enter__ 메서드의 반환값은 with문의 'as' 절에 지정된 변수에 할당됩니다."
        },
        {
            "id": 13,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "__exit__ 메서드에서 True를 반환하면 어떻게 되는가?",
            "options": [
                "예외가 억제됨 (예외가 다시 발생하지 않음)",
                "예외가 다시 발생함",
                "프로그램이 종료됨",
                "아무 일도 일어나지 않음"
            ],
            "correct": 0,
            "explanation": "__exit__ 메서드에서 True를 반환하면 발생한 예외가 억제되어 with문 밖으로 전파되지 않습니다."
        },
        {
            "id": 14,
            "type": "coding",
            "difficulty": "hard",
            "question": "파일을 안전하게 처리하는 간단한 컨텍스트 매니저를 구현하세요. 파일을 열고 닫는 기능을 포함해야 합니다.",
            "answer": "class FileManager:\n    def __init__(self, filename, mode='r'):\n        self.filename = filename\n        self.mode = mode\n        self.file = None\n    \n    def __enter__(self):\n        self.file = open(self.filename, self.mode)\n        return self.file\n    \n    def __exit__(self, exc_type, exc_value, traceback):\n        if self.file:\n            self.file.close()\n        return False",
            "explanation": "컨텍스트 매니저는 __enter__에서 리소스를 할당하고, __exit__에서 정리합니다. False를 반환하여 예외를 다시 발생시킵니다."
        },
        {
            "id": 15,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "이터레이터 프로토콜을 구현하기 위해 필요한 메서드는?",
            "options": [
                "__iter__와 __next__",
                "__getitem__과 __len__",
                "__enter__와 __exit__",
                "__str__과 __repr__"
            ],
            "correct": 0,
            "explanation": "이터레이터 프로토콜을 구현하려면 __iter__ (이터레이터 객체 반환)와 __next__ (다음 값 반환) 메서드가 필요합니다."
        },
        {
            "id": 16,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "__next__ 메서드에서 더 이상 반환할 값이 없을 때 발생시켜야 하는 예외는?",
            "options": [
                "StopIteration",
                "IndexError",
                "ValueError",
                "TypeError"
            ],
            "correct": 0,
            "explanation": "__next__ 메서드에서 더 이상 값이 없을 때는 StopIteration 예외를 발생시켜야 합니다."
        },
        {
            "id": 17,
            "type": "code_completion",
            "difficulty": "medium",
            "question": "다음 카운터 이터레이터에서 빈 칸을 채우세요.\n\nclass Counter:\n    def __init__(self, start, end):\n        self.current = start\n        self.end = end\n    \n    def __iter__(self):\n        return self\n    \n    def _______():\n        if self.current >= self.end:\n            raise StopIteration\n        value = self.current\n        self.current += 1\n        return value",
            "answer": "__next__(self)",
            "explanation": "__next__ 메서드는 이터레이터의 다음 값을 반환하며, self 매개변수를 받습니다."
        },
        {
            "id": 18,
            "type": "true_false",
            "difficulty": "medium",
            "question": "__iter__ 메서드는 반드시 self를 반환해야 한다.",
            "correct": false,
            "explanation": "__iter__ 메서드는 이터레이터 객체를 반환해야 하지만, 반드시 self일 필요는 없습니다. 새로운 이터레이터 객체를 반환할 수도 있습니다."
        },
        {
            "id": 19,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "다음 중 __bool__ 메서드가 정의되지 않았을 때 bool() 변환에 사용되는 메서드는?",
            "options": [
                "__len__",
                "__str__",
                "__repr__",
                "__eq__"
            ],
            "correct": 0,
            "explanation": "__bool__이 정의되지 않으면 __len__()을 사용하여 길이가 0이면 False, 아니면 True로 평가합니다."
        },
        {
            "id": 20,
            "type": "coding",
            "difficulty": "hard",
            "question": "범위를 지정할 수 있는 간단한 이터레이터 클래스를 구현하세요. start부터 end까지 step만큼 증가하며 값을 반환해야 합니다.",
            "answer": "class Range:\n    def __init__(self, start, end, step=1):\n        self.start = start\n        self.end = end\n        self.step = step\n        self.current = start\n    \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.current >= self.end:\n            raise StopIteration\n        value = self.current\n        self.current += self.step\n        return value",
            "explanation": "Range 이터레이터는 현재 값을 추적하고, 범위를 벗어나면 StopIteration을 발생시킵니다."
        },
        {
            "id": 21,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "__format__ 메서드의 용도는?",
            "options": [
                "format() 함수나 f-string에서 사용자 정의 포맷팅",
                "객체를 문자열로 변환",
                "객체를 개발자용으로 표현",
                "객체의 타입을 반환"
            ],
            "correct": 0,
            "explanation": "__format__ 메서드는 format() 함수나 f-string의 포맷 명세자를 처리하여 사용자 정의 포맷팅을 제공합니다."
        },
        {
            "id": 22,
            "type": "code_analysis",
            "difficulty": "hard",
            "question": "다음 코드에서 문제점을 찾으세요.\n\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n    \n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y",
            "answer": "타입 검사가 없습니다. isinstance(other, Vector) 확인이 필요하고, 지원하지 않는 타입에 대해 NotImplemented를 반환해야 합니다.",
            "explanation": "특수 메서드에서는 항상 인자의 타입을 확인하고, 지원하지 않는 타입에 대해서는 NotImplemented를 반환해야 합니다."
        },
        {
            "id": 23,
            "type": "multiple_choice",
            "difficulty": "medium",
            "question": "__hash__ 메서드를 구현할 때 주의사항은?",
            "options": [
                "__eq__가 True인 객체들은 같은 해시 값을 가져야 함",
                "항상 양수를 반환해야 함",
                "문자열만 해시할 수 있음",
                "변경 가능한 객체만 해시할 수 있음"
            ],
            "correct": 0,
            "explanation": "__hash__ 구현 시 동등한 객체(==가 True)는 반드시 같은 해시 값을 가져야 한다는 해시 일관성 규칙을 따라야 합니다."
        },
        {
            "id": 24,
            "type": "true_false",
            "difficulty": "hard",
            "question": "변경 가능한(mutable) 객체는 일반적으로 __hash__ 메서드를 구현하지 않는다.",
            "correct": true,
            "explanation": "변경 가능한 객체는 내용이 변경되면 해시 값도 달라져야 하므로 일관성 문제로 인해 일반적으로 해시하지 않습니다."
        },
        {
            "id": 25,
            "type": "coding",
            "difficulty": "expert",
            "question": "다양한 특수 메서드를 구현한 복소수 클래스를 작성하세요. 덧셈, 곱셈, 절댓값, 문자열 표현을 지원해야 합니다.",
            "answer": "class Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n    \n    def __add__(self, other):\n        if isinstance(other, Complex):\n            return Complex(self.real + other.real, self.imag + other.imag)\n        return Complex(self.real + other, self.imag)\n    \n    def __mul__(self, other):\n        if isinstance(other, Complex):\n            real = self.real * other.real - self.imag * other.imag\n            imag = self.real * other.imag + self.imag * other.real\n            return Complex(real, imag)\n        return Complex(self.real * other, self.imag * other)\n    \n    def __abs__(self):\n        return (self.real**2 + self.imag**2)**0.5\n    \n    def __str__(self):\n        if self.imag >= 0:\n            return f\"{self.real}+{self.imag}i\"\n        return f\"{self.real}{self.imag}i\"",
            "explanation": "복소수 클래스는 실제 복소수 연산 규칙을 따라 덧셈, 곱셈, 크기 계산을 구현하고 적절한 문자열 표현을 제공합니다."
        },
        {
            "id": 26,
            "type": "multiple_choice",
            "difficulty": "hard",
            "question": "contextlib.contextmanager 데코레이터를 사용한 컨텍스트 매니저에서 yield 전과 후의 코드 역할은?",
            "options": [
                "yield 전은 __enter__, yield 후는 __exit__",
                "yield 전은 __exit__, yield 후는 __enter__",
                "모두 __enter__ 역할",
                "모두 __exit__ 역할"
            ],
            "correct": 0,
            "explanation": "@contextmanager 데코레이터에서 yield 전 코드는 __enter__ 역할을, yield 후 코드는 __exit__ 역할을 합니다."
        },
        {
            "id": 27,
            "type": "code_output",
            "difficulty": "hard",
            "question": "다음 코드의 출력 결과는?\n\nclass Smart:\n    def __init__(self, value):\n        self.value = value\n    \n    def __bool__(self):\n        return self.value > 0\n    \n    def __len__(self):\n        return abs(self.value)\n\ns1 = Smart(-5)\ns2 = Smart(0)\nprint(bool(s1), len(s1))\nprint(bool(s2), len(s2))",
            "options": [
                "False 5\\nFalse 0",
                "True 5\\nTrue 0",
                "False -5\\nFalse 0",
                "True -5\\nTrue 0"
            ],
            "correct": 0,
            "explanation": "__bool__은 value > 0을 확인하고, __len__은 절댓값을 반환합니다. s1은 False 5, s2는 False 0을 출력합니다."
        },
        {
            "id": 28,
            "type": "comprehensive",
            "difficulty": "expert",
            "question": "완전한 스택(Stack) 클래스를 구현하세요. 다음 기능을 포함해야 합니다:\n1. push, pop, peek 메서드\n2. len() 지원 (__len__)\n3. bool() 지원 (__bool__)\n4. 문자열 표현 (__str__, __repr__)\n5. 이터레이터 지원 (__iter__)\n6. 인덱싱 지원 (__getitem__)",
            "answer": "class Stack:\n    def __init__(self):\n        self._items = []\n    \n    def push(self, item):\n        self._items.append(item)\n    \n    def pop(self):\n        if not self._items:\n            raise IndexError(\"Empty stack\")\n        return self._items.pop()\n    \n    def peek(self):\n        if not self._items:\n            raise IndexError(\"Empty stack\")\n        return self._items[-1]\n    \n    def __len__(self):\n        return len(self._items)\n    \n    def __bool__(self):\n        return bool(self._items)\n    \n    def __str__(self):\n        return f\"Stack({self._items})\"\n    \n    def __repr__(self):\n        return f\"Stack({self._items!r})\"\n    \n    def __iter__(self):\n        return reversed(self._items)\n    \n    def __getitem__(self, index):\n        return self._items[-(index+1)]",
            "explanation": "완전한 스택 구현은 모든 기본 스택 연산과 Python의 특수 메서드들을 포함하여 내장 타입처럼 사용할 수 있게 합니다."
        },
        {
            "id": 29,
            "type": "debugging",
            "difficulty": "hard",
            "question": "다음 코드의 오류를 찾아 수정하세요.\n\nclass Matrix:\n    def __init__(self, data):\n        self.data = data\n    \n    def __add__(self, other):\n        result = []\n        for i in range(len(self.data)):\n            row = []\n            for j in range(len(self.data[i])):\n                row.append(self.data[i][j] + other.data[i][j])\n            result.append(row)\n        return Matrix(result)\n    \n    def __str__(self):\n        return str(self.data)",
            "answer": "타입 검사와 크기 검사가 없습니다. 수정:\n\ndef __add__(self, other):\n    if not isinstance(other, Matrix):\n        return NotImplemented\n    if len(self.data) != len(other.data) or len(self.data[0]) != len(other.data[0]):\n        raise ValueError(\"Matrix dimensions must match\")\n    result = []\n    for i in range(len(self.data)):\n        row = []\n        for j in range(len(self.data[i])):\n            row.append(self.data[i][j] + other.data[i][j])\n        result.append(row)\n    return Matrix(result)",
            "explanation": "매트릭스 덧셈에서는 타입과 크기를 검사하여 유효한 연산만 허용해야 합니다."
        },
        {
            "id": 30,
            "type": "design_pattern",
            "difficulty": "expert",
            "question": "Flyweight 패턴을 특수 메서드와 함께 구현하여 메모리 효율적인 Point 클래스를 만드세요. 같은 좌표의 Point 객체는 하나만 생성되어야 합니다.",
            "answer": "class Point:\n    _instances = {}\n    \n    def __new__(cls, x, y):\n        if (x, y) not in cls._instances:\n            instance = super().__new__(cls)\n            cls._instances[(x, y)] = instance\n        return cls._instances[(x, y)]\n    \n    def __init__(self, x, y):\n        if hasattr(self, '_initialized'):\n            return\n        self.x = x\n        self.y = y\n        self._initialized = True\n    \n    def __str__(self):\n        return f\"Point({self.x}, {self.y})\"\n    \n    def __repr__(self):\n        return f\"Point({self.x}, {self.y})\"\n    \n    def __eq__(self, other):\n        if isinstance(other, Point):\n            return self.x == other.x and self.y == other.y\n        return False\n    \n    def __hash__(self):\n        return hash((self.x, self.y))",
            "explanation": "Flyweight 패턴을 __new__ 메서드로 구현하여 같은 좌표의 Point 인스턴스를 재사용하고, 적절한 특수 메서드들을 추가로 구현합니다."
        }
    ]
}