{"config":{"lang":["ko"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"\ud83d\udc0d Python Tutorial - \ud30c\uc774\uc36c \uc644\uc804\uc815\ubcf5","text":"<p>\ud658\uc601\ud569\ub2c8\ub2e4! Python Tutorial - \ud30c\uc774\uc36c \uc644\uc804\uc815\ubcf5\uc740 \ucd08\uae09\ubd80\ud130 \uace0\uae09\uae4c\uc9c0 \uccb4\uacc4\uc801\uc778 \ud30c\uc774\uc36c \ud559\uc2b5\uc744 \uc704\ud55c \uc644\uc804\ud55c \uac00\uc774\ub4dc\uc785\ub2c8\ub2e4.</p>"},{"location":"#_1","title":"\u2728 \ud2b9\uc9d5","text":"<ul> <li>\ud83c\udfaf \uccb4\uacc4\uc801 \ud559\uc2b5: \ucd08\uae09 \u2192 \uc911\uae09 \u2192 \uace0\uae09 \ub2e8\uacc4\ubcc4 \uad6c\uc131</li> <li>\ud83d\udcbb \uc2e4\uc2b5 \uc911\uc2ec: \ud48d\ubd80\ud55c \ucf54\ub4dc \uc608\uc81c\uc640 \uc2e4\uc2b5 \ubb38\uc81c</li> <li>\ud83d\udcda \ud3ec\uad04\uc801 \ub0b4\uc6a9: \uae30\ucd08 \ubb38\ubc95\ubd80\ud130 \uace0\uae09 \uc8fc\uc81c\uae4c\uc9c0 \uc804 \uc601\uc5ed \ucee4\ubc84</li> <li>\ud83e\uddea \ud034\uc988 \uc2dc\uc2a4\ud15c: \uac01 \ucc55\ud130\ubcc4 \uc774\ud574\ub3c4 \uc810\uac80 \ud034\uc988</li> <li>\ud83c\udf10 \ubc18\uc751\ud615 \ub514\uc790\uc778: \ubaa8\ub4e0 \ub514\ubc14\uc774\uc2a4\uc5d0\uc11c \ucd5c\uc801\ud654\ub41c \ud559\uc2b5 \uacbd\ud5d8</li> </ul>"},{"location":"#_2","title":"\ud83d\uddfa\ufe0f \ud559\uc2b5 \uacbd\ub85c","text":""},{"location":"#11","title":"\ud83d\udfe2 \ucd08\uae09 \uacfc\uc815 (11\uac1c \ucc55\ud130)","text":"<p>\ud30c\uc774\uc36c\uc758 \uae30\ucd08\ub97c \ub2e4\uc9c0\ub294 \ub2e8\uacc4\uc785\ub2c8\ub2e4.</p> <ul> <li>\u2705 \ud30c\uc774\uc36c \uc18c\uac1c \ubc0f \ud658\uacbd \uc124\uc815</li> <li>\u2705 \ubcc0\uc218\uc640 \ub370\uc774\ud130\ud0c0\uc785</li> <li>\u2705 \ubb38\uc790\uc5f4 \ucc98\ub9ac</li> <li>\u2705 \uc5f0\uc0b0\uc790\uc640 \ud45c\ud604\uc2dd</li> <li>\u2705 \uc785\ucd9c\ub825 \ucc98\ub9ac</li> <li>\u2705 \uc870\uac74\ubb38\uacfc \ubc18\ubcf5\ubb38</li> <li>\u2705 \uc790\ub8cc\uad6c\uc870 (\ub9ac\uc2a4\ud2b8, \ud29c\ud50c, \ub515\uc154\ub108\ub9ac, \uc9d1\ud569)</li> <li>\u2705 \ud568\uc218 \uae30\ucd08</li> <li>\u2705 \uc624\ub958 \ucc98\ub9ac\uc640 \ub514\ubc84\uae45</li> </ul>"},{"location":"#14","title":"\ud83d\udfe1 \uc911\uae09 \uacfc\uc815 (14\uac1c \ucc55\ud130)","text":"<p>\uc2e4\ubb34\uc5d0 \ud544\uc694\ud55c \uace0\uae09 \uae30\ub2a5\ub4e4\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4.</p> <ul> <li>\u2705 \uace0\uae09 \ud568\uc218 \ubc0f \ub78c\ub2e4</li> <li>\u2705 \ud30c\uc77c \ucc98\ub9ac\uc640 \ub370\uc774\ud130 \ud615\uc2dd</li> <li>\u2705 \uc815\uaddc\ud45c\ud604\uc2dd</li> <li>\u2705 \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d</li> <li>\u2705 \uc0c1\uc18d\uacfc \ub2e4\ud615\uc131</li> <li>\u2705 \ubaa8\ub4c8\uacfc \ud328\ud0a4\uc9c0</li> <li>\u2705 \uc608\uc678 \ucc98\ub9ac</li> <li>\u2705 \uc774\ud130\ub808\uc774\ud130\uc640 \uc81c\ub108\ub808\uc774\ud130</li> <li>\u2705 \uba40\ud2f0\uc2a4\ub808\ub529\uacfc \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d</li> <li>\u2705 \ud14c\uc2a4\ud305\uacfc \ub514\ubc84\uae45</li> <li>\u2705 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9</li> <li>\u2705 \uc6f9 \uc2a4\ud06c\ub798\ud551\uacfc API</li> <li>\u2705 GUI \ud504\ub85c\uadf8\ub798\ubc0d</li> </ul>"},{"location":"#5","title":"\ud83d\udd34 \uace0\uae09 \uacfc\uc815 (5\uac1c \ucc55\ud130)","text":"<p>\ud30c\uc774\uc36c\uc758 \uae4a\uc774\uc788\ub294 \uc774\ud574\uc640 \ucd5c\uc801\ud654 \uae30\ubc95\uc744 \ub2e4\ub8f9\ub2c8\ub2e4.</p> <ul> <li>\u2705 \ud30c\uc774\uc36c \ub0b4\ubd80\uad6c\uc870\uc640 \uba54\ubaa8\ub9ac \uad00\ub9ac</li> <li>\u2705 \uba54\ud0c0\ud074\ub798\uc2a4\uc640 \ub514\uc2a4\ud06c\ub9bd\ud130</li> <li>\u2705 \uace0\uae09 \ub370\ucf54\ub808\uc774\ud130\uc640 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800</li> <li>\u2705 \uace0\uae09 \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131</li> <li>\u2705 \ub124\ud2b8\uc6cc\ud0b9\uacfc \uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d</li> </ul>"},{"location":"#_3","title":"\ud83d\ude80 \uc2dc\uc791\ud558\uae30","text":"<ol> <li>\ucee4\ub9ac\ud058\ub7fc \ud655\uc778 - \uc804\uccb4 \ud559\uc2b5 \uacc4\ud68d\uc744 \uc0b4\ud3b4\ubcf4\uc138\uc694</li> <li>\ucd08\uae09 \ud29c\ud1a0\ub9ac\uc5bc - \ud30c\uc774\uc36c \uae30\ucd08\ubd80\ud130 \uc2dc\uc791\ud558\uc138\uc694</li> <li>\ud034\uc988 - \ud559\uc2b5\ud55c \ub0b4\uc6a9\uc744 \uc810\uac80\ud574\ubcf4\uc138\uc694</li> </ol>"},{"location":"#_4","title":"\ud83d\udcd6 \uc0ac\uc6a9\ubc95","text":"<ul> <li>\uc67c\ucabd \ub124\ube44\uac8c\uc774\uc158: \uc6d0\ud558\ub294 \ucc55\ud130\ub85c \ubc14\ub85c \uc774\ub3d9</li> <li>\uac80\uc0c9 \uae30\ub2a5: \uc0c1\ub2e8 \uac80\uc0c9\ucc3d\uc5d0\uc11c \uc6d0\ud558\ub294 \ub0b4\uc6a9 \uac80\uc0c9</li> <li>\ub2e4\ud06c \ubaa8\ub4dc: \uc0c1\ub2e8 \uc6b0\uce21 \ubc84\ud2bc\uc73c\ub85c \ud14c\ub9c8 \ubcc0\uacbd</li> <li>\ucf54\ub4dc \ubcf5\uc0ac: \ucf54\ub4dc \ube14\ub85d\uc758 \ubcf5\uc0ac \ubc84\ud2bc \ud65c\uc6a9</li> </ul>"},{"location":"#_5","title":"\ud83e\udd1d \uae30\uc5ec\ud558\uae30","text":"<p>\uc774 \ud504\ub85c\uc81d\ud2b8\ub294 \uc624\ud508\uc18c\uc2a4\uc785\ub2c8\ub2e4. \uac1c\uc120\uc0ac\ud56d\uc774\ub098 \uc624\ub958\ub97c \ubc1c\uacac\ud558\uc2dc\uba74 GitHub \uc800\uc7a5\uc18c\uc5d0\uc11c \uae30\uc5ec\ud574\uc8fc\uc138\uc694!</p> <p>\uc990\uac70\uc6b4 \ud30c\uc774\uc36c \ud559\uc2b5\ub418\uc138\uc694! \ud83c\udf89 </p>"},{"location":"curricula/","title":"\ud83d\udcda \ucee4\ub9ac\ud058\ub7fc \uac1c\uc694","text":"<p>Python Tutorial\uc758 \uccb4\uacc4\uc801\uc778 \ud559\uc2b5 \uacfc\uc815\uc744 \uc548\ub0b4\ud569\ub2c8\ub2e4. \uac01 \uacfc\uc815\uc740 \uc21c\ucc28\uc801\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\uba70, \uc774\uc804 \ub2e8\uacc4\uc758 \uc774\ud574\ub97c \ubc14\ud0d5\uc73c\ub85c \uc9c4\ud589\ub429\ub2c8\ub2e4.</p>"},{"location":"curricula/#_2","title":"\ud83c\udfaf \ud559\uc2b5 \ubaa9\ud45c","text":"<p>\ubcf8 \ucee4\ub9ac\ud058\ub7fc\uc744 \ud1b5\ud574 \ub2e4\uc74c\uc744 \ub2ec\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:</p> <ul> <li>\uae30\ucd08 \uc5ed\ub7c9: \ud30c\uc774\uc36c \ubb38\ubc95\uacfc \uae30\ubcf8 \ud504\ub85c\uadf8\ub798\ubc0d \uac1c\ub150 \uc2b5\ub4dd</li> <li>\uc2e4\ubb34 \ub2a5\ub825: \uc2e4\uc81c \ud504\ub85c\uc81d\ud2b8\uc5d0 \ud65c\uc6a9 \uac00\ub2a5\ud55c \uc911\uae09 \uae30\uc220 \uc2b5\ub4dd</li> <li>\uc804\ubb38\uc131: \uace0\uae09 \ud30c\uc774\uc36c \uae30\ubc95\uacfc \ucd5c\uc801\ud654 \ubc29\ubc95 \uc774\ud574</li> </ul>"},{"location":"curricula/#_3","title":"\ud83d\udccb \uacfc\uc815\ubcc4 \uc548\ub0b4","text":""},{"location":"curricula/#_4","title":"\ud83d\udfe2 \ucd08\uae09 \uacfc\uc815","text":"<ul> <li>\ub300\uc0c1: \ud504\ub85c\uadf8\ub798\ubc0d \uc785\ubb38\uc790, \ud30c\uc774\uc36c \ucd08\ubcf4\uc790</li> <li>\uae30\uac04: 4-6\uc8fc (\uc8fc 3-4\uc2dc\uac04 \ud559\uc2b5 \uae30\uc900)</li> <li>\ubaa9\ud45c: \ud30c\uc774\uc36c \uae30\ucd08 \ubb38\ubc95\uacfc \uae30\ubcf8 \ud504\ub85c\uadf8\ub798\ubc0d \ud328\ub7ec\ub2e4\uc784 \uc774\ud574</li> </ul>"},{"location":"curricula/#_5","title":"\ud83d\udfe1 \uc911\uae09 \uacfc\uc815","text":"<ul> <li>\ub300\uc0c1: \ud30c\uc774\uc36c \uae30\ucd08\ub97c \ub9c8\uce5c \ud559\uc2b5\uc790</li> <li>\uae30\uac04: 6-8\uc8fc (\uc8fc 4-5\uc2dc\uac04 \ud559\uc2b5 \uae30\uc900)</li> <li>\ubaa9\ud45c: \uc2e4\ubb34\uc5d0\uc11c \ud65c\uc6a9 \uac00\ub2a5\ud55c \uace0\uae09 \uae30\ub2a5\uacfc \ub77c\uc774\ube0c\ub7ec\ub9ac \ud65c\uc6a9\ubc95 \uc2b5\ub4dd</li> </ul>"},{"location":"curricula/#_6","title":"\ud83d\udd34 \uace0\uae09 \uacfc\uc815","text":"<ul> <li>\ub300\uc0c1: \ud30c\uc774\uc36c \uc911\uae09 \uacfc\uc815\uc744 \uc644\ub8cc\ud55c \uac1c\ubc1c\uc790</li> <li>\uae30\uac04: 4-5\uc8fc (\uc8fc 5-6\uc2dc\uac04 \ud559\uc2b5 \uae30\uc900)</li> <li>\ubaa9\ud45c: \ud30c\uc774\uc36c \ub0b4\ubd80 \ub3d9\uc791 \uc6d0\ub9ac\uc640 \uc131\ub2a5 \ucd5c\uc801\ud654 \uae30\ubc95 \ub9c8\uc2a4\ud130</li> </ul>"},{"location":"curricula/#_7","title":"\ud83d\udcca \ud559\uc2b5 \uc9c4\ub3c4 \uad00\ub9ac","text":"<p>\uac01 \uacfc\uc815\ubcc4\ub85c \ub2e4\uc74c\uacfc \uac19\uc740 \ud3c9\uac00 \ubc29\uc2dd\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4:</p> <ul> <li>\uc774\ub860 \ud034\uc988: \uac01 \ucc55\ud130 \uc644\ub8cc \ud6c4 \uac1c\ub150 \ud655\uc778</li> <li>\uc2e4\uc2b5 \uacfc\uc81c: \ud559\uc2b5\ud55c \ub0b4\uc6a9\uc744 \uc801\uc6a9\ud558\ub294 \ucf54\ub529 \uacfc\uc81c</li> <li>\ud504\ub85c\uc81d\ud2b8: \uacfc\uc815 \uc644\ub8cc \ud6c4 \uc885\ud569\uc801\uc778 \uc2e4\uc2b5 \ud504\ub85c\uc81d\ud2b8</li> </ul>"},{"location":"curricula/#_8","title":"\ud83d\udca1 \ud559\uc2b5 \ud301","text":"<ol> <li>\uc21c\uc11c\ub300\ub85c \ud559\uc2b5: \uac01 \ucc55\ud130\ub294 \uc774\uc804 \ub0b4\uc6a9\uc744 \uae30\ubc18\uc73c\ub85c \uad6c\uc131</li> <li>\uc2e4\uc2b5 \uc911\uc2ec: \ucf54\ub4dc\ub97c \uc9c1\uc811 \uc791\uc131\ud558\uace0 \uc2e4\ud589\ud574\ubcf4\uae30</li> <li>\ubc18\ubcf5 \ud559\uc2b5: \uc5b4\ub824\uc6b4 \uac1c\ub150\uc740 \uc5ec\ub7ec \ubc88 \ubcf5\uc2b5</li> <li>\uc751\uc6a9 \uc5f0\uc2b5: \ubc30\uc6b4 \ub0b4\uc6a9\uc744 \ub2e4\ub978 \ubb38\uc81c\uc5d0 \uc801\uc6a9\ud574\ubcf4\uae30</li> </ol> <p>\uc9c0\uae08 \ubc14\ub85c \ucd08\uae09 \uacfc\uc815\ubd80\ud130 \uc2dc\uc791\ud574\ubcf4\uc138\uc694! \ud83d\ude80 </p>"},{"location":"curricula/advanced_curriculum/","title":"\ud30c\uc774\uc36c \uace0\uae09 \ucee4\ub9ac\ud058\ub7fc","text":""},{"location":"curricula/advanced_curriculum/#_2","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<ul> <li>\ud30c\uc774\uc36c\uc758 \uace0\uae09 \uae30\ub2a5\uacfc \ub0b4\ubd80 \ub3d9\uc791 \uc6d0\ub9ac \uc774\ud574</li> <li>\uc804\ubb38\uc801\uc778 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c \uae30\ubc95 \uc2b5\ub4dd</li> <li>\uc131\ub2a5 \ucd5c\uc801\ud654\uc640 \ud655\uc7a5\uc131 \uc788\ub294 \uc544\ud0a4\ud14d\ucc98 \uc124\uacc4</li> <li>\uc2e4\ubb34 \ud504\ub85c\uc81d\ud2b8\uc5d0 \ubc14\ub85c \uc801\uc6a9 \uac00\ub2a5\ud55c \uc804\ubb38 \uae30\uc220 \uc2b5\ub4dd</li> </ul>"},{"location":"curricula/advanced_curriculum/#_3","title":"\ub300\uc0c1","text":"<ul> <li>\ud30c\uc774\uc36c \uc911\uae09 \uacfc\uc815\uc744 \uc644\ub8cc\ud55c \ud559\uc2b5\uc790</li> <li>\uc2e4\ubb34\uc5d0\uc11c \ud30c\uc774\uc36c\uc744 \uc0ac\uc6a9\ud558\ub294 \uac1c\ubc1c\uc790</li> <li>\ubcf5\uc7a1\ud55c \uc2dc\uc2a4\ud15c \uc124\uacc4\uc640 \ucd5c\uc801\ud654\uc5d0 \uad00\uc2ec \uc788\ub294 \uac1c\ubc1c\uc790</li> <li>\ud504\ub85c\uadf8\ub798\ubc0d \uacbd\ud5d8 1\ub144 \uc774\uc0c1</li> </ul>"},{"location":"curricula/advanced_curriculum/#_4","title":"\uc608\uc0c1 \ud559\uc2b5 \uae30\uac04","text":"<p>8-10\uc8fc (\uc8fc 5-6\uc2dc\uac04)</p>"},{"location":"curricula/advanced_curriculum/#_5","title":"\ucc55\ud130 \uad6c\uc131","text":""},{"location":"curricula/advanced_curriculum/#chapter-1","title":"Chapter 1: \ud30c\uc774\uc36c \ub0b4\ubd80 \uad6c\uc870\uc640 \uba54\ubaa8\ub9ac \uad00\ub9ac","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ud30c\uc774\uc36c\uc758 \ub0b4\ubd80 \ub3d9\uc791 \uc6d0\ub9ac\ub97c \uae4a\uc774 \uc774\ud574\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - CPython \uc778\ud130\ud504\ub9ac\ud130 \uad6c\uc870 - \ubc14\uc774\ud2b8\ucf54\ub4dc\uc640 \ucef4\ud30c\uc77c \uacfc\uc815 - \uac1d\uccb4\uc640 \ucc38\uc870 \uce74\uc6b4\ud305 - \uac00\ube44\uc9c0 \uceec\ub809\uc158 \uba54\ucee4\ub2c8\uc998 - \uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1\uacfc \ucd5c\uc801\ud654 - Global Interpreter Lock (GIL) \uc774\ud574</p>"},{"location":"curricula/advanced_curriculum/#chapter-2","title":"Chapter 2: \uba54\ud0c0\ud074\ub798\uc2a4\uc640 \ub514\uc2a4\ud06c\ub9bd\ud130","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ud30c\uc774\uc36c\uc758 \uace0\uae09 \uac1d\uccb4\uc9c0\ud5a5 \uae30\ub2a5\uc744 \ub9c8\uc2a4\ud130\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \uba54\ud0c0\ud074\ub798\uc2a4 \uac1c\ub150\uacfc \uad6c\ud604 - \ud074\ub798\uc2a4 \uc0dd\uc131 \uacfc\uc815 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5 - \ub514\uc2a4\ud06c\ub9bd\ud130 \ud504\ub85c\ud1a0\ucf5c - property\uc640 \uace0\uae09 \uc18d\uc131 \uad00\ub9ac - new vs init - \ub3d9\uc801 \ud074\ub798\uc2a4 \uc0dd\uc131</p>"},{"location":"curricula/advanced_curriculum/#chapter-3","title":"Chapter 3: \uace0\uae09 \ub370\ucf54\ub808\uc774\ud130\uc640 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ucf54\ub4dc \uc7ac\uc0ac\uc6a9\uc131\uacfc \uac00\ub3c5\uc131\uc744 \uadf9\ub300\ud654\ud558\ub294 \ud328\ud134\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \ud074\ub798\uc2a4 \uae30\ubc18 \ub370\ucf54\ub808\uc774\ud130 - \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub294 \ub370\ucf54\ub808\uc774\ud130 - functools.wraps\uc640 \uba54\ud0c0\ub370\uc774\ud130 \ubcf4\uc874 - \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uace0\uae09 \ud65c\uc6a9 - contextlib \ubaa8\ub4c8 \uc2ec\ud654 - \uc911\ucca9 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800</p>"},{"location":"curricula/advanced_curriculum/#chapter-4","title":"Chapter 4: \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131 \uc2ec\ud654","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uace0\uc131\ub2a5 \ub3d9\uc2dc\uc131 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uad6c\ud604\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - asyncio \uace0\uae09 \ud328\ud134 - \ucee4\uc2a4\ud140 \uc774\ubca4\ud2b8 \ub8e8\ud504 - concurrent.futures \ud65c\uc6a9 - \ub3d9\uae30\ud654 \ud504\ub9ac\ubbf8\ud2f0\ube0c (Lock, Semaphore, Condition) - \ubb34\ub77d \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08 - \ubd84\uc0b0 \uc791\uc5c5 \ucc98\ub9ac (Celery)</p>"},{"location":"curricula/advanced_curriculum/#chapter-5","title":"Chapter 5: \ub124\ud2b8\uc6cc\ud0b9\uacfc \uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uc800\uc218\uc900 \ub124\ud2b8\uc6cc\ud06c \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uad6c\ud604\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - TCP/UDP \uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d - \ube44\ub3d9\uae30 \uc18c\ucf13 \ucc98\ub9ac - WebSocket \uad6c\ud604 - HTTP \ud504\ub85c\ud1a0\ucf5c \uc138\ubd80\uc0ac\ud56d - SSL/TLS \ucc98\ub9ac - \ub124\ud2b8\uc6cc\ud06c \uc131\ub2a5 \ucd5c\uc801\ud654</p>"},{"location":"curricula/advanced_curriculum/#chapter-6","title":"Chapter 6: \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uace0\uae09 \ud65c\uc6a9","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ub300\uaddc\ubaa8 \ub370\uc774\ud130\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - SQLAlchemy ORM \uc2ec\ud654 - \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 - \uc5f0\uacb0 \ud480 \ucd5c\uc801\ud654 - \uce90\uc2f1 \uc804\ub7b5 (Redis, Memcached) - \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0e4\ub529\uacfc \ub808\ud50c\ub9ac\ucf00\uc774\uc158 - NoSQL \uace0\uae09 \ud65c\uc6a9 (MongoDB, Elasticsearch)</p>"},{"location":"curricula/advanced_curriculum/#chapter-7-djangoflask","title":"Chapter 7: \uc6f9 \ud504\ub808\uc784\uc6cc\ud06c \uc2ec\ud654 (Django/Flask)","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uc0dd\uc0b0\uc131 \uc788\ub294 \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - Django \uace0\uae09 \ud328\ud134 (MTV, \ubbf8\ub4e4\uc6e8\uc5b4) - Flask \ud655\uc7a5\uacfc \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5 - RESTful API \uc124\uacc4\uc640 \uad6c\ud604 - \uc778\uc99d\uacfc \uad8c\ud55c \uad00\ub9ac - \uc6f9 \ubcf4\uc548 best practices - \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uc544\ud0a4\ud14d\ucc98</p>"},{"location":"curricula/advanced_curriculum/#chapter-8","title":"Chapter 8: \ud14c\uc2a4\ud305\uacfc \ud488\uc9c8 \ubcf4\uc99d","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uace0\ud488\uc9c8 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub97c \ubcf4\uc7a5\ud558\ub294 \ud14c\uc2a4\ud305 \uc804\ub7b5\uc744 \uc218\ub9bd\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \ud14c\uc2a4\ud2b8 \uc804\ub7b5\uacfc \ud53c\ub77c\ubbf8\ub4dc - Mock\uacfc Patch \uace0\uae09 \ud65c\uc6a9 - \ud1b5\ud569 \ud14c\uc2a4\ud2b8\uc640 E2E \ud14c\uc2a4\ud2b8 - \uc131\ub2a5 \ud14c\uc2a4\ud2b8\uc640 \ubd80\ud558 \ud14c\uc2a4\ud2b8 - CI/CD \ud30c\uc774\ud504\ub77c\uc778 \uad6c\ucd95 - \ucf54\ub4dc \ud488\uc9c8 \ub3c4\uad6c (black, flake8, mypy)</p>"},{"location":"curricula/advanced_curriculum/#chapter-9","title":"Chapter 9: \uc131\ub2a5 \ucd5c\uc801\ud654\uc640 \ud504\ub85c\ud30c\uc77c\ub9c1","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uace0\uc131\ub2a5 \ud30c\uc774\uc36c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \ud504\ub85c\ud30c\uc77c\ub9c1 \ub3c4\uad6c (cProfile, line_profiler) - \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ucd5c\uc801\ud654 - \uc54c\uace0\ub9ac\uc998 \ubcf5\uc7a1\ub3c4 \ubd84\uc11d - Cython\uacfc C \ud655\uc7a5 - NumPy\uc640 \ubca1\ud130\ud654 - JIT \ucef4\ud30c\uc77c (Numba, PyPy)</p>"},{"location":"curricula/advanced_curriculum/#chapter-10","title":"Chapter 10: \ubd84\uc0b0 \uc2dc\uc2a4\ud15c\uacfc \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ud655\uc7a5 \uac00\ub2a5\ud55c \ubd84\uc0b0 \uc2dc\uc2a4\ud15c\uc744 \uc124\uacc4\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \uba54\uc2dc\uc9c0 \ud050 (RabbitMQ, Kafka) - \uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac - \ub85c\ub4dc \ubc38\ub7f0\uc2f1 - \uc7a5\uc560 \ucc98\ub9ac\uc640 \ubcf5\uad6c (Circuit Breaker) - \ubd84\uc0b0 \ud2b8\ub808\uc774\uc2f1\uacfc \ubaa8\ub2c8\ud130\ub9c1 - \ucee8\ud14c\uc774\ub108\ud654 (Docker, Kubernetes)</p>"},{"location":"curricula/advanced_curriculum/#chapter-11","title":"Chapter 11: \ub370\uc774\ud130 \uc0ac\uc774\uc5b8\uc2a4\uc640 \uba38\uc2e0\ub7ec\ub2dd \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ub370\uc774\ud130 \uc911\uc2ec \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - NumPy\uc640 Pandas \uace0\uae09 \uae30\ubc95 - \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ucc98\ub9ac (Dask, Vaex) - \uba38\uc2e0\ub7ec\ub2dd \ud30c\uc774\ud504\ub77c\uc778 \uad6c\ucd95 - MLOps\uc640 \ubaa8\ub378 \ubc30\ud3ec - \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778 \uc790\ub3d9\ud654 - \uc2e4\uc2dc\uac04 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9ac\ubc0d</p>"},{"location":"curricula/advanced_curriculum/#chapter-12","title":"Chapter 12: \ubcf4\uc548\uacfc \uc554\ud638\ud654","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ubcf4\uc548\uc774 \uac15\ud654\ub41c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \uc554\ud638\ud654\uc640 \ud574\uc2f1 (cryptography \ub77c\uc774\ube0c\ub7ec\ub9ac) - JWT\uc640 OAuth \uad6c\ud604 - SQL \uc778\uc81d\uc158\uacfc XSS \ubc29\uc5b4 - \uc785\ub825 \uc720\ud6a8\uc131 \uac80\uc0ac - \uc548\uc804\ud55c API \uc124\uacc4 - \ubcf4\uc548 \uac10\uc0ac\uc640 \ucde8\uc57d\uc810 \ubd84\uc11d</p>"},{"location":"curricula/advanced_curriculum/#chapter-13","title":"Chapter 13: \uc2dc\uc2a4\ud15c \ud1b5\ud569\uacfc \uc790\ub3d9\ud654","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uc2dc\uc2a4\ud15c \uc790\ub3d9\ud654\uc640 \uc778\ud504\ub77c \uad00\ub9ac\ub97c \uad6c\ud604\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1\uacfc \ub85c\uae45 - \uc124\uc815 \uad00\ub9ac\uc640 \ud658\uacbd \ubcc0\uc218 - \uc2a4\ucf00\uc904\ub9c1\uacfc \ud06c\ub860\uc7a1 - \ud30c\uc77c \uc2dc\uc2a4\ud15c\uacfc \ub514\ub809\ud1a0\ub9ac \uac10\uc2dc - \uc678\ubd80 \uc2dc\uc2a4\ud15c \uc5f0\ub3d9 (API, \uc6f9\ud6c5) - Infrastructure as Code</p>"},{"location":"curricula/advanced_curriculum/#chapter-14","title":"Chapter 14: \ud328\ud0a4\uc9c0 \uac1c\ubc1c\uacfc \ubc30\ud3ec","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ud328\ud0a4\uc9c0\ub97c \uac1c\ubc1c\ud558\uace0 \ubc30\ud3ec\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - setup.py\uc640 pyproject.toml - PyPI \ud328\ud0a4\uc9c0 \ubc30\ud3ec - \ubc84\uc804 \uad00\ub9ac\uc640 \uc2dc\ub9e8\ud2f1 \ubc84\uc800\ub2dd - \ubb38\uc11c\ud654 (Sphinx, ReadTheDocs) - \ub77c\uc774\uc13c\uc2a4\uc640 \uc800\uc791\uad8c - \uc624\ud508\uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8 \uad00\ub9ac</p>"},{"location":"curricula/advanced_curriculum/#chapter-15","title":"Chapter 15: \uc544\ud0a4\ud14d\ucc98 \ud328\ud134\uacfc \uc124\uacc4 \uc6d0\uce59","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ud655\uc7a5 \uac00\ub2a5\ud558\uace0 \uc720\uc9c0\ubcf4\uc218 \uac00\ub2a5\ud55c \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub97c \uc124\uacc4\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - SOLID \uc6d0\uce59\uacfc \ub514\uc790\uc778 \ud328\ud134 - Clean Architecture - Domain Driven Design (DDD) - Event Sourcing\uacfc CQRS - \ud5e5\uc0ac\uace0\ub0a0 \uc544\ud0a4\ud14d\ucc98 - \ub808\uac70\uc2dc \uc2dc\uc2a4\ud15c \ub9c8\uc774\uadf8\ub808\uc774\uc158</p>"},{"location":"curricula/advanced_curriculum/#_6","title":"\ud3c9\uac00 \ubc29\ubc95","text":"<ul> <li>\uc2e4\ubb34 \uc2dc\ub098\ub9ac\uc624 \uae30\ubc18 \ud504\ub85c\uc81d\ud2b8</li> <li>\ucf54\ub4dc \ub9ac\ubdf0\uc640 \uc544\ud0a4\ud14d\ucc98 \uc124\uacc4</li> <li>\uc131\ub2a5 \ucd5c\uc801\ud654 \uacfc\uc81c</li> <li>\uc624\ud508\uc18c\uc2a4 \uae30\uc5ec \ud504\ub85c\uc81d\ud2b8</li> <li>\ucd5c\uc885 \ucea1\uc2a4\ud1a4 \ud504\ub85c\uc81d\ud2b8: \ud480\uc2a4\ud0dd \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uac1c\ubc1c</li> </ul>"},{"location":"curricula/advanced_curriculum/#_7","title":"\uad8c\uc7a5 \uc2e4\uc2b5 \ud504\ub85c\uc81d\ud2b8","text":"<ol> <li>\uace0\uc131\ub2a5 \uc6f9 API \uc11c\ubc84 (FastAPI + Redis + PostgreSQL)</li> <li>\uc2e4\uc2dc\uac04 \ucc44\ud305 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 (WebSocket + Redis)</li> <li>\ubd84\uc0b0 \uc791\uc5c5 \ucc98\ub9ac \uc2dc\uc2a4\ud15c (Celery + RabbitMQ)</li> <li>\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uae30\ubc18 \uc804\uc790\uc0c1\uac70\ub798 \ud50c\ub7ab\ud3fc</li> <li>\ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\uacfc \uc2e4\uc2dc\uac04 \ub300\uc2dc\ubcf4\ub4dc</li> <li>\uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \uc11c\ube59 \ud50c\ub7ab\ud3fc</li> <li>\ubaa8\ub2c8\ud130\ub9c1\uacfc \ub85c\uae45 \uc2dc\uc2a4\ud15c</li> <li>\uc624\ud508\uc18c\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac \uac1c\ubc1c \ubc0f \ubc30\ud3ec</li> </ol>"},{"location":"curricula/advanced_curriculum/#_8","title":"\ucee4\ub9ac\uc5b4 \ubc1c\uc804 \ubc29\ud5a5","text":"<ul> <li>\ubc31\uc5d4\ub4dc \uac1c\ubc1c\uc790: \uc6f9 API, \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc804\ubb38</li> <li>\ub370\uc774\ud130 \uc5d4\uc9c0\ub2c8\uc5b4: \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778, ETL, \ube45\ub370\uc774\ud130 \ucc98\ub9ac</li> <li>DevOps \uc5d4\uc9c0\ub2c8\uc5b4: \uc778\ud504\ub77c \uc790\ub3d9\ud654, CI/CD, \ucee8\ud14c\uc774\ub108 \uc624\ucf00\uc2a4\ud2b8\ub808\uc774\uc158</li> <li>\uc2dc\uc2a4\ud15c \uc544\ud0a4\ud14d\ud2b8: \ub300\uaddc\ubaa8 \uc2dc\uc2a4\ud15c \uc124\uacc4, \uc131\ub2a5 \ucd5c\uc801\ud654</li> <li>MLOps \uc5d4\uc9c0\ub2c8\uc5b4: \uba38\uc2e0\ub7ec\ub2dd \uc2dc\uc2a4\ud15c \uc6b4\uc601, \ubaa8\ub378 \ub77c\uc774\ud504\uc0ac\uc774\ud074 \uad00\ub9ac</li> <li>\ubcf4\uc548 \uc804\ubb38\uac00: \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ubcf4\uc548, \ucde8\uc57d\uc810 \ubd84\uc11d</li> <li>\uc624\ud508\uc18c\uc2a4 \uba54\uc778\ud14c\uc774\ub108: \ucee4\ubba4\ub2c8\ud2f0 \ud504\ub85c\uc81d\ud2b8 \ub9ac\ub529</li> </ul>"},{"location":"curricula/advanced_curriculum/#_9","title":"\uc9c0\uc18d\uc801 \ud559\uc2b5\uc744 \uc704\ud55c \ub9ac\uc18c\uc2a4","text":"<ul> <li>Python Enhancement Proposals (PEPs) \ucd94\uc801</li> <li>\ucee8\ud37c\ub7f0\uc2a4 \ubc1c\ud45c (PyCon, EuroPython)</li> <li>\uc624\ud508\uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8 \uae30\uc5ec</li> <li>\uae30\uc220 \ube14\ub85c\uadf8\uc640 \ub17c\ubb38 \uc77d\uae30</li> <li>\ub3d9\ub8cc \uac1c\ubc1c\uc790\uc640\uc758 \ucf54\ub4dc \ub9ac\ubdf0</li> <li>\uc0c8\ub85c\uc6b4 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 \ub3c4\uad6c \uc2e4\ud5d8 </li> </ul>"},{"location":"curricula/beginner_curriculum/","title":"\ud30c\uc774\uc36c \ucd08\uae09 \ucee4\ub9ac\ud058\ub7fc","text":""},{"location":"curricula/beginner_curriculum/#_2","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<ul> <li>\ud30c\uc774\uc36c \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uae30\ubcf8 \uac1c\ub150 \uc774\ud574</li> <li>\uae30\ubcf8 \ub370\uc774\ud130 \ud0c0\uc785\uacfc \ubcc0\uc218 \uc0ac\uc6a9\ubc95 \uc2b5\ub4dd</li> <li>\uac04\ub2e8\ud55c \ud504\ub85c\uadf8\ub7a8 \uc791\uc131 \ub2a5\ub825 \uac1c\ubc1c</li> <li>\ud504\ub85c\uadf8\ub798\ubc0d \uc0ac\uace0\ub825 \uae30\ucd08 \ud568\uc591</li> </ul>"},{"location":"curricula/beginner_curriculum/#_3","title":"\ub300\uc0c1","text":"<ul> <li>\ud504\ub85c\uadf8\ub798\ubc0d \uacbd\ud5d8\uc774 \uc804\ud600 \uc5c6\ub294 \ucd08\ubcf4\uc790</li> <li>\ub2e4\ub978 \uc5b8\uc5b4 \uacbd\ud5d8\uc740 \uc788\uc9c0\ub9cc \ud30c\uc774\uc36c\uc740 \ucc98\uc74c\uc778 \ud559\uc2b5\uc790</li> </ul>"},{"location":"curricula/beginner_curriculum/#_4","title":"\uc608\uc0c1 \ud559\uc2b5 \uae30\uac04","text":"<p>4-6\uc8fc (\uc8fc 3-4\uc2dc\uac04)</p>"},{"location":"curricula/beginner_curriculum/#_5","title":"\ucc55\ud130 \uad6c\uc131","text":""},{"location":"curricula/beginner_curriculum/#chapter-1","title":"Chapter 1: \ud30c\uc774\uc36c \uc18c\uac1c\uc640 \uac1c\ubc1c\ud658\uacbd \uc124\uc815","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ud30c\uc774\uc36c\uc774 \ubb34\uc5c7\uc778\uc9c0 \uc774\ud574\ud558\uace0 \uac1c\ubc1c\ud658\uacbd\uc744 \uad6c\ucd95\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \ud30c\uc774\uc36c \uc18c\uac1c \ubc0f \ud2b9\uc9d5 - \ud30c\uc774\uc36c \uc124\uce58 (Windows, Mac, Linux) - IDE/\ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130 \uc120\ud0dd (VSCode, PyCharm, Jupyter) - Hello World \ud504\ub85c\uadf8\ub7a8 \uc791\uc131 - \ub300\ud654\ud615 \ud30c\uc774\uc36c \uc778\ud130\ud504\ub9ac\ud130 \uc0ac\uc6a9\ubc95</p>"},{"location":"curricula/beginner_curriculum/#chapter-2","title":"Chapter 2: \ubcc0\uc218\uc640 \uae30\ubcf8 \ub370\uc774\ud130 \ud0c0\uc785","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ud30c\uc774\uc36c\uc758 \uae30\ubcf8 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uc774\ud574\ud558\uace0 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \ubcc0\uc218 \uc120\uc5b8\uacfc \ud560\ub2f9 - \uc815\uc218\ud615(int), \uc2e4\uc218\ud615(float), \ubb38\uc790\uc5f4(str), \ubd88\ub9b0(bool) - \ud0c0\uc785 \ud655\uc778\uacfc \ud615\ubcc0\ud658 - \ubcc0\uc218 \uba85\uba85 \uaddc\uce59 - \ub3d9\uc801 \ud0c0\uc774\ud551\uc758 \uac1c\ub150</p>"},{"location":"curricula/beginner_curriculum/#chapter-3","title":"Chapter 3: \ubb38\uc790\uc5f4 \ub2e4\ub8e8\uae30","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ubb38\uc790\uc5f4 \uc870\uc791\uc758 \uae30\ubcf8\uc744 \uc775\ud78c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \ubb38\uc790\uc5f4 \uc0dd\uc131\uacfc \uc778\ub371\uc2f1 - \ubb38\uc790\uc5f4 \uc2ac\ub77c\uc774\uc2f1 - \ubb38\uc790\uc5f4 \uba54\uc11c\ub4dc (split, join, replace, strip \ub4f1) - \ubb38\uc790\uc5f4 \ud3ec\ub9f7\ud305 (f-string, format) - \uc774\uc2a4\ucf00\uc774\ud504 \ubb38\uc790</p>"},{"location":"curricula/beginner_curriculum/#chapter-4","title":"Chapter 4: \uc5f0\uc0b0\uc790\uc640 \ud45c\ud604\uc2dd","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ub2e4\uc591\ud55c \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \uacc4\uc0b0\uacfc \ube44\uad50\ub97c \uc218\ud589\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \uc0b0\uc220 \uc5f0\uc0b0\uc790 (+, -, , /, //, %, *) - \ube44\uad50 \uc5f0\uc0b0\uc790 (==, !=, &lt;, &gt;, &lt;=, &gt;=) - \ub17c\ub9ac \uc5f0\uc0b0\uc790 (and, or, not) - \ud560\ub2f9 \uc5f0\uc0b0\uc790 (=, +=, -=, \ub4f1) - \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704</p>"},{"location":"curricula/beginner_curriculum/#chapter-5","title":"Chapter 5: \uc785\ub825\uacfc \ucd9c\ub825","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uc0ac\uc6a9\uc790\uc640 \uc0c1\ud638\uc791\uc6a9\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - print() \ud568\uc218 \uc0ac\uc6a9\ubc95 - input() \ud568\uc218\ub85c \uc0ac\uc6a9\uc790 \uc785\ub825 \ubc1b\uae30 - \uc785\ub825 \ub370\uc774\ud130\uc758 \ud0c0\uc785 \ubcc0\ud658 - \ucd9c\ub825 \ud3ec\ub9f7\ud305 - \uac04\ub2e8\ud55c \ub300\ud654\ud615 \ud504\ub85c\uadf8\ub7a8 \uc791\uc131</p>"},{"location":"curricula/beginner_curriculum/#chapter-6-if","title":"Chapter 6: \uc870\uac74\ubb38 (if\ubb38)","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uc870\uac74\uc5d0 \ub530\ub77c \ub2e4\ub978 \ub3d9\uc791\uc744 \uc218\ud589\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - if, elif, else \ubb38\ubc95 - \uc911\ucca9 \uc870\uac74\ubb38 - \ub17c\ub9ac \uc5f0\uc0b0\uc790\uc640 \uc870\uac74\ubb38 - \uc2e4\uc6a9\uc801\uc778 \uc870\uac74\ubb38 \uc608\uc81c - \uc0bc\ud56d \uc5f0\uc0b0\uc790</p>"},{"location":"curricula/beginner_curriculum/#chapter-7-for-while","title":"Chapter 7: \ubc18\ubcf5\ubb38 (for, while)","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ubc18\ubcf5 \uc791\uc5c5\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - for \ubc18\ubcf5\ubb38\uacfc range() \ud568\uc218 - while \ubc18\ubcf5\ubb38 - break\uc640 continue - \uc911\ucca9 \ubc18\ubcf5\ubb38 - \ubb34\ud55c\ub8e8\ud504 \uc8fc\uc758\uc0ac\ud56d</p>"},{"location":"curricula/beginner_curriculum/#chapter-8","title":"Chapter 8: \ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uc21c\uc11c\uac00 \uc788\ub294 \ub370\uc774\ud130 \uceec\ub809\uc158\uc744 \ub2e4\ub8e8\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\uacfc \uc778\ub371\uc2f1 - \ub9ac\uc2a4\ud2b8 \uba54\uc11c\ub4dc (append, insert, remove, pop \ub4f1) - \ub9ac\uc2a4\ud2b8 \uc2ac\ub77c\uc774\uc2f1\uacfc \uc5f0\uc0b0 - \ud29c\ud50c\uc758 \ud2b9\uc9d5\uacfc \uc0ac\uc6a9\ubc95 - \ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c\uc758 \ucc28\uc774\uc810</p>"},{"location":"curricula/beginner_curriculum/#chapter-9","title":"Chapter 9: \ub515\uc154\ub108\ub9ac\uc640 \uc9d1\ud569","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ud0a4-\uac12 \uc30d\uacfc \uc911\ubcf5 \uc5c6\ub294 \ub370\uc774\ud130\ub97c \ub2e4\ub8e8\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \ub515\uc154\ub108\ub9ac \uc0dd\uc131\uacfc \uc811\uadfc - \ub515\uc154\ub108\ub9ac \uba54\uc11c\ub4dc (keys, values, items, get \ub4f1) - \uc9d1\ud569(set) \uc0dd\uc131\uacfc \uc5f0\uc0b0 - \uc9d1\ud569\uc758 \uad50\uc9d1\ud569, \ud569\uc9d1\ud569, \ucc28\uc9d1\ud569 - \ub515\uc154\ub108\ub9ac\uc640 \uc9d1\ud569\uc758 \ud65c\uc6a9 \uc608\uc81c</p>"},{"location":"curricula/beginner_curriculum/#chapter-10","title":"Chapter 10: \ud568\uc218 \uae30\ucd08","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ucf54\ub4dc\ub97c \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ud568\uc218\ub85c \uad6c\uc870\ud654\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \ud568\uc218 \uc815\uc758\uc640 \ud638\ucd9c - \ub9e4\uac1c\ubcc0\uc218\uc640 \uc778\uc218 - \ubc18\ud658\uac12 (return) - \uc9c0\uc5ed\ubcc0\uc218\uc640 \uc804\uc5ed\ubcc0\uc218 - \uae30\ubcf8 \ub9e4\uac1c\ubcc0\uc218 \uac12</p>"},{"location":"curricula/beginner_curriculum/#chapter-11","title":"Chapter 11: \uc5d0\ub7ec \ucc98\ub9ac\uc640 \ub514\ubc84\uae45","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ud504\ub85c\uadf8\ub7a8 \uc624\ub958\ub97c \ucc98\ub9ac\ud558\uace0 \ub514\ubc84\uae45\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \uc77c\ubc18\uc801\uc778 \uc5d0\ub7ec \ud0c0\uc785 \uc774\ud574 - try-except \ubb38\ubc95 - \uc608\uc678 \ucc98\ub9ac best practices - \ub514\ubc84\uae45 \uae30\ubc95\uacfc \ub3c4\uad6c - \ucf54\ub4dc \ud14c\uc2a4\ud305 \uae30\ucd08</p>"},{"location":"curricula/beginner_curriculum/#chapter-12","title":"Chapter 12: \ud30c\uc77c \uc785\ucd9c\ub825","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ud30c\uc77c\uc744 \uc77d\uace0 \uc4f0\ub294 \uae30\ubcf8\uc801\uc778 \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \ud30c\uc77c \uc5f4\uae30\uc640 \ub2eb\uae30 - \ud14d\uc2a4\ud2b8 \ud30c\uc77c \uc77d\uae30/\uc4f0\uae30 - with \ubb38\uc744 \uc774\uc6a9\ud55c \ud30c\uc77c \ucc98\ub9ac - \ud30c\uc77c \uacbd\ub85c \ub2e4\ub8e8\uae30 - CSV \ud30c\uc77c \uae30\ucd08</p>"},{"location":"curricula/beginner_curriculum/#_6","title":"\ud3c9\uac00 \ubc29\ubc95","text":"<ul> <li>\uac01 \ucc55\ud130\ubcc4 \ud034\uc988 (\uac1d\uad00\uc2dd + \uc8fc\uad00\uc2dd)</li> <li>\uc2e4\uc2b5 \uacfc\uc81c (\uac04\ub2e8\ud55c \ud504\ub85c\uadf8\ub7a8 \uc791\uc131)</li> <li>\ucd5c\uc885 \ud504\ub85c\uc81d\ud2b8: \uac04\ub2e8\ud55c \uacc4\uc0b0\uae30 \ub610\ub294 \ud14d\uc2a4\ud2b8 \uae30\ubc18 \uac8c\uc784</li> </ul>"},{"location":"curricula/beginner_curriculum/#_7","title":"\uad8c\uc7a5 \uc2e4\uc2b5 \ud504\ub85c\uc81d\ud2b8","text":"<ol> <li>\ub2e8\uc704 \ubcc0\ud658\uae30 (\uc628\ub3c4, \uae38\uc774, \ubb34\uac8c)</li> <li>\uac04\ub2e8\ud55c \uac00\uacc4\ubd80 \ud504\ub85c\uadf8\ub7a8</li> <li>\uc22b\uc790 \ub9de\ucd94\uae30 \uac8c\uc784</li> <li>\ud14d\uc2a4\ud2b8 \ubd84\uc11d\uae30 (\ub2e8\uc5b4 \uc218 \uc138\uae30, \ubb38\uc790 \ube48\ub3c4)</li> <li>\uac04\ub2e8\ud55c \ud560\uc77c \ubaa9\ub85d \uad00\ub9ac\uc790 </li> </ol>"},{"location":"curricula/intermediate_curriculum/","title":"\ud30c\uc774\uc36c \uc911\uae09 \ucee4\ub9ac\ud058\ub7fc","text":""},{"location":"curricula/intermediate_curriculum/#_2","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<ul> <li>\uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d \uac1c\ub150 \uc774\ud574 \ubc0f \uc801\uc6a9</li> <li>\uace0\uae09 \ud30c\uc774\uc36c \uae30\ub2a5\uacfc \ub77c\uc774\ube0c\ub7ec\ub9ac \ud65c\uc6a9</li> <li>\ud6a8\uc728\uc801\uc774\uace0 pythonic\ud55c \ucf54\ub4dc \uc791\uc131</li> <li>\uc2e4\ubb34\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud30c\uc774\uc36c \ud328\ud134\uacfc \ub3c4\uad6c \uc2b5\ub4dd</li> </ul>"},{"location":"curricula/intermediate_curriculum/#_3","title":"\ub300\uc0c1","text":"<ul> <li>\ud30c\uc774\uc36c \uae30\ucd08 \ubb38\ubc95\uc744 \uc644\uc804\ud788 \uc774\ud574\ud55c \ud559\uc2b5\uc790</li> <li>\uac04\ub2e8\ud55c \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud560 \uc218 \uc788\ub294 \uc218\uc900</li> <li>\ud504\ub85c\uadf8\ub798\ubc0d \uacbd\ud5d8 3-6\uac1c\uc6d4 \uc774\uc0c1</li> </ul>"},{"location":"curricula/intermediate_curriculum/#_4","title":"\uc608\uc0c1 \ud559\uc2b5 \uae30\uac04","text":"<p>6-8\uc8fc (\uc8fc 4-5\uc2dc\uac04)</p>"},{"location":"curricula/intermediate_curriculum/#_5","title":"\ucc55\ud130 \uad6c\uc131","text":""},{"location":"curricula/intermediate_curriculum/#chapter-1","title":"Chapter 1: \uace0\uae09 \ud568\uc218 \uae30\ubc95","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ud568\uc218\ub97c \ub354\uc6b1 \ud6a8\uacfc\uc801\uc73c\ub85c \ud65c\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - args\uc640 *kwargs - \ub78c\ub2e4 \ud568\uc218 (lambda) - \uace0\ucc28 \ud568\uc218 (map, filter, reduce) - \ud568\uc218 \ub370\ucf54\ub808\uc774\ud130 \uae30\ucd08 - \ud074\ub85c\uc800\uc640 \uc2a4\ucf54\ud504 \uaddc\uce59 - \uc7ac\uadc0 \ud568\uc218</p>"},{"location":"curricula/intermediate_curriculum/#chapter-2","title":"Chapter 2: \ud30c\uc77c \ucc98\ub9ac\uc640 \ub370\uc774\ud130 \ud615\uc2dd","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ub2e4\uc591\ud55c \ud30c\uc77c \ud615\uc2dd\uc744 \ucc98\ub9ac\ud558\uace0 \ub370\uc774\ud130\ub97c \ub2e4\ub8e8\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - JSON \ud30c\uc77c \ucc98\ub9ac - CSV \ud30c\uc77c \uace0\uae09 \ucc98\ub9ac (pandas \uae30\ucd08) - XML \ud30c\uc77c \ub2e4\ub8e8\uae30 - \ubc14\uc774\ub108\ub9ac \ud30c\uc77c \ucc98\ub9ac - \uc555\ucd95 \ud30c\uc77c \ub2e4\ub8e8\uae30 (zipfile, tarfile) - \uc124\uc815 \ud30c\uc77c \ucc98\ub9ac (configparser)</p>"},{"location":"curricula/intermediate_curriculum/#chapter-3-regular-expressions","title":"Chapter 3: \uc815\uaddc\ud45c\ud604\uc2dd (Regular Expressions)","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ud328\ud134 \ub9e4\uce6d\uc744 \ud1b5\ud55c \ud14d\uc2a4\ud2b8 \ucc98\ub9ac \ub2a5\ub825\uc744 \uc2b5\ub4dd\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \uc815\uaddc\ud45c\ud604\uc2dd \uae30\ubcf8 \ubb38\ubc95 - re \ubaa8\ub4c8 \uc0ac\uc6a9\ubc95 (search, match, findall, sub) - \uba54\ud0c0 \ubb38\uc790\uc640 \ud2b9\uc218 \ubb38\uc790 - \uadf8\ub8f9\ud654\uc640 \ucea1\ucc98 - \uc2e4\uc6a9\uc801\uc778 \uc815\uaddc\ud45c\ud604\uc2dd \uc608\uc81c (\uc774\uba54\uc77c, \uc804\ud654\ubc88\ud638, URL \ub4f1)</p>"},{"location":"curricula/intermediate_curriculum/#chapter-4","title":"Chapter 4: \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ud074\ub798\uc2a4\uc640 \uac1d\uccb4\uc758 \uac1c\ub150\uc744 \uc774\ud574\ud558\uace0 \uae30\ubcf8\uc801\uc778 OOP\ub97c \uad6c\ud604\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \ud074\ub798\uc2a4\uc640 \uac1d\uccb4 \uac1c\ub150 - \uc18d\uc131(attribute)\uacfc \uba54\uc11c\ub4dc(method) - \uc0dd\uc131\uc790(init)\uc640 \uc18c\uba78\uc790(del) - \uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218\uc640 \ud074\ub798\uc2a4 \ubcc0\uc218 - \uc811\uadfc \uc81c\uc5b4 (public, protected, private) - \uc2e4\uc6a9\uc801\uc778 \ud074\ub798\uc2a4 \uc124\uacc4 \uc608\uc81c</p>"},{"location":"curricula/intermediate_curriculum/#chapter-5","title":"Chapter 5: \uc0c1\uc18d\uacfc \ub2e4\ud615\uc131","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uac1d\uccb4\uc9c0\ud5a5\uc758 \ud575\uc2ec \uac1c\ub150\uc778 \uc0c1\uc18d\uacfc \ub2e4\ud615\uc131\uc744 \uc774\ud574\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \ub2e8\uc77c \uc0c1\uc18d\uacfc \ub2e4\uc911 \uc0c1\uc18d - super() \ud568\uc218 \ud65c\uc6a9 - \uba54\uc11c\ub4dc \uc624\ubc84\ub77c\uc774\ub529 - \ucd94\uc0c1 \ud074\ub798\uc2a4\uc640 \uc778\ud130\ud398\uc774\uc2a4 - \ub2e4\ud615\uc131\uc758 \uac1c\ub150\uacfc \ud65c\uc6a9 - MRO (Method Resolution Order)</p>"},{"location":"curricula/intermediate_curriculum/#chapter-6-magic-methods","title":"Chapter 6: \ud2b9\uc218 \uba54\uc11c\ub4dc (Magic Methods)","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ud30c\uc774\uc36c\uc758 \ud2b9\uc218 \uba54\uc11c\ub4dc\ub97c \uc774\ud574\ud558\uace0 \ud65c\uc6a9\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - str__\uacfc __repr - \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 (add, mul \ub4f1) - \ube44\uad50 \uc5f0\uc0b0\uc790 (eq, lt \ub4f1) - \ucee8\ud14c\uc774\ub108 \uba54\uc11c\ub4dc (len, getitem \ub4f1) - \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 (enter, exit) - \uc774\ud130\ub808\uc774\ud130 \ud504\ub85c\ud1a0\ucf5c (iter, next)</p>"},{"location":"curricula/intermediate_curriculum/#chapter-7","title":"Chapter 7: \ubaa8\ub4c8\uacfc \ud328\ud0a4\uc9c0","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ucf54\ub4dc\ub97c \ubaa8\ub4c8\uacfc \ud328\ud0a4\uc9c0\ub85c \uad6c\uc870\ud654\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \ubaa8\ub4c8 \uc0dd\uc131\uacfc import - \ud328\ud0a4\uc9c0 \uad6c\uc870\uc640 init.py - \uc0c1\ub300 import\uc640 \uc808\ub300 import - \ubaa8\ub4c8 \uac80\uc0c9 \uacbd\ub85c (sys.path) - \uac00\uc0c1\ud658\uacbd (venv, conda) - pip\uc640 \ud328\ud0a4\uc9c0 \uad00\ub9ac</p>"},{"location":"curricula/intermediate_curriculum/#chapter-8","title":"Chapter 8: \uc608\uc678 \ucc98\ub9ac \uace0\uae09","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uc608\uc678 \ucc98\ub9ac\ub97c \uccb4\uacc4\uc801\uc73c\ub85c \ub2e4\ub8e8\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \uc608\uc678 \uacc4\uce35 \uad6c\uc870 - \ucee4\uc2a4\ud140 \uc608\uc678 \ud074\ub798\uc2a4 \uc0dd\uc131 - finally\uc640 else \uc808 - \uc608\uc678 \uccb4\uc774\ub2dd - assert \ubb38 \ud65c\uc6a9 - \ub85c\uae45(logging) \uae30\ucd08</p>"},{"location":"curricula/intermediate_curriculum/#chapter-9","title":"Chapter 9: \uc774\ud130\ub808\uc774\ud130\uc640 \uc81c\ub108\ub808\uc774\ud130","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \ucc98\ub9ac \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - \uc774\ud130\ub808\uc774\ud130 \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604 - \uc81c\ub108\ub808\uc774\ud130 \ud568\uc218 (yield) - \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd - itertools \ubaa8\ub4c8 \ud65c\uc6a9 - \ucef4\ud504\ub9ac\ud5e8\uc158 (\ub9ac\uc2a4\ud2b8, \ub515\uc154\ub108\ub9ac, \uc9d1\ud569) - \uba54\ubaa8\ub9ac \ud6a8\uc728\uc131\uacfc \uc131\ub2a5</p>"},{"location":"curricula/intermediate_curriculum/#chapter-10","title":"Chapter 10: \uba40\ud2f0\uc2a4\ub808\ub529\uacfc \ube44\ub3d9\uae30 \ucc98\ub9ac \uae30\ucd08","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ub3d9\uc2dc\uc131 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uae30\ubcf8\uc744 \uc774\ud574\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - threading \ubaa8\ub4c8 \uae30\ucd08 - \uc2a4\ub808\ub4dc \uc548\uc804\uc131\uacfc \ub77d(Lock) - multiprocessing \uae30\ucd08 - \ub3d9\uc2dc\uc131 vs \ubcd1\ub82c\uc131 - asyncio \uae30\ucd08 (async/await) - \uc2e4\uc6a9\uc801\uc778 \ube44\ub3d9\uae30 \ucc98\ub9ac \uc608\uc81c</p>"},{"location":"curricula/intermediate_curriculum/#chapter-11","title":"Chapter 11: \ud14c\uc2a4\ud305\uacfc \ub514\ubc84\uae45","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ucf54\ub4dc \ud488\uc9c8\uc744 \ubcf4\uc7a5\ud558\ub294 \ud14c\uc2a4\ud305\uacfc \ub514\ubc84\uae45 \uae30\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - unittest \ubaa8\ub4c8 \uc0ac\uc6a9\ubc95 - pytest \uae30\ucd08 - \ud14c\uc2a4\ud2b8 \uc8fc\ub3c4 \uac1c\ubc1c (TDD) \uc18c\uac1c - \ub514\ubc84\uac70 (pdb) \uc0ac\uc6a9\ubc95 - \ud504\ub85c\ud30c\uc77c\ub9c1\uacfc \uc131\ub2a5 \ucd5c\uc801\ud654 - \ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0</p>"},{"location":"curricula/intermediate_curriculum/#chapter-12","title":"Chapter 12: \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \ud30c\uc774\uc36c\uc744 \uc5f0\ub3d9\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - SQLite3 \uae30\ubcf8 \uc0ac\uc6a9\ubc95 - \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\uacfc \ucffc\ub9ac \uc2e4\ud589 - ORM \uac1c\ub150\uacfc SQLAlchemy \uae30\ucd08 - \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158 - \uc5f0\uacb0 \ud480\ub9c1\uacfc \ucd5c\uc801\ud654 - NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uae30\ucd08 (MongoDB)</p>"},{"location":"curricula/intermediate_curriculum/#chapter-13-api","title":"Chapter 13: \uc6f9 \uc2a4\ud06c\ub798\ud551\uacfc API \ud65c\uc6a9","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uc6f9\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud558\uace0 API\ub97c \ud65c\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - requests \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9\ubc95 - BeautifulSoup\uc744 \uc774\uc6a9\ud55c HTML \ud30c\uc2f1 - \uc6f9 \uc2a4\ud06c\ub798\ud551 \uc724\ub9ac\uc640 robots.txt - REST API \ud638\ucd9c\uacfc JSON \ucc98\ub9ac - \uc778\uc99d\uacfc \ud5e4\ub354 \uc124\uc815 - \ube44\ub3d9\uae30 \uc6f9 \uc2a4\ud06c\ub798\ud551</p>"},{"location":"curricula/intermediate_curriculum/#chapter-14-gui","title":"Chapter 14: GUI \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08","text":"<p>\ud559\uc2b5 \ubaa9\ud45c: \uadf8\ub798\ud53d \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uac00\uc9c4 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc791\uc131\ud55c\ub2e4 \uc8fc\uc694 \ub0b4\uc6a9: - tkinter \uae30\ubcf8 \uc704\uc82f - \uc774\ubca4\ud2b8 \ucc98\ub9ac\uc640 \ucf5c\ubc31 - \ub808\uc774\uc544\uc6c3 \uad00\ub9ac (pack, grid, place) - \uba54\ub274\uc640 \ub300\ud654\uc0c1\uc790 - PyQt/PySide \uae30\ucd08 \uc18c\uac1c - \uac04\ub2e8\ud55c GUI \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uac1c\ubc1c</p>"},{"location":"curricula/intermediate_curriculum/#_6","title":"\ud3c9\uac00 \ubc29\ubc95","text":"<ul> <li>\uac01 \ucc55\ud130\ubcc4 \uc2ec\ud654 \ud034\uc988</li> <li>\uc2e4\uc2b5 \ud504\ub85c\uc81d\ud2b8 (\uc911\uac04 \uaddc\ubaa8 \uc560\ud50c\ub9ac\ucf00\uc774\uc158)</li> <li>\ucf54\ub4dc \ub9ac\ubdf0\uc640 \ub9ac\ud329\ud1a0\ub9c1 \uacfc\uc81c</li> <li>\ucd5c\uc885 \ud504\ub85c\uc81d\ud2b8: \uc6f9 \uc2a4\ud06c\ub798\ud551 + \ub370\uc774\ud130 \ubd84\uc11d + GUI \uacb0\ud569</li> </ul>"},{"location":"curricula/intermediate_curriculum/#_7","title":"\uad8c\uc7a5 \uc2e4\uc2b5 \ud504\ub85c\uc81d\ud2b8","text":"<ol> <li>\uc6f9 \uc2a4\ud06c\ub798\ud551\uc744 \ud1b5\ud55c \ub274\uc2a4 \uc218\uc9d1\uae30</li> <li>\uac1c\uc778 \uac00\uacc4\ubd80 \uad00\ub9ac \uc2dc\uc2a4\ud15c (DB \uc5f0\ub3d9)</li> <li>\ub85c\uadf8 \ubd84\uc11d \ub3c4\uad6c</li> <li>\uac04\ub2e8\ud55c API \uc11c\ubc84 (Flask \uae30\ucd08)</li> <li>\ud30c\uc77c \ub3d9\uae30\ud654 \ub3c4\uad6c</li> <li>\ub370\uc774\ud130 \uc2dc\uac01\ud654 \ub300\uc2dc\ubcf4\ub4dc</li> </ol>"},{"location":"curricula/intermediate_curriculum/#_8","title":"\ub2e4\uc74c \ub2e8\uacc4\ub85c\uc758 \uc5f0\uacb0","text":"<ul> <li>\uc6f9 \uac1c\ubc1c (Django, Flask)</li> <li>\ub370\uc774\ud130 \uc0ac\uc774\uc5b8\uc2a4 (NumPy, Pandas, Matplotlib)</li> <li>\uba38\uc2e0\ub7ec\ub2dd (scikit-learn)</li> <li>\uc790\ub3d9\ud654 \uc2a4\ud06c\ub9bd\ud305</li> <li>\uc2dc\uc2a4\ud15c \ud504\ub85c\uadf8\ub798\ubc0d </li> </ul>"},{"location":"quizzes/","title":"\ud83e\uddea \ud30c\uc774\uc36c \ud034\uc988","text":"<p>\ud559\uc2b5\ud55c \ub0b4\uc6a9\uc744 \uc810\uac80\ud558\uace0 \uc2e4\ub825\uc744 \ud5a5\uc0c1\uc2dc\ud0ac \uc218 \uc788\ub294 \ud034\uc988 \ubaa8\uc74c\uc785\ub2c8\ub2e4. \uac01 \ub09c\uc774\ub3c4\ubcc4\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc5b4 \ub2e8\uacc4\uc801\uc73c\ub85c \ub3c4\uc804\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"quizzes/#_2","title":"\ud83c\udfaf \ud034\uc988 \ubaa9\uc801","text":"<ul> <li>\uc774\ud574\ub3c4 \uc810\uac80: \ud559\uc2b5\ud55c \uac1c\ub150\uc758 \uc774\ud574 \uc815\ub3c4 \ud655\uc778</li> <li>\uc2e4\ub825 \ud5a5\uc0c1: \ub2e4\uc591\ud55c \ubb38\uc81c\ub97c \ud1b5\ud55c \uc2e4\uc804 \ub2a5\ub825 \uac1c\ubc1c</li> <li>\uc57d\uc810 \ud30c\uc545: \ubd80\uc871\ud55c \ubd80\ubd84\uc744 \ucc3e\uc544 \uc9d1\uc911 \ud559\uc2b5</li> <li>\uc790\uc2e0\uac10 \uc99d\uc9c4: \ubb38\uc81c \ud574\uacb0\uc744 \ud1b5\ud55c \uc131\ucde8\uac10 \ud68d\ub4dd</li> </ul>"},{"location":"quizzes/#_3","title":"\ud83d\udcda \ud034\uc988 \uad6c\uc131","text":""},{"location":"quizzes/#_4","title":"\ud83d\udfe2 \ucd08\uae09 \ud034\uc988","text":"<p>\uae30\ubcf8\uc801\uc778 \ud30c\uc774\uc36c \ubb38\ubc95\uacfc \uac1c\ub150\uc744 \ud14c\uc2a4\ud2b8\ud569\ub2c8\ub2e4.</p> <ul> <li>Chapter 1 \ud034\uc988: \ud30c\uc774\uc36c \uc18c\uac1c\uc640 \ud658\uacbd \uc124\uc815</li> <li>Chapter 2 \ud034\uc988: \ubcc0\uc218\uc640 \ub370\uc774\ud130\ud0c0\uc785</li> <li>Chapter 3 \ud034\uc988: \ubb38\uc790\uc5f4 \ucc98\ub9ac</li> <li>Chapter 4 \ud034\uc988: \uc5f0\uc0b0\uc790\uc640 \ud45c\ud604\uc2dd</li> <li>Chapter 5 \ud034\uc988: \uc785\ucd9c\ub825</li> <li>Chapter 6 \ud034\uc988: \uc870\uac74\ubb38</li> <li>Chapter 7 \ud034\uc988: \ubc18\ubcf5\ubb38</li> <li>Chapter 8 \ud034\uc988: \ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c</li> <li>Chapter 9 \ud034\uc988: \ub515\uc154\ub108\ub9ac\uc640 \uc9d1\ud569</li> <li>Chapter 10 \ud034\uc988: \ud568\uc218 \uae30\ucd08</li> <li>Chapter 11 \ud034\uc988: \uc624\ub958 \ucc98\ub9ac\uc640 \ub514\ubc84\uae45</li> </ul>"},{"location":"quizzes/#_5","title":"\ud83d\udfe1 \uc911\uae09 \ud034\uc988","text":"<p>\uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d\uacfc \uace0\uae09 \uae30\ub2a5\ub4e4\uc744 \ub2e4\ub8f9\ub2c8\ub2e4.</p> <ul> <li>Chapter 1 \ud034\uc988: \uace0\uae09 \ud568\uc218</li> <li>Chapter 2 \ud034\uc988: \ud30c\uc77c \ucc98\ub9ac\uc640 \ub370\uc774\ud130 \ud615\uc2dd</li> <li>Chapter 3 \ud034\uc988: \uc815\uaddc\ud45c\ud604\uc2dd</li> <li>Chapter 4 \ud034\uc988: \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08</li> <li>Chapter 5 \ud034\uc988: \uc0c1\uc18d\uacfc \ub2e4\ud615\uc131</li> <li>Chapter 6 \ud034\uc988: \ub9e4\uc9c1 \uba54\uc11c\ub4dc</li> <li>Chapter 7 \ud034\uc988: \ubaa8\ub4c8\uacfc \ud328\ud0a4\uc9c0</li> <li>Chapter 8 \ud034\uc988: \uace0\uae09 \uc608\uc678 \ucc98\ub9ac</li> <li>Chapter 9 \ud034\uc988: \uc774\ud130\ub808\uc774\ud130\uc640 \uc81c\ub108\ub808\uc774\ud130</li> <li>Chapter 10 \ud034\uc988: \uba40\ud2f0\uc2a4\ub808\ub529\uacfc \ube44\ub3d9\uae30</li> <li>Chapter 11 \ud034\uc988: \ud14c\uc2a4\ud305\uacfc \ub514\ubc84\uae45</li> <li>Chapter 12 \ud034\uc988: \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9</li> <li>Chapter 13 \ud034\uc988: \uc6f9 \uc2a4\ud06c\ub798\ud551\uacfc API</li> <li>Chapter 14 \ud034\uc988: GUI \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08</li> </ul>"},{"location":"quizzes/#_6","title":"\ud83d\udd34 \uace0\uae09 \ud034\uc988","text":"<p>\ud30c\uc774\uc36c \uc804\ubb38\uac00 \uc218\uc900\uc758 \uae4a\uc774\uc788\ub294 \ub0b4\uc6a9\uc744 \ud14c\uc2a4\ud2b8\ud569\ub2c8\ub2e4.</p> <ul> <li>Chapter 1 \ud034\uc988: \ud30c\uc774\uc36c \ub0b4\ubd80\uad6c\uc870\uc640 \uba54\ubaa8\ub9ac</li> <li>Chapter 2 \ud034\uc988: \uba54\ud0c0\ud074\ub798\uc2a4\uc640 \ub514\uc2a4\ud06c\ub9bd\ud130</li> <li>Chapter 3 \ud034\uc988: \uace0\uae09 \ub370\ucf54\ub808\uc774\ud130\uc640 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800</li> <li>Chapter 4 \ud034\uc988: \uace0\uae09 \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131</li> <li>Chapter 5 \ud034\uc988: \ub124\ud2b8\uc6cc\ud0b9\uacfc \uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d</li> </ul>"},{"location":"quizzes/#_7","title":"\ud83c\udfae \ud034\uc988 \ud615\ud0dc","text":""},{"location":"quizzes/#_8","title":"\uac1d\uad00\uc2dd \ubb38\uc81c","text":"<ul> <li>4\uc9c0 \uc120\ud0dd\ud615</li> <li>\uc815\ub2f5\uacfc \ud574\uc124 \uc81c\uacf5</li> <li>\uc989\uc2dc \ud53c\ub4dc\ubc31</li> </ul>"},{"location":"quizzes/#_9","title":"\uc8fc\uad00\uc2dd \ubb38\uc81c","text":"<ul> <li>\ucf54\ub4dc \uc791\uc131 \ubb38\uc81c</li> <li>\ube48\uce78 \ucc44\uc6b0\uae30</li> <li>\uacb0\uacfc \uc608\uce21</li> </ul>"},{"location":"quizzes/#_10","title":"\uc2e4\uc2b5 \ubb38\uc81c","text":"<ul> <li>\ub514\ubc84\uae45 \ubb38\uc81c</li> <li>\ucf54\ub4dc \uac1c\uc120 \uacfc\uc81c</li> <li>\uc54c\uace0\ub9ac\uc998 \uad6c\ud604</li> </ul>"},{"location":"quizzes/#_11","title":"\ud83d\udcca \uc810\uc218 \uc2dc\uc2a4\ud15c","text":""},{"location":"quizzes/#_12","title":"\ub09c\uc774\ub3c4\ubcc4 \ubc30\uc810","text":"<ul> <li>\ucd08\uae09: \ubb38\uc81c\ub2f9 1\uc810</li> <li>\uc911\uae09: \ubb38\uc81c\ub2f9 2\uc810</li> <li>\uace0\uae09: \ubb38\uc81c\ub2f9 3\uc810</li> </ul>"},{"location":"quizzes/#_13","title":"\ud3c9\uac00 \uae30\uc900","text":"<ul> <li>90-100\uc810: \ud83c\udfc6 \uc804\ubb38\uac00 (Expert)</li> <li>80-89\uc810: \ud83e\udd47 \uc219\ub828\uc790 (Advanced)</li> <li>70-79\uc810: \ud83e\udd48 \uc911\uae09\uc790 (Intermediate)</li> <li>60-69\uc810: \ud83e\udd49 \ucd08\uae09\uc790 (Beginner)</li> <li>60\uc810 \ubbf8\ub9cc: \ud83d\udcda \ubcf5\uc2b5 \ud544\uc694 (Needs Review)</li> </ul>"},{"location":"quizzes/#_14","title":"\ud83d\udca1 \ud034\uc988 \ud65c\uc6a9\ubc95","text":""},{"location":"quizzes/#_15","title":"\ud559\uc2b5 \uc804\ub7b5","text":"<ol> <li>\ub2e8\uacc4\ubcc4 \ub3c4\uc804: \ucd08\uae09 \u2192 \uc911\uae09 \u2192 \uace0\uae09 \uc21c\uc11c\ub85c \uc9c4\ud589</li> <li>\ubc18\ubcf5 \ud559\uc2b5: \ud2c0\ub9b0 \ubb38\uc81c\ub294 \ub2e4\uc2dc \ub3c4\uc804</li> <li>\ud574\uc124 \uc219\uc9c0: \uc815\ub2f5 \ubfd0\ub9cc \uc544\ub2c8\ub77c \ud574\uc124\ub3c4 \uaf3c\uaf3c\ud788 \uc77d\uae30</li> <li>\uc2e4\uc2b5 \uc5f0\uacc4: \ud034\uc988 \ud6c4 \uad00\ub828 \ucf54\ub4dc \uc9c1\uc811 \uc791\uc131\ud574\ubcf4\uae30</li> </ol>"},{"location":"quizzes/#_16","title":"\uad8c\uc7a5 \uc77c\uc815","text":"<ul> <li>\uc77c\uc77c \ud034\uc988: \ub9e4\uc77c 5-10\ubb38\uc81c\uc529 \ud574\uacb0</li> <li>\uc8fc\uac04 \ubcf5\uc2b5: \uc77c\uc8fc\uc77c\uc5d0 \ud55c \ubc88 \ud2c0\ub9b0 \ubb38\uc81c \uc7ac\ub3c4\uc804</li> <li>\uc6d4\uac04 \uc885\ud569: \ud55c \ub2ec\uc5d0 \ud55c \ubc88 \uc804\uccb4 \ubcf5\uc2b5 \ud034\uc988</li> </ul>"},{"location":"quizzes/#_17","title":"\ud83d\ude80 \uc778\ud130\ub799\ud2f0\ube0c \ud034\uc988 \uc571","text":"<p>\uc544\ub798\uc5d0\uc11c \ubc14\ub85c \ud034\uc988\ub97c \uc2dc\uc791\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4! \ud559\uc2b5\ud55c \ub0b4\uc6a9\uc744 \ud14c\uc2a4\ud2b8\ud558\uace0 \uc2e4\ub825\uc744 \ud655\uc778\ud574\ubcf4\uc138\uc694.</p>"},{"location":"quizzes/#_18","title":"\ud034\uc988 \uc571 \ud2b9\uc9d5","text":"<ul> <li>\ud83c\udfaf \uc2e4\uc2dc\uac04 \uc810\uc218 \ud45c\uc2dc: \uc989\uc2dc \uacb0\uacfc \ud655\uc778</li> <li>\ud83d\udcca \uc0c1\uc138\ud55c \ud53c\ub4dc\ubc31: \uc815\ub2f5\uacfc \ud574\uc124 \uc81c\uacf5</li> <li>\ud83d\udd04 \ubc18\ubcf5 \ud559\uc2b5: \uc5b8\uc81c\ub4e0 \ub2e4\uc2dc \ub3c4\uc804 \uac00\ub2a5</li> <li>\ud83d\udcf1 \ubc18\uc751\ud615 \ub514\uc790\uc778: \ubaa8\ubc14\uc77c\uc5d0\uc11c\ub3c4 \ud3b8\ub9ac\ud558\uac8c \uc774\uc6a9</li> </ul>"},{"location":"quizzes/#_19","title":"\uc0ac\uc6a9\ubc95","text":"<ol> <li>\uc6d0\ud558\ub294 \ucc55\ud130\uc758 \ud034\uc988 \uce74\ub4dc\ub97c \ud074\ub9ad\ud558\uc138\uc694</li> <li>\ud034\uc988 \uc815\ubcf4\ub97c \ud655\uc778\ud558\uace0 \uc2dc\uc791 \ubc84\ud2bc\uc744 \ub204\ub974\uc138\uc694</li> <li>\ubb38\uc81c\ub97c \ucc28\ub840\ub300\ub85c \ud480\uc5b4\ubcf4\uc138\uc694</li> <li>\uacb0\uacfc\ub97c \ud655\uc778\ud558\uace0 \ubd80\uc871\ud55c \ubd80\ubd84\uc744 \ubcf5\uc2b5\ud558\uc138\uc694</li> </ol> <p>\ud83d\udca1 \ud301: \ud034\uc988\ub97c \ud480\uae30 \uc804\uc5d0 \ud574\ub2f9 \ucc55\ud130\uc758 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \uba3c\uc800 \ud559\uc2b5\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4! </p>"},{"location":"tutorials/advanced/","title":"\ud83d\udd34 \uace0\uae09 \ud30c\uc774\uc36c \ud29c\ud1a0\ub9ac\uc5bc","text":"<p>\uc911\uae09 \uacfc\uc815\uc744 \ub9c8\uce5c \uac1c\ubc1c\uc790\ub4e4\uc744 \uc704\ud55c \uc804\ubb38\uac00 \uc218\uc900\uc758 \ud30c\uc774\uc36c \ud559\uc2b5 \uacfc\uc815\uc785\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc758 \uae4a\uc774\uc788\ub294 \uc774\ud574\uc640 \ucd5c\uc801\ud654 \uae30\ubc95\uc744 \ub9c8\uc2a4\ud130\ud558\uc138\uc694.</p>"},{"location":"tutorials/advanced/#_2","title":"\ud83c\udfaf \uacfc\uc815 \ubaa9\ud45c","text":"<ul> <li>\ud30c\uc774\uc36c \ub0b4\ubd80 \ub3d9\uc791 \uc6d0\ub9ac \uc774\ud574</li> <li>\uba54\ubaa8\ub9ac \uad00\ub9ac \ubc0f \uc131\ub2a5 \ucd5c\uc801\ud654</li> <li>\uace0\uae09 \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d \uae30\ubc95</li> <li>\ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131 \uc644\uc804 \uc815\ubcf5</li> <li>\ub124\ud2b8\uc6cc\ud0b9\uacfc \uc2dc\uc2a4\ud15c \ud504\ub85c\uadf8\ub798\ubc0d</li> </ul>"},{"location":"tutorials/advanced/#_3","title":"\ud83d\udcda \ucc55\ud130 \ubaa9\ub85d","text":""},{"location":"tutorials/advanced/#_4","title":"\ud30c\uc774\uc36c \ub0b4\ubd80 \uad6c\uc870","text":"<ol> <li>\ud30c\uc774\uc36c \ub0b4\ubd80\uad6c\uc870\uc640 \uba54\ubaa8\ub9ac</li> <li>CPython \uc778\ud130\ud504\ub9ac\ud130 \ub3d9\uc791 \uc6d0\ub9ac</li> <li>\uba54\ubaa8\ub9ac \uad00\ub9ac\uc640 \uac00\ube44\uc9c0 \uceec\ub809\uc158</li> <li>\ucc38\uc870 \uce74\uc6b4\ud305\uacfc \uc21c\ud658 \ucc38\uc870</li> <li>\uc131\ub2a5 \ud504\ub85c\ud30c\uc77c\ub9c1\uacfc \ucd5c\uc801\ud654</li> </ol>"},{"location":"tutorials/advanced/#_5","title":"\uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d","text":"<ol> <li>\uba54\ud0c0\ud074\ub798\uc2a4\uc640 \ub514\uc2a4\ud06c\ub9bd\ud130</li> <li>\uba54\ud0c0\ud074\ub798\uc2a4\uc758 \uac1c\ub150\uacfc \ud65c\uc6a9</li> <li>\ud074\ub798\uc2a4 \uc0dd\uc131 \uacfc\uc815 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5</li> <li>\ub514\uc2a4\ud06c\ub9bd\ud130 \ud504\ub85c\ud1a0\ucf5c</li> <li> <p>\uc18d\uc131 \uc811\uadfc \uc81c\uc5b4</p> </li> <li> <p>\uace0\uae09 \ub370\ucf54\ub808\uc774\ud130\uc640 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800</p> </li> <li>\uace0\uae09 \ub370\ucf54\ub808\uc774\ud130 \ud328\ud134</li> <li>\ud074\ub798\uc2a4 \uae30\ubc18 \ub370\ucf54\ub808\uc774\ud130</li> <li>\ucee4\uc2a4\ud140 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800</li> <li>with \ubb38\uc758 \ub0b4\ubd80 \ub3d9\uc791</li> </ol>"},{"location":"tutorials/advanced/#_6","title":"\ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131","text":"<ol> <li>\uace0\uae09 \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131</li> <li>GIL(Global Interpreter Lock) \uc774\ud574</li> <li>\uba40\ud2f0\ud504\ub85c\uc138\uc2f1\uacfc \uba40\ud2f0\uc2a4\ub808\ub529 \ube44\uad50</li> <li>asyncio \uace0\uae09 \ud65c\uc6a9</li> <li>\ubd84\uc0b0 \uc2dc\uc2a4\ud15c\uacfc \uba54\uc2dc\uc9c0 \ud050</li> </ol>"},{"location":"tutorials/advanced/#_7","title":"\uc2dc\uc2a4\ud15c \ud504\ub85c\uadf8\ub798\ubc0d","text":"<ol> <li>\ub124\ud2b8\uc6cc\ud0b9\uacfc \uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d</li> <li>\uc800\uc218\uc900 \uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d</li> <li>TCP/UDP \uc11c\ubc84 \uad6c\ud604</li> <li>\ub124\ud2b8\uc6cc\ud06c \ud504\ub85c\ud1a0\ucf5c \uc124\uacc4</li> <li>\ubcf4\uc548\uacfc \uc554\ud638\ud654</li> </ol>"},{"location":"tutorials/advanced/#_8","title":"\ud83d\udcca \ud559\uc2b5 \uac00\uc774\ub4dc","text":""},{"location":"tutorials/advanced/#_9","title":"\uc120\uc218 \uc9c0\uc2dd","text":"<p>\uc774 \uacfc\uc815\uc744 \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \ub2e4\uc74c \uc9c0\uc2dd\uc774 \ud544\uc694\ud569\ub2c8\ub2e4:</p> <ul> <li>\u2705 \ucd08\uae09, \uc911\uae09 \uacfc\uc815 \uc644\ub8cc</li> <li>\u2705 \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d \uc219\ub828</li> <li>\u2705 \uae30\ubcf8\uc801\uc778 \uc54c\uace0\ub9ac\uc998\uacfc \uc790\ub8cc\uad6c\uc870 \uc774\ud574</li> <li>\u2705 \uc6b4\uc601\uccb4\uc81c \uae30\ucd08 \uac1c\ub150</li> </ul>"},{"location":"tutorials/advanced/#_10","title":"\uad8c\uc7a5 \ud559\uc2b5 \uc21c\uc11c","text":"<ol> <li>\ub0b4\ubd80 \uad6c\uc870 (1\uc7a5): \ud30c\uc774\uc36c\uc758 \ub3d9\uc791 \uc6d0\ub9ac \uc774\ud574</li> <li>\uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d (2-3\uc7a5): \uace0\uae09 \uc5b8\uc5b4 \uae30\ub2a5 \ud65c\uc6a9</li> <li>\ub3d9\uc2dc\uc131 (4\uc7a5): \uc131\ub2a5 \ucd5c\uc801\ud654\uc640 \ubcd1\ub82c \ucc98\ub9ac</li> <li>\uc2dc\uc2a4\ud15c (5\uc7a5): \ub124\ud2b8\uc6cc\ud06c\uc640 \uc800\uc218\uc900 \ud504\ub85c\uadf8\ub798\ubc0d</li> </ol>"},{"location":"tutorials/advanced/#_11","title":"\uc608\uc0c1 \ud559\uc2b5 \uc2dc\uac04","text":"<ul> <li>\uc804\uccb4 \uacfc\uc815: 4-5\uc8fc (\uc8fc 5-6\uc2dc\uac04 \ud559\uc2b5 \uae30\uc900)</li> <li>\ucc55\ud130\ub2f9: 6-8\uc2dc\uac04</li> <li>\uc2ec\ud654 \uc2e4\uc2b5: \uc8fc 3\uc2dc\uac04</li> </ul>"},{"location":"tutorials/advanced/#_12","title":"\ud83d\udca1 \uc2e4\uc804 \ud504\ub85c\uc81d\ud2b8","text":"<p>\uac01 \uc139\uc158\ubcc4 \uace0\uae09 \ud504\ub85c\uc81d\ud2b8 \uc544\uc774\ub514\uc5b4:</p>"},{"location":"tutorials/advanced/#_13","title":"\uba54\ubaa8\ub9ac \ucd5c\uc801\ud654","text":"<ul> <li>\uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub7ec: \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ubd84\uc11d \ub3c4\uad6c</li> <li>\ucee4\uc2a4\ud140 \uac00\ube44\uc9c0 \uceec\ub809\ud130: \ud2b9\uc815 \uc6a9\ub3c4\uc758 \uba54\ubaa8\ub9ac \uad00\ub9ac \uc2dc\uc2a4\ud15c</li> </ul>"},{"location":"tutorials/advanced/#_14","title":"\uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d","text":"<ul> <li>ORM \ub77c\uc774\ube0c\ub7ec\ub9ac: SQLAlchemy \uc2a4\ud0c0\uc77c\uc758 \uac04\ub2e8\ud55c ORM</li> <li>\uc124\uc815 \uad00\ub9ac \uc2dc\uc2a4\ud15c: \ub3d9\uc801 \ud074\ub798\uc2a4 \uc0dd\uc131\uc744 \ud65c\uc6a9\ud55c \uc124\uc815 \ud30c\uc11c</li> </ul>"},{"location":"tutorials/advanced/#_15","title":"\ub3d9\uc2dc\uc131","text":"<ul> <li>\uc6f9 \ud06c\ub864\ub7ec: \ub300\uaddc\ubaa8 \ubcd1\ub82c \uc6f9 \uc2a4\ud06c\ub798\ud551 \uc2dc\uc2a4\ud15c</li> <li>\ucc44\ud305 \uc11c\ubc84: asyncio \uae30\ubc18 \uc2e4\uc2dc\uac04 \ucc44\ud305 \uc560\ud50c\ub9ac\ucf00\uc774\uc158</li> </ul>"},{"location":"tutorials/advanced/#_16","title":"\ub124\ud2b8\uc6cc\ud0b9","text":"<ul> <li>\ud504\ub85d\uc2dc \uc11c\ubc84: HTTP/HTTPS \ud504\ub85d\uc2dc \uad6c\ud604</li> <li>P2P \ud30c\uc77c \uacf5\uc720: \ubd84\uc0b0 \ud30c\uc77c \uacf5\uc720 \uc2dc\uc2a4\ud15c</li> </ul>"},{"location":"tutorials/advanced/#_17","title":"\ud83c\udfaf \uc804\ubb38\uac00 \ub418\uae30","text":"<p>\uc774 \uacfc\uc815\uc744 \uc644\ub8cc\ud558\uba74:</p> <ul> <li>\ud83c\udfc6 \ud30c\uc774\uc36c \uc804\ubb38\uac00 \uc218\uc900: \uc5b8\uc5b4\uc758 \ubaa8\ub4e0 \uce21\uba74\uc744 \uae4a\uc774 \uc774\ud574</li> <li>\u26a1 \uc131\ub2a5 \ucd5c\uc801\ud654: \uace0\uc131\ub2a5 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uacc4 \uac00\ub2a5</li> <li>\ud83d\udd27 \uc2dc\uc2a4\ud15c \ud504\ub85c\uadf8\ub798\ubc0d: \uc800\uc218\uc900 \uc2dc\uc2a4\ud15c \uac1c\ubc1c \ub2a5\ub825</li> <li>\ud83d\ude80 \uc544\ud0a4\ud14d\ucc98 \uc124\uacc4: \ub300\uaddc\ubaa8 \uc2dc\uc2a4\ud15c \uc124\uacc4 \uc5ed\ub7c9</li> </ul>"},{"location":"tutorials/advanced/#_18","title":"\ud83d\udcda \ucd94\uac00 \ud559\uc2b5 \uc790\ub8cc","text":"<ul> <li>CPython \uc18c\uc2a4\ucf54\ub4dc: GitHub\uc5d0\uc11c \uc2e4\uc81c \uad6c\ud604 \uc0b4\ud3b4\ubcf4\uae30</li> <li>PEP \ubb38\uc11c: \ud30c\uc774\uc36c \uac1c\uc120 \uc81c\uc548\uc11c \uc77d\uae30</li> <li>\uc131\ub2a5 \ubca4\uce58\ub9c8\ud0b9: \ub2e4\uc591\ud55c \ucd5c\uc801\ud654 \uae30\ubc95 \uc2e4\ud5d8</li> <li>\uc624\ud508\uc18c\uc2a4 \uae30\uc5ec: \ud30c\uc774\uc36c \uc0dd\ud0dc\uacc4\uc5d0 \uae30\uc5ec\ud558\uae30</li> </ul> <p>\uc911\uae09 \uacfc\uc815\uc744 \uc644\ub8cc\ud558\uc168\ub2e4\uba74 Chapter 1\ubd80\ud130 \ub3c4\uc804\ud574\ubcf4\uc138\uc694! \ud83d\ude80</p> <p>\u26a0\ufe0f \uc8fc\uc758: \uc774 \uacfc\uc815\uc740 \ub9e4\uc6b0 \uace0\uae09 \ub0b4\uc6a9\uc744 \ub2e4\ub8f9\ub2c8\ub2e4. \ucda9\ubd84\ud55c \uc2dc\uac04\uc744 \ub450\uace0 \ucc9c\ucc9c\ud788 \ud559\uc2b5\ud558\uc138\uc694. </p>"},{"location":"tutorials/advanced/chapter01_python_internals_memory/","title":"Chapter 1: \ud30c\uc774\uc36c \ub0b4\ubd80 \uad6c\uc870\uc640 \uba54\ubaa8\ub9ac \uad00\ub9ac","text":""},{"location":"tutorials/advanced/chapter01_python_internals_memory/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - CPython \uc778\ud130\ud504\ub9ac\ud130\uc758 \ub0b4\ubd80 \uad6c\uc870\uc640 \ub3d9\uc791 \uc6d0\ub9ac \uc774\ud574\ud558\uae30 - \ud30c\uc774\uc36c\uc758 \uba54\ubaa8\ub9ac \uad00\ub9ac \uba54\ucee4\ub2c8\uc998\uacfc \uac00\ube44\uc9c0 \uceec\ub809\uc158 \ubd84\uc11d\ud558\uae30 - \uac1d\uccb4 \uc0dd\uc131\uacfc \uc18c\uba78 \uacfc\uc815\uc758 \uc138\ubd80 \uc0ac\ud56d \ud30c\uc545\ud558\uae30 - \uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1\uacfc \uc131\ub2a5 \ucd5c\uc801\ud654 \uae30\ubc95 \uc801\uc6a9\ud558\uae30 - \uba54\ubaa8\ub9ac \ub204\uc218 \ud0d0\uc9c0\uc640 \ud574\uacb0 \ubc29\ubc95 \uad6c\ud604\ud558\uae30 - \uace0\uae09 \ucd5c\uc801\ud654 \ud328\ud134\uacfc \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801 \ucf54\ub529 \uc2e4\uc2b5\ud558\uae30 - \ud30c\uc774\uc36c \uad6c\ud604\uccb4 \uac04\uc758 \ucc28\uc774\uc810\uacfc \ud2b9\uc131 \ube44\uad50\ud558\uae30</p>"},{"location":"tutorials/advanced/chapter01_python_internals_memory/#1-cpython","title":"1. CPython \uc778\ud130\ud504\ub9ac\ud130 \ub0b4\ubd80 \uad6c\uc870","text":""},{"location":"tutorials/advanced/chapter01_python_internals_memory/#11","title":"1.1 \ud30c\uc774\uc36c \uc2e4\ud589 \uacfc\uc815\uacfc \ubc14\uc774\ud2b8\ucf54\ub4dc","text":"<pre><code>print(\"=== CPython \ub0b4\ubd80 \uad6c\uc870 \ubd84\uc11d ===\")\n\nimport dis\nimport sys\nimport gc\nimport weakref\nfrom types import CodeType\nimport ctypes\nimport tracemalloc\nimport linecache\nimport psutil\nimport os\nfrom collections import defaultdict\n\nclass PythonInternalsAnalyzer:\n    \"\"\"\ud30c\uc774\uc36c \ub0b4\ubd80 \uad6c\uc870 \ubd84\uc11d \ub3c4\uad6c\"\"\"\n\n    def __init__(self):\n        self.bytecode_cache = {}\n        self.memory_snapshots = []\n\n    def analyze_bytecode(self, code_or_function):\n        \"\"\"\ubc14\uc774\ud2b8\ucf54\ub4dc \ubd84\uc11d\"\"\"\n        print(\"\\n1. \ubc14\uc774\ud2b8\ucf54\ub4dc \ubd84\uc11d:\")\n\n        if hasattr(code_or_function, '__code__'):\n            code = code_or_function.__code__\n            func_name = code_or_function.__name__\n        else:\n            code = compile(code_or_function, '&lt;string&gt;', 'exec')\n            func_name = '&lt;code&gt;'\n\n        print(f\"   \ud568\uc218/\ucf54\ub4dc: {func_name}\")\n        print(f\"   \ucf54\ub4dc \uac1d\uccb4 \uc815\ubcf4:\")\n        print(f\"     - \uc778\uc218 \uac1c\uc218: {code.co_argcount}\")\n        print(f\"     - \uc9c0\uc5ed \ubcc0\uc218 \uac1c\uc218: {code.co_nlocals}\")\n        print(f\"     - \uc2a4\ud0dd \ud06c\uae30: {code.co_stacksize}\")\n        print(f\"     - \ud50c\ub798\uadf8: {code.co_flags}\")\n        print(f\"     - \uc0c1\uc218: {code.co_consts}\")\n        print(f\"     - \ubcc0\uc218\uba85: {code.co_varnames}\")\n\n        print(\"\\n   \ubc14\uc774\ud2b8\ucf54\ub4dc:\")\n        dis.dis(code)\n\n        # \ubc14\uc774\ud2b8\ucf54\ub4dc \uba85\ub839\uc5b4 \ubd84\uc11d\n        bytecode_ops = []\n        for instruction in dis.get_instructions(code):\n            bytecode_ops.append({\n                'offset': instruction.offset,\n                'opname': instruction.opname,\n                'arg': instruction.arg,\n                'argval': instruction.argval\n            })\n\n        self.bytecode_cache[func_name] = bytecode_ops\n        return bytecode_ops\n\n    def analyze_frame_stack(self):\n        \"\"\"\ud504\ub808\uc784 \uc2a4\ud0dd \ubd84\uc11d\"\"\"\n        print(\"\\n2. \ud504\ub808\uc784 \uc2a4\ud0dd \ubd84\uc11d:\")\n\n        frame = sys._getframe()\n        depth = 0\n\n        while frame:\n            print(f\"   \ud504\ub808\uc784 {depth}:\")\n            print(f\"     - \ud30c\uc77c: {frame.f_code.co_filename}\")\n            print(f\"     - \ud568\uc218: {frame.f_code.co_name}\")\n            print(f\"     - \ub77c\uc778: {frame.f_lineno}\")\n            print(f\"     - \uc9c0\uc5ed \ubcc0\uc218: {list(frame.f_locals.keys())}\")\n            print(f\"     - \uc804\uc5ed \ubcc0\uc218: {len(frame.f_globals)} \uac1c\")\n\n            frame = frame.f_back\n            depth += 1\n            if depth &gt; 5:  # \ub108\ubb34 \uae4a\uc5b4\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \uc81c\ud55c\n                print(\"     ... (\ub354 \ub9ce\uc740 \ud504\ub808\uc784)\")\n                break\n\n    def analyze_interpreter_state(self):\n        \"\"\"\uc778\ud130\ud504\ub9ac\ud130 \uc0c1\ud0dc \ubd84\uc11d\"\"\"\n        print(\"\\n3. \uc778\ud130\ud504\ub9ac\ud130 \uc0c1\ud0dc:\")\n\n        print(f\"   Python \ubc84\uc804: {sys.version}\")\n        print(f\"   \ud50c\ub7ab\ud3fc: {sys.platform}\")\n        print(f\"   \uc2e4\ud589 \ud30c\uc77c: {sys.executable}\")\n        print(f\"   \ubaa8\ub4c8 \uacbd\ub85c: {len(sys.path)} \uac1c \uacbd\ub85c\")\n        print(f\"   \ub85c\ub4dc\ub41c \ubaa8\ub4c8: {len(sys.modules)} \uac1c\")\n\n        # \uc778\ud130\ud504\ub9ac\ud130 \ud50c\ub798\uadf8\n        flags = sys.flags\n        print(f\"   \uc778\ud130\ud504\ub9ac\ud130 \ud50c\ub798\uadf8:\")\n        print(f\"     - debug: {flags.debug}\")\n        print(f\"     - optimize: {flags.optimize}\")\n        print(f\"     - verbose: {flags.verbose}\")\n        print(f\"     - interactive: {flags.interactive}\")\n\n        # \uc7ac\uadc0 \ud55c\uacc4\n        print(f\"   \uc7ac\uadc0 \ud55c\uacc4: {sys.getrecursionlimit()}\")\n\n        # \ub808\ud37c\ub7f0\uc2a4 \uce74\uc6b4\ud2b8 \uc815\ubcf4\n        print(f\"   \ucd1d \uac1d\uccb4 \uc218: {len(gc.get_objects())}\")\n        print(f\"   \uac00\ube44\uc9c0 \uceec\ub809\uc158 \ud1b5\uacc4: {gc.get_stats()}\")\n\n# \uc2e4\uc81c \ubd84\uc11d \uc218\ud589\ndef demonstrate_bytecode_analysis():\n    \"\"\"\ubc14\uc774\ud2b8\ucf54\ub4dc \ubd84\uc11d \uc2dc\uc5f0\"\"\"\n    analyzer = PythonInternalsAnalyzer()\n\n    # \uac04\ub2e8\ud55c \ud568\uc218 \uc815\uc758\n    def sample_function(x, y):\n        result = x + y\n        if result &gt; 10:\n            return result * 2\n        else:\n            return result\n\n    # \ubc14\uc774\ud2b8\ucf54\ub4dc \ubd84\uc11d\n    analyzer.analyze_bytecode(sample_function)\n\n    # \ub354 \ubcf5\uc7a1\ud55c \ucf54\ub4dc\n    complex_code = \"\"\"\ndef fibonacci(n):\n    if n &lt;= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\nresult = fibonacci(5)\n\"\"\"\n\n    print(\"\\n\" + \"=\"*50)\n    print(\"\ubcf5\uc7a1\ud55c \ucf54\ub4dc\uc758 \ubc14\uc774\ud2b8\ucf54\ub4dc:\")\n    analyzer.analyze_bytecode(complex_code)\n\n    # \ud504\ub808\uc784 \uc2a4\ud0dd \ubd84\uc11d\n    analyzer.analyze_frame_stack()\n\n    # \uc778\ud130\ud504\ub9ac\ud130 \uc0c1\ud0dc \ubd84\uc11d\n    analyzer.analyze_interpreter_state()\n\ndemonstrate_bytecode_analysis()\n</code></pre>"},{"location":"tutorials/advanced/chapter01_python_internals_memory/#12","title":"1.2 \uac1d\uccb4 \ubaa8\ub378\uacfc \ud0c0\uc785 \uc2dc\uc2a4\ud15c","text":"<pre><code>print(\"\\n=== \ud30c\uc774\uc36c \uac1d\uccb4 \ubaa8\ub378 ===\")\n\nclass ObjectModelAnalyzer:\n    \"\"\"\ud30c\uc774\uc36c \uac1d\uccb4 \ubaa8\ub378 \ubd84\uc11d\"\"\"\n\n    def __init__(self):\n        self.object_registry = weakref.WeakSet()\n\n    def analyze_object_structure(self, obj):\n        \"\"\"\uac1d\uccb4 \uad6c\uc870 \ubd84\uc11d\"\"\"\n        print(f\"\\n\uac1d\uccb4 \ubd84\uc11d: {type(obj).__name__}\")\n\n        # \uae30\ubcf8 \uc815\ubcf4\n        print(f\"   \ud0c0\uc785: {type(obj)}\")\n        print(f\"   \ud06c\uae30: {sys.getsizeof(obj)} bytes\")\n        print(f\"   ID: {id(obj)}\")\n        print(f\"   \ud574\uc2dc \uac00\ub2a5: {self._is_hashable(obj)}\")\n\n        # \ub808\ud37c\ub7f0\uc2a4 \uce74\uc6b4\ud2b8 (CPython \uc804\uc6a9)\n        if hasattr(sys, 'getrefcount'):\n            print(f\"   \ub808\ud37c\ub7f0\uc2a4 \uce74\uc6b4\ud2b8: {sys.getrefcount(obj)}\")\n\n        # \uc18d\uc131 \ubd84\uc11d\n        if hasattr(obj, '__dict__'):\n            print(f\"   \uc778\uc2a4\ud134\uc2a4 \uc18d\uc131: {list(obj.__dict__.keys())}\")\n\n        # \ud0c0\uc785 \uc815\ubcf4\n        obj_type = type(obj)\n        print(f\"   \ud0c0\uc785 \uc815\ubcf4:\")\n        print(f\"     - MRO: {[cls.__name__ for cls in obj_type.__mro__]}\")\n        print(f\"     - \uae30\ubcf8 \ud06c\uae30: {obj_type.__basicsize__}\")\n        print(f\"     - \uc544\uc774\ud15c \ud06c\uae30: {obj_type.__itemsize__}\")\n\n        # \ud2b9\uc218 \uba54\uc11c\ub4dc \ud655\uc778\n        special_methods = [attr for attr in dir(obj) if attr.startswith('__') and attr.endswith('__')]\n        print(f\"   \ud2b9\uc218 \uba54\uc11c\ub4dc \uac1c\uc218: {len(special_methods)}\")\n\n        return {\n            'type': type(obj),\n            'size': sys.getsizeof(obj),\n            'id': id(obj),\n            'refcount': sys.getrefcount(obj) if hasattr(sys, 'getrefcount') else None,\n            'special_methods': len(special_methods)\n        }\n\n    def _is_hashable(self, obj):\n        \"\"\"\ud574\uc2dc \uac00\ub2a5\uc131 \uac80\uc0ac\"\"\"\n        try:\n            hash(obj)\n            return True\n        except TypeError:\n            return False\n\n    def compare_object_sizes(self):\n        \"\"\"\ub2e4\uc591\ud55c \uac1d\uccb4\uc758 \ud06c\uae30 \ube44\uad50\"\"\"\n        print(\"\\n\uac1d\uccb4 \ud06c\uae30 \ube44\uad50:\")\n\n        objects = [\n            ('None', None),\n            ('bool', True),\n            ('int (small)', 42),\n            ('int (large)', 123456789012345),\n            ('float', 3.14159),\n            ('string (empty)', ''),\n            ('string (small)', 'hello'),\n            ('string (large)', 'a' * 1000),\n            ('list (empty)', []),\n            ('list (small)', [1, 2, 3]),\n            ('list (large)', list(range(1000))),\n            ('dict (empty)', {}),\n            ('dict (small)', {'a': 1, 'b': 2}),\n            ('set (empty)', set()),\n            ('tuple (empty)', ()),\n            ('tuple (small)', (1, 2, 3)),\n        ]\n\n        for name, obj in objects:\n            size = sys.getsizeof(obj)\n            print(f\"   {name:20s}: {size:6d} bytes\")\n\n        # \ucee8\ud14c\uc774\ub108 \uc624\ubc84\ud5e4\ub4dc \ubd84\uc11d\n        print(\"\\n\ucee8\ud14c\uc774\ub108 \uc624\ubc84\ud5e4\ub4dc \ubd84\uc11d:\")\n        base_list = []\n        for i in range(0, 11):\n            current_list = list(range(i))\n            size = sys.getsizeof(current_list)\n            print(f\"   \ub9ac\uc2a4\ud2b8[{i:2d}]: {size:3d} bytes\")\n\n    def analyze_memory_layout(self):\n        \"\"\"\uba54\ubaa8\ub9ac \ub808\uc774\uc544\uc6c3 \ubd84\uc11d\"\"\"\n        print(\"\\n\uba54\ubaa8\ub9ac \ub808\uc774\uc544\uc6c3 \ubd84\uc11d:\")\n\n        # \ub3d9\uc77c\ud55c \uac12\uc758 \uac1d\uccb4\ub4e4\uc774 \uac19\uc740 \uba54\ubaa8\ub9ac\ub97c \uacf5\uc720\ud558\ub294\uc9c0 \ud655\uc778\n        small_ints = [i for i in range(-5, 257)]\n        shared_count = 0\n\n        for i in range(len(small_ints) - 1):\n            if id(small_ints[i]) == id(small_ints[i]):  # \uc790\uae30 \uc790\uc2e0\uacfc \ube44\uad50\n                shared_count += 1\n\n        print(f\"   \uc791\uc740 \uc815\uc218 (-5~256) \uba54\ubaa8\ub9ac \uacf5\uc720 \ud655\uc778:\")\n        print(f\"     - id(-1): {id(-1)}\")\n        print(f\"     - id(0): {id(0)}\")\n        print(f\"     - id(100): {id(100)}\")\n        print(f\"     - id(256): {id(256)}\")\n        print(f\"     - id(257): {id(257)}\")\n\n        # \ubb38\uc790\uc5f4 \uc778\ud130\ub2dd \ud655\uc778\n        str1 = \"hello\"\n        str2 = \"hello\"\n        str3 = \"hello world\"\n        str4 = \"hello world\"\n\n        print(f\"   \ubb38\uc790\uc5f4 \uc778\ud130\ub2dd:\")\n        print(f\"     - 'hello' \uacf5\uc720: {id(str1) == id(str2)}\")\n        print(f\"     - 'hello world' \uacf5\uc720: {id(str3) == id(str4)}\")\n\n        # \ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c\uc758 \uba54\ubaa8\ub9ac \ub808\uc774\uc544\uc6c3\n        list_obj = [1, 2, 3, 4, 5]\n        tuple_obj = (1, 2, 3, 4, 5)\n\n        print(f\"   \ucee8\ud14c\uc774\ub108 \uba54\ubaa8\ub9ac \ube44\uad50:\")\n        print(f\"     - \ub9ac\uc2a4\ud2b8 [1,2,3,4,5]: {sys.getsizeof(list_obj)} bytes\")\n        print(f\"     - \ud29c\ud50c (1,2,3,4,5): {sys.getsizeof(tuple_obj)} bytes\")\n\ndef demonstrate_object_model():\n    \"\"\"\uac1d\uccb4 \ubaa8\ub378 \uc2dc\uc5f0\"\"\"\n    analyzer = ObjectModelAnalyzer()\n\n    # \ub2e4\uc591\ud55c \uac1d\uccb4 \ubd84\uc11d\n    test_objects = [\n        42,\n        \"Hello, World!\",\n        [1, 2, 3],\n        {'key': 'value'},\n        lambda x: x * 2\n    ]\n\n    for obj in test_objects:\n        analyzer.analyze_object_structure(obj)\n\n    # \uac1d\uccb4 \ud06c\uae30 \ube44\uad50\n    analyzer.compare_object_sizes()\n\n    # \uba54\ubaa8\ub9ac \ub808\uc774\uc544\uc6c3 \ubd84\uc11d\n    analyzer.analyze_memory_layout()\n\ndemonstrate_object_model()\n</code></pre>"},{"location":"tutorials/advanced/chapter01_python_internals_memory/#2","title":"2. \uba54\ubaa8\ub9ac \uad00\ub9ac\uc640 \uac00\ube44\uc9c0 \uceec\ub809\uc158","text":""},{"location":"tutorials/advanced/chapter01_python_internals_memory/#21","title":"2.1 \uba54\ubaa8\ub9ac \ud560\ub2f9\uacfc \ud574\uc81c \uba54\ucee4\ub2c8\uc998","text":"<pre><code>print(\"\\n=== \uba54\ubaa8\ub9ac \uad00\ub9ac \uc2dc\uc2a4\ud15c ===\")\n\nclass MemoryManager:\n    \"\"\"\uba54\ubaa8\ub9ac \uad00\ub9ac \ubd84\uc11d \ub3c4\uad6c\"\"\"\n\n    def __init__(self):\n        self.allocation_tracking = []\n        self.gc_stats_history = []\n\n    def analyze_memory_allocation(self):\n        \"\"\"\uba54\ubaa8\ub9ac \ud560\ub2f9 \ud328\ud134 \ubd84\uc11d\"\"\"\n        print(\"\\n1. \uba54\ubaa8\ub9ac \ud560\ub2f9 \ud328\ud134:\")\n\n        # \ud504\ub85c\uc138\uc2a4 \uba54\ubaa8\ub9ac \uc815\ubcf4\n        process = psutil.Process(os.getpid())\n        memory_info = process.memory_info()\n\n        print(f\"   \ud504\ub85c\uc138\uc2a4 \uba54\ubaa8\ub9ac \uc815\ubcf4:\")\n        print(f\"     - RSS (\ubb3c\ub9ac \uba54\ubaa8\ub9ac): {memory_info.rss / 1024 / 1024:.2f} MB\")\n        print(f\"     - VMS (\uac00\uc0c1 \uba54\ubaa8\ub9ac): {memory_info.vms / 1024 / 1024:.2f} MB\")\n\n        # \ud30c\uc774\uc36c \uba54\ubaa8\ub9ac \ud480 \uc815\ubcf4\n        print(f\"   \ud30c\uc774\uc36c \ub0b4\ubd80 \uba54\ubaa8\ub9ac:\")\n\n        # \uac00\ube44\uc9c0 \uceec\ub809\uc158 \ud1b5\uacc4\n        gc_stats = gc.get_stats()\n        print(f\"     - GC \uc138\ub300\ubcc4 \ud1b5\uacc4: {gc_stats}\")\n\n        # \uac1d\uccb4 \uc0dd\uc131\uacfc \ud560\ub2f9 \ucd94\uc801\n        initial_objects = len(gc.get_objects())\n\n        # \ub300\ub7c9 \uac1d\uccb4 \uc0dd\uc131\n        test_objects = []\n        for i in range(1000):\n            test_objects.append({\n                'id': i,\n                'data': [j for j in range(10)],\n                'name': f'object_{i}'\n            })\n\n        after_objects = len(gc.get_objects())\n        print(f\"     - \uac1d\uccb4 \uc0dd\uc131 \uc804: {initial_objects}\")\n        print(f\"     - \uac1d\uccb4 \uc0dd\uc131 \ud6c4: {after_objects}\")\n        print(f\"     - \uc99d\uac00\ud55c \uac1d\uccb4: {after_objects - initial_objects}\")\n\n        # \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ubcc0\ud654\n        new_memory_info = process.memory_info()\n        memory_increase = (new_memory_info.rss - memory_info.rss) / 1024 / 1024\n        print(f\"     - \uba54\ubaa8\ub9ac \uc99d\uac00: {memory_increase:.2f} MB\")\n\n        return test_objects\n\n    def analyze_garbage_collection(self):\n        \"\"\"\uac00\ube44\uc9c0 \uceec\ub809\uc158 \ubd84\uc11d\"\"\"\n        print(\"\\n2. \uac00\ube44\uc9c0 \uceec\ub809\uc158 \ubd84\uc11d:\")\n\n        # GC \uc784\uacc4\uac12 \ud655\uc778\n        thresholds = gc.get_threshold()\n        print(f\"   GC \uc784\uacc4\uac12: {thresholds}\")\n\n        # GC \ud1b5\uacc4 \uc218\uc9d1\n        initial_stats = gc.get_stats()\n        counts_before = gc.get_count()\n\n        print(f\"   \uceec\ub809\uc158 \uc804 \uce74\uc6b4\ud2b8: {counts_before}\")\n\n        # \uc21c\ud658 \ucc38\uc870 \uc0dd\uc131\n        circular_refs = self._create_circular_references(100)\n\n        # \uac15\uc81c \uac00\ube44\uc9c0 \uceec\ub809\uc158 \uc218\ud589\n        collected = gc.collect()\n\n        counts_after = gc.get_count()\n        final_stats = gc.get_stats()\n\n        print(f\"   \uceec\ub809\uc158 \ud6c4 \uce74\uc6b4\ud2b8: {counts_after}\")\n        print(f\"   \uc218\uc9d1\ub41c \uac1d\uccb4 \uc218: {collected}\")\n\n        # \uc138\ub300\ubcc4 \uc218\uc9d1 \ud1b5\uacc4\n        for i, (initial, final) in enumerate(zip(initial_stats, final_stats)):\n            print(f\"   \uc138\ub300 {i}:\")\n            print(f\"     - \uc218\uc9d1 \uc804: {initial['collections']}\ud68c\")\n            print(f\"     - \uc218\uc9d1 \ud6c4: {final['collections']}\ud68c\")\n            print(f\"     - \uc218\uc9d1\ub41c \uac1d\uccb4: {final['collected']}\uac1c\")\n\n        return circular_refs\n\n    def _create_circular_references(self, count):\n        \"\"\"\uc21c\ud658 \ucc38\uc870 \uac1d\uccb4 \uc0dd\uc131\"\"\"\n        objects = []\n\n        for i in range(count):\n            obj_a = {'name': f'A_{i}'}\n            obj_b = {'name': f'B_{i}'}\n\n            # \uc21c\ud658 \ucc38\uc870 \uc0dd\uc131\n            obj_a['ref'] = obj_b\n            obj_b['ref'] = obj_a\n\n            objects.append((obj_a, obj_b))\n\n        return objects\n\n    def analyze_memory_pools(self):\n        \"\"\"\uba54\ubaa8\ub9ac \ud480 \ubd84\uc11d\"\"\"\n        print(\"\\n3. \uba54\ubaa8\ub9ac \ud480 \ubd84\uc11d:\")\n\n        # \ub2e4\uc591\ud55c \ud06c\uae30\uc758 \uac1d\uccb4 \uc0dd\uc131\uc73c\ub85c \ud480 \uc0ac\uc6a9 \ud328\ud134 \ud655\uc778\n        small_objects = [i for i in range(1000)]  # \uc791\uc740 \uc815\uc218\n        medium_objects = ['x' * i for i in range(1, 100)]  # \uc911\uac04 \ud06c\uae30 \ubb38\uc790\uc5f4\n        large_objects = [list(range(i * 100)) for i in range(1, 10)]  # \ud070 \ub9ac\uc2a4\ud2b8\n\n        print(f\"   \uc0dd\uc131\ub41c \uac1d\uccb4:\")\n        print(f\"     - \uc791\uc740 \uac1d\uccb4: {len(small_objects)}\uac1c\")\n        print(f\"     - \uc911\uac04 \uac1d\uccb4: {len(medium_objects)}\uac1c\")\n        print(f\"     - \ud070 \uac1d\uccb4: {len(large_objects)}\uac1c\")\n\n        # \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ud655\uc778\n        total_size = (sum(sys.getsizeof(obj) for obj in small_objects) +\n                     sum(sys.getsizeof(obj) for obj in medium_objects) +\n                     sum(sys.getsizeof(obj) for obj in large_objects))\n\n        print(f\"   \ucd1d \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9: {total_size / 1024:.2f} KB\")\n\n        # \uac1d\uccb4 \ud574\uc81c\n        del small_objects, medium_objects, large_objects\n\n        # \uac00\ube44\uc9c0 \uceec\ub809\uc158 \uc218\ud589\n        collected = gc.collect()\n        print(f\"   \ud574\uc81c \ud6c4 \uc218\uc9d1\ub41c \uac1d\uccb4: {collected}\uac1c\")\n\n    def memory_profiling_demo(self):\n        \"\"\"\uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1 \ub370\ubaa8\"\"\"\n        print(\"\\n4. \uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1:\")\n\n        # tracemalloc \uc2dc\uc791\n        tracemalloc.start()\n\n        # \uba54\ubaa8\ub9ac \uc0ac\uc6a9 \ucf54\ub4dc \uc2e4\ud589\n        data = {}\n        for i in range(1000):\n            key = f\"key_{i}\"\n            value = [j for j in range(i % 50)]\n            data[key] = value\n\n        # \uccab \ubc88\uc9f8 \uc2a4\ub0c5\uc0f7\n        snapshot1 = tracemalloc.take_snapshot()\n\n        # \ucd94\uac00 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\n        more_data = []\n        for i in range(500):\n            more_data.append({\n                'id': i,\n                'content': 'x' * (i % 100),\n                'nested': {'value': i * 2}\n            })\n\n        # \ub450 \ubc88\uc9f8 \uc2a4\ub0c5\uc0f7\n        snapshot2 = tracemalloc.take_snapshot()\n\n        # \uba54\ubaa8\ub9ac \ucc28\uc774 \ubd84\uc11d\n        top_stats = snapshot2.compare_to(snapshot1, 'lineno')\n\n        print(\"   \uba54\ubaa8\ub9ac \uc99d\uac00 \uc0c1\uc704 5\uac1c \uc704\uce58:\")\n        for index, stat in enumerate(top_stats[:5], 1):\n            print(f\"     {index}. {stat}\")\n\n        # \ud604\uc7ac \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\n        current, peak = tracemalloc.get_traced_memory()\n        print(f\"   \ud604\uc7ac \uba54\ubaa8\ub9ac: {current / 1024 / 1024:.2f} MB\")\n        print(f\"   \ucd5c\ub300 \uba54\ubaa8\ub9ac: {peak / 1024 / 1024:.2f} MB\")\n\n        tracemalloc.stop()\n\n        return data, more_data\n\ndef demonstrate_memory_management():\n    \"\"\"\uba54\ubaa8\ub9ac \uad00\ub9ac \uc2dc\uc5f0\"\"\"\n    manager = MemoryManager()\n\n    # \uba54\ubaa8\ub9ac \ud560\ub2f9 \ubd84\uc11d\n    test_objects = manager.analyze_memory_allocation()\n\n    # \uac00\ube44\uc9c0 \uceec\ub809\uc158 \ubd84\uc11d\n    circular_refs = manager.analyze_garbage_collection()\n\n    # \uba54\ubaa8\ub9ac \ud480 \ubd84\uc11d\n    manager.analyze_memory_pools()\n\n    # \uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1\n    data, more_data = manager.memory_profiling_demo()\n\n    return test_objects, circular_refs, data, more_data\n\ndemonstrate_memory_management()\n</code></pre>"},{"location":"tutorials/advanced/chapter01_python_internals_memory/#22","title":"2.2 \uba54\ubaa8\ub9ac \ub204\uc218 \ud0d0\uc9c0\uc640 \ucd5c\uc801\ud654","text":"<pre><code>print(\"\\n=== \uba54\ubaa8\ub9ac \ub204\uc218 \ud0d0\uc9c0\uc640 \ucd5c\uc801\ud654 ===\")\n\nclass MemoryLeakDetector:\n    \"\"\"\uba54\ubaa8\ub9ac \ub204\uc218 \ud0d0\uc9c0 \ub3c4\uad6c\"\"\"\n\n    def __init__(self):\n        self.snapshots = []\n        self.leak_patterns = []\n\n    def start_monitoring(self):\n        \"\"\"\uba54\ubaa8\ub9ac \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc791\"\"\"\n        tracemalloc.start()\n        gc.set_debug(gc.DEBUG_STATS)\n\n    def stop_monitoring(self):\n        \"\"\"\uba54\ubaa8\ub9ac \ubaa8\ub2c8\ud130\ub9c1 \uc911\uc9c0\"\"\"\n        tracemalloc.stop()\n        gc.set_debug(0)\n\n    def take_snapshot(self, label=\"\"):\n        \"\"\"\uba54\ubaa8\ub9ac \uc2a4\ub0c5\uc0f7 \uc0dd\uc131\"\"\"\n        snapshot = {\n            'label': label,\n            'tracemalloc': tracemalloc.take_snapshot(),\n            'gc_objects': len(gc.get_objects()),\n            'gc_stats': gc.get_stats(),\n            'process_memory': psutil.Process(os.getpid()).memory_info().rss\n        }\n        self.snapshots.append(snapshot)\n        return snapshot\n\n    def analyze_memory_growth(self):\n        \"\"\"\uba54\ubaa8\ub9ac \uc99d\uac00 \ud328\ud134 \ubd84\uc11d\"\"\"\n        if len(self.snapshots) &lt; 2:\n            print(\"   \ubd84\uc11d\uc744 \uc704\ud574 \ucd5c\uc18c 2\uac1c\uc758 \uc2a4\ub0c5\uc0f7\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.\")\n            return\n\n        print(\"\\n\uba54\ubaa8\ub9ac \uc99d\uac00 \ud328\ud134 \ubd84\uc11d:\")\n\n        for i in range(1, len(self.snapshots)):\n            prev = self.snapshots[i-1]\n            curr = self.snapshots[i]\n\n            # \uac1d\uccb4 \uc218 \ubcc0\ud654\n            obj_growth = curr['gc_objects'] - prev['gc_objects']\n\n            # \ud504\ub85c\uc138\uc2a4 \uba54\ubaa8\ub9ac \ubcc0\ud654\n            memory_growth = (curr['process_memory'] - prev['process_memory']) / 1024 / 1024\n\n            print(f\"   {prev['label']} \u2192 {curr['label']}:\")\n            print(f\"     - \uac1d\uccb4 \uc99d\uac00: {obj_growth:+d}\")\n            print(f\"     - \uba54\ubaa8\ub9ac \uc99d\uac00: {memory_growth:+.2f} MB\")\n\n            # tracemalloc \ube44\uad50\n            if prev['tracemalloc'] and curr['tracemalloc']:\n                top_stats = curr['tracemalloc'].compare_to(prev['tracemalloc'], 'lineno')\n                print(f\"     - \uc8fc\uc694 \uc99d\uac00 \uc704\uce58:\")\n                for stat in top_stats[:3]:\n                    print(f\"       {stat}\")\n\n    def detect_memory_leaks(self):\n        \"\"\"\uba54\ubaa8\ub9ac \ub204\uc218 \ud0d0\uc9c0\"\"\"\n        print(\"\\n\uba54\ubaa8\ub9ac \ub204\uc218 \ud0d0\uc9c0:\")\n\n        # \uac15\ub825\ud55c \ucc38\uc870 \uc21c\ud658 \ud0d0\uc9c0\n        circular_refs = []\n        all_objects = gc.get_objects()\n\n        for obj in all_objects:\n            if hasattr(obj, '__dict__'):\n                for attr_name, attr_value in obj.__dict__.items():\n                    if attr_value is obj:\n                        circular_refs.append((obj, attr_name))\n\n        print(f\"   \uc790\uae30 \ucc38\uc870 \uac1d\uccb4: {len(circular_refs)}\uac1c\")\n\n        # \uac00\ube44\uc9c0 \uceec\ub809\uc158\uc73c\ub85c \uc218\uc9d1\ub418\uc9c0 \uc54a\ub294 \uac1d\uccb4 \ud655\uc778\n        gc.collect()  # \uac15\uc81c \uc218\uc9d1\n\n        # \ub3c4\ub2ec \ubd88\uac00\ub2a5\ud558\uc9c0\ub9cc \uc218\uc9d1\ub418\uc9c0 \uc54a\uc740 \uac1d\uccb4\n        uncollectable = gc.garbage\n        print(f\"   \uc218\uc9d1 \ubd88\uac00\ub2a5\ud55c \uac1d\uccb4: {len(uncollectable)}\uac1c\")\n\n        if uncollectable:\n            print(\"   \uc218\uc9d1 \ubd88\uac00\ub2a5\ud55c \uac1d\uccb4 \uc720\ud615:\")\n            type_counts = defaultdict(int)\n            for obj in uncollectable:\n                type_counts[type(obj).__name__] += 1\n\n            for obj_type, count in type_counts.items():\n                print(f\"     - {obj_type}: {count}\uac1c\")\n\n        return circular_refs, uncollectable\n\n    def optimize_memory_usage(self):\n        \"\"\"\uba54\ubaa8\ub9ac \uc0ac\uc6a9 \ucd5c\uc801\ud654 \uae30\ubc95\"\"\"\n        print(\"\\n\uba54\ubaa8\ub9ac \ucd5c\uc801\ud654 \uae30\ubc95:\")\n\n        # 1. __slots__ \uc0ac\uc6a9 \ud6a8\uacfc\n        print(\"   1. __slots__ \ucd5c\uc801\ud654:\")\n\n        class RegularClass:\n            def __init__(self, x, y):\n                self.x = x\n                self.y = y\n\n        class SlottedClass:\n            __slots__ = ['x', 'y']\n            def __init__(self, x, y):\n                self.x = x\n                self.y = y\n\n        regular_obj = RegularClass(1, 2)\n        slotted_obj = SlottedClass(1, 2)\n\n        regular_size = sys.getsizeof(regular_obj) + sys.getsizeof(regular_obj.__dict__)\n        slotted_size = sys.getsizeof(slotted_obj)\n\n        print(f\"     - \uc77c\ubc18 \ud074\ub798\uc2a4: {regular_size} bytes\")\n        print(f\"     - __slots__ \ud074\ub798\uc2a4: {slotted_size} bytes\")\n        print(f\"     - \uc808\uc57d\ub41c \uba54\ubaa8\ub9ac: {regular_size - slotted_size} bytes ({((regular_size - slotted_size) / regular_size * 100):.1f}%)\")\n\n        # 2. \uc81c\ub108\ub808\uc774\ud130 vs \ub9ac\uc2a4\ud2b8\n        print(\"\\n   2. \uc81c\ub108\ub808\uc774\ud130 vs \ub9ac\uc2a4\ud2b8:\")\n\n        def create_list(n):\n            return [i for i in range(n)]\n\n        def create_generator(n):\n            return (i for i in range(n))\n\n        n = 10000\n        list_obj = create_list(n)\n        gen_obj = create_generator(n)\n\n        list_size = sys.getsizeof(list_obj)\n        gen_size = sys.getsizeof(gen_obj)\n\n        print(f\"     - \ub9ac\uc2a4\ud2b8 ({n}\uac1c \uc694\uc18c): {list_size} bytes\")\n        print(f\"     - \uc81c\ub108\ub808\uc774\ud130: {gen_size} bytes\")\n        print(f\"     - \uba54\ubaa8\ub9ac \uc808\uc57d: {list_size - gen_size} bytes\")\n\n        # 3. \ubb38\uc790\uc5f4 \ucd5c\uc801\ud654\n        print(\"\\n   3. \ubb38\uc790\uc5f4 \ucd5c\uc801\ud654:\")\n\n        # \ubb38\uc790\uc5f4 \uc5f0\uacb0 \ube44\uad50\n        import time\n\n        # \ube44\ud6a8\uc728\uc801\uc778 \ubc29\ubc95\n        start_time = time.time()\n        result1 = \"\"\n        for i in range(1000):\n            result1 += f\"item_{i} \"\n        inefficient_time = time.time() - start_time\n\n        # \ud6a8\uc728\uc801\uc778 \ubc29\ubc95\n        start_time = time.time()\n        parts = []\n        for i in range(1000):\n            parts.append(f\"item_{i} \")\n        result2 = \"\".join(parts)\n        efficient_time = time.time() - start_time\n\n        print(f\"     - \ubb38\uc790\uc5f4 \uc5f0\uacb0 (+= \uc5f0\uc0b0): {inefficient_time:.4f}\ucd08\")\n        print(f\"     - join() \uc0ac\uc6a9: {efficient_time:.4f}\ucd08\")\n        print(f\"     - \uc131\ub2a5 \ud5a5\uc0c1: {inefficient_time / efficient_time:.1f}\ubc30\")\n\n        return regular_obj, slotted_obj, list_obj, gen_obj\n\nclass MemoryOptimizationPatterns:\n    \"\"\"\uba54\ubaa8\ub9ac \ucd5c\uc801\ud654 \ud328\ud134\"\"\"\n\n    def __init__(self):\n        self.optimizations = {}\n\n    def lazy_loading_pattern(self):\n        \"\"\"\uc9c0\uc5f0 \ub85c\ub529 \ud328\ud134\"\"\"\n        print(\"\\n\uc9c0\uc5f0 \ub85c\ub529 \ud328\ud134:\")\n\n        class LazyDataLoader:\n            def __init__(self):\n                self._data = None\n                self._computed = False\n\n            @property\n            def data(self):\n                if not self._computed:\n                    print(\"     - \ub370\uc774\ud130 \ub85c\ub529 \uc911...\")\n                    # \ubb34\uac70\uc6b4 \uacc4\uc0b0\uc774\ub098 I/O \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n                    self._data = [i ** 2 for i in range(10000)]\n                    self._computed = True\n                return self._data\n\n        loader = LazyDataLoader()\n        print(f\"   \uac1d\uccb4 \uc0dd\uc131 \ud6c4 \ud06c\uae30: {sys.getsizeof(loader)} bytes\")\n\n        # \uccab \ubc88\uc9f8 \uc811\uadfc\n        data = loader.data\n        print(f\"   \ub370\uc774\ud130 \ub85c\ub529 \ud6c4 \ud06c\uae30: {sys.getsizeof(loader)} bytes\")\n        print(f\"   \ub370\uc774\ud130 \ud06c\uae30: {sys.getsizeof(data)} bytes\")\n\n        return loader\n\n    def object_pooling_pattern(self):\n        \"\"\"\uac1d\uccb4 \ud480\ub9c1 \ud328\ud134\"\"\"\n        print(\"\\n\uac1d\uccb4 \ud480\ub9c1 \ud328\ud134:\")\n\n        class ObjectPool:\n            def __init__(self, create_func, max_size=10):\n                self._create_func = create_func\n                self._pool = []\n                self._max_size = max_size\n                self._created_count = 0\n                self._reused_count = 0\n\n            def acquire(self):\n                if self._pool:\n                    obj = self._pool.pop()\n                    self._reused_count += 1\n                    return obj\n                else:\n                    obj = self._create_func()\n                    self._created_count += 1\n                    return obj\n\n            def release(self, obj):\n                if len(self._pool) &lt; self._max_size:\n                    # \uac1d\uccb4 \uc7ac\uc124\uc815\n                    if hasattr(obj, 'reset'):\n                        obj.reset()\n                    self._pool.append(obj)\n\n            def get_stats(self):\n                return {\n                    'created': self._created_count,\n                    'reused': self._reused_count,\n                    'pool_size': len(self._pool)\n                }\n\n        class ExpensiveObject:\n            def __init__(self):\n                self.data = [i for i in range(100)]\n                self.state = \"initialized\"\n\n            def reset(self):\n                self.state = \"reset\"\n\n        # \ud480 \uc0ac\uc6a9 \uc2dc\ubbac\ub808\uc774\uc158\n        pool = ObjectPool(ExpensiveObject, max_size=5)\n\n        objects = []\n        for i in range(10):\n            obj = pool.acquire()\n            objects.append(obj)\n\n        for obj in objects:\n            pool.release(obj)\n\n        # \uc7ac\uc0ac\uc6a9 \ud655\uc778\n        for i in range(5):\n            obj = pool.acquire()\n            pool.release(obj)\n\n        stats = pool.get_stats()\n        print(f\"   \uc0dd\uc131\ub41c \uac1d\uccb4: {stats['created']}\uac1c\")\n        print(f\"   \uc7ac\uc0ac\uc6a9\ub41c \uac1d\uccb4: {stats['reused']}\uac1c\")\n        print(f\"   \ud480 \ud06c\uae30: {stats['pool_size']}\uac1c\")\n\n        return pool\n\n    def weak_reference_pattern(self):\n        \"\"\"\uc57d\ud55c \ucc38\uc870 \ud328\ud134\"\"\"\n        print(\"\\n\uc57d\ud55c \ucc38\uc870 \ud328\ud134:\")\n\n        class CacheWithWeakRefs:\n            def __init__(self):\n                self._cache = weakref.WeakValueDictionary()\n                self._access_count = 0\n                self._miss_count = 0\n\n            def get_object(self, key, create_func):\n                self._access_count += 1\n\n                obj = self._cache.get(key)\n                if obj is None:\n                    self._miss_count += 1\n                    obj = create_func(key)\n                    self._cache[key] = obj\n\n                return obj\n\n            def get_stats(self):\n                return {\n                    'cache_size': len(self._cache),\n                    'access_count': self._access_count,\n                    'miss_count': self._miss_count,\n                    'hit_rate': ((self._access_count - self._miss_count) / self._access_count * 100) if self._access_count &gt; 0 else 0\n                }\n\n        def create_expensive_object(key):\n            return {'key': key, 'data': [i for i in range(100)]}\n\n        cache = CacheWithWeakRefs()\n\n        # \uac1d\uccb4 \uc0dd\uc131\uacfc \uc811\uadfc\n        obj1 = cache.get_object('key1', create_expensive_object)\n        obj2 = cache.get_object('key2', create_expensive_object)\n        obj1_again = cache.get_object('key1', create_expensive_object)  # \uce90\uc2dc \ud788\ud2b8\n\n        print(f\"   obj1 is obj1_again: {obj1 is obj1_again}\")\n\n        # \uac1d\uccb4 \ud574\uc81c \ud6c4 \uac00\ube44\uc9c0 \uceec\ub809\uc158\n        del obj1, obj1_again\n        gc.collect()\n\n        obj1_new = cache.get_object('key1', create_expensive_object)  # \uc0c8\ub85c \uc0dd\uc131\n\n        stats = cache.get_stats()\n        print(f\"   \uce90\uc2dc \ud06c\uae30: {stats['cache_size']}\")\n        print(f\"   \uc811\uadfc \ud69f\uc218: {stats['access_count']}\")\n        print(f\"   \ubbf8\uc2a4 \ud69f\uc218: {stats['miss_count']}\")\n        print(f\"   \ud788\ud2b8\uc728: {stats['hit_rate']:.1f}%\")\n\n        return cache\n\ndef demonstrate_leak_detection():\n    \"\"\"\uba54\ubaa8\ub9ac \ub204\uc218 \ud0d0\uc9c0 \uc2dc\uc5f0\"\"\"\n    detector = MemoryLeakDetector()\n\n    detector.start_monitoring()\n\n    # \ucd08\uae30 \uc2a4\ub0c5\uc0f7\n    detector.take_snapshot(\"\uc2dc\uc791\")\n\n    # \uba54\ubaa8\ub9ac \uc0ac\uc6a9 \uc2dc\ubbac\ub808\uc774\uc158\n    data = []\n    for i in range(1000):\n        data.append({'id': i, 'content': 'x' * (i % 100)})\n\n    detector.take_snapshot(\"\ub370\uc774\ud130 \uc0dd\uc131 \ud6c4\")\n\n    # \ucd94\uac00 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\n    more_data = {i: [j for j in range(i % 50)] for i in range(500)}\n\n    detector.take_snapshot(\"\ucd94\uac00 \ub370\uc774\ud130 \ud6c4\")\n\n    # \ubd84\uc11d \uc218\ud589\n    detector.analyze_memory_growth()\n    circular_refs, uncollectable = detector.detect_memory_leaks()\n\n    # \ucd5c\uc801\ud654 \uae30\ubc95 \uc801\uc6a9\n    regular_obj, slotted_obj, list_obj, gen_obj = detector.optimize_memory_usage()\n\n    detector.stop_monitoring()\n\n    # \ucd5c\uc801\ud654 \ud328\ud134 \uc2dc\uc5f0\n    patterns = MemoryOptimizationPatterns()\n    lazy_loader = patterns.lazy_loading_pattern()\n    object_pool = patterns.object_pooling_pattern()\n    weak_cache = patterns.weak_reference_pattern()\n\n    return detector, patterns\n\ndemonstrate_leak_detection()\n</code></pre>"},{"location":"tutorials/advanced/chapter01_python_internals_memory/#3","title":"3. \uc131\ub2a5 \ud504\ub85c\ud30c\uc77c\ub9c1\uacfc \ucd5c\uc801\ud654","text":""},{"location":"tutorials/advanced/chapter01_python_internals_memory/#31","title":"3.1 \ud504\ub85c\ud30c\uc77c\ub9c1 \ub3c4\uad6c\uc640 \uae30\ubc95","text":"<pre><code>print(\"\\n=== \uc131\ub2a5 \ud504\ub85c\ud30c\uc77c\ub9c1 ===\")\n\nimport cProfile\nimport pstats\nimport timeit\nimport functools\nimport threading\nimport multiprocessing\nfrom concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor\nimport asyncio\n\nclass PerformanceProfiler:\n    \"\"\"\uc131\ub2a5 \ud504\ub85c\ud30c\uc77c\ub9c1 \ub3c4\uad6c\"\"\"\n\n    def __init__(self):\n        self.profiling_results = {}\n        self.benchmarks = {}\n\n    def profile_function(self, func, *args, **kwargs):\n        \"\"\"\ud568\uc218 \ud504\ub85c\ud30c\uc77c\ub9c1\"\"\"\n        print(f\"\\n\ud568\uc218 \ud504\ub85c\ud30c\uc77c\ub9c1: {func.__name__}\")\n\n        # cProfile\uc744 \uc0ac\uc6a9\ud55c \ud504\ub85c\ud30c\uc77c\ub9c1\n        profiler = cProfile.Profile()\n\n        profiler.enable()\n        result = func(*args, **kwargs)\n        profiler.disable()\n\n        # \ud1b5\uacc4 \uc0dd\uc131\n        stats = pstats.Stats(profiler)\n        stats.sort_stats('cumulative')\n\n        print(\"   \uc0c1\uc704 \ud568\uc218 \ud638\ucd9c:\")\n        stats.print_stats(10)\n\n        # \uacb0\uacfc \uc800\uc7a5\n        self.profiling_results[func.__name__] = {\n            'stats': stats,\n            'result': result\n        }\n\n        return result\n\n    def time_function(self, func, *args, setup_code=\"\", number=1000):\n        \"\"\"\ud568\uc218 \uc2e4\ud589 \uc2dc\uac04 \uce21\uc815\"\"\"\n        print(f\"\\n\uc2e4\ud589 \uc2dc\uac04 \uce21\uc815: {func.__name__}\")\n\n        # timeit\uc744 \uc0ac\uc6a9\ud55c \uc815\ud655\ud55c \uc2dc\uac04 \uce21\uc815\n        func_code = f\"{func.__name__}(*{args})\"\n\n        # \ub2e8\uc77c \uc2e4\ud589 \uc2dc\uac04\n        single_time = timeit.timeit(\n            lambda: func(*args),\n            number=1\n        )\n\n        # \ud3c9\uade0 \uc2e4\ud589 \uc2dc\uac04\n        avg_time = timeit.timeit(\n            lambda: func(*args),\n            number=number\n        ) / number\n\n        print(f\"   \ub2e8\uc77c \uc2e4\ud589: {single_time:.6f}\ucd08\")\n        print(f\"   \ud3c9\uade0 \uc2e4\ud589 ({number}\ud68c): {avg_time:.6f}\ucd08\")\n\n        self.benchmarks[func.__name__] = {\n            'single_time': single_time,\n            'avg_time': avg_time,\n            'iterations': number\n        }\n\n        return single_time, avg_time\n\n    def memory_profile_function(self, func, *args, **kwargs):\n        \"\"\"\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ud504\ub85c\ud30c\uc77c\ub9c1\"\"\"\n        print(f\"\\n\uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1: {func.__name__}\")\n\n        tracemalloc.start()\n\n        # \uc2e4\ud589 \uc804 \uba54\ubaa8\ub9ac\n        before_memory = tracemalloc.get_traced_memory()[0]\n\n        result = func(*args, **kwargs)\n\n        # \uc2e4\ud589 \ud6c4 \uba54\ubaa8\ub9ac\n        after_memory = tracemalloc.get_traced_memory()[0]\n\n        snapshot = tracemalloc.take_snapshot()\n        top_stats = snapshot.statistics('lineno')\n\n        print(f\"   \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \uc99d\uac00: {(after_memory - before_memory) / 1024:.2f} KB\")\n        print(\"   \uba54\ubaa8\ub9ac \ud560\ub2f9 \uc0c1\uc704 5\uac1c:\")\n        for stat in top_stats[:5]:\n            print(f\"     {stat}\")\n\n        tracemalloc.stop()\n\n        return result\n\n    def compare_implementations(self, implementations, test_data, iterations=1000):\n        \"\"\"\uc5ec\ub7ec \uad6c\ud604 \ubc29\uc2dd \ube44\uad50\"\"\"\n        print(f\"\\n\uad6c\ud604 \ubc29\uc2dd \ube44\uad50 ({iterations}\ud68c \uc2e4\ud589):\")\n\n        results = {}\n\n        for name, func in implementations.items():\n            start_time = timeit.default_timer()\n\n            for _ in range(iterations):\n                func(test_data)\n\n            end_time = timeit.default_timer()\n            total_time = end_time - start_time\n            avg_time = total_time / iterations\n\n            results[name] = {\n                'total_time': total_time,\n                'avg_time': avg_time\n            }\n\n            print(f\"   {name}: {total_time:.4f}\ucd08 (\ud3c9\uade0: {avg_time:.6f}\ucd08)\")\n\n        # \uac00\uc7a5 \ube60\ub978 \uad6c\ud604 \ucc3e\uae30\n        fastest = min(results.items(), key=lambda x: x[1]['avg_time'])\n        print(f\"\\n   \uac00\uc7a5 \ube60\ub978 \uad6c\ud604: {fastest[0]}\")\n\n        # \uc0c1\ub300\uc801 \uc131\ub2a5 \ube44\uad50\n        print(\"   \uc0c1\ub300\uc801 \uc131\ub2a5:\")\n        for name, result in results.items():\n            ratio = result['avg_time'] / fastest[1]['avg_time']\n            print(f\"     {name}: {ratio:.2f}\ubc30 {'(\uae30\uc900)' if name == fastest[0] else ''}\")\n\n        return results\n\n# \ud504\ub85c\ud30c\uc77c\ub9c1 \ub370\ubaa8 \ud568\uc218\ub4e4\ndef fibonacci_recursive(n):\n    \"\"\"\uc7ac\uadc0\uc801 \ud53c\ubcf4\ub098\uce58 (\ube44\ud6a8\uc728\uc801)\"\"\"\n    if n &lt;= 1:\n        return n\n    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n\ndef fibonacci_iterative(n):\n    \"\"\"\ubc18\ubcf5\uc801 \ud53c\ubcf4\ub098\uce58 (\ud6a8\uc728\uc801)\"\"\"\n    if n &lt;= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n@functools.lru_cache(maxsize=None)\ndef fibonacci_memoized(n):\n    \"\"\"\uba54\ubaa8\uc774\uc81c\uc774\uc158 \ud53c\ubcf4\ub098\uce58\"\"\"\n    if n &lt;= 1:\n        return n\n    return fibonacci_memoized(n-1) + fibonacci_memoized(n-2)\n\ndef sorting_comparison_demo():\n    \"\"\"\uc815\ub82c \uc54c\uace0\ub9ac\uc998 \ube44\uad50\"\"\"\n    import random\n\n    def bubble_sort(arr):\n        arr = arr.copy()\n        n = len(arr)\n        for i in range(n):\n            for j in range(0, n-i-1):\n                if arr[j] &gt; arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n        return arr\n\n    def quick_sort(arr):\n        if len(arr) &lt;= 1:\n            return arr\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x &lt; pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x &gt; pivot]\n        return quick_sort(left) + middle + quick_sort(right)\n\n    def builtin_sort(arr):\n        return sorted(arr)\n\n    # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\n    test_data = [random.randint(1, 1000) for _ in range(100)]\n\n    # \uad6c\ud604 \ube44\uad50\n    implementations = {\n        'bubble_sort': bubble_sort,\n        'quick_sort': quick_sort,\n        'builtin_sorted': builtin_sort\n    }\n\n    profiler = PerformanceProfiler()\n    results = profiler.compare_implementations(implementations, test_data, iterations=100)\n\n    return results\n\ndef demonstrate_profiling():\n    \"\"\"\ud504\ub85c\ud30c\uc77c\ub9c1 \uc2dc\uc5f0\"\"\"\n    profiler = PerformanceProfiler()\n\n    # \ud53c\ubcf4\ub098\uce58 \uad6c\ud604 \ube44\uad50\n    print(\"=== \ud53c\ubcf4\ub098\uce58 \uad6c\ud604 \ube44\uad50 ===\")\n\n    n = 25\n\n    # \uc7ac\uadc0\uc801 \uad6c\ud604 (\uc791\uc740 n\uc73c\ub85c \uc81c\ud55c)\n    recursive_time = profiler.time_function(fibonacci_recursive, 20, number=1)\n\n    # \ubc18\ubcf5\uc801 \uad6c\ud604\n    iterative_time = profiler.time_function(fibonacci_iterative, n, number=1000)\n\n    # \uba54\ubaa8\uc774\uc81c\uc774\uc158 \uad6c\ud604\n    memoized_time = profiler.time_function(fibonacci_memoized, n, number=1000)\n\n    # \uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1\n    print(\"\\n\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ube44\uad50:\")\n    profiler.memory_profile_function(fibonacci_iterative, n)\n    profiler.memory_profile_function(fibonacci_memoized, n)\n\n    # \uc815\ub82c \uc54c\uace0\ub9ac\uc998 \ube44\uad50\n    print(\"\\n=== \uc815\ub82c \uc54c\uace0\ub9ac\uc998 \ube44\uad50 ===\")\n    sorting_results = sorting_comparison_demo()\n\n    return profiler\n\ndemonstrate_profiling()\n</code></pre>"},{"location":"tutorials/advanced/chapter01_python_internals_memory/#32","title":"3.2 \uace0\uae09 \ucd5c\uc801\ud654 \uae30\ubc95","text":"<pre><code>print(\"\\n=== \uace0\uae09 \ucd5c\uc801\ud654 \uae30\ubc95 ===\")\n\nclass AdvancedOptimizations:\n    \"\"\"\uace0\uae09 \ucd5c\uc801\ud654 \uae30\ubc95\"\"\"\n\n    def __init__(self):\n        self.optimization_results = {}\n\n    def cpu_intensive_optimization(self):\n        \"\"\"CPU \uc9d1\uc57d\uc801 \uc791\uc5c5 \ucd5c\uc801\ud654\"\"\"\n        print(\"\\n1. CPU \uc9d1\uc57d\uc801 \uc791\uc5c5 \ucd5c\uc801\ud654:\")\n\n        # \ubca1\ud130\ud654 \uc5f0\uc0b0 \uc2dc\ubbac\ub808\uc774\uc158\n        def naive_matrix_multiply(a, b):\n            \"\"\"\uc21c\uc218 Python \ud589\ub82c \uacf1\uc148\"\"\"\n            result = []\n            for i in range(len(a)):\n                row = []\n                for j in range(len(b[0])):\n                    sum_val = 0\n                    for k in range(len(b)):\n                        sum_val += a[i][k] * b[k][j]\n                    row.append(sum_val)\n                result.append(row)\n            return result\n\n        def optimized_matrix_multiply(a, b):\n            \"\"\"\ucd5c\uc801\ud654\ub41c \ud589\ub82c \uacf1\uc148 (\ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158)\"\"\"\n            return [[sum(a[i][k] * b[k][j] for k in range(len(b)))\n                    for j in range(len(b[0]))]\n                   for i in range(len(a))]\n\n        # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\n        size = 50\n        matrix_a = [[i+j for j in range(size)] for i in range(size)]\n        matrix_b = [[i*j for j in range(size)] for i in range(size)]\n\n        # \uc131\ub2a5 \ube44\uad50\n        naive_time = timeit.timeit(\n            lambda: naive_matrix_multiply(matrix_a, matrix_b),\n            number=1\n        )\n\n        optimized_time = timeit.timeit(\n            lambda: optimized_matrix_multiply(matrix_a, matrix_b),\n            number=1\n        )\n\n        print(f\"   \uc21c\uc218 Python: {naive_time:.4f}\ucd08\")\n        print(f\"   \ucd5c\uc801\ud654 \ubc84\uc804: {optimized_time:.4f}\ucd08\")\n        print(f\"   \uc131\ub2a5 \ud5a5\uc0c1: {naive_time / optimized_time:.2f}\ubc30\")\n\n        return naive_time, optimized_time\n\n    def io_intensive_optimization(self):\n        \"\"\"I/O \uc9d1\uc57d\uc801 \uc791\uc5c5 \ucd5c\uc801\ud654\"\"\"\n        print(\"\\n2. I/O \uc9d1\uc57d\uc801 \uc791\uc5c5 \ucd5c\uc801\ud654:\")\n\n        import asyncio\n        import aiohttp\n        import requests\n        from concurrent.futures import ThreadPoolExecutor\n\n        # \ub3d9\uae30 \ubc29\uc2dd\n        def fetch_urls_sync(urls):\n            \"\"\"\ub3d9\uae30 \ubc29\uc2dd URL \uc694\uccad \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n            import time\n            results = []\n            for url in urls:\n                # \uc2e4\uc81c HTTP \uc694\uccad \ub300\uc2e0 \uc2dc\uac04 \uc9c0\uc5f0\uc73c\ub85c \uc2dc\ubbac\ub808\uc774\uc158\n                time.sleep(0.1)  # 100ms \uc9c0\uc5f0\n                results.append(f\"Content from {url}\")\n            return results\n\n        # \uc2a4\ub808\ub4dc \ud480 \ubc29\uc2dd\n        def fetch_urls_threaded(urls):\n            \"\"\"\uc2a4\ub808\ub4dc \ud480\uc744 \uc0ac\uc6a9\ud55c \ubcd1\ub82c \ucc98\ub9ac\"\"\"\n            import time\n\n            def fetch_single(url):\n                time.sleep(0.1)  # 100ms \uc9c0\uc5f0\n                return f\"Content from {url}\"\n\n            with ThreadPoolExecutor(max_workers=5) as executor:\n                results = list(executor.map(fetch_single, urls))\n            return results\n\n        # \ube44\ub3d9\uae30 \ubc29\uc2dd \uc2dc\ubbac\ub808\uc774\uc158\n        async def fetch_urls_async(urls):\n            \"\"\"\ube44\ub3d9\uae30 \ubc29\uc2dd URL \uc694\uccad\"\"\"\n            async def fetch_single(url):\n                await asyncio.sleep(0.1)  # 100ms \uc9c0\uc5f0\n                return f\"Content from {url}\"\n\n            tasks = [fetch_single(url) for url in urls]\n            return await asyncio.gather(*tasks)\n\n        # \ud14c\uc2a4\ud2b8 URL \ubaa9\ub85d\n        test_urls = [f\"http://example.com/page{i}\" for i in range(10)]\n\n        # \uc131\ub2a5 \ube44\uad50\n        sync_time = timeit.timeit(\n            lambda: fetch_urls_sync(test_urls),\n            number=1\n        )\n\n        threaded_time = timeit.timeit(\n            lambda: fetch_urls_threaded(test_urls),\n            number=1\n        )\n\n        # \ube44\ub3d9\uae30 \uc2e4\ud589 \uc2dc\uac04 \uce21\uc815\n        async_start = timeit.default_timer()\n        asyncio.run(fetch_urls_async(test_urls))\n        async_time = timeit.default_timer() - async_start\n\n        print(f\"   \ub3d9\uae30 \ubc29\uc2dd: {sync_time:.4f}\ucd08\")\n        print(f\"   \uc2a4\ub808\ub4dc \ud480: {threaded_time:.4f}\ucd08\")\n        print(f\"   \ube44\ub3d9\uae30: {async_time:.4f}\ucd08\")\n        print(f\"   \uc2a4\ub808\ub4dc \ud480 \ud5a5\uc0c1: {sync_time / threaded_time:.2f}\ubc30\")\n        print(f\"   \ube44\ub3d9\uae30 \ud5a5\uc0c1: {sync_time / async_time:.2f}\ubc30\")\n\n        return sync_time, threaded_time, async_time\n\n    def memory_access_optimization(self):\n        \"\"\"\uba54\ubaa8\ub9ac \uc811\uadfc \ucd5c\uc801\ud654\"\"\"\n        print(\"\\n3. \uba54\ubaa8\ub9ac \uc811\uadfc \ud328\ud134 \ucd5c\uc801\ud654:\")\n\n        # \uce90\uc2dc \uce5c\ud654\uc801 vs \ube44\uce5c\ud654\uc801 \uba54\ubaa8\ub9ac \uc811\uadfc\n        def row_major_access(matrix):\n            \"\"\"\ud589 \uc6b0\uc120 \uc811\uadfc (\uce90\uc2dc \uce5c\ud654\uc801)\"\"\"\n            total = 0\n            for i in range(len(matrix)):\n                for j in range(len(matrix[0])):\n                    total += matrix[i][j]\n            return total\n\n        def column_major_access(matrix):\n            \"\"\"\uc5f4 \uc6b0\uc120 \uc811\uadfc (\uce90\uc2dc \ube44\uce5c\ud654\uc801)\"\"\"\n            total = 0\n            for j in range(len(matrix[0])):\n                for i in range(len(matrix)):\n                    total += matrix[i][j]\n            return total\n\n        # \ud070 2D \ubc30\uc5f4 \uc0dd\uc131\n        size = 1000\n        large_matrix = [[i + j for j in range(size)] for i in range(size)]\n\n        # \uc131\ub2a5 \ube44\uad50\n        row_time = timeit.timeit(\n            lambda: row_major_access(large_matrix),\n            number=10\n        )\n\n        col_time = timeit.timeit(\n            lambda: column_major_access(large_matrix),\n            number=10\n        )\n\n        print(f\"   \ud589 \uc6b0\uc120 \uc811\uadfc: {row_time:.4f}\ucd08\")\n        print(f\"   \uc5f4 \uc6b0\uc120 \uc811\uadfc: {col_time:.4f}\ucd08\")\n        print(f\"   \uc131\ub2a5 \ucc28\uc774: {col_time / row_time:.2f}\ubc30\")\n\n        return row_time, col_time\n\n    def algorithmic_optimization(self):\n        \"\"\"\uc54c\uace0\ub9ac\uc998 \ucd5c\uc801\ud654\"\"\"\n        print(\"\\n4. \uc54c\uace0\ub9ac\uc998 \ucd5c\uc801\ud654:\")\n\n        # \uc911\ubcf5 \uacc4\uc0b0 \uc81c\uac70 (\uba54\ubaa8\uc774\uc81c\uc774\uc158)\n        def expensive_calculation(n):\n            \"\"\"\ube44\uc6a9\uc774 \ud070 \uacc4\uc0b0 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n            result = 0\n            for i in range(n):\n                result += i ** 2\n            return result\n\n        # \uba54\ubaa8\uc774\uc81c\uc774\uc158 \uc801\uc6a9\n        @functools.lru_cache(maxsize=128)\n        def memoized_calculation(n):\n            \"\"\"\uba54\ubaa8\uc774\uc81c\uc774\uc158\uc774 \uc801\uc6a9\ub41c \uacc4\uc0b0\"\"\"\n            result = 0\n            for i in range(n):\n                result += i ** 2\n            return result\n\n        # \ubc18\ubcf5 \uacc4\uc0b0 \uc2dc\ub098\ub9ac\uc624\n        test_values = [100, 200, 100, 300, 200, 100]  # \uc911\ubcf5 \uac12 \ud3ec\ud568\n\n        # \uba54\ubaa8\uc774\uc81c\uc774\uc158 \uc5c6\uc774\n        start_time = timeit.default_timer()\n        for val in test_values:\n            expensive_calculation(val)\n        no_memo_time = timeit.default_timer() - start_time\n\n        # \uba54\ubaa8\uc774\uc81c\uc774\uc158 \uc801\uc6a9\n        start_time = timeit.default_timer()\n        for val in test_values:\n            memoized_calculation(val)\n        memo_time = timeit.default_timer() - start_time\n\n        print(f\"   \uba54\ubaa8\uc774\uc81c\uc774\uc158 \uc5c6\uc74c: {no_memo_time:.4f}\ucd08\")\n        print(f\"   \uba54\ubaa8\uc774\uc81c\uc774\uc158 \uc801\uc6a9: {memo_time:.4f}\ucd08\")\n        print(f\"   \uc131\ub2a5 \ud5a5\uc0c1: {no_memo_time / memo_time:.2f}\ubc30\")\n\n        # \uce90\uc2dc \ud1b5\uacc4\n        cache_info = memoized_calculation.cache_info()\n        print(f\"   \uce90\uc2dc \ud788\ud2b8: {cache_info.hits}\")\n        print(f\"   \uce90\uc2dc \ubbf8\uc2a4: {cache_info.misses}\")\n        print(f\"   \ud788\ud2b8\uc728: {cache_info.hits / (cache_info.hits + cache_info.misses) * 100:.1f}%\")\n\n        return no_memo_time, memo_time\n\n    def data_structure_optimization(self):\n        \"\"\"\ub370\uc774\ud130 \uad6c\uc870 \ucd5c\uc801\ud654\"\"\"\n        print(\"\\n5. \ub370\uc774\ud130 \uad6c\uc870 \ucd5c\uc801\ud654:\")\n\n        import array\n        import collections\n\n        # \ub9ac\uc2a4\ud2b8 vs array\n        python_list = [i for i in range(10000)]\n        int_array = array.array('i', range(10000))\n\n        list_size = sys.getsizeof(python_list)\n        array_size = sys.getsizeof(int_array)\n\n        print(f\"   Python \ub9ac\uc2a4\ud2b8: {list_size} bytes\")\n        print(f\"   array.array: {array_size} bytes\")\n        print(f\"   \uba54\ubaa8\ub9ac \uc808\uc57d: {(list_size - array_size) / list_size * 100:.1f}%\")\n\n        # \uac80\uc0c9 \uc131\ub2a5 \ube44\uad50\n        test_list = list(range(10000))\n        test_set = set(range(10000))\n        test_dict = {i: i for i in range(10000)}\n\n        search_value = 9999\n\n        # \ub9ac\uc2a4\ud2b8 \uac80\uc0c9\n        list_time = timeit.timeit(\n            lambda: search_value in test_list,\n            number=1000\n        )\n\n        # \uc9d1\ud569 \uac80\uc0c9\n        set_time = timeit.timeit(\n            lambda: search_value in test_set,\n            number=1000\n        )\n\n        # \ub515\uc154\ub108\ub9ac \uac80\uc0c9\n        dict_time = timeit.timeit(\n            lambda: search_value in test_dict,\n            number=1000\n        )\n\n        print(f\"\\n   \uac80\uc0c9 \uc131\ub2a5 (1000\ud68c \ud3c9\uade0):\")\n        print(f\"     \ub9ac\uc2a4\ud2b8: {list_time:.6f}\ucd08\")\n        print(f\"     \uc9d1\ud569: {set_time:.6f}\ucd08\")\n        print(f\"     \ub515\uc154\ub108\ub9ac: {dict_time:.6f}\ucd08\")\n        print(f\"     \uc9d1\ud569 \ud5a5\uc0c1: {list_time / set_time:.0f}\ubc30\")\n        print(f\"     \ub515\uc154\ub108\ub9ac \ud5a5\uc0c1: {list_time / dict_time:.0f}\ubc30\")\n\n        return list_time, set_time, dict_time\n\ndef demonstrate_advanced_optimizations():\n    \"\"\"\uace0\uae09 \ucd5c\uc801\ud654 \uae30\ubc95 \uc2dc\uc5f0\"\"\"\n    optimizer = AdvancedOptimizations()\n\n    # \uac01 \ucd5c\uc801\ud654 \uae30\ubc95 \uc2e4\ud589\n    cpu_results = optimizer.cpu_intensive_optimization()\n    io_results = optimizer.io_intensive_optimization()\n    memory_results = optimizer.memory_access_optimization()\n    algo_results = optimizer.algorithmic_optimization()\n    ds_results = optimizer.data_structure_optimization()\n\n    print(\"\\n=== \ucd5c\uc801\ud654 \uc694\uc57d ===\")\n    print(f\"CPU \ucd5c\uc801\ud654 \ud5a5\uc0c1: {cpu_results[0] / cpu_results[1]:.2f}\ubc30\")\n    print(f\"I/O \ucd5c\uc801\ud654 \ud5a5\uc0c1 (\uc2a4\ub808\ub4dc): {io_results[0] / io_results[1]:.2f}\ubc30\")\n    print(f\"I/O \ucd5c\uc801\ud654 \ud5a5\uc0c1 (\ube44\ub3d9\uae30): {io_results[0] / io_results[2]:.2f}\ubc30\")\n    print(f\"\uba54\ubaa8\ub9ac \uc811\uadfc \ucd5c\uc801\ud654: {memory_results[1] / memory_results[0]:.2f}\ubc30 \ub290\ub9bc (\uc5f4 \uc6b0\uc120)\")\n    print(f\"\uc54c\uace0\ub9ac\uc998 \ucd5c\uc801\ud654: {algo_results[0] / algo_results[1]:.2f}\ubc30\")\n    print(f\"\ub370\uc774\ud130 \uad6c\uc870 \ucd5c\uc801\ud654: {ds_results[0] / ds_results[1]:.0f}\ubc30 (\uc9d1\ud569)\")\n\n    return optimizer\n\ndemonstrate_advanced_optimizations()\n</code></pre>"},{"location":"tutorials/advanced/chapter01_python_internals_memory/#4","title":"4. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/advanced/chapter01_python_internals_memory/#1","title":"\uc5f0\uc2b5 1: \ucee4\uc2a4\ud140 \uac00\ube44\uc9c0 \uceec\ub809\ud130","text":"<p>\uc57d\ud55c \ucc38\uc870\ub97c \ud65c\uc6a9\ud55c \ucee4\uc2a4\ud140 \uac00\ube44\uc9c0 \uceec\ub809\ud130\ub97c \uad6c\ud604\ud558\uc138\uc694: - \uc21c\ud658 \ucc38\uc870 \ud0d0\uc9c0 - \uc790\ub3d9 \uc815\ub9ac \uae30\ub2a5 - \ud1b5\uacc4 \uc218\uc9d1</p>"},{"location":"tutorials/advanced/chapter01_python_internals_memory/#2_1","title":"\uc5f0\uc2b5 2: \uba54\ubaa8\ub9ac \ud480 \uad00\ub9ac\uc790","text":"<p>\ud6a8\uc728\uc801\uc778 \uba54\ubaa8\ub9ac \ud480 \uad00\ub9ac\uc790\ub97c \uad6c\ud604\ud558\uc138\uc694: - \ud06c\uae30\ubcc4 \ud480 \ubd84\ud560 - \ub3d9\uc801 \ud655\uc7a5/\ucd95\uc18c - \ud1b5\uacc4 \ubaa8\ub2c8\ud130\ub9c1</p>"},{"location":"tutorials/advanced/chapter01_python_internals_memory/#3_1","title":"\uc5f0\uc2b5 3: \uc131\ub2a5 \ud504\ub85c\ud30c\uc77c\ub7ec","text":"<p>\uc885\ud569\uc801\uc778 \uc131\ub2a5 \ubd84\uc11d \ub3c4\uad6c\ub97c \uad6c\ud604\ud558\uc138\uc694: - \ud568\uc218\ubcc4 \uc2e4\ud589 \uc2dc\uac04 - \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ucd94\uc801 - \ubcd1\ubaa9 \uc9c0\uc810 \uc2dd\ubcc4</p>"},{"location":"tutorials/advanced/chapter01_python_internals_memory/#4_1","title":"\uc5f0\uc2b5 4: \ucd5c\uc801\ud654 \ucee8\uc124\ud134\ud2b8","text":"<p>\ucf54\ub4dc \ucd5c\uc801\ud654 \uc81c\uc548 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694: - \uc131\ub2a5 \ubb38\uc81c \uc790\ub3d9 \ud0d0\uc9c0 - \ucd5c\uc801\ud654 \uc81c\uc548 \uc0dd\uc131 - \uac1c\uc120 \ud6a8\uacfc \uce21\uc815</p>"},{"location":"tutorials/advanced/chapter01_python_internals_memory/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>CPython \ub0b4\ubd80 \uad6c\uc870: \ubc14\uc774\ud2b8\ucf54\ub4dc, \ud504\ub808\uc784 \uc2a4\ud0dd, \uac1d\uccb4 \ubaa8\ub378\uc758 \uc774\ud574</li> <li>\uba54\ubaa8\ub9ac \uad00\ub9ac: \ud560\ub2f9/\ud574\uc81c \uba54\ucee4\ub2c8\uc998, \uac00\ube44\uc9c0 \uceec\ub809\uc158\uc758 \ub3d9\uc791 \uc6d0\ub9ac</li> <li>\uba54\ubaa8\ub9ac \ucd5c\uc801\ud654: \ub204\uc218 \ud0d0\uc9c0, \ud6a8\uc728\uc801 \ud328\ud134, \ucd5c\uc801\ud654 \uae30\ubc95</li> <li>\uc131\ub2a5 \ud504\ub85c\ud30c\uc77c\ub9c1: \ub3c4\uad6c \ud65c\uc6a9, \ubcd1\ubaa9 \uc9c0\uc810 \uc2dd\ubcc4, \uce21\uc815 \ubc29\ubc95</li> <li>\uace0\uae09 \ucd5c\uc801\ud654: CPU/I/O \ucd5c\uc801\ud654, \uc54c\uace0\ub9ac\uc998 \uac1c\uc120, \ub370\uc774\ud130 \uad6c\uc870 \uc120\ud0dd</li> <li>\uc2e4\ubb34 \ud328\ud134: \uc9c0\uc5f0 \ub85c\ub529, \uac1d\uccb4 \ud480\ub9c1, \uc57d\ud55c \ucc38\uc870 \ud65c\uc6a9</li> <li>\uc131\ub2a5 \ubd84\uc11d: \ubca4\uce58\ub9c8\ud0b9, \ube44\uad50 \ubd84\uc11d, \ud1b5\uacc4\uc801 \uc811\uadfc</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \uba54\ud0c0\ud074\ub798\uc2a4\uc640 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ud1b5\ud55c \ub354\uc6b1 \uace0\uae09 \ud30c\uc774\uc36c \uae30\ubc95\uc744 \ud559\uc2b5\ud558\uac8c \ub429\ub2c8\ub2e4.</p>"},{"location":"tutorials/advanced/chapter01_python_internals_memory/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>Python\uc758 \ub0b4\ubd80 \ub3d9\uc791\uc744 \uc774\ud574\ud558\uba74 \ub354 \ud6a8\uc728\uc801\uc778 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\uba54\ubaa8\ub9ac \uad00\ub9ac\ub294 \uc131\ub2a5\uacfc \uc548\uc815\uc131\uc5d0 \uc9c1\uacb0\ub418\ub294 \uc911\uc694\ud55c \uc694\uc18c\uc785\ub2c8\ub2e4</li> <li>\ucd5c\uc801\ud654\ub294 \uce21\uc815\uc744 \ud1b5\ud574 \uac80\uc99d\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4</li> <li>\uc801\uc808\ud55c \ub370\uc774\ud130 \uad6c\uc870\uc640 \uc54c\uace0\ub9ac\uc998 \uc120\ud0dd\uc774 \uc131\ub2a5\uc5d0 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce69\ub2c8\ub2e4</li> <li>\ud504\ub85c\ud30c\uc77c\ub9c1 \ub3c4\uad6c\ub97c \ud65c\uc6a9\ud558\uc5ec \uac1d\uad00\uc801\uc778 \uc131\ub2a5 \ubd84\uc11d\uc744 \uc218\ud589\ud558\uc138\uc694</li> <li>\ucd5c\uc801\ud654\ub294 \ucf54\ub4dc\uc758 \uac00\ub3c5\uc131\uacfc \uc720\uc9c0\ubcf4\uc218\uc131\uc744 \uace0\ub824\ud558\uc5ec \uc801\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4</li> </ul>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/","title":"Chapter 2: \uba54\ud0c0\ud074\ub798\uc2a4\uc640 \ub514\uc2a4\ud06c\ub9bd\ud130","text":""},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \uba54\ud0c0\ud074\ub798\uc2a4\uc758 \uac1c\ub150\uacfc \ud30c\uc774\uc36c \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 \uc774\ud574\ud558\uae30 - \ucee4\uc2a4\ud140 \uba54\ud0c0\ud074\ub798\uc2a4\ub97c \uad6c\ud604\ud558\uc5ec \ud074\ub798\uc2a4 \uc0dd\uc131 \uacfc\uc815 \uc81c\uc5b4\ud558\uae30 - \ub514\uc2a4\ud06c\ub9bd\ud130 \ud504\ub85c\ud1a0\ucf5c\uc744 \ud65c\uc6a9\ud55c \uace0\uae09 \uc18d\uc131 \uad00\ub9ac \uad6c\ud604\ud558\uae30 - property\uc640 \uace0\uae09 \uc18d\uc131 \uc811\uadfc \uc81c\uc5b4 \uba54\ucee4\ub2c8\uc998 \ub9c8\uc2a4\ud130\ud558\uae30 - __new__\uc640 __init__\uc758 \ucc28\uc774\uc810\uacfc \ud65c\uc6a9\ubc95 \ud30c\uc545\ud558\uae30 - \ub3d9\uc801 \ud074\ub798\uc2a4 \uc0dd\uc131\uacfc \ud0c0\uc785 \uc2dc\uc2a4\ud15c \uc870\uc791\ud558\uae30 - \uba54\ud0c0\ud074\ub798\uc2a4\uc640 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ud65c\uc6a9\ud55c \ud504\ub808\uc784\uc6cc\ud06c \uc124\uacc4\ud558\uae30 - \uc2e4\ubb34\uc5d0\uc11c \ud65c\uc6a9\ud560 \uc218 \uc788\ub294 \uace0\uae09 \uac1d\uccb4\uc9c0\ud5a5 \ud328\ud134 \uad6c\ud604\ud558\uae30</p>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#1","title":"1. \uba54\ud0c0\ud074\ub798\uc2a4 \uae30\ucd08","text":""},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#11","title":"1.1 \ud074\ub798\uc2a4\ub294 \uac1d\uccb4\ub2e4","text":"<pre><code>print(\"=== \ud074\ub798\uc2a4\uc758 \ubcf8\uc9c8 \uc774\ud574 ===\")\n\nclass ClassInspector:\n    \"\"\"\ud074\ub798\uc2a4\uc640 \uba54\ud0c0\ud074\ub798\uc2a4\uc758 \uad00\uacc4\ub97c \ubd84\uc11d\ud558\ub294 \ub3c4\uad6c\"\"\"\n\n    def __init__(self):\n        self.inspection_results = {}\n\n    def inspect_class_nature(self):\n        \"\"\"\ud074\ub798\uc2a4\uac00 \uac1d\uccb4\ub77c\ub294 \uac83\uc744 \uc99d\uba85\"\"\"\n        print(\"\\n1. \ud074\ub798\uc2a4\ub3c4 \uac1d\uccb4\uc785\ub2c8\ub2e4:\")\n\n        # \uac04\ub2e8\ud55c \ud074\ub798\uc2a4 \uc815\uc758\n        class MyClass:\n            def method(self):\n                return \"Hello from method\"\n\n        # \ud074\ub798\uc2a4\ub3c4 \uac1d\uccb4\uc784\uc744 \uc99d\uba85\n        print(f\"   MyClass\uc758 \ud0c0\uc785: {type(MyClass)}\")\n        print(f\"   MyClass\uc758 ID: {id(MyClass)}\")\n        print(f\"   MyClass\ub294 \uac1d\uccb4\uc778\uac00? {isinstance(MyClass, object)}\")\n\n        # \ud074\ub798\uc2a4\uc5d0 \ub3d9\uc801\uc73c\ub85c \uc18d\uc131 \ucd94\uac00\n        MyClass.dynamic_attribute = \"\ub3d9\uc801\uc73c\ub85c \ucd94\uac00\ub41c \uc18d\uc131\"\n        print(f\"   \ub3d9\uc801 \uc18d\uc131: {MyClass.dynamic_attribute}\")\n\n        # \ud074\ub798\uc2a4\ub97c \ubcc0\uc218\uc5d0 \ud560\ub2f9\n        ClassAlias = MyClass\n        print(f\"   \ud074\ub798\uc2a4 \ubcc4\uba85: {ClassAlias}\")\n        print(f\"   \uac19\uc740 \uac1d\uccb4\uc778\uac00? {ClassAlias is MyClass}\")\n\n        return MyClass\n\n    def explore_metaclass_hierarchy(self):\n        \"\"\"\uba54\ud0c0\ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870 \ud0d0\uc0c9\"\"\"\n        print(\"\\n2. \uba54\ud0c0\ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870:\")\n\n        class ExampleClass:\n            pass\n\n        obj = ExampleClass()\n\n        # \uac1d\uccb4 \u2192 \ud074\ub798\uc2a4 \u2192 \uba54\ud0c0\ud074\ub798\uc2a4 \uad00\uacc4\n        print(f\"   \uac1d\uccb4: {obj}\")\n        print(f\"   \uac1d\uccb4\uc758 \ud0c0\uc785 (\ud074\ub798\uc2a4): {type(obj)}\")\n        print(f\"   \ud074\ub798\uc2a4\uc758 \ud0c0\uc785 (\uba54\ud0c0\ud074\ub798\uc2a4): {type(ExampleClass)}\")\n        print(f\"   \uba54\ud0c0\ud074\ub798\uc2a4\uc758 \ud0c0\uc785: {type(type(ExampleClass))}\")\n\n        # __class__\uc640 type()\uc758 \uad00\uacc4\n        print(f\"   obj.__class__: {obj.__class__}\")\n        print(f\"   type(obj): {type(obj)}\")\n        print(f\"   \uac19\uc740\uac00? {obj.__class__ is type(obj)}\")\n\n        # \uba54\ud0c0\ud074\ub798\uc2a4 \uccb4\uc778\n        print(\"\\n   \uba54\ud0c0\ud074\ub798\uc2a4 \uccb4\uc778:\")\n        current = obj\n        level = 0\n        while hasattr(current, '__class__'):\n            print(f\"     \ub808\ubca8 {level}: {current} \u2192 {type(current)}\")\n            current = type(current)\n            level += 1\n            if level &gt; 5:  # \ubb34\ud55c \ub8e8\ud504 \ubc29\uc9c0\n                print(\"     ... (\uacc4\uc18d)\")\n                break\n\n    def demonstrate_type_function(self):\n        \"\"\"type() \ud568\uc218\uc758 \ub450 \uac00\uc9c0 \uc6a9\ub3c4\"\"\"\n        print(\"\\n3. type() \ud568\uc218\uc758 \ub450 \uac00\uc9c0 \uc6a9\ub3c4:\")\n\n        # 1. \ud0c0\uc785 \ud655\uc778\n        print(\"   \ud0c0\uc785 \ud655\uc778 \uc6a9\ub3c4:\")\n        values = [42, \"hello\", [1, 2, 3], {\"key\": \"value\"}]\n        for val in values:\n            print(f\"     type({val!r}) = {type(val)}\")\n\n        # 2. \ub3d9\uc801 \ud074\ub798\uc2a4 \uc0dd\uc131\n        print(\"\\n   \ub3d9\uc801 \ud074\ub798\uc2a4 \uc0dd\uc131 \uc6a9\ub3c4:\")\n\n        # type(name, bases, dict) \ud615\ud0dc\ub85c \ud074\ub798\uc2a4 \uc0dd\uc131\n        DynamicClass = type('DynamicClass', (), {\n            'class_var': 'I am dynamic!',\n            'instance_method': lambda self: f\"Instance method called on {self}\",\n            'class_method': classmethod(lambda cls: f\"Class method called on {cls}\"),\n            'static_method': staticmethod(lambda: \"Static method called\")\n        })\n\n        print(f\"     \ub3d9\uc801 \uc0dd\uc131\ub41c \ud074\ub798\uc2a4: {DynamicClass}\")\n        print(f\"     \ud074\ub798\uc2a4 \ubcc0\uc218: {DynamicClass.class_var}\")\n\n        # \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131 \ubc0f \uc0ac\uc6a9\n        obj = DynamicClass()\n        print(f\"     \uc778\uc2a4\ud134\uc2a4: {obj}\")\n        print(f\"     \uc778\uc2a4\ud134\uc2a4 \uba54\uc11c\ub4dc: {obj.instance_method()}\")\n        print(f\"     \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc: {DynamicClass.class_method()}\")\n        print(f\"     \uc815\uc801 \uba54\uc11c\ub4dc: {DynamicClass.static_method()}\")\n\n        return DynamicClass\n\ndef demonstrate_class_nature():\n    \"\"\"\ud074\ub798\uc2a4\uc758 \ubcf8\uc9c8 \uc2dc\uc5f0\"\"\"\n    inspector = ClassInspector()\n\n    # \ud074\ub798\uc2a4\uac00 \uac1d\uccb4\uc784\uc744 \uc99d\uba85\n    my_class = inspector.inspect_class_nature()\n\n    # \uba54\ud0c0\ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870 \ud0d0\uc0c9\n    inspector.explore_metaclass_hierarchy()\n\n    # type() \ud568\uc218\uc758 \ud65c\uc6a9\n    dynamic_class = inspector.demonstrate_type_function()\n\n    return inspector, my_class, dynamic_class\n\ndemonstrate_class_nature()\n</code></pre>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#12","title":"1.2 \ucee4\uc2a4\ud140 \uba54\ud0c0\ud074\ub798\uc2a4 \uad6c\ud604","text":"<pre><code>print(\"\\n=== \ucee4\uc2a4\ud140 \uba54\ud0c0\ud074\ub798\uc2a4 \uad6c\ud604 ===\")\n\nclass SingletonMeta(type):\n    \"\"\"\uc2f1\uae00\ud1a4 \ud328\ud134\uc744 \uad6c\ud604\ud558\ub294 \uba54\ud0c0\ud074\ub798\uc2a4\"\"\"\n\n    _instances = {}\n\n    def __call__(cls, *args, **kwargs):\n        \"\"\"\uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\uc744 \uc81c\uc5b4\ud558\uc5ec \uc2f1\uae00\ud1a4 \ubcf4\uc7a5\"\"\"\n        if cls not in cls._instances:\n            instance = super().__call__(*args, **kwargs)\n            cls._instances[cls] = instance\n            print(f\"   \uc0c8\ub85c\uc6b4 {cls.__name__} \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131: {id(instance)}\")\n        else:\n            print(f\"   \uae30\uc874 {cls.__name__} \uc778\uc2a4\ud134\uc2a4 \ubc18\ud658: {id(cls._instances[cls])}\")\n\n        return cls._instances[cls]\n\n    def __new__(mcs, name, bases, namespace, **kwargs):\n        \"\"\"\ud074\ub798\uc2a4 \uc0dd\uc131 \uacfc\uc815\uc744 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\"\"\"\n        print(f\"   \uba54\ud0c0\ud074\ub798\uc2a4\uac00 {name} \ud074\ub798\uc2a4\ub97c \uc0dd\uc131 \uc911...\")\n\n        # \ud074\ub798\uc2a4\uc5d0 \uba54\ud0c0\ub370\uc774\ud130 \ucd94\uac00\n        namespace['_singleton_created'] = False\n        namespace['_creation_timestamp'] = __import__('time').time()\n\n        cls = super().__new__(mcs, name, bases, namespace)\n        print(f\"   {name} \ud074\ub798\uc2a4 \uc0dd\uc131 \uc644\ub8cc: {cls}\")\n\n        return cls\n\nclass ValidatedMeta(type):\n    \"\"\"\uc18d\uc131 \uac80\uc99d\uc744 \uc790\ub3d9\ud654\ud558\ub294 \uba54\ud0c0\ud074\ub798\uc2a4\"\"\"\n\n    def __new__(mcs, name, bases, namespace, **kwargs):\n        \"\"\"\ud074\ub798\uc2a4 \uc0dd\uc131 \uc2dc \uac80\uc99d \ub85c\uc9c1 \uc790\ub3d9 \ucd94\uac00\"\"\"\n\n        # \uac80\uc99d \uaddc\uce59 \uc218\uc9d1\n        validators = {}\n        for key, value in list(namespace.items()):\n            if key.startswith('validate_'):\n                field_name = key[9:]  # 'validate_' \uc81c\uac70\n                validators[field_name] = value\n                del namespace[key]  # \uac80\uc99d \ud568\uc218\ub294 \ud074\ub798\uc2a4\uc5d0\uc11c \uc81c\uac70\n\n        # __setattr__ \uba54\uc11c\ub4dc \uc790\ub3d9 \uc0dd\uc131\n        def __setattr__(self, name, value):\n            if name in validators:\n                if not validators[name](value):\n                    raise ValueError(f\"Invalid value for {name}: {value}\")\n            super(cls, self).__setattr__(name, value)\n\n        if validators:\n            namespace['__setattr__'] = __setattr__\n            namespace['_validators'] = validators\n\n        cls = super().__new__(mcs, name, bases, namespace)\n        print(f\"   {name} \ud074\ub798\uc2a4\uc5d0 {len(validators)}\uac1c \uac80\uc99d \uaddc\uce59 \uc801\uc6a9\")\n\n        return cls\n\nclass AttributeTrackingMeta(type):\n    \"\"\"\uc18d\uc131 \uc811\uadfc\uc744 \ucd94\uc801\ud558\ub294 \uba54\ud0c0\ud074\ub798\uc2a4\"\"\"\n\n    def __new__(mcs, name, bases, namespace, **kwargs):\n        \"\"\"\uc18d\uc131 \uc811\uadfc \ucd94\uc801 \uae30\ub2a5 \ucd94\uac00\"\"\"\n\n        # \ucd94\uc801\ud560 \uc18d\uc131\ub4e4 \uc2dd\ubcc4\n        tracked_attrs = [key for key in namespace.keys() \n                        if not key.startswith('_') and not callable(namespace[key])]\n\n        # \uac01 \uc18d\uc131\uc5d0 \ub300\ud55c \uc811\uadfc \uce74\uc6b4\ud130 \ucd08\uae30\ud654\n        access_counters = {attr: 0 for attr in tracked_attrs}\n        namespace['_access_counters'] = access_counters\n\n        # __getattribute__ \uc624\ubc84\ub77c\uc774\ub4dc\n        original_getattribute = namespace.get('__getattribute__', object.__getattribute__)\n\n        def __getattribute__(self, name):\n            if hasattr(self, '_access_counters') and name in self._access_counters:\n                self._access_counters[name] += 1\n                print(f\"     \uc18d\uc131 '{name}' \uc811\uadfc\ub428 (\ucd1d {self._access_counters[name]}\ud68c)\")\n            return original_getattribute(self, name)\n\n        namespace['__getattribute__'] = __getattribute__\n\n        # \ud1b5\uacc4 \uc870\ud68c \uba54\uc11c\ub4dc \ucd94\uac00\n        def get_access_stats(self):\n            return dict(self._access_counters)\n\n        namespace['get_access_stats'] = get_access_stats\n\n        cls = super().__new__(mcs, name, bases, namespace)\n        print(f\"   {name} \ud074\ub798\uc2a4\uc5d0 {len(tracked_attrs)}\uac1c \uc18d\uc131 \ucd94\uc801 \uae30\ub2a5 \ucd94\uac00\")\n\n        return cls\n\ndef demonstrate_metaclasses():\n    \"\"\"\uba54\ud0c0\ud074\ub798\uc2a4 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \uc2f1\uae00\ud1a4 \uba54\ud0c0\ud074\ub798\uc2a4:\")\n\n    class DatabaseConnection(metaclass=SingletonMeta):\n        def __init__(self, host=\"localhost\"):\n            if not self._singleton_created:\n                self.host = host\n                self.connected = True\n                self._singleton_created = True\n                print(f\"     \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ucd08\uae30\ud654: {host}\")\n\n    # \uc2f1\uae00\ud1a4 \ud14c\uc2a4\ud2b8\n    db1 = DatabaseConnection(\"server1\")\n    db2 = DatabaseConnection(\"server2\")  # \ubb34\uc2dc\ub428\n    db3 = DatabaseConnection()\n\n    print(f\"   db1 is db2: {db1 is db2}\")\n    print(f\"   db2 is db3: {db2 is db3}\")\n    print(f\"   \ubaa8\ub4e0 \uc778\uc2a4\ud134\uc2a4\uc758 host: {db1.host}\")\n\n    print(\"\\n2. \uac80\uc99d \uba54\ud0c0\ud074\ub798\uc2a4:\")\n\n    class Person(metaclass=ValidatedMeta):\n        def __init__(self, name, age, email):\n            self.name = name\n            self.age = age\n            self.email = email\n\n        # \uac80\uc99d \ud568\uc218\ub4e4 (\uba54\ud0c0\ud074\ub798\uc2a4\uac00 \uc790\ub3d9\uc73c\ub85c \ucc98\ub9ac)\n        def validate_name(value):\n            return isinstance(value, str) and len(value) &gt; 0\n\n        def validate_age(value):\n            return isinstance(value, int) and 0 &lt;= value &lt;= 150\n\n        def validate_email(value):\n            return isinstance(value, str) and '@' in value\n\n    # \uac80\uc99d \ud14c\uc2a4\ud2b8\n    try:\n        person = Person(\"Alice\", 30, \"alice@example.com\")\n        print(f\"   \uc720\ud6a8\ud55c Person \uc0dd\uc131: {person.name}\")\n\n        person.age = 25  # \uc720\ud6a8\n        print(f\"   \ub098\uc774 \ubcc0\uacbd \uc131\uacf5: {person.age}\")\n\n        person.age = -5  # \uc624\ub958 \ubc1c\uc0dd\n    except ValueError as e:\n        print(f\"   \uac80\uc99d \uc624\ub958: {e}\")\n\n    print(\"\\n3. \uc18d\uc131 \ucd94\uc801 \uba54\ud0c0\ud074\ub798\uc2a4:\")\n\n    class Product(metaclass=AttributeTrackingMeta):\n        def __init__(self, name, price):\n            self.name = name\n            self.price = price\n            self.category = \"general\"\n\n    product = Product(\"Laptop\", 1000)\n\n    # \uc18d\uc131 \uc811\uadfc\uc73c\ub85c \ucd94\uc801 \ud14c\uc2a4\ud2b8\n    print(f\"   \uc0c1\ud488\uba85: {product.name}\")\n    print(f\"   \uac00\uaca9: {product.price}\")\n    print(f\"   \uc0c1\ud488\uba85 \ub2e4\uc2dc: {product.name}\")\n    print(f\"   \uce74\ud14c\uace0\ub9ac: {product.category}\")\n\n    # \uc811\uadfc \ud1b5\uacc4 \ud655\uc778\n    stats = product.get_access_stats()\n    print(f\"   \uc811\uadfc \ud1b5\uacc4: {stats}\")\n\ndemonstrate_metaclasses()\n</code></pre>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#2","title":"2. \ub514\uc2a4\ud06c\ub9bd\ud130 \ud504\ub85c\ud1a0\ucf5c","text":""},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#21","title":"2.1 \ub514\uc2a4\ud06c\ub9bd\ud130 \uae30\ucd08","text":"<pre><code>print(\"\\n=== \ub514\uc2a4\ud06c\ub9bd\ud130 \ud504\ub85c\ud1a0\ucf5c ===\")\n\nclass BasicDescriptor:\n    \"\"\"\uae30\ubcf8 \ub514\uc2a4\ud06c\ub9bd\ud130 \uad6c\ud604\"\"\"\n\n    def __init__(self, name=None):\n        self.name = name\n        self.data = {}\n\n    def __get__(self, obj, objtype=None):\n        \"\"\"\uc18d\uc131 \uc77d\uae30 \uc2dc \ud638\ucd9c\"\"\"\n        if obj is None:\n            return self\n\n        value = self.data.get(id(obj), None)\n        print(f\"   \ub514\uc2a4\ud06c\ub9bd\ud130 __get__ \ud638\ucd9c: {self.name} = {value}\")\n        return value\n\n    def __set__(self, obj, value):\n        \"\"\"\uc18d\uc131 \uc4f0\uae30 \uc2dc \ud638\ucd9c\"\"\"\n        print(f\"   \ub514\uc2a4\ud06c\ub9bd\ud130 __set__ \ud638\ucd9c: {self.name} = {value}\")\n        self.data[id(obj)] = value\n\n    def __delete__(self, obj):\n        \"\"\"\uc18d\uc131 \uc0ad\uc81c \uc2dc \ud638\ucd9c\"\"\"\n        print(f\"   \ub514\uc2a4\ud06c\ub9bd\ud130 __delete__ \ud638\ucd9c: {self.name}\")\n        if id(obj) in self.data:\n            del self.data[id(obj)]\n\nclass TypedDescriptor:\n    \"\"\"\ud0c0\uc785 \uac80\uc99d \ub514\uc2a4\ud06c\ub9bd\ud130\"\"\"\n\n    def __init__(self, expected_type, name=None):\n        self.expected_type = expected_type\n        self.name = name\n        self.data = {}\n\n    def __set_name__(self, owner, name):\n        \"\"\"Python 3.6+\uc5d0\uc11c \uc790\ub3d9\uc73c\ub85c \ud638\ucd9c\ub418\ub294 \uba54\uc11c\ub4dc\"\"\"\n        self.name = name\n\n    def __get__(self, obj, objtype=None):\n        if obj is None:\n            return self\n        return self.data.get(id(obj))\n\n    def __set__(self, obj, value):\n        if not isinstance(value, self.expected_type):\n            raise TypeError(f\"{self.name}\ub294 {self.expected_type.__name__} \ud0c0\uc785\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4\")\n        self.data[id(obj)] = value\n\n    def __delete__(self, obj):\n        if id(obj) in self.data:\n            del self.data[id(obj)]\n\nclass RangeDescriptor:\n    \"\"\"\ubc94\uc704 \uac80\uc99d \ub514\uc2a4\ud06c\ub9bd\ud130\"\"\"\n\n    def __init__(self, min_value=None, max_value=None, name=None):\n        self.min_value = min_value\n        self.max_value = max_value\n        self.name = name\n        self.data = {}\n\n    def __set_name__(self, owner, name):\n        self.name = name\n\n    def __get__(self, obj, objtype=None):\n        if obj is None:\n            return self\n        return self.data.get(id(obj))\n\n    def __set__(self, obj, value):\n        if self.min_value is not None and value &lt; self.min_value:\n            raise ValueError(f\"{self.name}\ub294 {self.min_value} \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4\")\n        if self.max_value is not None and value &gt; self.max_value:\n            raise ValueError(f\"{self.name}\ub294 {self.max_value} \uc774\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4\")\n        self.data[id(obj)] = value\n\n    def __delete__(self, obj):\n        if id(obj) in self.data:\n            del self.data[id(obj)]\n\nclass LoggingDescriptor:\n    \"\"\"\uc811\uadfc \ub85c\uae45 \ub514\uc2a4\ud06c\ub9bd\ud130\"\"\"\n\n    def __init__(self, name=None):\n        self.name = name\n        self.data = {}\n        self.access_log = []\n\n    def __set_name__(self, owner, name):\n        self.name = name\n\n    def __get__(self, obj, objtype=None):\n        if obj is None:\n            return self\n\n        import time\n        timestamp = time.time()\n        self.access_log.append(('get', timestamp, id(obj)))\n        print(f\"   [{timestamp:.3f}] GET {self.name} from {obj.__class__.__name__}\")\n\n        return self.data.get(id(obj))\n\n    def __set__(self, obj, value):\n        import time\n        timestamp = time.time()\n        self.access_log.append(('set', timestamp, id(obj), value))\n        print(f\"   [{timestamp:.3f}] SET {self.name} = {value} on {obj.__class__.__name__}\")\n\n        self.data[id(obj)] = value\n\n    def get_access_log(self):\n        \"\"\"\uc811\uadfc \ub85c\uadf8 \ubc18\ud658\"\"\"\n        return self.access_log.copy()\n\ndef demonstrate_descriptors():\n    \"\"\"\ub514\uc2a4\ud06c\ub9bd\ud130 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \uae30\ubcf8 \ub514\uc2a4\ud06c\ub9bd\ud130:\")\n\n    class TestClass:\n        attr = BasicDescriptor(\"attr\")\n\n    obj1 = TestClass()\n    obj2 = TestClass()\n\n    # \uc18d\uc131 \uc124\uc815\uacfc \uc77d\uae30\n    obj1.attr = \"value1\"\n    obj2.attr = \"value2\"\n\n    print(f\"   obj1.attr: {obj1.attr}\")\n    print(f\"   obj2.attr: {obj2.attr}\")\n\n    # \ud074\ub798\uc2a4 \ub808\ubca8\uc5d0\uc11c \ub514\uc2a4\ud06c\ub9bd\ud130 \uc790\uccb4 \uc811\uadfc\n    print(f\"   TestClass.attr: {TestClass.attr}\")\n\n    print(\"\\n2. \ud0c0\uc785 \uac80\uc99d \ub514\uc2a4\ud06c\ub9bd\ud130:\")\n\n    class Person:\n        name = TypedDescriptor(str)\n        age = TypedDescriptor(int)\n        height = TypedDescriptor(float)\n\n    person = Person()\n\n    try:\n        person.name = \"Alice\"\n        person.age = 30\n        person.height = 165.5\n\n        print(f\"   \uc774\ub984: {person.name}\")\n        print(f\"   \ub098\uc774: {person.age}\")\n        print(f\"   \ud0a4: {person.height}\")\n\n        person.age = \"thirty\"  # \uc624\ub958 \ubc1c\uc0dd\n    except TypeError as e:\n        print(f\"   \ud0c0\uc785 \uc624\ub958: {e}\")\n\n    print(\"\\n3. \ubc94\uc704 \uac80\uc99d \ub514\uc2a4\ud06c\ub9bd\ud130:\")\n\n    class Temperature:\n        celsius = RangeDescriptor(-273.15, None)  # \uc808\ub300\uc601\ub3c4 \uc774\uc0c1\n        fahrenheit = RangeDescriptor(-459.67, None)  # \uc808\ub300\uc601\ub3c4 \uc774\uc0c1\n\n    temp = Temperature()\n\n    try:\n        temp.celsius = 25.0\n        temp.fahrenheit = 77.0\n\n        print(f\"   \uc12d\uc528: {temp.celsius}\u00b0C\")\n        print(f\"   \ud654\uc528: {temp.fahrenheit}\u00b0F\")\n\n        temp.celsius = -300  # \uc624\ub958 \ubc1c\uc0dd\n    except ValueError as e:\n        print(f\"   \ubc94\uc704 \uc624\ub958: {e}\")\n\n    print(\"\\n4. \ub85c\uae45 \ub514\uc2a4\ud06c\ub9bd\ud130:\")\n\n    class BankAccount:\n        balance = LoggingDescriptor()\n\n    account = BankAccount()\n\n    account.balance = 1000\n    account.balance = 1500\n    current_balance = account.balance\n\n    # \uc811\uadfc \ub85c\uadf8 \ud655\uc778\n    log = BankAccount.balance.get_access_log()\n    print(f\"   \ucd1d \uc811\uadfc \ud69f\uc218: {len(log)}\")\n\ndemonstrate_descriptors()\n</code></pre>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#22","title":"2.2 \uace0\uae09 \ub514\uc2a4\ud06c\ub9bd\ud130 \ud328\ud134","text":"<pre><code>print(\"\\n=== \uace0\uae09 \ub514\uc2a4\ud06c\ub9bd\ud130 \ud328\ud134 ===\")\n\nclass CachedProperty:\n    \"\"\"\uacc4\uc0b0 \uacb0\uacfc\ub97c \uce90\uc2dc\ud558\ub294 \ud504\ub85c\ud37c\ud2f0 \ub514\uc2a4\ud06c\ub9bd\ud130\"\"\"\n\n    def __init__(self, func):\n        self.func = func\n        self.attrname = None\n        self.__doc__ = func.__doc__\n\n    def __set_name__(self, owner, name):\n        self.attrname = name\n\n    def __get__(self, obj, objtype=None):\n        if obj is None:\n            return self\n\n        # \uce90\uc2dc\ub41c \uac12\uc774 \uc788\ub294\uc9c0 \ud655\uc778\n        cache_attr = f'_cached_{self.attrname}'\n        if hasattr(obj, cache_attr):\n            print(f\"   \uce90\uc2dc\ub41c \uac12 \ubc18\ud658: {self.attrname}\")\n            return getattr(obj, cache_attr)\n\n        # \uac12 \uacc4\uc0b0 \ubc0f \uce90\uc2dc\n        print(f\"   \uac12 \uacc4\uc0b0 \uc911: {self.attrname}\")\n        value = self.func(obj)\n        setattr(obj, cache_attr, value)\n        return value\n\n    def __delete__(self, obj):\n        # \uce90\uc2dc \uc0ad\uc81c\n        cache_attr = f'_cached_{self.attrname}'\n        if hasattr(obj, cache_attr):\n            delattr(obj, cache_attr)\n            print(f\"   \uce90\uc2dc \uc0ad\uc81c\ub428: {self.attrname}\")\n\nclass LazyProperty:\n    \"\"\"\uc9c0\uc5f0 \ub85c\ub529 \ud504\ub85c\ud37c\ud2f0 \ub514\uc2a4\ud06c\ub9bd\ud130\"\"\"\n\n    def __init__(self, func):\n        self.func = func\n        self.attrname = None\n        self.__doc__ = func.__doc__\n\n    def __set_name__(self, owner, name):\n        self.attrname = name\n\n    def __get__(self, obj, objtype=None):\n        if obj is None:\n            return self\n\n        # \uc774\ubbf8 \ub85c\ub4dc\ub41c \uac12\uc774 \uc788\ub294\uc9c0 \ud655\uc778\n        private_name = f'_{self.attrname}'\n        if hasattr(obj, private_name):\n            return getattr(obj, private_name)\n\n        # \uc9c0\uc5f0 \ub85c\ub529 \uc218\ud589\n        print(f\"   \uc9c0\uc5f0 \ub85c\ub529 \uc218\ud589: {self.attrname}\")\n        value = self.func(obj)\n        setattr(obj, private_name, value)\n        return value\n\n    def __set__(self, obj, value):\n        private_name = f'_{self.attrname}'\n        setattr(obj, private_name, value)\n\n    def __delete__(self, obj):\n        private_name = f'_{self.attrname}'\n        if hasattr(obj, private_name):\n            delattr(obj, private_name)\n\nclass ValidatedProperty:\n    \"\"\"\uac80\uc99d \ub85c\uc9c1\uc774 \ud3ec\ud568\ub41c \ud504\ub85c\ud37c\ud2f0 \ub514\uc2a4\ud06c\ub9bd\ud130\"\"\"\n\n    def __init__(self, validator=None, transformer=None):\n        self.validator = validator\n        self.transformer = transformer\n        self.name = None\n\n    def __set_name__(self, owner, name):\n        self.name = name\n        self.private_name = f'_{name}'\n\n    def __get__(self, obj, objtype=None):\n        if obj is None:\n            return self\n        return getattr(obj, self.private_name, None)\n\n    def __set__(self, obj, value):\n        # \ubcc0\ud658 \uc801\uc6a9\n        if self.transformer:\n            value = self.transformer(value)\n            print(f\"   \uac12 \ubcc0\ud658 \uc801\uc6a9: {self.name}\")\n\n        # \uac80\uc99d \uc218\ud589\n        if self.validator and not self.validator(value):\n            raise ValueError(f\"Invalid value for {self.name}: {value}\")\n\n        setattr(obj, self.private_name, value)\n        print(f\"   \uac80\uc99d\ub41c \uac12 \uc124\uc815: {self.name} = {value}\")\n\n    def __delete__(self, obj):\n        if hasattr(obj, self.private_name):\n            delattr(obj, self.private_name)\n\nclass ObservableProperty:\n    \"\"\"\ubcc0\uacbd \uc2dc \uc774\ubca4\ud2b8\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \ud504\ub85c\ud37c\ud2f0 \ub514\uc2a4\ud06c\ub9bd\ud130\"\"\"\n\n    def __init__(self, initial_value=None):\n        self.initial_value = initial_value\n        self.name = None\n        self.observers = []\n\n    def __set_name__(self, owner, name):\n        self.name = name\n        self.private_name = f'_{name}'\n\n    def __get__(self, obj, objtype=None):\n        if obj is None:\n            return self\n        return getattr(obj, self.private_name, self.initial_value)\n\n    def __set__(self, obj, value):\n        old_value = getattr(obj, self.private_name, self.initial_value)\n        setattr(obj, self.private_name, value)\n\n        # \ubcc0\uacbd \uc774\ubca4\ud2b8 \ubc1c\uc0dd\n        if old_value != value:\n            self._notify_observers(obj, old_value, value)\n\n    def _notify_observers(self, obj, old_value, new_value):\n        \"\"\"\uad00\ucc30\uc790\ub4e4\uc5d0\uac8c \ubcc0\uacbd \uc0ac\ud56d \ud1b5\uc9c0\"\"\"\n        for observer in self.observers:\n            observer(obj, self.name, old_value, new_value)\n        print(f\"   {len(self.observers)}\uba85\uc758 \uad00\ucc30\uc790\uc5d0\uac8c \ubcc0\uacbd \ud1b5\uc9c0: {self.name}\")\n\n    def add_observer(self, observer):\n        \"\"\"\uad00\ucc30\uc790 \ucd94\uac00\"\"\"\n        self.observers.append(observer)\n\n    def remove_observer(self, observer):\n        \"\"\"\uad00\ucc30\uc790 \uc81c\uac70\"\"\"\n        if observer in self.observers:\n            self.observers.remove(observer)\n\ndef demonstrate_advanced_descriptors():\n    \"\"\"\uace0\uae09 \ub514\uc2a4\ud06c\ub9bd\ud130 \ud328\ud134 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \uce90\uc2dc \ud504\ub85c\ud37c\ud2f0:\")\n\n    class DataProcessor:\n        @CachedProperty\n        def expensive_calculation(self):\n            \"\"\"\ube44\uc6a9\uc774 \ud070 \uacc4\uc0b0 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n            import time\n            time.sleep(0.1)  # \uc2dc\ubbac\ub808\uc774\uc158\n            return sum(i * i for i in range(1000))\n\n    processor = DataProcessor()\n\n    # \uccab \ubc88\uc9f8 \uc811\uadfc (\uacc4\uc0b0 \uc218\ud589)\n    result1 = processor.expensive_calculation\n    print(f\"   \uccab \ubc88\uc9f8 \uacb0\uacfc: {result1}\")\n\n    # \ub450 \ubc88\uc9f8 \uc811\uadfc (\uce90\uc2dc \uc0ac\uc6a9)\n    result2 = processor.expensive_calculation\n    print(f\"   \ub450 \ubc88\uc9f8 \uacb0\uacfc: {result2}\")\n\n    # \uce90\uc2dc \uc0ad\uc81c\n    del processor.expensive_calculation\n\n    # \uc138 \ubc88\uc9f8 \uc811\uadfc (\ub2e4\uc2dc \uacc4\uc0b0)\n    result3 = processor.expensive_calculation\n    print(f\"   \uc138 \ubc88\uc9f8 \uacb0\uacfc: {result3}\")\n\n    print(\"\\n2. \uc9c0\uc5f0 \ub85c\ub529 \ud504\ub85c\ud37c\ud2f0:\")\n\n    class DatabaseRecord:\n        @LazyProperty\n        def large_data(self):\n            \"\"\"\ud070 \ub370\uc774\ud130 \uc9c0\uc5f0 \ub85c\ub529 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n            print(\"     \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ub85c\ub529 \uc911...\")\n            return [\"data\"] * 1000\n\n        @LazyProperty\n        def computed_field(self):\n            \"\"\"\uacc4\uc0b0\ub41c \ud544\ub4dc\"\"\"\n            return len(self.large_data) * 2\n\n    record = DatabaseRecord()\n    print(f\"   \ub808\ucf54\ub4dc \uc0dd\uc131\ub428\")\n\n    # \uc2e4\uc81c \uc811\uadfc \uc2dc\uc5d0\ub9cc \ub85c\ub529\n    data_size = len(record.large_data)\n    print(f\"   \ub370\uc774\ud130 \ud06c\uae30: {data_size}\")\n\n    computed = record.computed_field\n    print(f\"   \uacc4\uc0b0\ub41c \ud544\ub4dc: {computed}\")\n\n    print(\"\\n3. \uac80\uc99d \ud504\ub85c\ud37c\ud2f0:\")\n\n    class User:\n        # \uc774\uba54\uc77c \uac80\uc99d \ubc0f \uc815\uaddc\ud654\n        email = ValidatedProperty(\n            validator=lambda x: isinstance(x, str) and '@' in x,\n            transformer=lambda x: x.lower().strip()\n        )\n\n        # \ub098\uc774 \uac80\uc99d\n        age = ValidatedProperty(\n            validator=lambda x: isinstance(x, int) and 0 &lt;= x &lt;= 150\n        )\n\n    user = User()\n\n    try:\n        user.email = \"  ALICE@EXAMPLE.COM  \"\n        print(f\"   \uc815\uaddc\ud654\ub41c \uc774\uba54\uc77c: {user.email}\")\n\n        user.age = 25\n        print(f\"   \uc720\ud6a8\ud55c \ub098\uc774: {user.age}\")\n\n        user.age = 200  # \uc624\ub958 \ubc1c\uc0dd\n    except ValueError as e:\n        print(f\"   \uac80\uc99d \uc624\ub958: {e}\")\n\n    print(\"\\n4. \uad00\ucc30 \uac00\ub2a5\ud55c \ud504\ub85c\ud37c\ud2f0:\")\n\n    # \uad00\ucc30\uc790 \ud568\uc218\ub4e4\n    def log_change(obj, attr_name, old_value, new_value):\n        print(f\"     \ub85c\uadf8: {attr_name} \ubcc0\uacbd\ub428 {old_value} \u2192 {new_value}\")\n\n    def validate_change(obj, attr_name, old_value, new_value):\n        if attr_name == 'balance' and new_value &lt; 0:\n            print(f\"     \uacbd\uace0: \uc794\uc561\uc774 \uc74c\uc218\uac00 \ub418\uc5c8\uc2b5\ub2c8\ub2e4!\")\n\n    class Account:\n        balance = ObservableProperty(0)\n        name = ObservableProperty(\"\")\n\n    # \uad00\ucc30\uc790 \ub4f1\ub85d\n    Account.balance.add_observer(log_change)\n    Account.balance.add_observer(validate_change)\n    Account.name.add_observer(log_change)\n\n    account = Account()\n\n    account.name = \"Alice\"\n    account.balance = 1000\n    account.balance = 500\n    account.balance = -100  # \uacbd\uace0 \ubc1c\uc0dd\n\ndemonstrate_advanced_descriptors()\n</code></pre>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#3-property","title":"3. property\uc640 \uace0\uae09 \uc18d\uc131 \uad00\ub9ac","text":""},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#31-property","title":"3.1 property \ub370\ucf54\ub808\uc774\ud130 \uc2ec\ud654","text":"<pre><code>print(\"\\n=== property \ub370\ucf54\ub808\uc774\ud130 \uc2ec\ud654 ===\")\n\nclass SmartProperty:\n    \"\"\"\uc9c0\ub2a5\ud615 \ud504\ub85c\ud37c\ud2f0 \uad6c\ud604\"\"\"\n\n    def __init__(self):\n        self._value = None\n        self._accessed_count = 0\n        self._modified_count = 0\n        self._history = []\n\n    @property\n    def value(self):\n        \"\"\"\uc77d\uae30 \uc804\uc6a9 \uc811\uadfc\uc790\"\"\"\n        self._accessed_count += 1\n        print(f\"   value \uc77d\uae30 (\ucd1d {self._accessed_count}\ud68c)\")\n        return self._value\n\n    @value.setter\n    def value(self, new_value):\n        \"\"\"\uc124\uc815\uc790 with \ud788\uc2a4\ud1a0\ub9ac \ucd94\uc801\"\"\"\n        old_value = self._value\n        self._value = new_value\n        self._modified_count += 1\n        self._history.append((old_value, new_value))\n        print(f\"   value \uc124\uc815: {old_value} \u2192 {new_value} (\ucd1d {self._modified_count}\ud68c)\")\n\n    @value.deleter\n    def value(self):\n        \"\"\"\uc0ad\uc81c\uc790\"\"\"\n        old_value = self._value\n        self._value = None\n        self._history.append((old_value, None))\n        print(f\"   value \uc0ad\uc81c: {old_value}\")\n\n    @property\n    def history(self):\n        \"\"\"\ubcc0\uacbd \ud788\uc2a4\ud1a0\ub9ac \uc870\ud68c\"\"\"\n        return self._history.copy()\n\n    @property\n    def stats(self):\n        \"\"\"\uc811\uadfc \ud1b5\uacc4\"\"\"\n        return {\n            'accessed': self._accessed_count,\n            'modified': self._modified_count,\n            'current_value': self._value\n        }\n\nclass Circle:\n    \"\"\"\uc6d0 \ud074\ub798\uc2a4 with \uacc4\uc0b0\ub41c \ud504\ub85c\ud37c\ud2f0\"\"\"\n\n    def __init__(self, radius):\n        self._radius = radius\n\n    @property\n    def radius(self):\n        \"\"\"\ubc18\uc9c0\ub984\"\"\"\n        return self._radius\n\n    @radius.setter\n    def radius(self, value):\n        if value &lt;= 0:\n            raise ValueError(\"\ubc18\uc9c0\ub984\uc740 \uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4\")\n        self._radius = value\n        print(f\"   \ubc18\uc9c0\ub984 \uc124\uc815: {value}\")\n\n    @property\n    def diameter(self):\n        \"\"\"\uc9c0\ub984 (\uacc4\uc0b0\ub41c \ud504\ub85c\ud37c\ud2f0)\"\"\"\n        return self._radius * 2\n\n    @diameter.setter\n    def diameter(self, value):\n        \"\"\"\uc9c0\ub984\uc73c\ub85c\ubd80\ud130 \ubc18\uc9c0\ub984 \uacc4\uc0b0\"\"\"\n        self.radius = value / 2\n\n    @property\n    def area(self):\n        \"\"\"\ub113\uc774 (\uc77d\uae30 \uc804\uc6a9 \uacc4\uc0b0\ub41c \ud504\ub85c\ud37c\ud2f0)\"\"\"\n        import math\n        return math.pi * self._radius ** 2\n\n    @property\n    def circumference(self):\n        \"\"\"\ub458\ub808 (\uc77d\uae30 \uc804\uc6a9 \uacc4\uc0b0\ub41c \ud504\ub85c\ud37c\ud2f0)\"\"\"\n        import math\n        return 2 * math.pi * self._radius\n\nclass Temperature:\n    \"\"\"\uc628\ub3c4 \ubcc0\ud658 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, celsius=0):\n        self._celsius = celsius\n\n    @property\n    def celsius(self):\n        \"\"\"\uc12d\uc528 \uc628\ub3c4\"\"\"\n        return self._celsius\n\n    @celsius.setter\n    def celsius(self, value):\n        if value &lt; -273.15:\n            raise ValueError(\"\uc808\ub300\uc601\ub3c4 \uc544\ub798\ub85c \uc124\uc815\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n        self._celsius = value\n\n    @property\n    def fahrenheit(self):\n        \"\"\"\ud654\uc528 \uc628\ub3c4 (\uacc4\uc0b0\ub41c)\"\"\"\n        return self._celsius * 9/5 + 32\n\n    @fahrenheit.setter\n    def fahrenheit(self, value):\n        \"\"\"\ud654\uc528\ub85c\ubd80\ud130 \uc12d\uc528 \uacc4\uc0b0\"\"\"\n        self.celsius = (value - 32) * 5/9\n\n    @property\n    def kelvin(self):\n        \"\"\"\ucf08\ube48 \uc628\ub3c4 (\uacc4\uc0b0\ub41c)\"\"\"\n        return self._celsius + 273.15\n\n    @kelvin.setter\n    def kelvin(self, value):\n        \"\"\"\ucf08\ube48\uc73c\ub85c\ubd80\ud130 \uc12d\uc528 \uacc4\uc0b0\"\"\"\n        self.celsius = value - 273.15\n\n    def __str__(self):\n        return f\"{self.celsius:.1f}\u00b0C ({self.fahrenheit:.1f}\u00b0F, {self.kelvin:.1f}K)\"\n\ndef demonstrate_advanced_properties():\n    \"\"\"\uace0\uae09 \ud504\ub85c\ud37c\ud2f0 \uae30\ubc95 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \uc9c0\ub2a5\ud615 \ud504\ub85c\ud37c\ud2f0:\")\n\n    smart = SmartProperty()\n\n    # \uac12 \uc124\uc815\uacfc \uc77d\uae30\n    smart.value = 10\n    smart.value = 20\n    current = smart.value\n    current_again = smart.value\n\n    # \ud1b5\uacc4 \ubc0f \ud788\uc2a4\ud1a0\ub9ac \ud655\uc778\n    print(f\"   \ud1b5\uacc4: {smart.stats}\")\n    print(f\"   \ud788\uc2a4\ud1a0\ub9ac: {smart.history}\")\n\n    # \uac12 \uc0ad\uc81c\n    del smart.value\n    print(f\"   \uc0ad\uc81c \ud6c4 \ud788\uc2a4\ud1a0\ub9ac: {smart.history}\")\n\n    print(\"\\n2. \uacc4\uc0b0\ub41c \ud504\ub85c\ud37c\ud2f0 (\uc6d0):\")\n\n    circle = Circle(5)\n\n    print(f\"   \ubc18\uc9c0\ub984: {circle.radius}\")\n    print(f\"   \uc9c0\ub984: {circle.diameter}\")\n    print(f\"   \ub113\uc774: {circle.area:.2f}\")\n    print(f\"   \ub458\ub808: {circle.circumference:.2f}\")\n\n    # \uc9c0\ub984\uc73c\ub85c \ubc18\uc9c0\ub984 \uc124\uc815\n    circle.diameter = 20\n    print(f\"   \uc9c0\ub984 \uc124\uc815 \ud6c4 \ubc18\uc9c0\ub984: {circle.radius}\")\n    print(f\"   \uc0c8\ub85c\uc6b4 \ub113\uc774: {circle.area:.2f}\")\n\n    print(\"\\n3. \uc628\ub3c4 \ubcc0\ud658 \ud504\ub85c\ud37c\ud2f0:\")\n\n    temp = Temperature(25)\n    print(f\"   \ucd08\uae30 \uc628\ub3c4: {temp}\")\n\n    # \ud654\uc528\ub85c \uc124\uc815\n    temp.fahrenheit = 100\n    print(f\"   \ud654\uc528 100\ub3c4 \uc124\uc815 \ud6c4: {temp}\")\n\n    # \ucf08\ube48\uc73c\ub85c \uc124\uc815\n    temp.kelvin = 300\n    print(f\"   \ucf08\ube48 300\ub3c4 \uc124\uc815 \ud6c4: {temp}\")\n\n    try:\n        temp.celsius = -300  # \uc624\ub958 \ubc1c\uc0dd\n    except ValueError as e:\n        print(f\"   \uc628\ub3c4 \uc624\ub958: {e}\")\n\ndemonstrate_advanced_properties()\n</code></pre>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#32","title":"3.2 \ub3d9\uc801 \ud504\ub85c\ud37c\ud2f0 \uc0dd\uc131","text":"<pre><code>print(\"\\n=== \ub3d9\uc801 \ud504\ub85c\ud37c\ud2f0 \uc0dd\uc131 ===\")\n\ndef create_property(name, validator=None, default=None):\n    \"\"\"\ub3d9\uc801\uc73c\ub85c \ud504\ub85c\ud37c\ud2f0\ub97c \uc0dd\uc131\ud558\ub294 \ud329\ud1a0\ub9ac \ud568\uc218\"\"\"\n    private_name = f'_{name}'\n\n    def getter(self):\n        return getattr(self, private_name, default)\n\n    def setter(self, value):\n        if validator and not validator(value):\n            raise ValueError(f\"Invalid value for {name}: {value}\")\n        setattr(self, private_name, value)\n\n    def deleter(self):\n        if hasattr(self, private_name):\n            delattr(self, private_name)\n\n    return property(getter, setter, deleter, f\"Property for {name}\")\n\nclass PropertyFactory:\n    \"\"\"\ud504\ub85c\ud37c\ud2f0 \uc0dd\uc131 \ud329\ud1a0\ub9ac\"\"\"\n\n    @staticmethod\n    def typed_property(prop_type, name=None):\n        \"\"\"\ud0c0\uc785 \uac80\uc99d \ud504\ub85c\ud37c\ud2f0 \uc0dd\uc131\"\"\"\n        def decorator(func_or_name):\n            nonlocal name\n            if isinstance(func_or_name, str):\n                name = func_or_name\n                private_name = f'_{name}'\n\n                def getter(self):\n                    return getattr(self, private_name, None)\n\n                def setter(self, value):\n                    if not isinstance(value, prop_type):\n                        raise TypeError(f\"{name} must be {prop_type.__name__}\")\n                    setattr(self, private_name, value)\n\n                return property(getter, setter, doc=f\"Typed property: {prop_type.__name__}\")\n            else:\n                # \ud568\uc218\uac00 \uc804\ub2ec\ub41c \uacbd\uc6b0 (\ub370\ucf54\ub808\uc774\ud130\ub85c \uc0ac\uc6a9)\n                func = func_or_name\n                name = name or func.__name__\n                private_name = f'_{name}'\n\n                def getter(self):\n                    value = getattr(self, private_name, None)\n                    if value is None:\n                        value = func(self)\n                        setattr(self, private_name, value)\n                    return value\n\n                def setter(self, value):\n                    if not isinstance(value, prop_type):\n                        raise TypeError(f\"{name} must be {prop_type.__name__}\")\n                    setattr(self, private_name, value)\n\n                return property(getter, setter, doc=func.__doc__)\n\n        return decorator\n\n    @staticmethod\n    def cached_property(func):\n        \"\"\"\uce90\uc2dc\ub41c \ud504\ub85c\ud37c\ud2f0 \uc0dd\uc131\"\"\"\n        cache_name = f'_cached_{func.__name__}'\n\n        def getter(self):\n            if not hasattr(self, cache_name):\n                setattr(self, cache_name, func(self))\n                print(f\"   {func.__name__} \uacc4\uc0b0 \ubc0f \uce90\uc2dc\ub428\")\n            else:\n                print(f\"   {func.__name__} \uce90\uc2dc\uc5d0\uc11c \ubc18\ud658\")\n            return getattr(self, cache_name)\n\n        def deleter(self):\n            if hasattr(self, cache_name):\n                delattr(self, cache_name)\n                print(f\"   {func.__name__} \uce90\uc2dc \uc0ad\uc81c\ub428\")\n\n        return property(getter, fdel=deleter, doc=func.__doc__)\n\n    @staticmethod\n    def monitored_property(name, on_change=None):\n        \"\"\"\ubcc0\uacbd \ubaa8\ub2c8\ud130\ub9c1 \ud504\ub85c\ud37c\ud2f0 \uc0dd\uc131\"\"\"\n        private_name = f'_{name}'\n\n        def getter(self):\n            return getattr(self, private_name, None)\n\n        def setter(self, value):\n            old_value = getattr(self, private_name, None)\n            setattr(self, private_name, value)\n\n            if on_change and old_value != value:\n                on_change(self, name, old_value, value)\n\n        return property(getter, setter, doc=f\"Monitored property: {name}\")\n\nclass DynamicPropertyMixin:\n    \"\"\"\ub3d9\uc801 \ud504\ub85c\ud37c\ud2f0 \uc9c0\uc6d0 \ubbf9\uc2a4\uc778\"\"\"\n\n    def add_property(self, name, validator=None, default=None):\n        \"\"\"\ub7f0\ud0c0\uc784\uc5d0 \ud504\ub85c\ud37c\ud2f0 \ucd94\uac00\"\"\"\n        prop = create_property(name, validator, default)\n        setattr(self.__class__, name, prop)\n        print(f\"   \ud504\ub85c\ud37c\ud2f0 '{name}' \ub3d9\uc801 \ucd94\uac00\ub428\")\n\n    def remove_property(self, name):\n        \"\"\"\ub7f0\ud0c0\uc784\uc5d0 \ud504\ub85c\ud37c\ud2f0 \uc81c\uac70\"\"\"\n        if hasattr(self.__class__, name):\n            delattr(self.__class__, name)\n            print(f\"   \ud504\ub85c\ud37c\ud2f0 '{name}' \uc81c\uac70\ub428\")\n\n    def list_properties(self):\n        \"\"\"\ud074\ub798\uc2a4\uc758 \ubaa8\ub4e0 \ud504\ub85c\ud37c\ud2f0 \ub098\uc5f4\"\"\"\n        properties = []\n        for name in dir(self.__class__):\n            attr = getattr(self.__class__, name)\n            if isinstance(attr, property):\n                properties.append(name)\n        return properties\n\ndef demonstrate_dynamic_properties():\n    \"\"\"\ub3d9\uc801 \ud504\ub85c\ud37c\ud2f0 \uc0dd\uc131 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \ub3d9\uc801 \ud504\ub85c\ud37c\ud2f0 \ud329\ud1a0\ub9ac:\")\n\n    class Person:\n        # \ub3d9\uc801\uc73c\ub85c \uc0dd\uc131\ub41c \ud504\ub85c\ud37c\ud2f0\ub4e4\n        name = create_property('name', lambda x: isinstance(x, str) and len(x) &gt; 0)\n        age = create_property('age', lambda x: isinstance(x, int) and 0 &lt;= x &lt;= 150, 0)\n        email = create_property('email', lambda x: '@' in x if x else True)\n\n    person = Person()\n\n    try:\n        person.name = \"Alice\"\n        person.age = 30\n        person.email = \"alice@example.com\"\n\n        print(f\"   \uc774\ub984: {person.name}\")\n        print(f\"   \ub098\uc774: {person.age}\")\n        print(f\"   \uc774\uba54\uc77c: {person.email}\")\n\n        person.age = -5  # \uc624\ub958 \ubc1c\uc0dd\n    except ValueError as e:\n        print(f\"   \uac80\uc99d \uc624\ub958: {e}\")\n\n    print(\"\\n2. \ud504\ub85c\ud37c\ud2f0 \ud329\ud1a0\ub9ac \ud074\ub798\uc2a4:\")\n\n    class Product:\n        # \ud0c0\uc785 \uac80\uc99d \ud504\ub85c\ud37c\ud2f0\n        name = PropertyFactory.typed_property(str)(\"name\")\n        price = PropertyFactory.typed_property(float)(\"price\")\n\n        # \uce90\uc2dc\ub41c \ud504\ub85c\ud37c\ud2f0\n        @PropertyFactory.cached_property\n        def expensive_calculation(self):\n            \"\"\"\ube44\uc6a9\uc774 \ud070 \uacc4\uc0b0\"\"\"\n            import time\n            time.sleep(0.05)  # \uc2dc\ubbac\ub808\uc774\uc158\n            return self.price * 1.2 if self.price else 0\n\n        # \ubaa8\ub2c8\ud130\ub9c1 \ud504\ub85c\ud37c\ud2f0\n        stock = PropertyFactory.monitored_property(\n            'stock', \n            lambda obj, name, old, new: print(f\"     \uc7ac\uace0 \ubcc0\uacbd: {old} \u2192 {new}\")\n        )\n\n    product = Product()\n\n    product.name = \"Laptop\"\n    product.price = 1000.0\n    product.stock = 50\n    product.stock = 45  # \ubaa8\ub2c8\ud130\ub9c1 \uba54\uc2dc\uc9c0 \ucd9c\ub825\n\n    # \uce90\uc2dc\ub41c \ud504\ub85c\ud37c\ud2f0 \ud14c\uc2a4\ud2b8\n    calc1 = product.expensive_calculation\n    calc2 = product.expensive_calculation  # \uce90\uc2dc\uc5d0\uc11c \ubc18\ud658\n\n    print(f\"   \uacc4\uc0b0 \uacb0\uacfc: {calc1}\")\n\n    # \uce90\uc2dc \uc0ad\uc81c \ud6c4 \ub2e4\uc2dc \uacc4\uc0b0\n    del product.expensive_calculation\n    calc3 = product.expensive_calculation\n\n    print(\"\\n3. \ub3d9\uc801 \ud504\ub85c\ud37c\ud2f0 \ubbf9\uc2a4\uc778:\")\n\n    class ConfigurableClass(DynamicPropertyMixin):\n        \"\"\"\uc124\uc815 \uac00\ub2a5\ud55c \ud074\ub798\uc2a4\"\"\"\n        pass\n\n    obj = ConfigurableClass()\n\n    # \uae30\uc874 \ud504\ub85c\ud37c\ud2f0 \ubaa9\ub85d\n    print(f\"   \ucd08\uae30 \ud504\ub85c\ud37c\ud2f0: {obj.list_properties()}\")\n\n    # \ub3d9\uc801\uc73c\ub85c \ud504\ub85c\ud37c\ud2f0 \ucd94\uac00\n    obj.add_property('username', lambda x: len(x) &gt;= 3 if x else False)\n    obj.add_property('score', lambda x: 0 &lt;= x &lt;= 100 if isinstance(x, (int, float)) else False, 0)\n\n    print(f\"   \ucd94\uac00 \ud6c4 \ud504\ub85c\ud37c\ud2f0: {obj.list_properties()}\")\n\n    # \ub3d9\uc801 \ud504\ub85c\ud37c\ud2f0 \uc0ac\uc6a9\n    try:\n        obj.username = \"alice\"\n        obj.score = 85\n\n        print(f\"   \uc0ac\uc6a9\uc790\uba85: {obj.username}\")\n        print(f\"   \uc810\uc218: {obj.score}\")\n\n        obj.username = \"ab\"  # \uc624\ub958 \ubc1c\uc0dd\n    except ValueError as e:\n        print(f\"   \ub3d9\uc801 \ud504\ub85c\ud37c\ud2f0 \uac80\uc99d \uc624\ub958: {e}\")\n\ndemonstrate_dynamic_properties()\n</code></pre>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#4-new-vs-init","title":"4. new vs init","text":""},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#41","title":"4.1 \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 \uc774\ud574","text":"<pre><code>print(\"\\n=== __new__ vs __init__ ===\")\n\nclass ObjectCreationDemo:\n    \"\"\"\uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 \uc2dc\uc5f0\"\"\"\n\n    def __new__(cls, *args, **kwargs):\n        \"\"\"\uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131 \ub2e8\uacc4\"\"\"\n        print(f\"   1. __new__ \ud638\ucd9c\ub428: {cls.__name__}\")\n        print(f\"      args: {args}\")\n        print(f\"      kwargs: {kwargs}\")\n\n        # \uc2e4\uc81c \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\n        instance = super().__new__(cls)\n        print(f\"      \uc0dd\uc131\ub41c \uc778\uc2a4\ud134\uc2a4: {id(instance)}\")\n\n        # __new__\uc5d0\uc11c\ub3c4 \uc18d\uc131\uc744 \uc124\uc815\ud560 \uc218 \uc788\uc74c\n        instance._created_by_new = True\n\n        return instance\n\n    def __init__(self, name, value):\n        \"\"\"\uc778\uc2a4\ud134\uc2a4 \ucd08\uae30\ud654 \ub2e8\uacc4\"\"\"\n        print(f\"   2. __init__ \ud638\ucd9c\ub428: {id(self)}\")\n        print(f\"      \uc774\ubbf8 \uc0dd\uc131\ub41c \uc778\uc2a4\ud134\uc2a4: {hasattr(self, '_created_by_new')}\")\n\n        self.name = name\n        self.value = value\n        print(f\"      \ucd08\uae30\ud654 \uc644\ub8cc: {self.name} = {self.value}\")\n\nclass ImmutablePoint:\n    \"\"\"\ubd88\ubcc0 \uc810 \ud074\ub798\uc2a4 (__new__ \ud65c\uc6a9)\"\"\"\n\n    def __new__(cls, x, y):\n        \"\"\"\uc88c\ud45c \uc720\ud6a8\uc131 \uac80\uc0ac \ud6c4 \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\"\"\"\n        if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):\n            raise TypeError(\"\uc88c\ud45c\ub294 \uc22b\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4\")\n\n        instance = super().__new__(cls)\n\n        # __new__\uc5d0\uc11c \uc18d\uc131 \uc124\uc815 (\ubd88\ubcc0 \uac1d\uccb4\ub97c \uc704\ud574)\n        instance._x = float(x)\n        instance._y = float(y)\n\n        print(f\"   \ubd88\ubcc0 \uc810 \uc0dd\uc131: ({x}, {y})\")\n        return instance\n\n    def __init__(self, x, y):\n        \"\"\"__init__\ub294 \uc774\ubbf8 \uc124\uc815\ub41c \uc18d\uc131\uc744 \ud655\uc778\ub9cc \ud568\"\"\"\n        # \ubd88\ubcc0 \uac1d\uccb4\uc774\ubbc0\ub85c __init__\uc5d0\uc11c\ub294 \uac80\uc99d\ub9cc\n        if hasattr(self, '_x') and hasattr(self, '_y'):\n            print(f\"   \uc810 \ucd08\uae30\ud654 \uc644\ub8cc: ({self._x}, {self._y})\")\n\n    @property\n    def x(self):\n        return self._x\n\n    @property\n    def y(self):\n        return self._y\n\n    def __repr__(self):\n        return f\"ImmutablePoint({self.x}, {self.y})\"\n\nclass Singleton:\n    \"\"\"\uc2f1\uae00\ud1a4 \ud328\ud134 (__new__ \ud65c\uc6a9)\"\"\"\n\n    _instance = None\n    _initialized = False\n\n    def __new__(cls, *args, **kwargs):\n        \"\"\"\uc778\uc2a4\ud134\uc2a4\uac00 \uc5c6\uc73c\uba74 \uc0dd\uc131, \uc788\uc73c\uba74 \uae30\uc874 \ubc18\ud658\"\"\"\n        if cls._instance is None:\n            print(f\"   \uc0c8\ub85c\uc6b4 {cls.__name__} \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\")\n            cls._instance = super().__new__(cls)\n        else:\n            print(f\"   \uae30\uc874 {cls.__name__} \uc778\uc2a4\ud134\uc2a4 \ubc18\ud658\")\n\n        return cls._instance\n\n    def __init__(self, name=\"default\"):\n        \"\"\"\ucd5c\ucd08 \ud55c \ubc88\ub9cc \ucd08\uae30\ud654\"\"\"\n        if not self._initialized:\n            self.name = name\n            self._initialized = True\n            print(f\"   \uc2f1\uae00\ud1a4 \ucd08\uae30\ud654: {self.name}\")\n        else:\n            print(f\"   \uc2f1\uae00\ud1a4 \uc774\ubbf8 \ucd08\uae30\ud654\ub428: {self.name}\")\n\nclass CachedString(str):\n    \"\"\"\uce90\uc2dc\ub41c \ubb38\uc790\uc5f4 \ud074\ub798\uc2a4\"\"\"\n\n    _cache = {}\n\n    def __new__(cls, value):\n        \"\"\"\ub3d9\uc77c\ud55c \ubb38\uc790\uc5f4\uc740 \uce90\uc2dc\uc5d0\uc11c \uc7ac\uc0ac\uc6a9\"\"\"\n        if value in cls._cache:\n            print(f\"   \uce90\uc2dc\uc5d0\uc11c \ubb38\uc790\uc5f4 \ubc18\ud658: '{value}'\")\n            return cls._cache[value]\n\n        print(f\"   \uc0c8\ub85c\uc6b4 \ubb38\uc790\uc5f4 \uc0dd\uc131: '{value}'\")\n        instance = super().__new__(cls, value)\n        cls._cache[value] = instance\n\n        return instance\n\n    def __init__(self, value):\n        \"\"\"str\uc740 \ubd88\ubcc0\uc774\ubbc0\ub85c __init__\ub294 \ube44\uc5b4\uc788\uc74c\"\"\"\n        pass\n\n    @classmethod\n    def cache_info(cls):\n        \"\"\"\uce90\uc2dc \uc815\ubcf4 \ubc18\ud658\"\"\"\n        return {\n            'size': len(cls._cache),\n            'keys': list(cls._cache.keys())\n        }\n\ndef demonstrate_new_vs_init():\n    \"\"\"__new__ vs __init__ \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \uae30\ubcf8 \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815:\")\n\n    obj = ObjectCreationDemo(\"test\", 42)\n    print(f\"   \ucd5c\uc885 \uac1d\uccb4: {obj}\")\n\n    print(\"\\n2. \ubd88\ubcc0 \uac1d\uccb4 \uc0dd\uc131:\")\n\n    try:\n        point1 = ImmutablePoint(3, 4)\n        point2 = ImmutablePoint(0, 0)\n\n        print(f\"   \uc8101: {point1}\")\n        print(f\"   \uc8102: {point2}\")\n        print(f\"   \uc8101.x: {point1.x}\")\n        print(f\"   \uc8101.y: {point1.y}\")\n\n        # \uc798\ubabb\ub41c \ud0c0\uc785\uc73c\ub85c \uc0dd\uc131 \uc2dc\ub3c4\n        point3 = ImmutablePoint(\"invalid\", 1)\n    except TypeError as e:\n        print(f\"   \ud0c0\uc785 \uc624\ub958: {e}\")\n\n    print(\"\\n3. \uc2f1\uae00\ud1a4 \ud328\ud134:\")\n\n    singleton1 = Singleton(\"first\")\n    singleton2 = Singleton(\"second\")  # \ubb34\uc2dc\ub428\n    singleton3 = Singleton(\"third\")   # \ubb34\uc2dc\ub428\n\n    print(f\"   singleton1 is singleton2: {singleton1 is singleton2}\")\n    print(f\"   singleton2 is singleton3: {singleton2 is singleton3}\")\n    print(f\"   \ubaa8\ub4e0 \uc778\uc2a4\ud134\uc2a4\uc758 \uc774\ub984: {singleton1.name}\")\n\n    print(\"\\n4. \uce90\uc2dc\ub41c \ubb38\uc790\uc5f4:\")\n\n    str1 = CachedString(\"hello\")\n    str2 = CachedString(\"world\")\n    str3 = CachedString(\"hello\")  # \uce90\uc2dc\uc5d0\uc11c \ubc18\ud658\n    str4 = CachedString(\"world\")  # \uce90\uc2dc\uc5d0\uc11c \ubc18\ud658\n\n    print(f\"   str1 is str3 (\uac19\uc740 'hello'): {str1 is str3}\")\n    print(f\"   str2 is str4 (\uac19\uc740 'world'): {str2 is str4}\")\n    print(f\"   \uce90\uc2dc \uc815\ubcf4: {CachedString.cache_info()}\")\n\ndemonstrate_new_vs_init()\n</code></pre>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#42","title":"4.2 \uace0\uae09 \uac1d\uccb4 \uc0dd\uc131 \ud328\ud134","text":"<pre><code>print(\"\\n=== \uace0\uae09 \uac1d\uccb4 \uc0dd\uc131 \ud328\ud134 ===\")\n\nclass Factory:\n    \"\"\"\ud329\ud1a0\ub9ac \ud328\ud134\uc744 \uc704\ud55c \uae30\ubcf8 \ud074\ub798\uc2a4\"\"\"\n\n    _product_types = {}\n\n    def __new__(cls, product_type, *args, **kwargs):\n        \"\"\"\uc81c\ud488 \ud0c0\uc785\uc5d0 \ub530\ub77c \ub2e4\ub978 \ud074\ub798\uc2a4 \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\"\"\"\n        if product_type not in cls._product_types:\n            raise ValueError(f\"\uc54c \uc218 \uc5c6\ub294 \uc81c\ud488 \ud0c0\uc785: {product_type}\")\n\n        product_class = cls._product_types[product_type]\n        print(f\"   \ud329\ud1a0\ub9ac: {product_type} \u2192 {product_class.__name__} \uc0dd\uc131\")\n\n        return product_class(*args, **kwargs)\n\n    @classmethod\n    def register_product(cls, product_type, product_class):\n        \"\"\"\uc81c\ud488 \ud0c0\uc785 \ub4f1\ub85d\"\"\"\n        cls._product_types[product_type] = product_class\n        print(f\"   \uc81c\ud488 \ud0c0\uc785 \ub4f1\ub85d: {product_type} \u2192 {product_class.__name__}\")\n\n# \uc81c\ud488 \ud074\ub798\uc2a4\ub4e4\nclass Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n\n    def __repr__(self):\n        return f\"Car({self.brand}, {self.model})\"\n\nclass Motorcycle:\n    def __init__(self, brand, engine_size):\n        self.brand = brand\n        self.engine_size = engine_size\n\n    def __repr__(self):\n        return f\"Motorcycle({self.brand}, {self.engine_size}cc)\"\n\nclass Truck:\n    def __init__(self, brand, capacity):\n        self.brand = brand\n        self.capacity = capacity\n\n    def __repr__(self):\n        return f\"Truck({self.brand}, {self.capacity}\ud1a4)\"\n\nclass ObjectPool:\n    \"\"\"\uac1d\uccb4 \ud480 \ud328\ud134\"\"\"\n\n    def __init__(self, factory_func, max_size=10):\n        self._factory = factory_func\n        self._pool = []\n        self._max_size = max_size\n        self._created_count = 0\n        self._reused_count = 0\n\n    def __new__(cls, factory_func, max_size=10):\n        \"\"\"\ud480 \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\"\"\"\n        instance = super().__new__(cls)\n        return instance\n\n    def acquire(self):\n        \"\"\"\uac1d\uccb4 \ud68d\ub4dd\"\"\"\n        if self._pool:\n            obj = self._pool.pop()\n            self._reused_count += 1\n            print(f\"   \ud480\uc5d0\uc11c \uac1d\uccb4 \uc7ac\uc0ac\uc6a9: {id(obj)}\")\n            return obj\n        else:\n            obj = self._factory()\n            self._created_count += 1\n            print(f\"   \uc0c8 \uac1d\uccb4 \uc0dd\uc131: {id(obj)}\")\n            return obj\n\n    def release(self, obj):\n        \"\"\"\uac1d\uccb4 \ubc18\ud658\"\"\"\n        if len(self._pool) &lt; self._max_size:\n            # \uac1d\uccb4 \uc7ac\uc124\uc815\n            if hasattr(obj, 'reset'):\n                obj.reset()\n            self._pool.append(obj)\n            print(f\"   \uac1d\uccb4 \ud480\uc5d0 \ubc18\ud658: {id(obj)}\")\n        else:\n            print(f\"   \ud480\uc774 \uac00\ub4dd\ucc38, \uac1d\uccb4 \uc0ad\uc81c: {id(obj)}\")\n\n    def stats(self):\n        \"\"\"\ud480 \ud1b5\uacc4\"\"\"\n        return {\n            'pool_size': len(self._pool),\n            'created': self._created_count,\n            'reused': self._reused_count,\n            'efficiency': self._reused_count / (self._created_count + self._reused_count) * 100 if self._created_count + self._reused_count &gt; 0 else 0\n        }\n\nclass PooledConnection:\n    \"\"\"\ud480\ub9c1\ub420 \uc5f0\uacb0 \uac1d\uccb4\"\"\"\n\n    def __init__(self):\n        self.connected = True\n        self.queries_executed = 0\n\n    def execute_query(self, query):\n        \"\"\"\ucffc\ub9ac \uc2e4\ud589 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        if self.connected:\n            self.queries_executed += 1\n            return f\"Query executed: {query}\"\n        else:\n            raise RuntimeError(\"Connection is closed\")\n\n    def reset(self):\n        \"\"\"\ud480 \ubc18\ud658 \uc2dc \uc7ac\uc124\uc815\"\"\"\n        self.queries_executed = 0\n        print(f\"     \uc5f0\uacb0 \uc7ac\uc124\uc815\ub428\")\n\n    def close(self):\n        \"\"\"\uc5f0\uacb0 \ub2eb\uae30\"\"\"\n        self.connected = False\n\nclass ConditionalCreation:\n    \"\"\"\uc870\uac74\ubd80 \uac1d\uccb4 \uc0dd\uc131\"\"\"\n\n    def __new__(cls, condition, *args, **kwargs):\n        \"\"\"\uc870\uac74\uc5d0 \ub530\ub77c \uc0dd\uc131 \uc5ec\ubd80 \uacb0\uc815\"\"\"\n        if not condition:\n            print(f\"   \uc870\uac74 \ubd88\ub9cc\uc871\uc73c\ub85c {cls.__name__} \uc0dd\uc131 \uc548\ud568\")\n            return None\n\n        print(f\"   \uc870\uac74 \ub9cc\uc871\uc73c\ub85c {cls.__name__} \uc0dd\uc131\")\n        return super().__new__(cls)\n\n    def __init__(self, condition, value):\n        if condition:  # __new__\uc5d0\uc11c None\uc744 \ubc18\ud658\ud588\ub2e4\uba74 __init__\ub3c4 \ud638\ucd9c\ub418\uc9c0 \uc54a\uc74c\n            self.value = value\n            print(f\"   \uc870\uac74\ubd80 \uac1d\uccb4 \ucd08\uae30\ud654: {self.value}\")\n\ndef demonstrate_advanced_creation_patterns():\n    \"\"\"\uace0\uae09 \uac1d\uccb4 \uc0dd\uc131 \ud328\ud134 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \ud329\ud1a0\ub9ac \ud328\ud134:\")\n\n    # \uc81c\ud488 \ud0c0\uc785 \ub4f1\ub85d\n    Factory.register_product(\"car\", Car)\n    Factory.register_product(\"motorcycle\", Motorcycle)\n    Factory.register_product(\"truck\", Truck)\n\n    # \ud329\ud1a0\ub9ac\ub97c \ud1b5\ud55c \uac1d\uccb4 \uc0dd\uc131\n    try:\n        vehicle1 = Factory(\"car\", \"Toyota\", \"Camry\")\n        vehicle2 = Factory(\"motorcycle\", \"Honda\", 600)\n        vehicle3 = Factory(\"truck\", \"Volvo\", 20)\n\n        print(f\"   \uc0dd\uc131\ub41c \ucc28\ub7c9\ub4e4:\")\n        print(f\"     {vehicle1}\")\n        print(f\"     {vehicle2}\")\n        print(f\"     {vehicle3}\")\n\n        vehicle4 = Factory(\"plane\", \"Boeing\", \"747\")  # \uc624\ub958 \ubc1c\uc0dd\n    except ValueError as e:\n        print(f\"   \ud329\ud1a0\ub9ac \uc624\ub958: {e}\")\n\n    print(\"\\n2. \uac1d\uccb4 \ud480 \ud328\ud134:\")\n\n    # \uc5f0\uacb0 \ud480 \uc0dd\uc131\n    connection_pool = ObjectPool(PooledConnection, max_size=3)\n\n    # \uac1d\uccb4\ub4e4 \ud68d\ub4dd\n    connections = []\n    for i in range(5):\n        conn = connection_pool.acquire()\n        connections.append(conn)\n        if conn:\n            result = conn.execute_query(f\"SELECT * FROM table{i}\")\n\n    # \uac1d\uccb4\ub4e4 \ubc18\ud658\n    for conn in connections[:3]:\n        connection_pool.release(conn)\n\n    # \ud480 \ud1b5\uacc4\n    print(f\"   \ud480 \ud1b5\uacc4: {connection_pool.stats()}\")\n\n    # \uc7ac\uc0ac\uc6a9 \ud14c\uc2a4\ud2b8\n    conn_reused = connection_pool.acquire()\n    print(f\"   \uc7ac\uc0ac\uc6a9\ub41c \uc5f0\uacb0\uc758 \ucffc\ub9ac \uc218: {conn_reused.queries_executed}\")\n\n    print(\"\\n3. \uc870\uac74\ubd80 \uac1d\uccb4 \uc0dd\uc131:\")\n\n    # \uc870\uac74\uc5d0 \ub530\ub978 \uc0dd\uc131\n    obj1 = ConditionalCreation(True, \"success\")\n    obj2 = ConditionalCreation(False, \"failure\")\n    obj3 = ConditionalCreation(1 &gt; 0, \"conditional success\")\n    obj4 = ConditionalCreation(1 &gt; 2, \"conditional failure\")\n\n    print(f\"   \uc0dd\uc131\ub41c \uac1d\uccb4\ub4e4:\")\n    print(f\"     obj1: {obj1}\")\n    print(f\"     obj2: {obj2}\")\n    print(f\"     obj3: {obj3}\")\n    print(f\"     obj4: {obj4}\")\n\n    # None\uc774 \uc544\ub2cc \uac1d\uccb4\ub4e4\uc758 \uac12 \ud655\uc778\n    for name, obj in [(\"obj1\", obj1), (\"obj3\", obj3)]:\n        if obj is not None:\n            print(f\"     {name}.value: {obj.value}\")\n\ndemonstrate_advanced_creation_patterns()\n</code></pre>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#5","title":"5. \ub3d9\uc801 \ud074\ub798\uc2a4 \uc0dd\uc131\uacfc \uc218\uc815","text":""},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#51","title":"5.1 \ub3d9\uc801 \ud074\ub798\uc2a4 \uc0dd\uc131","text":"<pre><code>print(\"\\n=== \ub3d9\uc801 \ud074\ub798\uc2a4 \uc0dd\uc131\uacfc \uc218\uc815 ===\")\n\nclass ClassBuilder:\n    \"\"\"\ub3d9\uc801 \ud074\ub798\uc2a4 \uc0dd\uc131 \ub3c4\uad6c\"\"\"\n\n    def __init__(self):\n        self.created_classes = {}\n\n    def create_data_class(self, class_name, fields, validation_rules=None):\n        \"\"\"\ub370\uc774\ud130 \ud074\ub798\uc2a4 \ub3d9\uc801 \uc0dd\uc131\"\"\"\n        print(f\"\\n\ub3d9\uc801 \ub370\uc774\ud130 \ud074\ub798\uc2a4 \uc0dd\uc131: {class_name}\")\n\n        # __init__ \uba54\uc11c\ub4dc \uc0dd\uc131\n        def __init__(self, **kwargs):\n            for field in fields:\n                value = kwargs.get(field.name, field.default)\n\n                # \uc720\ud6a8\uc131 \uac80\uc0ac\n                if validation_rules and field.name in validation_rules:\n                    validator = validation_rules[field.name]\n                    if not validator(value):\n                        raise ValueError(f\"Invalid value for {field.name}: {value}\")\n\n                setattr(self, field.name, value)\n\n        # __repr__ \uba54\uc11c\ub4dc \uc0dd\uc131\n        def __repr__(self):\n            field_strs = []\n            for field in fields:\n                value = getattr(self, field.name, None)\n                field_strs.append(f\"{field.name}={value!r}\")\n            return f\"{class_name}({', '.join(field_strs)})\"\n\n        # __eq__ \uba54\uc11c\ub4dc \uc0dd\uc131\n        def __eq__(self, other):\n            if not isinstance(other, self.__class__):\n                return False\n            for field in fields:\n                if getattr(self, field.name) != getattr(other, field.name):\n                    return False\n            return True\n\n        # \ud504\ub85c\ud37c\ud2f0 \uc0dd\uc131\n        properties = {}\n        for field in fields:\n            if field.read_only:\n                # \uc77d\uae30 \uc804\uc6a9 \ud504\ub85c\ud37c\ud2f0\n                properties[field.name] = property(\n                    lambda self, fname=field.name: getattr(self, f'_{fname}'),\n                    doc=f\"Read-only property: {field.name}\"\n                )\n\n        # \ud074\ub798\uc2a4 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uad6c\uc131\n        namespace = {\n            '__init__': __init__,\n            '__repr__': __repr__,\n            '__eq__': __eq__,\n            '_fields': fields,\n            **properties\n        }\n\n        # \ud074\ub798\uc2a4 \uc0dd\uc131\n        cls = type(class_name, (object,), namespace)\n        self.created_classes[class_name] = cls\n\n        print(f\"   \ud544\ub4dc: {[f.name for f in fields]}\")\n        print(f\"   \uc0dd\uc131\ub41c \ud074\ub798\uc2a4: {cls}\")\n\n        return cls\n\n    def create_enum_class(self, class_name, values):\n        \"\"\"\uc5f4\uac70\ud615 \ud074\ub798\uc2a4 \ub3d9\uc801 \uc0dd\uc131\"\"\"\n        print(f\"\\n\ub3d9\uc801 \uc5f4\uac70\ud615 \ud074\ub798\uc2a4 \uc0dd\uc131: {class_name}\")\n\n        # \uac01 \uac12\uc744 \ud074\ub798\uc2a4 \uc18d\uc131\uc73c\ub85c \ucd94\uac00\n        namespace = {}\n        for i, value in enumerate(values):\n            namespace[value.upper()] = i\n\n        # \uc720\ud2f8\ub9ac\ud2f0 \uba54\uc11c\ub4dc\ub4e4\n        def get_name(cls, value):\n            for name, val in cls.__dict__.items():\n                if val == value and not name.startswith('_'):\n                    return name\n            return None\n\n        def get_values(cls):\n            return [val for name, val in cls.__dict__.items() \n                   if not name.startswith('_') and not callable(val)]\n\n        namespace.update({\n            'get_name': classmethod(get_name),\n            'get_values': classmethod(get_values),\n            '_values': values\n        })\n\n        cls = type(class_name, (object,), namespace)\n        self.created_classes[class_name] = cls\n\n        print(f\"   \uac12\ub4e4: {values}\")\n        print(f\"   \uc0dd\uc131\ub41c \uc5f4\uac70\ud615: {cls}\")\n\n        return cls\n\n    def create_proxy_class(self, class_name, target_class, interceptors=None):\n        \"\"\"\ud504\ub85d\uc2dc \ud074\ub798\uc2a4 \ub3d9\uc801 \uc0dd\uc131\"\"\"\n        print(f\"\\n\ud504\ub85d\uc2dc \ud074\ub798\uc2a4 \uc0dd\uc131: {class_name} \u2192 {target_class.__name__}\")\n\n        def __init__(self, *args, **kwargs):\n            self._target = target_class(*args, **kwargs)\n            self._access_log = []\n\n        def __getattr__(self, name):\n            # \uc811\uadfc \ub85c\uae45\n            self._access_log.append(('get', name))\n\n            # \uc778\ud130\uc149\ud130 \uc2e4\ud589\n            if interceptors and 'get' in interceptors:\n                result = interceptors['get'](self._target, name)\n                if result is not None:\n                    return result\n\n            return getattr(self._target, name)\n\n        def __setattr__(self, name, value):\n            if name.startswith('_'):\n                super(cls, self).__setattr__(name, value)\n                return\n\n            # \uc811\uadfc \ub85c\uae45\n            if hasattr(self, '_access_log'):\n                self._access_log.append(('set', name, value))\n\n            # \uc778\ud130\uc149\ud130 \uc2e4\ud589\n            if interceptors and 'set' in interceptors:\n                if interceptors['set'](self._target, name, value):\n                    return\n\n            setattr(self._target, name, value)\n\n        def get_access_log(self):\n            return self._access_log.copy()\n\n        namespace = {\n            '__init__': __init__,\n            '__getattr__': __getattr__,\n            '__setattr__': __setattr__,\n            'get_access_log': get_access_log,\n            '_target_class': target_class\n        }\n\n        cls = type(class_name, (object,), namespace)\n        self.created_classes[class_name] = cls\n\n        return cls\n\nclass Field:\n    \"\"\"\ud544\ub4dc \uc815\uc758 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, name, field_type=None, default=None, read_only=False):\n        self.name = name\n        self.field_type = field_type\n        self.default = default\n        self.read_only = read_only\n\n    def __repr__(self):\n        return f\"Field({self.name}, {self.field_type}, default={self.default})\"\n\ndef demonstrate_dynamic_class_creation():\n    \"\"\"\ub3d9\uc801 \ud074\ub798\uc2a4 \uc0dd\uc131 \uc2dc\uc5f0\"\"\"\n    builder = ClassBuilder()\n\n    print(\"\\n1. \ub3d9\uc801 \ub370\uc774\ud130 \ud074\ub798\uc2a4:\")\n\n    # \ud544\ub4dc \uc815\uc758\n    person_fields = [\n        Field('name', str, ''),\n        Field('age', int, 0),\n        Field('email', str, ''),\n    ]\n\n    # \uc720\ud6a8\uc131 \uac80\uc0ac \uaddc\uce59\n    validation_rules = {\n        'name': lambda x: isinstance(x, str) and len(x) &gt; 0,\n        'age': lambda x: isinstance(x, int) and 0 &lt;= x &lt;= 150,\n        'email': lambda x: isinstance(x, str) and '@' in x\n    }\n\n    # \ub3d9\uc801 \ud074\ub798\uc2a4 \uc0dd\uc131\n    Person = builder.create_data_class('Person', person_fields, validation_rules)\n\n    # \ud074\ub798\uc2a4 \uc0ac\uc6a9\n    try:\n        person1 = Person(name=\"Alice\", age=30, email=\"alice@example.com\")\n        person2 = Person(name=\"Bob\", age=25, email=\"bob@example.com\")\n\n        print(f\"   person1: {person1}\")\n        print(f\"   person2: {person2}\")\n        print(f\"   person1 == person2: {person1 == person2}\")\n\n        person3 = Person(name=\"\", age=30, email=\"invalid\")  # \uc624\ub958 \ubc1c\uc0dd\n    except ValueError as e:\n        print(f\"   \uac80\uc99d \uc624\ub958: {e}\")\n\n    print(\"\\n2. \ub3d9\uc801 \uc5f4\uac70\ud615 \ud074\ub798\uc2a4:\")\n\n    # \uc0c1\ud0dc \uc5f4\uac70\ud615 \uc0dd\uc131\n    Status = builder.create_enum_class('Status', ['pending', 'approved', 'rejected'])\n\n    print(f\"   Status.PENDING: {Status.PENDING}\")\n    print(f\"   Status.APPROVED: {Status.APPROVED}\")\n    print(f\"   Status.REJECTED: {Status.REJECTED}\")\n    print(f\"   \uac12 \uc774\ub984 \uc870\ud68c: {Status.get_name(1)}\")\n    print(f\"   \ubaa8\ub4e0 \uac12: {Status.get_values()}\")\n\n    print(\"\\n3. \ub3d9\uc801 \ud504\ub85d\uc2dc \ud074\ub798\uc2a4:\")\n\n    # \uc6d0\ubcf8 \ud074\ub798\uc2a4\n    class Calculator:\n        def __init__(self):\n            self.result = 0\n\n        def add(self, value):\n            self.result += value\n            return self.result\n\n        def multiply(self, value):\n            self.result *= value\n            return self.result\n\n    # \uc778\ud130\uc149\ud130 \uc815\uc758\n    def log_interceptor(target, name):\n        print(f\"     \uba54\uc11c\ub4dc '{name}' \ud638\ucd9c\ub428\")\n        return None  # \uae30\ubcf8 \ub3d9\uc791 \uc218\ud589\n\n    def validation_interceptor(target, name, value):\n        if name == 'result' and value &lt; 0:\n            print(f\"     \uacbd\uace0: \uc74c\uc218 \uacb0\uacfc \uc124\uc815 \uc2dc\ub3c4 ({value})\")\n        return False  # \uae30\ubcf8 \ub3d9\uc791 \uc218\ud589\n\n    interceptors = {\n        'get': log_interceptor,\n        'set': validation_interceptor\n    }\n\n    # \ud504\ub85d\uc2dc \ud074\ub798\uc2a4 \uc0dd\uc131\n    LoggingCalculator = builder.create_proxy_class('LoggingCalculator', Calculator, interceptors)\n\n    # \ud504\ub85d\uc2dc \uc0ac\uc6a9\n    calc = LoggingCalculator()\n    calc.add(10)\n    calc.multiply(3)\n    calc.result = -5  # \uacbd\uace0 \ubc1c\uc0dd\n\n    print(f\"   \ucd5c\uc885 \uacb0\uacfc: {calc.result}\")\n    print(f\"   \uc811\uadfc \ub85c\uadf8: {calc.get_access_log()}\")\n\ndemonstrate_dynamic_class_creation()\n</code></pre>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#52","title":"5.2 \ud074\ub798\uc2a4 \uc218\uc815\uacfc \ud655\uc7a5","text":"<pre><code>print(\"\\n=== \ud074\ub798\uc2a4 \uc218\uc815\uacfc \ud655\uc7a5 ===\")\n\nclass ClassModifier:\n    \"\"\"\ud074\ub798\uc2a4 \uc218\uc815 \ub3c4\uad6c\"\"\"\n\n    def __init__(self):\n        self.modification_history = []\n\n    def add_method(self, cls, method_name, method_func):\n        \"\"\"\ud074\ub798\uc2a4\uc5d0 \uba54\uc11c\ub4dc \ucd94\uac00\"\"\"\n        setattr(cls, method_name, method_func)\n        self.modification_history.append(('add_method', cls.__name__, method_name))\n        print(f\"   \uba54\uc11c\ub4dc '{method_name}' \ucd94\uac00\ub428: {cls.__name__}\")\n\n    def remove_method(self, cls, method_name):\n        \"\"\"\ud074\ub798\uc2a4\uc5d0\uc11c \uba54\uc11c\ub4dc \uc81c\uac70\"\"\"\n        if hasattr(cls, method_name):\n            delattr(cls, method_name)\n            self.modification_history.append(('remove_method', cls.__name__, method_name))\n            print(f\"   \uba54\uc11c\ub4dc '{method_name}' \uc81c\uac70\ub428: {cls.__name__}\")\n\n    def add_property(self, cls, prop_name, getter=None, setter=None, deleter=None):\n        \"\"\"\ud074\ub798\uc2a4\uc5d0 \ud504\ub85c\ud37c\ud2f0 \ucd94\uac00\"\"\"\n        prop = property(getter, setter, deleter)\n        setattr(cls, prop_name, prop)\n        self.modification_history.append(('add_property', cls.__name__, prop_name))\n        print(f\"   \ud504\ub85c\ud37c\ud2f0 '{prop_name}' \ucd94\uac00\ub428: {cls.__name__}\")\n\n    def monkey_patch(self, cls, method_name, new_method):\n        \"\"\"\uba54\uc11c\ub4dc \ubabd\ud0a4 \ud328\uce58\"\"\"\n        original_method = getattr(cls, method_name, None)\n        setattr(cls, method_name, new_method)\n        setattr(cls, f'_original_{method_name}', original_method)\n        self.modification_history.append(('monkey_patch', cls.__name__, method_name))\n        print(f\"   \uba54\uc11c\ub4dc '{method_name}' \ubabd\ud0a4 \ud328\uce58\ub428: {cls.__name__}\")\n\n    def add_mixin(self, cls, mixin_class):\n        \"\"\"\ud074\ub798\uc2a4\uc5d0 \ubbf9\uc2a4\uc778 \ucd94\uac00 (\ub2e4\uc911 \uc0c1\uc18d \uc2dc\ubbac\ub808\uc774\uc158)\"\"\"\n        # \ubbf9\uc2a4\uc778\uc758 \uba54\uc11c\ub4dc\ub4e4\uc744 \ubcf5\uc0ac\n        for attr_name in dir(mixin_class):\n            if not attr_name.startswith('_') and callable(getattr(mixin_class, attr_name)):\n                method = getattr(mixin_class, attr_name)\n                setattr(cls, attr_name, method)\n\n        self.modification_history.append(('add_mixin', cls.__name__, mixin_class.__name__))\n        print(f\"   \ubbf9\uc2a4\uc778 '{mixin_class.__name__}' \ucd94\uac00\ub428: {cls.__name__}\")\n\n    def get_modification_history(self):\n        \"\"\"\uc218\uc815 \ud788\uc2a4\ud1a0\ub9ac \ubc18\ud658\"\"\"\n        return self.modification_history.copy()\n\nclass MethodDecorator:\n    \"\"\"\uba54\uc11c\ub4dc \ub370\ucf54\ub808\uc774\uc158 \ub3c4\uad6c\"\"\"\n\n    @staticmethod\n    def timing_decorator(func):\n        \"\"\"\uc2e4\ud589 \uc2dc\uac04 \uce21\uc815 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n        import time\n        import functools\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            start_time = time.time()\n            result = func(*args, **kwargs)\n            end_time = time.time()\n            print(f\"     {func.__name__} \uc2e4\ud589 \uc2dc\uac04: {end_time - start_time:.4f}\ucd08\")\n            return result\n\n        return wrapper\n\n    @staticmethod\n    def caching_decorator(func):\n        \"\"\"\uacb0\uacfc \uce90\uc2f1 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n        import functools\n        cache = {}\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            # \uac04\ub2e8\ud55c \uce90\uc2dc \ud0a4 \uc0dd\uc131\n            key = str(args) + str(sorted(kwargs.items()))\n\n            if key in cache:\n                print(f\"     {func.__name__} \uce90\uc2dc \ud788\ud2b8\")\n                return cache[key]\n\n            result = func(*args, **kwargs)\n            cache[key] = result\n            print(f\"     {func.__name__} \uacb0\uacfc \uce90\uc2dc\ub428\")\n            return result\n\n        wrapper.cache = cache\n        wrapper.clear_cache = lambda: cache.clear()\n        return wrapper\n\n    @staticmethod\n    def validation_decorator(validator):\n        \"\"\"\uc778\uc218 \uac80\uc99d \ub370\ucf54\ub808\uc774\ud130\"\"\"\n        def decorator(func):\n            import functools\n\n            @functools.wraps(func)\n            def wrapper(*args, **kwargs):\n                if not validator(*args, **kwargs):\n                    raise ValueError(f\"Validation failed for {func.__name__}\")\n                return func(*args, **kwargs)\n\n            return wrapper\n        return decorator\n\n# \ubbf9\uc2a4\uc778 \ud074\ub798\uc2a4\ub4e4\nclass LoggingMixin:\n    \"\"\"\ub85c\uae45 \uae30\ub2a5 \ubbf9\uc2a4\uc778\"\"\"\n\n    def log(self, message):\n        \"\"\"\ub85c\uadf8 \uba54\uc2dc\uc9c0 \ucd9c\ub825\"\"\"\n        class_name = self.__class__.__name__\n        print(f\"   [{class_name}] {message}\")\n\n    def log_method_call(self, method_name, *args, **kwargs):\n        \"\"\"\uba54\uc11c\ub4dc \ud638\ucd9c \ub85c\uae45\"\"\"\n        self.log(f\"\uba54\uc11c\ub4dc '{method_name}' \ud638\ucd9c\ub428: args={args}, kwargs={kwargs}\")\n\nclass SerializationMixin:\n    \"\"\"\uc9c1\ub82c\ud654 \uae30\ub2a5 \ubbf9\uc2a4\uc778\"\"\"\n\n    def to_dict(self):\n        \"\"\"\uac1d\uccb4\ub97c \ub515\uc154\ub108\ub9ac\ub85c \ubcc0\ud658\"\"\"\n        result = {}\n        for key, value in self.__dict__.items():\n            if not key.startswith('_'):\n                result[key] = value\n        return result\n\n    def from_dict(self, data):\n        \"\"\"\ub515\uc154\ub108\ub9ac\uc5d0\uc11c \uac1d\uccb4 \ubcf5\uc6d0\"\"\"\n        for key, value in data.items():\n            setattr(self, key, value)\n        return self\n\n    def to_json(self):\n        \"\"\"JSON \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\"\"\"\n        import json\n        return json.dumps(self.to_dict())\n\nclass ValidationMixin:\n    \"\"\"\uac80\uc99d \uae30\ub2a5 \ubbf9\uc2a4\uc778\"\"\"\n\n    def validate(self):\n        \"\"\"\uac1d\uccb4 \uc720\ud6a8\uc131 \uac80\uc0ac\"\"\"\n        validation_rules = getattr(self, '_validation_rules', {})\n\n        for field, rule in validation_rules.items():\n            value = getattr(self, field, None)\n            if not rule(value):\n                raise ValueError(f\"Validation failed for field '{field}': {value}\")\n\n        return True\n\n    def add_validation_rule(self, field, rule):\n        \"\"\"\uac80\uc99d \uaddc\uce59 \ucd94\uac00\"\"\"\n        if not hasattr(self, '_validation_rules'):\n            self._validation_rules = {}\n        self._validation_rules[field] = rule\n\ndef demonstrate_class_modification():\n    \"\"\"\ud074\ub798\uc2a4 \uc218\uc815\uacfc \ud655\uc7a5 \uc2dc\uc5f0\"\"\"\n    modifier = ClassModifier()\n\n    # \uae30\ubcf8 \ud074\ub798\uc2a4 \uc815\uc758\n    class Person:\n        def __init__(self, name, age):\n            self.name = name\n            self.age = age\n\n        def greet(self):\n            return f\"\uc548\ub155\ud558\uc138\uc694, \uc800\ub294 {self.name}\uc785\ub2c8\ub2e4.\"\n\n    print(\"\\n1. \uba54\uc11c\ub4dc \ub3d9\uc801 \ucd94\uac00:\")\n\n    # \uc0c8 \uba54\uc11c\ub4dc \uc815\uc758\n    def introduce(self):\n        return f\"\uc81c \uc774\ub984\uc740 {self.name}\uc774\uace0, \ub098\uc774\ub294 {self.age}\uc138\uc785\ub2c8\ub2e4.\"\n\n    def calculate_birth_year(self):\n        import datetime\n        current_year = datetime.datetime.now().year\n        return current_year - self.age\n\n    # \uba54\uc11c\ub4dc \ucd94\uac00\n    modifier.add_method(Person, 'introduce', introduce)\n    modifier.add_method(Person, 'calculate_birth_year', calculate_birth_year)\n\n    # \ucd94\uac00\ub41c \uba54\uc11c\ub4dc \uc0ac\uc6a9\n    person = Person(\"Alice\", 30)\n    print(f\"   \uc778\uc0ac: {person.greet()}\")\n    print(f\"   \uc18c\uac1c: {person.introduce()}\")\n    print(f\"   \ucd9c\uc0dd\ub144\ub3c4: {person.calculate_birth_year()}\")\n\n    print(\"\\n2. \ud504\ub85c\ud37c\ud2f0 \ub3d9\uc801 \ucd94\uac00:\")\n\n    # \ud504\ub85c\ud37c\ud2f0 getter/setter \uc815\uc758\n    def full_name_getter(self):\n        return getattr(self, '_full_name', f\"{self.name}\")\n\n    def full_name_setter(self, value):\n        self._full_name = value\n\n    # \ud504\ub85c\ud37c\ud2f0 \ucd94\uac00\n    modifier.add_property(Person, 'full_name', full_name_getter, full_name_setter)\n\n    person.full_name = \"Alice Smith\"\n    print(f\"   \uc804\uccb4 \uc774\ub984: {person.full_name}\")\n\n    print(\"\\n3. \uba54\uc11c\ub4dc \ubabd\ud0a4 \ud328\uce58:\")\n\n    # \uc6d0\ubcf8 greet \uba54\uc11c\ub4dc \uac1c\uc120\n    def enhanced_greet(self):\n        original_greet = getattr(self, '_original_greet', lambda: \"\uc548\ub155\ud558\uc138\uc694!\")\n        basic_greeting = original_greet()\n        return f\"{basic_greeting} \uc624\ub298 \ud558\ub8e8\ub3c4 \uc88b\uc740 \ud558\ub8e8 \ub418\uc138\uc694!\"\n\n    modifier.monkey_patch(Person, 'greet', enhanced_greet)\n\n    print(f\"   \uac1c\uc120\ub41c \uc778\uc0ac: {person.greet()}\")\n\n    print(\"\\n4. \ubbf9\uc2a4\uc778 \ucd94\uac00:\")\n\n    # \uc0c8\ub85c\uc6b4 \ud074\ub798\uc2a4\uc5d0 \ubbf9\uc2a4\uc778 \ucd94\uac00\n    class Product:\n        def __init__(self, name, price):\n            self.name = name\n            self.price = price\n\n    # \ubbf9\uc2a4\uc778\ub4e4 \ucd94\uac00\n    modifier.add_mixin(Product, LoggingMixin)\n    modifier.add_mixin(Product, SerializationMixin)\n    modifier.add_mixin(Product, ValidationMixin)\n\n    product = Product(\"Laptop\", 1000)\n\n    # \ubbf9\uc2a4\uc778 \uae30\ub2a5 \uc0ac\uc6a9\n    product.log(\"\uc0c1\ud488\uc774 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4\")\n\n    # \uc9c1\ub82c\ud654\n    product.to_dict()\n    product.to_json()\n\n    # \uac80\uc99d \uaddc\uce59 \ucd94\uac00\n    product.add_validation_rule('price', lambda x: x &gt; 0)\n    product.add_validation_rule('name', lambda x: len(x) &gt; 0)\n\n    try:\n        product.validate()\n        print(f\"   \uac80\uc99d \uc131\uacf5\")\n\n        product.price = -100\n        product.validate()  # \uc624\ub958 \ubc1c\uc0dd\n    except ValueError as e:\n        print(f\"   \uac80\uc99d \uc624\ub958: {e}\")\n\n    print(\"\\n5. \uba54\uc11c\ub4dc \ub370\ucf54\ub808\uc774\uc158:\")\n\n    # \uc0c8 \ud074\ub798\uc2a4\uc5d0 \ub370\ucf54\ub808\uc774\uc158 \uc801\uc6a9\n    class Calculator:\n        def __init__(self):\n            self.result = 0\n\n        def add(self, value):\n            self.result += value\n            return self.result\n\n        def multiply(self, value):\n            self.result *= value\n            return self.result\n\n    # \uba54\uc11c\ub4dc\uc5d0 \ub370\ucf54\ub808\uc774\ud130 \uc801\uc6a9\n    Calculator.add = MethodDecorator.timing_decorator(Calculator.add)\n    Calculator.multiply = MethodDecorator.caching_decorator(Calculator.multiply)\n\n    calc = Calculator()\n\n    # \uc2dc\uac04 \uce21\uc815\n    calc.add(10)\n    calc.multiply(3)\n\n    # \uce90\uc2f1 \ud14c\uc2a4\ud2b8\n    result1 = calc.add(10)\n    result2 = calc.add(10)  # \uce90\uc2dc\uc5d0\uc11c \ubc18\ud658\n\n    print(f\"   \uacc4\uc0b0 \uacb0\uacfc: {result1}\")\n\n    # \uac80\uc99d \ud14c\uc2a4\ud2b8\n    try:\n        calc.multiply(2)\n        calc.multiply(-1)  # \uc624\ub958 \ubc1c\uc0dd\n    except ValueError as e:\n        print(f\"   \uac80\uc99d \uc624\ub958: {e}\")\n\n    # \uc218\uc815 \ud788\uc2a4\ud1a0\ub9ac \ud655\uc778\n    print(f\"\\n\uc218\uc815 \ud788\uc2a4\ud1a0\ub9ac:\")\n    for action, cls_name, item_name in modifier.get_modification_history():\n        print(f\"   {action}: {cls_name}.{item_name}\")\n\ndemonstrate_class_modification()\n</code></pre>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#6","title":"6. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#1-orm","title":"\uc5f0\uc2b5 1: ORM \uc2a4\ud0c0\uc77c \uba54\ud0c0\ud074\ub798\uc2a4","text":"<p>\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378\uc744 \uc704\ud55c ORM \uc2a4\ud0c0\uc77c \uba54\ud0c0\ud074\ub798\uc2a4\ub97c \uad6c\ud604\ud558\uc138\uc694: - \ud544\ub4dc \uc790\ub3d9 \ub4f1\ub85d - \ucffc\ub9ac \uba54\uc11c\ub4dc \uc790\ub3d9 \uc0dd\uc131 - \uc720\ud6a8\uc131 \uac80\uc0ac \ud1b5\ud569</p>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#2_1","title":"\uc5f0\uc2b5 2: \uc2a4\ub9c8\ud2b8 \ud504\ub85c\ud37c\ud2f0 \uc2dc\uc2a4\ud15c","text":"<p>\uace0\uae09 \ud504\ub85c\ud37c\ud2f0 \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694: - \ud0c0\uc785 \uac80\uc99d\uacfc \ubcc0\ud658 - \ubcc0\uacbd \uc774\ubca4\ud2b8 \uc2dc\uc2a4\ud15c - \uc758\uc874\uc131 \uccb4\uc778 \uad00\ub9ac</p>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#3-api","title":"\uc5f0\uc2b5 3: \ub3d9\uc801 API \ud074\ub77c\uc774\uc5b8\ud2b8","text":"<p>\uba54\ud0c0\ud074\ub798\uc2a4\uc640 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ud65c\uc6a9\ud55c \ub3d9\uc801 API \ud074\ub77c\uc774\uc5b8\ud2b8\ub97c \uad6c\ud604\ud558\uc138\uc694: - \uba54\uc11c\ub4dc \uc790\ub3d9 \uc0dd\uc131 - \uc694\uccad/\uc751\ub2f5 \ub85c\uae45 - \uc5d0\ub7ec \ucc98\ub9ac \uc790\ub3d9\ud654</p>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#4","title":"\uc5f0\uc2b5 4: \ud504\ub808\uc784\uc6cc\ud06c \ub514\uc790\uc778","text":"<p>\uba54\ud0c0\ud074\ub798\uc2a4 \uae30\ubc18 \uc6f9 \ud504\ub808\uc784\uc6cc\ud06c\uc758 \uae30\ucd08\ub97c \uc124\uacc4\ud558\uc138\uc694: - \ub77c\uc6b0\ud305 \uc790\ub3d9 \ub4f1\ub85d - \ubbf8\ub4e4\uc6e8\uc5b4 \uccb4\uc778 - \uc124\uc815 \uad00\ub9ac \uc2dc\uc2a4\ud15c</p>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\uba54\ud0c0\ud074\ub798\uc2a4 \uae30\ucd08: \ud074\ub798\uc2a4\ub3c4 \uac1d\uccb4, \ud0c0\uc785 \uc2dc\uc2a4\ud15c, \uba54\ud0c0\ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870</li> <li>\ucee4\uc2a4\ud140 \uba54\ud0c0\ud074\ub798\uc2a4: \uc2f1\uae00\ud1a4, \uac80\uc99d, \uc18d\uc131 \ucd94\uc801 \ub4f1 \ub2e4\uc591\ud55c \ud328\ud134 \uad6c\ud604</li> <li>\ub514\uc2a4\ud06c\ub9bd\ud130 \ud504\ub85c\ud1a0\ucf5c: get, set, delete \uba54\uc11c\ub4dc \ud65c\uc6a9</li> <li>\uace0\uae09 \ub514\uc2a4\ud06c\ub9bd\ud130: \uce90\uc2f1, \uc9c0\uc5f0 \ub85c\ub529, \uac80\uc99d, \uad00\ucc30 \uac00\ub2a5\ud55c \ud504\ub85c\ud37c\ud2f0</li> <li>property \uace0\uae09 \ud65c\uc6a9: \uacc4\uc0b0\ub41c \ud504\ub85c\ud37c\ud2f0, \ub3d9\uc801 \ud504\ub85c\ud37c\ud2f0 \uc0dd\uc131</li> <li>new vs init: \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 \uc81c\uc5b4, \ubd88\ubcc0 \uac1d\uccb4, \ud329\ud1a0\ub9ac \ud328\ud134</li> <li>\ub3d9\uc801 \ud074\ub798\uc2a4: \ub7f0\ud0c0\uc784 \ud074\ub798\uc2a4 \uc0dd\uc131, \uc218\uc815, \ud655\uc7a5 \uae30\ubc95</li> <li>\uc2e4\ubb34 \ud328\ud134: ORM, \ud504\ub85d\uc2dc, \ubbf9\uc2a4\uc778, \ub370\ucf54\ub808\uc774\ud130 \ud65c\uc6a9</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \uace0\uae09 \ub370\ucf54\ub808\uc774\ud130\uc640 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub97c \ud1b5\ud55c \ub354\uc6b1 \uc815\uad50\ud55c \ucf54\ub4dc \uc81c\uc5b4 \uae30\ubc95\uc744 \ud559\uc2b5\ud558\uac8c \ub429\ub2c8\ub2e4.</p>"},{"location":"tutorials/advanced/chapter02_metaclasses_descriptors/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\uba54\ud0c0\ud074\ub798\uc2a4\ub294 \ud074\ub798\uc2a4 \uc0dd\uc131 \uacfc\uc815\uc744 \uc81c\uc5b4\ud558\ub294 \uac15\ub825\ud55c \ub3c4\uad6c\uc785\ub2c8\ub2e4</li> <li>\ub514\uc2a4\ud06c\ub9bd\ud130\ub294 \uc18d\uc131 \uc811\uadfc\uc744 \uc138\ubc00\ud558\uac8c \uc81c\uc5b4\ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4</li> <li>property\ub294 \uac04\ub2e8\ud558\uba74\uc11c\ub3c4 \uac15\ub825\ud55c \uc18d\uc131 \uad00\ub9ac \uba54\ucee4\ub2c8\uc998\uc785\ub2c8\ub2e4</li> <li>__new__\ub294 \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131, __init__\ub294 \ucd08\uae30\ud654\ub97c \ub2f4\ub2f9\ud569\ub2c8\ub2e4</li> <li>\ub3d9\uc801 \ud074\ub798\uc2a4 \uc0dd\uc131\uacfc \uc218\uc815\uc740 \uc720\uc5f0\ud55c \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uac00\ub2a5\ud558\uac8c \ud569\ub2c8\ub2e4</li> <li>\uc774\ub7ec\ud55c \uace0\uae09 \uae30\ubc95\ub4e4\uc740 \ud504\ub808\uc784\uc6cc\ud06c\uc640 \ub77c\uc774\ube0c\ub7ec\ub9ac \uac1c\ubc1c\uc5d0 \ud544\uc218\uc801\uc785\ub2c8\ub2e4 </li> </ul>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/","title":"Chapter 3: \uace0\uae09 \ub370\ucf54\ub808\uc774\ud130\uc640 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800","text":""},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \ud074\ub798\uc2a4 \uae30\ubc18 \ub370\ucf54\ub808\uc774\ud130\ub97c \uc124\uacc4\ud558\uace0 \uad6c\ud604\ud558\uae30 - \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub294 \ub370\ucf54\ub808\uc774\ud130, functools.wraps, \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uace0\uae09 \ud65c\uc6a9, contextlib \ubaa8\ub4c8, \uc911\ucca9 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \ub4f1\uc744 \ub2e4\ub8f9\ub2c8\ub2e4.</p>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#1","title":"1. \ud074\ub798\uc2a4 \uae30\ubc18 \ub370\ucf54\ub808\uc774\ud130","text":""},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#11","title":"1.1 \uae30\ubcf8 \ud074\ub798\uc2a4 \ub370\ucf54\ub808\uc774\ud130","text":"<pre><code>print(\"=== \ud074\ub798\uc2a4 \uae30\ubc18 \ub370\ucf54\ub808\uc774\ud130 ===\")\n\nclass CallCounter:\n    \"\"\"\ud568\uc218 \ud638\ucd9c \ud69f\uc218\ub97c \ucd94\uc801\ud558\ub294 \ud074\ub798\uc2a4 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, func):\n        self.func = func\n        self.count = 0\n        self.call_history = []\n        # \uc6d0\ubcf8 \ud568\uc218\uc758 \uba54\ud0c0\ub370\uc774\ud130 \ubcf4\uc874\n        self.__name__ = func.__name__\n        self.__doc__ = func.__doc__\n        self.__dict__.update(func.__dict__)\n\n    def __call__(self, *args, **kwargs):\n        \"\"\"\ub370\ucf54\ub808\uc774\ud130\uac00 \uc801\uc6a9\ub41c \ud568\uc218\uac00 \ud638\ucd9c\ub420 \ub54c \uc2e4\ud589\"\"\"\n        self.count += 1\n\n        # \ud638\ucd9c \uc815\ubcf4 \uae30\ub85d\n        import time\n        call_info = {\n            'call_number': self.count,\n            'timestamp': time.time(),\n            'args': args,\n            'kwargs': kwargs\n        }\n        self.call_history.append(call_info)\n\n        print(f\"   \ud568\uc218 '{self.func.__name__}' \ud638\ucd9c\ub428 (\ucd1d {self.count}\ud68c)\")\n\n        # \uc6d0\ubcf8 \ud568\uc218 \uc2e4\ud589\n        result = self.func(*args, **kwargs)\n\n        # \uacb0\uacfc \uae30\ub85d\n        call_info['result'] = result\n        call_info['execution_time'] = time.time() - call_info['timestamp']\n\n        return result\n\n    def get_stats(self):\n        \"\"\"\ud638\ucd9c \ud1b5\uacc4 \ubc18\ud658\"\"\"\n        return {\n            'total_calls': self.count,\n            'average_execution_time': sum(call['execution_time'] \n                                        for call in self.call_history) / len(self.call_history) \n                                        if self.call_history else 0,\n            'call_history': self.call_history.copy()\n        }\n\n    def reset_stats(self):\n        \"\"\"\ud1b5\uacc4 \ucd08\uae30\ud654\"\"\"\n        self.count = 0\n        self.call_history.clear()\n\nclass TimingDecorator:\n    \"\"\"\uc2e4\ud589 \uc2dc\uac04\uc744 \uce21\uc815\ud558\ub294 \uace0\uae09 \ud074\ub798\uc2a4 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, precision=4, unit='seconds'):\n        self.precision = precision\n        self.unit = unit\n        self.total_time = 0\n        self.call_count = 0\n        self.min_time = float('inf')\n        self.max_time = 0\n\n    def __call__(self, func):\n        \"\"\"\uc2e4\uc81c \ub370\ucf54\ub808\uc774\ud130 \uc801\uc6a9\"\"\"\n        import functools\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            import time\n\n            start_time = time.perf_counter()\n            try:\n                result = func(*args, **kwargs)\n                return result\n            finally:\n                end_time = time.perf_counter()\n                execution_time = end_time - start_time\n\n                # \ud1b5\uacc4 \uc5c5\ub370\uc774\ud2b8\n                self.total_time += execution_time\n                self.call_count += 1\n                self.min_time = min(self.min_time, execution_time)\n                self.max_time = max(self.max_time, execution_time)\n\n                # \uc2dc\uac04 \ub2e8\uc704 \ubcc0\ud658\n                if self.unit == 'milliseconds':\n                    display_time = execution_time * 1000\n                    unit_symbol = 'ms'\n                elif self.unit == 'microseconds':\n                    display_time = execution_time * 1000000\n                    unit_symbol = '\u03bcs'\n                else:\n                    display_time = execution_time\n                    unit_symbol = 's'\n\n                print(f\"   {func.__name__}: {display_time:.{self.precision}f}{unit_symbol}\")\n\n        # \ud1b5\uacc4 \uba54\uc11c\ub4dc \ucd94\uac00\n        wrapper.get_timing_stats = self.get_timing_stats\n        wrapper.reset_timing_stats = self.reset_timing_stats\n\n        return wrapper\n\n    def get_timing_stats(self):\n        \"\"\"\ud0c0\uc774\ubc0d \ud1b5\uacc4 \ubc18\ud658\"\"\"\n        if self.call_count == 0:\n            return {'no_calls': True}\n\n        return {\n            'total_calls': self.call_count,\n            'total_time': self.total_time,\n            'average_time': self.total_time / self.call_count,\n            'min_time': self.min_time if self.min_time != float('inf') else 0,\n            'max_time': self.max_time,\n            'unit': self.unit\n        }\n\n    def reset_timing_stats(self):\n        \"\"\"\ud0c0\uc774\ubc0d \ud1b5\uacc4 \ucd08\uae30\ud654\"\"\"\n        self.total_time = 0\n        self.call_count = 0\n        self.min_time = float('inf')\n        self.max_time = 0\n\nclass RetryDecorator:\n    \"\"\"\uc7ac\uc2dc\ub3c4 \ub85c\uc9c1\uc744 \uad6c\ud604\ud558\ub294 \ud074\ub798\uc2a4 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, max_attempts=3, delay=1.0, backoff_factor=2.0, \n                 exceptions=(Exception,)):\n        self.max_attempts = max_attempts\n        self.delay = delay\n        self.backoff_factor = backoff_factor\n        self.exceptions = exceptions\n        self.attempt_history = []\n\n    def __call__(self, func):\n        import functools\n        import time\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            current_delay = self.delay\n\n            for attempt in range(1, self.max_attempts + 1):\n                try:\n                    start_time = time.time()\n                    result = func(*args, **kwargs)\n\n                    # \uc131\uacf5 \uae30\ub85d\n                    self.attempt_history.append({\n                        'attempt': attempt,\n                        'success': True,\n                        'execution_time': time.time() - start_time,\n                        'timestamp': time.time()\n                    })\n\n                    if attempt &gt; 1:\n                        print(f\"   {func.__name__}: {attempt}\ubc88\uc9f8 \uc2dc\ub3c4\uc5d0\uc11c \uc131\uacf5\")\n\n                    return result\n\n                except self.exceptions as e:\n                    # \uc2e4\ud328 \uae30\ub85d\n                    self.attempt_history.append({\n                        'attempt': attempt,\n                        'success': False,\n                        'error': str(e),\n                        'error_type': type(e).__name__,\n                        'timestamp': time.time()\n                    })\n\n                    if attempt == self.max_attempts:\n                        print(f\"   {func.__name__}: \ubaa8\ub4e0 \uc2dc\ub3c4 \uc2e4\ud328 ({self.max_attempts}\ud68c)\")\n                        raise\n                    else:\n                        print(f\"   {func.__name__}: {attempt}\ubc88\uc9f8 \uc2dc\ub3c4 \uc2e4\ud328, {current_delay}\ucd08 \ud6c4 \uc7ac\uc2dc\ub3c4...\")\n                        time.sleep(current_delay)\n                        current_delay *= self.backoff_factor\n\n        # \ud1b5\uacc4 \uba54\uc11c\ub4dc \ucd94\uac00\n        wrapper.get_retry_stats = lambda: self.get_retry_stats()\n        wrapper.reset_retry_stats = lambda: self.reset_retry_stats()\n\n        return wrapper\n\n    def get_retry_stats(self):\n        \"\"\"\uc7ac\uc2dc\ub3c4 \ud1b5\uacc4 \ubc18\ud658\"\"\"\n        if not self.attempt_history:\n            return {'no_attempts': True}\n\n        total_attempts = len(self.attempt_history)\n        successful_calls = len([h for h in self.attempt_history if h['success']])\n        failed_calls = total_attempts - successful_calls\n\n        return {\n            'total_attempts': total_attempts,\n            'successful_calls': successful_calls,\n            'failed_calls': failed_calls,\n            'success_rate': successful_calls / total_attempts * 100,\n            'attempt_history': self.attempt_history.copy()\n        }\n\n    def reset_retry_stats(self):\n        \"\"\"\uc7ac\uc2dc\ub3c4 \ud1b5\uacc4 \ucd08\uae30\ud654\"\"\"\n        self.attempt_history.clear()\n\ndef demonstrate_class_decorators():\n    \"\"\"\ud074\ub798\uc2a4 \uae30\ubc18 \ub370\ucf54\ub808\uc774\ud130 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \ud638\ucd9c \uce74\uc6b4\ud130 \ub370\ucf54\ub808\uc774\ud130:\")\n\n    @CallCounter\n    def fibonacci(n):\n        \"\"\"\ud53c\ubcf4\ub098\uce58 \uc218 \uacc4\uc0b0\"\"\"\n        if n &lt;= 1:\n            return n\n        return fibonacci(n-1) + fibonacci(n-2)\n\n    # \ud568\uc218 \ud638\ucd9c\n    result = fibonacci(5)\n    print(f\"   fibonacci(5) = {result}\")\n\n    # \ud1b5\uacc4 \ud655\uc778\n    stats = fibonacci.get_stats()\n    print(f\"   \ucd1d \ud638\ucd9c \ud69f\uc218: {stats['total_calls']}\")\n    print(f\"   \ud3c9\uade0 \uc2e4\ud589 \uc2dc\uac04: {stats['average_execution_time']:.6f}\ucd08\")\n\n    print(\"\\n2. \ud0c0\uc774\ubc0d \ub370\ucf54\ub808\uc774\ud130:\")\n\n    @TimingDecorator(precision=2, unit='milliseconds')\n    def matrix_multiply(size):\n        \"\"\"\ub9e4\ud2b8\ub9ad\uc2a4 \uacf1\uc148 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        import random\n        matrix_a = [[random.random() for _ in range(size)] for _ in range(size)]\n        matrix_b = [[random.random() for _ in range(size)] for _ in range(size)]\n\n        result = [[0 for _ in range(size)] for _ in range(size)]\n        for i in range(size):\n            for j in range(size):\n                for k in range(size):\n                    result[i][j] += matrix_a[i][k] * matrix_b[k][j]\n\n        return result\n\n    # \uc5ec\ub7ec \ubc88 \uc2e4\ud589\n    for size in [10, 20, 30]:\n        matrix_multiply(size)\n\n    # \ud0c0\uc774\ubc0d \ud1b5\uacc4 \ud655\uc778\n    timing_stats = matrix_multiply.get_timing_stats()\n    print(f\"   \ud3c9\uade0 \uc2e4\ud589 \uc2dc\uac04: {timing_stats['average_time']*1000:.2f}ms\")\n    print(f\"   \ucd5c\uc18c/\ucd5c\ub300 \uc2dc\uac04: {timing_stats['min_time']*1000:.2f}ms / {timing_stats['max_time']*1000:.2f}ms\")\n\n    print(\"\\n3. \uc7ac\uc2dc\ub3c4 \ub370\ucf54\ub808\uc774\ud130:\")\n\n    @RetryDecorator(max_attempts=3, delay=0.1, exceptions=(ValueError, RuntimeError))\n    def unreliable_function(success_rate=0.3):\n        \"\"\"\ub54c\ub54c\ub85c \uc2e4\ud328\ud558\ub294 \ud568\uc218\"\"\"\n        import random\n        if random.random() &lt; success_rate:\n            return \"\uc131\uacf5!\"\n        else:\n            raise ValueError(\"\ub79c\ub364 \uc2e4\ud328\")\n\n    try:\n        result = unreliable_function(0.6)\n        print(f\"   \uacb0\uacfc: {result}\")\n    except ValueError as e:\n        print(f\"   \ucd5c\uc885 \uc2e4\ud328: {e}\")\n\n    # \uc7ac\uc2dc\ub3c4 \ud1b5\uacc4 \ud655\uc778\n    retry_stats = unreliable_function.get_retry_stats()\n    print(f\"   \uc131\uacf5\ub960: {retry_stats['success_rate']:.1f}%\")\n\ndemonstrate_class_decorators()\n</code></pre>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#12","title":"1.2 \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub294 \ud074\ub798\uc2a4 \ub370\ucf54\ub808\uc774\ud130","text":"<pre><code>print(\"\\n=== \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub294 \ud074\ub798\uc2a4 \ub370\ucf54\ub808\uc774\ud130 ===\")\n\nclass CacheDecorator:\n    \"\"\"\uce90\uc2f1 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\ub294 \uace0\uae09 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, max_size=128, ttl=None, cache_key_func=None):\n        self.max_size = max_size\n        self.ttl = ttl  # Time To Live (\ucd08)\n        self.cache_key_func = cache_key_func or self._default_key_func\n        self.cache = {}\n        self.access_order = []  # LRU \uad6c\ud604\uc6a9\n        self.access_times = {}  # TTL \uad6c\ud604\uc6a9\n        self.hit_count = 0\n        self.miss_count = 0\n\n    def _default_key_func(self, func, args, kwargs):\n        \"\"\"\uae30\ubcf8 \uce90\uc2dc \ud0a4 \uc0dd\uc131 \ud568\uc218\"\"\"\n        return f\"{func.__name__}:{hash((args, tuple(sorted(kwargs.items()))))}\"\n\n    def _is_expired(self, key):\n        \"\"\"\uce90\uc2dc \ud56d\ubaa9\uc774 \ub9cc\ub8cc\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\"\"\"\n        if self.ttl is None:\n            return False\n\n        import time\n        access_time = self.access_times.get(key)\n        return access_time is None or (time.time() - access_time) &gt; self.ttl\n\n    def _evict_lru(self):\n        \"\"\"LRU \uc815\ucc45\uc5d0 \ub530\ub77c \uac00\uc7a5 \uc624\ub798\ub41c \ud56d\ubaa9 \uc81c\uac70\"\"\"\n        if self.access_order:\n            oldest_key = self.access_order.pop(0)\n            self.cache.pop(oldest_key, None)\n            self.access_times.pop(oldest_key, None)\n\n    def _update_access(self, key):\n        \"\"\"\uc811\uadfc \uc21c\uc11c \uc5c5\ub370\uc774\ud2b8\"\"\"\n        import time\n\n        if key in self.access_order:\n            self.access_order.remove(key)\n        self.access_order.append(key)\n        self.access_times[key] = time.time()\n\n    def __call__(self, func):\n        import functools\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            # \uce90\uc2dc \ud0a4 \uc0dd\uc131\n            cache_key = self.cache_key_func(func, args, kwargs)\n\n            # \uce90\uc2dc \ub9cc\ub8cc \ud655\uc778\n            if cache_key in self.cache and self._is_expired(cache_key):\n                self.cache.pop(cache_key, None)\n                self.access_times.pop(cache_key, None)\n                if cache_key in self.access_order:\n                    self.access_order.remove(cache_key)\n\n            # \uce90\uc2dc \ud788\ud2b8 \ud655\uc778\n            if cache_key in self.cache:\n                self.hit_count += 1\n                self._update_access(cache_key)\n                print(f\"   \uce90\uc2dc \ud788\ud2b8: {func.__name__}\")\n                return self.cache[cache_key]\n\n            # \uce90\uc2dc \ubbf8\uc2a4 - \ud568\uc218 \uc2e4\ud589\n            self.miss_count += 1\n            print(f\"   \uce90\uc2dc \ubbf8\uc2a4: {func.__name__}\")\n            result = func(*args, **kwargs)\n\n            # \uce90\uc2dc \ud06c\uae30 \uc81c\ud55c \ud655\uc778\n            if len(self.cache) &gt;= self.max_size:\n                self._evict_lru()\n\n            # \uacb0\uacfc \uce90\uc2dc\n            self.cache[cache_key] = result\n            self._update_access(cache_key)\n\n            return result\n\n        # \uce90\uc2dc \uad00\ub9ac \uba54\uc11c\ub4dc \ucd94\uac00\n        wrapper.cache_info = lambda: self.get_cache_info()\n        wrapper.cache_clear = lambda: self.clear_cache()\n        wrapper.cache_size = lambda: len(self.cache)\n\n        return wrapper\n\n    def get_cache_info(self):\n        \"\"\"\uce90\uc2dc \uc815\ubcf4 \ubc18\ud658\"\"\"\n        total_calls = self.hit_count + self.miss_count\n        hit_rate = (self.hit_count / total_calls * 100) if total_calls &gt; 0 else 0\n\n        return {\n            'hits': self.hit_count,\n            'misses': self.miss_count,\n            'hit_rate': hit_rate,\n            'current_size': len(self.cache),\n            'max_size': self.max_size,\n            'ttl': self.ttl\n        }\n\n    def clear_cache(self):\n        \"\"\"\uce90\uc2dc \ucd08\uae30\ud654\"\"\"\n        self.cache.clear()\n        self.access_order.clear()\n        self.access_times.clear()\n        self.hit_count = 0\n        self.miss_count = 0\n\nclass ValidationDecorator:\n    \"\"\"\uc785\ub825 \uac80\uc99d \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, **validators):\n        self.validators = validators\n        self.validation_history = []\n\n    def __call__(self, func):\n        import functools\n        import inspect\n\n        # \ud568\uc218 \uc2dc\uadf8\ub2c8\ucc98 \ubd84\uc11d\n        sig = inspect.signature(func)\n        param_names = list(sig.parameters.keys())\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            import time\n\n            # \uc704\uce58 \uc778\uc218\ub97c \ud0a4\uc6cc\ub4dc \uc778\uc218\ub85c \ubcc0\ud658\n            bound_args = sig.bind(*args, **kwargs)\n            bound_args.apply_defaults()\n\n            validation_results = []\n\n            # \uac01 \ub9e4\uac1c\ubcc0\uc218 \uac80\uc99d\n            for param_name, validator in self.validators.items():\n                if param_name in bound_args.arguments:\n                    value = bound_args.arguments[param_name]\n\n                    try:\n                        if callable(validator):\n                            is_valid = validator(value)\n                            error_msg = None\n                        else:\n                            # \ub515\uc154\ub108\ub9ac \ud615\ud0dc\uc758 \uac80\uc99d \uaddc\uce59\n                            is_valid = True\n                            error_msg = None\n\n                            if 'type' in validator:\n                                if not isinstance(value, validator['type']):\n                                    is_valid = False\n                                    error_msg = f\"Expected {validator['type'].__name__}, got {type(value).__name__}\"\n\n                            if is_valid and 'min' in validator:\n                                if value &lt; validator['min']:\n                                    is_valid = False\n                                    error_msg = f\"Value {value} is less than minimum {validator['min']}\"\n\n                            if is_valid and 'max' in validator:\n                                if value &gt; validator['max']:\n                                    is_valid = False\n                                    error_msg = f\"Value {value} exceeds maximum {validator['max']}\"\n\n                            if is_valid and 'pattern' in validator:\n                                import re\n                                if not re.match(validator['pattern'], str(value)):\n                                    is_valid = False\n                                    error_msg = f\"Value {value} doesn't match pattern {validator['pattern']}\"\n\n                        validation_results.append({\n                            'param': param_name,\n                            'value': value,\n                            'valid': is_valid,\n                            'error': error_msg\n                        })\n\n                        if not is_valid:\n                            error_message = error_msg or f\"Validation failed for parameter '{param_name}'\"\n                            self.validation_history.append({\n                                'timestamp': time.time(),\n                                'function': func.__name__,\n                                'param': param_name,\n                                'value': value,\n                                'error': error_message\n                            })\n                            raise ValueError(error_message)\n\n                    except Exception as e:\n                        validation_results.append({\n                            'param': param_name,\n                            'value': value,\n                            'valid': False,\n                            'error': str(e)\n                        })\n                        raise\n\n            # \ubaa8\ub4e0 \uac80\uc99d \ud1b5\uacfc \uc2dc \ud568\uc218 \uc2e4\ud589\n            return func(*args, **kwargs)\n\n        # \uac80\uc99d \ud1b5\uacc4 \uba54\uc11c\ub4dc \ucd94\uac00\n        wrapper.get_validation_history = lambda: self.validation_history.copy()\n        wrapper.clear_validation_history = lambda: self.validation_history.clear()\n\n        return wrapper\n\nclass RateLimitDecorator:\n    \"\"\"API \ud638\ucd9c \uc81c\ud55c \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, max_calls=100, time_window=60, per_user=False):\n        self.max_calls = max_calls\n        self.time_window = time_window  # \ucd08 \ub2e8\uc704\n        self.per_user = per_user\n        self.call_history = {} if per_user else []\n        self.blocked_calls = 0\n\n    def _get_user_key(self, args, kwargs):\n        \"\"\"\uc0ac\uc6a9\uc790 \uc2dd\ubcc4\ud0a4 \uc0dd\uc131\"\"\"\n        if 'user_id' in kwargs:\n            return kwargs['user_id']\n        elif args and hasattr(args[0], 'user_id'):\n            return args[0].user_id\n        else:\n            return 'default'\n\n    def _clean_old_calls(self, call_list, current_time):\n        \"\"\"\uc2dc\uac04 \uc708\ub3c4\uc6b0 \ubc16\uc758 \uc624\ub798\ub41c \ud638\ucd9c \uae30\ub85d \uc81c\uac70\"\"\"\n        cutoff_time = current_time - self.time_window\n        return [call_time for call_time in call_list if call_time &gt; cutoff_time]\n\n    def __call__(self, func):\n        import functools\n        import time\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            current_time = time.time()\n\n            if self.per_user:\n                user_key = self._get_user_key(args, kwargs)\n\n                if user_key not in self.call_history:\n                    self.call_history[user_key] = []\n\n                # \uc0ac\uc6a9\uc790\ubcc4 \ud638\ucd9c \uae30\ub85d \uc815\ub9ac\n                self.call_history[user_key] = self._clean_old_calls(\n                    self.call_history[user_key], current_time\n                )\n\n                user_calls = self.call_history[user_key]\n\n                if len(user_calls) &gt;= self.max_calls:\n                    self.blocked_calls += 1\n                    remaining_time = self.time_window - (current_time - user_calls[0])\n                    raise RuntimeError(\n                        f\"Rate limit exceeded for user {user_key}. \"\n                        f\"Try again in {remaining_time:.1f} seconds\"\n                    )\n\n                # \ud638\ucd9c \uae30\ub85d \ucd94\uac00\n                user_calls.append(current_time)\n            else:\n                # \uc804\uc5ed \ud638\ucd9c \uc81c\ud55c\n                self.call_history = self._clean_old_calls(self.call_history, current_time)\n\n                if len(self.call_history) &gt;= self.max_calls:\n                    self.blocked_calls += 1\n                    remaining_time = self.time_window - (current_time - self.call_history[0])\n                    raise RuntimeError(\n                        f\"Global rate limit exceeded. \"\n                        f\"Try again in {remaining_time:.1f} seconds\"\n                    )\n\n                # \ud638\ucd9c \uae30\ub85d \ucd94\uac00\n                self.call_history.append(current_time)\n\n            print(f\"   API \ud638\ucd9c \ud5c8\uc6a9: {func.__name__}\")\n            return func(*args, **kwargs)\n\n        # \uc81c\ud55c \uc815\ubcf4 \uba54\uc11c\ub4dc \ucd94\uac00\n        wrapper.get_rate_limit_info = lambda: self.get_rate_limit_info()\n        wrapper.reset_rate_limit = lambda: self.reset_rate_limit()\n\n        return wrapper\n\n    def get_rate_limit_info(self):\n        \"\"\"\uc81c\ud55c \uc815\ubcf4 \ubc18\ud658\"\"\"\n        if self.per_user:\n            total_calls = sum(len(calls) for calls in self.call_history.values())\n            return {\n                'max_calls': self.max_calls,\n                'time_window': self.time_window,\n                'per_user': True,\n                'current_users': len(self.call_history),\n                'total_active_calls': total_calls,\n                'blocked_calls': self.blocked_calls\n            }\n        else:\n            return {\n                'max_calls': self.max_calls,\n                'time_window': self.time_window,\n                'per_user': False,\n                'current_calls': len(self.call_history),\n                'blocked_calls': self.blocked_calls\n            }\n\n    def reset_rate_limit(self):\n        \"\"\"\uc81c\ud55c \ucd08\uae30\ud654\"\"\"\n        if self.per_user:\n            self.call_history.clear()\n        else:\n            self.call_history.clear()\n        self.blocked_calls = 0\n\ndef demonstrate_parametrized_decorators():\n    \"\"\"\ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub294 \ub370\ucf54\ub808\uc774\ud130 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \uace0\uae09 \uce90\uc2dc \ub370\ucf54\ub808\uc774\ud130:\")\n\n    @CacheDecorator(max_size=5, ttl=2)\n    def expensive_calculation(x, y):\n        \"\"\"\uc2dc\uac04\uc774 \uc624\ub798 \uac78\ub9ac\ub294 \uacc4\uc0b0\"\"\"\n        import time\n        time.sleep(0.1)  # \uc2dc\ubbac\ub808\uc774\uc158\n        return x ** y\n\n    # \uce90\uc2dc \ud14c\uc2a4\ud2b8\n    print(f\"   \uacc4\uc0b0 \uacb0\uacfc: {expensive_calculation(2, 10)}\")\n    print(f\"   \uacc4\uc0b0 \uacb0\uacfc: {expensive_calculation(2, 10)}\")  # \uce90\uc2dc \ud788\ud2b8\n    print(f\"   \uacc4\uc0b0 \uacb0\uacfc: {expensive_calculation(3, 5)}\")\n\n    cache_info = expensive_calculation.cache_info()\n    print(f\"   \uce90\uc2dc \ud788\ud2b8\uc728: {cache_info['hit_rate']:.1f}%\")\n\n    print(\"\\n2. \uac80\uc99d \ub370\ucf54\ub808\uc774\ud130:\")\n\n    @ValidationDecorator(\n        age={'type': int, 'min': 0, 'max': 150},\n        name={'type': str, 'pattern': r'^[A-Za-z\\s]+$'},\n        email=lambda x: '@' in x and '.' in x\n    )\n    def register_user(name, age, email):\n        \"\"\"\uc0ac\uc6a9\uc790 \ub4f1\ub85d\"\"\"\n        return f\"\uc0ac\uc6a9\uc790 \ub4f1\ub85d: {name} ({age}\uc138, {email})\"\n\n    try:\n        result = register_user(\"Alice Smith\", 25, \"alice@example.com\")\n        print(f\"   \uc131\uacf5: {result}\")\n\n        result = register_user(\"Bob123\", 30, \"bob@example.com\")  # \uc774\ub984 \uac80\uc99d \uc2e4\ud328\n    except ValueError as e:\n        print(f\"   \uac80\uc99d \uc2e4\ud328: {e}\")\n\n    print(\"\\n3. \ud638\ucd9c \uc81c\ud55c \ub370\ucf54\ub808\uc774\ud130:\")\n\n    @RateLimitDecorator(max_calls=3, time_window=5)\n    def api_call(data):\n        \"\"\"API \ud638\ucd9c \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        return f\"API \uc751\ub2f5: {data}\"\n\n    # \ud638\ucd9c \uc81c\ud55c \ud14c\uc2a4\ud2b8\n    try:\n        for i in range(5):\n            result = api_call(f\"request_{i}\")\n            print(f\"   {result}\")\n    except RuntimeError as e:\n        print(f\"   \uc81c\ud55c \ucd08\uacfc: {e}\")\n\n    limit_info = api_call.get_rate_limit_info()\n    print(f\"   \ud604\uc7ac \ud638\ucd9c \uc218: {limit_info['current_calls']}/{limit_info['max_calls']}\")\n\ndemonstrate_parametrized_decorators()\n</code></pre>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#2-functoolswraps","title":"2. functools.wraps\uc640 \uba54\ud0c0\ub370\uc774\ud130 \ubcf4\uc874","text":""},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#21","title":"2.1 \uba54\ud0c0\ub370\uc774\ud130 \ubcf4\uc874\uc758 \uc911\uc694\uc131","text":"<pre><code>print(\"\\n=== functools.wraps\uc640 \uba54\ud0c0\ub370\uc774\ud130 \ubcf4\uc874 ===\")\n\nimport functools\nimport inspect\n\ndef without_wraps(func):\n    \"\"\"wraps\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n    def wrapper(*args, **kwargs):\n        print(f\"   \ud638\ucd9c: {func.__name__}\")\n        return func(*args, **kwargs)\n    return wrapper\n\ndef with_wraps(func):\n    \"\"\"wraps\ub97c \uc0ac\uc6a9\ud558\ub294 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(f\"   \ud638\ucd9c: {func.__name__}\")\n        return func(*args, **kwargs)\n    return wrapper\n\nclass MetadataPreservingDecorator:\n    \"\"\"\uba54\ud0c0\ub370\uc774\ud130\ub97c \uc644\uc804\ud788 \ubcf4\uc874\ud558\ub294 \uace0\uae09 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, preserve_signature=True, preserve_annotations=True):\n        self.preserve_signature = preserve_signature\n        self.preserve_annotations = preserve_annotations\n        self.call_count = 0\n\n    def __call__(self, func):\n        if self.preserve_signature:\n            @functools.wraps(func)\n            def wrapper(*args, **kwargs):\n                self.call_count += 1\n                print(f\"   \uace0\uae09 \ub370\ucf54\ub808\uc774\ud130: {func.__name__} (\ud638\ucd9c #{self.call_count})\")\n\n                # \uc778\uc218 \uac80\uc99d (\uc2dc\uadf8\ub2c8\ucc98 \ubcf4\uc874 \uc2dc)\n                sig = inspect.signature(func)\n                try:\n                    bound_args = sig.bind(*args, **kwargs)\n                    bound_args.apply_defaults()\n                    print(f\"     \uc778\uc218: {dict(bound_args.arguments)}\")\n                except TypeError as e:\n                    print(f\"     \uc778\uc218 \uc624\ub958: {e}\")\n                    raise\n\n                return func(*args, **kwargs)\n\n            # \ucd94\uac00 \uba54\ud0c0\ub370\uc774\ud130 \ubcf4\uc874\n            if self.preserve_annotations:\n                wrapper.__annotations__ = getattr(func, '__annotations__', {})\n\n            # \ucee4\uc2a4\ud140 \uc18d\uc131 \ubcf4\uc874\n            for attr in ['__module__', '__qualname__', '__dict__']:\n                if hasattr(func, attr):\n                    try:\n                        setattr(wrapper, attr, getattr(func, attr))\n                    except (AttributeError, TypeError):\n                        pass\n\n            # \uc2dc\uadf8\ub2c8\ucc98 \ubcf4\uc874\n            wrapper.__signature__ = inspect.signature(func)\n\n            return wrapper\n        else:\n            # \uc2dc\uadf8\ub2c8\ucc98 \ubcf4\uc874\ud558\uc9c0 \uc54a\ub294 \ubc84\uc804\n            def simple_wrapper(*args, **kwargs):\n                self.call_count += 1\n                print(f\"   \ub2e8\uc21c \ub370\ucf54\ub808\uc774\ud130: {func.__name__} (\ud638\ucd9c #{self.call_count})\")\n                return func(*args, **kwargs)\n\n            return simple_wrapper\n\ndef demonstrate_metadata_preservation():\n    \"\"\"\uba54\ud0c0\ub370\uc774\ud130 \ubcf4\uc874 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. wraps \uc5c6\uc774 \ub370\ucf54\ub808\uc774\ud305:\")\n\n    @without_wraps\n    def original_function(x: int, y: str = \"default\") -&gt; str:\n        \"\"\"\uc6d0\ubcf8 \ud568\uc218\uc758 \ub3c5\uc2a4\ud2b8\ub9c1\"\"\"\n        return f\"{y}: {x}\"\n\n    print(f\"   \ud568\uc218\uba85: {original_function.__name__}\")\n    print(f\"   \ub3c5\uc2a4\ud2b8\ub9c1: {original_function.__doc__}\")\n    print(f\"   \ubaa8\ub4c8: {original_function.__module__}\")\n\n    print(\"\\n2. wraps \uc0ac\uc6a9:\")\n\n    @with_wraps\n    def preserved_function(x: int, y: str = \"default\") -&gt; str:\n        \"\"\"\ubcf4\uc874\ub41c \ud568\uc218\uc758 \ub3c5\uc2a4\ud2b8\ub9c1\"\"\"\n        return f\"{y}: {x}\"\n\n    print(f\"   \ud568\uc218\uba85: {preserved_function.__name__}\")\n    print(f\"   \ub3c5\uc2a4\ud2b8\ub9c1: {preserved_function.__doc__}\")\n    print(f\"   \uc5b4\ub178\ud14c\uc774\uc158: {preserved_function.__annotations__}\")\n\n    print(\"\\n3. \uace0\uae09 \uba54\ud0c0\ub370\uc774\ud130 \ubcf4\uc874:\")\n\n    @MetadataPreservingDecorator(preserve_signature=True, preserve_annotations=True)\n    def advanced_function(x: int, y: str = \"default\", *, z: bool = False) -&gt; dict:\n        \"\"\"\uace0\uae09 \ud568\uc218\uc758 \ub3c5\uc2a4\ud2b8\ub9c1\n\n        Args:\n            x: \uc815\uc218 \ub9e4\uac1c\ubcc0\uc218\n            y: \ubb38\uc790\uc5f4 \ub9e4\uac1c\ubcc0\uc218\n            z: \ubd88\ub9b0 \ud0a4\uc6cc\ub4dc \uc804\uc6a9 \ub9e4\uac1c\ubcc0\uc218\n\n        Returns:\n            \uacb0\uacfc \ub515\uc154\ub108\ub9ac\n        \"\"\"\n        return {\"x\": x, \"y\": y, \"z\": z}\n\n    print(f\"   \ud568\uc218\uba85: {advanced_function.__name__}\")\n    print(f\"   \uc2dc\uadf8\ub2c8\ucc98: {inspect.signature(advanced_function)}\")\n    print(f\"   \uc5b4\ub178\ud14c\uc774\uc158: {advanced_function.__annotations__}\")\n\n    # \ud568\uc218 \ud638\ucd9c \ud14c\uc2a4\ud2b8\n    result = advanced_function(42, \"test\", z=True)\n    print(f\"   \ud638\ucd9c \uacb0\uacfc: {result}\")\n\n    # \uc798\ubabb\ub41c \uc778\uc218\ub85c \ud638\ucd9c \uc2dc\ub3c4\n    try:\n        advanced_function(\"wrong_type\")\n    except TypeError as e:\n        print(f\"   \ud0c0\uc785 \uc624\ub958 \uc815\uc0c1 \uac10\uc9c0: {e}\")\n\ndemonstrate_metadata_preservation()\n</code></pre>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#22","title":"2.2 \uace0\uae09 \uba54\ud0c0\ub370\uc774\ud130 \uc870\uc791","text":"<pre><code>print(\"\\n=== \uace0\uae09 \uba54\ud0c0\ub370\uc774\ud130 \uc870\uc791 ===\")\n\nclass SignatureModifyingDecorator:\n    \"\"\"\ud568\uc218 \uc2dc\uadf8\ub2c8\ucc98\ub97c \uc218\uc815\ud558\ub294 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, add_params=None, remove_params=None, modify_return=None):\n        self.add_params = add_params or {}\n        self.remove_params = remove_params or []\n        self.modify_return = modify_return\n\n    def __call__(self, func):\n        import inspect\n\n        # \uc6d0\ubcf8 \uc2dc\uadf8\ub2c8\ucc98 \ubd84\uc11d\n        original_sig = inspect.signature(func)\n\n        # \uc0c8\ub85c\uc6b4 \ub9e4\uac1c\ubcc0\uc218 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\n        new_params = []\n\n        # \uae30\uc874 \ub9e4\uac1c\ubcc0\uc218 \ucc98\ub9ac\n        for name, param in original_sig.parameters.items():\n            if name not in self.remove_params:\n                new_params.append(param)\n\n        # \uc0c8\ub85c\uc6b4 \ub9e4\uac1c\ubcc0\uc218 \ucd94\uac00\n        for name, param_info in self.add_params.items():\n            param = inspect.Parameter(\n                name=name,\n                kind=param_info.get('kind', inspect.Parameter.POSITIONAL_OR_KEYWORD),\n                default=param_info.get('default', inspect.Parameter.empty),\n                annotation=param_info.get('annotation', inspect.Parameter.empty)\n            )\n            new_params.append(param)\n\n        # \ubc18\ud658 \ud0c0\uc785 \uc218\uc815\n        return_annotation = self.modify_return or original_sig.return_annotation\n\n        # \uc0c8\ub85c\uc6b4 \uc2dc\uadf8\ub2c8\ucc98 \uc0dd\uc131\n        new_signature = inspect.Signature(\n            parameters=new_params,\n            return_annotation=return_annotation\n        )\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            # \ucd94\uac00\ub41c \ub9e4\uac1c\ubcc0\uc218 \ucc98\ub9ac\n            processed_kwargs = kwargs.copy()\n            for param_name in self.add_params:\n                if param_name in processed_kwargs:\n                    value = processed_kwargs.pop(param_name)\n                    print(f\"   \ucd94\uac00 \ub9e4\uac1c\ubcc0\uc218 \ucc98\ub9ac: {param_name} = {value}\")\n\n            # \uc81c\uac70\ub41c \ub9e4\uac1c\ubcc0\uc218\uac00 \uc804\ub2ec\ub418\uba74 \uacbd\uace0\n            for param_name in self.remove_params:\n                if param_name in processed_kwargs:\n                    print(f\"   \uacbd\uace0: \uc81c\uac70\ub41c \ub9e4\uac1c\ubcc0\uc218 \ubb34\uc2dc\ub428: {param_name}\")\n                    processed_kwargs.pop(param_name)\n\n            return func(*args, **processed_kwargs)\n\n        # \uc218\uc815\ub41c \uc2dc\uadf8\ub2c8\ucc98 \uc801\uc6a9\n        wrapper.__signature__ = new_signature\n\n        return wrapper\n\nclass DocstringModifyingDecorator:\n    \"\"\"\ub3c5\uc2a4\ud2b8\ub9c1\uc744 \uc218\uc815\ud558\ub294 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, append_text=None, prepend_text=None, replace_text=None):\n        self.append_text = append_text\n        self.prepend_text = prepend_text\n        self.replace_text = replace_text\n\n    def __call__(self, func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n\n        # \ub3c5\uc2a4\ud2b8\ub9c1 \uc218\uc815\n        original_doc = func.__doc__ or \"\"\n\n        if self.replace_text:\n            new_doc = self.replace_text\n        else:\n            new_doc = original_doc\n            if self.prepend_text:\n                new_doc = self.prepend_text + \"\\n\\n\" + new_doc\n            if self.append_text:\n                new_doc = new_doc + \"\\n\\n\" + self.append_text\n\n        wrapper.__doc__ = new_doc\n\n        return wrapper\n\nclass AttributeInjectingDecorator:\n    \"\"\"\ud568\uc218\uc5d0 \ucd94\uac00 \uc18d\uc131\uc744 \uc8fc\uc785\ud558\ub294 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, **attributes):\n        self.attributes = attributes\n\n    def __call__(self, func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            # \uc18d\uc131 \uac12\uc774 \ud638\ucd9c \uac00\ub2a5\ud558\uba74 \uc2e4\ud589\n            for name, value in self.attributes.items():\n                if callable(value):\n                    setattr(wrapper, name, value())\n                else:\n                    setattr(wrapper, name, value)\n\n            return func(*args, **kwargs)\n\n        # \ucd08\uae30 \uc18d\uc131 \uc124\uc815\n        for name, value in self.attributes.items():\n            if callable(value):\n                setattr(wrapper, name, value())\n            else:\n                setattr(wrapper, name, value)\n\n        return wrapper\n\ndef demonstrate_advanced_metadata_manipulation():\n    \"\"\"\uace0\uae09 \uba54\ud0c0\ub370\uc774\ud130 \uc870\uc791 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \uc2dc\uadf8\ub2c8\ucc98 \uc218\uc815 \ub370\ucf54\ub808\uc774\ud130:\")\n\n    @SignatureModifyingDecorator(\n        add_params={\n            'debug': {'default': False, 'annotation': bool, 'kind': inspect.Parameter.KEYWORD_ONLY},\n            'timeout': {'default': 30, 'annotation': int}\n        },\n        remove_params=['deprecated_param'],\n        modify_return=dict\n    )\n    def api_function(data: str, deprecated_param: int = 0) -&gt; str:\n        \"\"\"API \ud568\uc218\"\"\"\n        return f\"\ucc98\ub9ac\ub41c \ub370\uc774\ud130: {data}\"\n\n    print(f\"   \uc218\uc815\ub41c \uc2dc\uadf8\ub2c8\ucc98: {inspect.signature(api_function)}\")\n\n    # \uc0c8\ub85c\uc6b4 \ub9e4\uac1c\ubcc0\uc218\ub85c \ud638\ucd9c\n    result = api_function(\"test\", debug=True, timeout=60)\n    print(f\"   \uacb0\uacfc: {result}\")\n\n    print(\"\\n2. \ub3c5\uc2a4\ud2b8\ub9c1 \uc218\uc815 \ub370\ucf54\ub808\uc774\ud130:\")\n\n    @DocstringModifyingDecorator(\n        prepend_text=\"[DEPRECATED] \uc774 \ud568\uc218\ub294 \uace7 \uc81c\uac70\ub420 \uc608\uc815\uc785\ub2c8\ub2e4.\",\n        append_text=\"\ub300\uc2e0 new_function()\uc744 \uc0ac\uc6a9\ud558\uc138\uc694.\"\n    )\n    def old_function():\n        \"\"\"\uae30\uc874 \ud568\uc218\uc758 \ub3c5\uc2a4\ud2b8\ub9c1\"\"\"\n        return \"\uae30\uc874 \uae30\ub2a5\"\n\n    print(f\"   \uc218\uc815\ub41c \ub3c5\uc2a4\ud2b8\ub9c1:\\n{old_function.__doc__}\")\n\n    print(\"\\n3. \uc18d\uc131 \uc8fc\uc785 \ub370\ucf54\ub808\uc774\ud130:\")\n\n    @AttributeInjectingDecorator(\n        version=\"1.0.0\",\n        created_at=lambda: __import__('time').time(),\n        call_count=0,\n        metadata={\"author\": \"Python Developer\", \"category\": \"utility\"}\n    )\n    def utility_function(x):\n        \"\"\"\uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\"\"\"\n        utility_function.call_count += 1\n        return x * 2\n\n    print(f\"   \ubc84\uc804: {utility_function.version}\")\n    print(f\"   \uc0dd\uc131 \uc2dc\uac04: {utility_function.created_at}\")\n    print(f\"   \uba54\ud0c0\ub370\uc774\ud130: {utility_function.metadata}\")\n\n    # \ud568\uc218 \ud638\ucd9c\n    result = utility_function(5)\n    print(f\"   \uacb0\uacfc: {result}, \ud638\ucd9c \ud69f\uc218: {utility_function.call_count}\")\n\ndemonstrate_advanced_metadata_manipulation()\n</code></pre>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#3","title":"3. \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uace0\uae09 \ud65c\uc6a9","text":""},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#31","title":"3.1 \ucee4\uc2a4\ud140 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800","text":"<pre><code>print(\"\\n=== \ucee4\uc2a4\ud140 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 ===\")\n\nclass DatabaseTransaction:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n\n    def __init__(self, connection_string, auto_commit=True):\n        self.connection_string = connection_string\n        self.auto_commit = auto_commit\n        self.connection = None\n        self.transaction = None\n        self.rollback_occurred = False\n        self.start_time = None\n        self.operation_count = 0\n\n    def __enter__(self):\n        \"\"\"\ucee8\ud14d\uc2a4\ud2b8 \uc9c4\uc785 \uc2dc \uc2e4\ud589\"\"\"\n        import time\n        self.start_time = time.time()\n\n        print(f\"   \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc2dc\uc791: {self.connection_string}\")\n\n        # \uc2e4\uc81c\ub85c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\uc744 \uc0dd\uc131\n        self.connection = f\"Connection-{id(self)}\"\n\n        print(f\"   \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791: {self.connection}\")\n        self.transaction = f\"Transaction-{id(self)}\"\n\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        \"\"\"\ucee8\ud14d\uc2a4\ud2b8 \uc885\ub8cc \uc2dc \uc2e4\ud589\"\"\"\n        import time\n\n        try:\n            if exc_type is None:\n                # \uc608\uc678\uac00 \uc5c6\uc73c\uba74 \ucee4\ubc0b\n                if self.auto_commit:\n                    self.commit()\n                else:\n                    print(f\"   \uc218\ub3d9 \ucee4\ubc0b \ubaa8\ub4dc: \ud2b8\ub79c\uc7ad\uc158 \ubcf4\ub958 \uc911\")\n            else:\n                # \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uba74 \ub864\ubc31\n                self.rollback()\n                print(f\"   \uc608\uc678\ub85c \uc778\ud55c \ub864\ubc31: {exc_type.__name__}: {exc_value}\")\n\n                # \ud2b9\uc815 \uc608\uc678\ub294 \uc5b5\uc81c\n                if exc_type == ValueError and \"ignore\" in str(exc_value):\n                    print(f\"   \uc608\uc678 \uc5b5\uc81c\ub428\")\n                    return True  # \uc608\uc678 \uc5b5\uc81c\n\n        finally:\n            # \uc5f0\uacb0 \uc815\ub9ac\n            end_time = time.time()\n            duration = end_time - self.start_time\n\n            print(f\"   \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc885\ub8cc\")\n            print(f\"   \ud2b8\ub79c\uc7ad\uc158 \uc9c0\uc18d \uc2dc\uac04: {duration:.3f}\ucd08\")\n            print(f\"   \uc218\ud589\ub41c \uc791\uc5c5 \uc218: {self.operation_count}\")\n\n            self.connection = None\n            self.transaction = None\n\n    def execute(self, query, params=None):\n        \"\"\"\ucffc\ub9ac \uc2e4\ud589 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        if not self.connection:\n            raise RuntimeError(\"\ud2b8\ub79c\uc7ad\uc158\uc774 \ud65c\uc131\ud654\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\")\n\n        self.operation_count += 1\n        print(f\"     \ucffc\ub9ac \uc2e4\ud589: {query}\")\n        if params:\n            print(f\"     \ub9e4\uac1c\ubcc0\uc218: {params}\")\n\n        return f\"Result-{self.operation_count}\"\n\n    def commit(self):\n        \"\"\"\ud2b8\ub79c\uc7ad\uc158 \ucee4\ubc0b\"\"\"\n        if self.transaction:\n            print(f\"   \ud2b8\ub79c\uc7ad\uc158 \ucee4\ubc0b: {self.transaction}\")\n\n    def rollback(self):\n        \"\"\"\ud2b8\ub79c\uc7ad\uc158 \ub864\ubc31\"\"\"\n        if self.transaction:\n            print(f\"   \ud2b8\ub79c\uc7ad\uc158 \ub864\ubc31: {self.transaction}\")\n            self.rollback_occurred = True\n\nclass ResourceManager:\n    \"\"\"\ub9ac\uc18c\uc2a4 \uad00\ub9ac \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n\n    def __init__(self, resource_name, acquisition_timeout=5):\n        self.resource_name = resource_name\n        self.acquisition_timeout = acquisition_timeout\n        self.resource = None\n        self.acquired_at = None\n        self.released_at = None\n\n    def __enter__(self):\n        import time\n        import random\n\n        print(f\"   \ub9ac\uc18c\uc2a4 \ud68d\ub4dd \uc2dc\ub3c4: {self.resource_name}\")\n\n        # \ub9ac\uc18c\uc2a4 \ud68d\ub4dd \uc2dc\ubbac\ub808\uc774\uc158\n        start_time = time.time()\n        while time.time() - start_time &lt; self.acquisition_timeout:\n            if random.random() &gt; 0.3:  # 70% \ud655\ub960\ub85c \uc131\uacf5\n                self.resource = f\"Resource-{self.resource_name}-{int(time.time())}\"\n                self.acquired_at = time.time()\n                print(f\"   \ub9ac\uc18c\uc2a4 \ud68d\ub4dd \uc131\uacf5: {self.resource}\")\n                return self.resource\n\n            print(f\"   \ub9ac\uc18c\uc2a4 \ub300\uae30 \uc911...\")\n            time.sleep(0.1)\n\n        raise TimeoutError(f\"\ub9ac\uc18c\uc2a4 \ud68d\ub4dd \ud0c0\uc784\uc544\uc6c3: {self.resource_name}\")\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        import time\n\n        if self.resource:\n            self.released_at = time.time()\n            usage_duration = self.released_at - self.acquired_at\n\n            print(f\"   \ub9ac\uc18c\uc2a4 \ud574\uc81c: {self.resource}\")\n            print(f\"   \uc0ac\uc6a9 \uc2dc\uac04: {usage_duration:.3f}\ucd08\")\n\n            self.resource = None\n\nclass TimingContext:\n    \"\"\"\uc2e4\ud589 \uc2dc\uac04 \uce21\uc815 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n\n    def __init__(self, operation_name, enable_profiling=False):\n        self.operation_name = operation_name\n        self.enable_profiling = enable_profiling\n        self.start_time = None\n        self.end_time = None\n        self.profiler = None\n        self.memory_usage = {}\n\n    def __enter__(self):\n        import time\n\n        self.start_time = time.perf_counter()\n        print(f\"   \ud0c0\uc774\ubc0d \uc2dc\uc791: {self.operation_name}\")\n\n        if self.enable_profiling:\n            # \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc791\n            import tracemalloc\n            tracemalloc.start()\n            self.memory_usage['start'] = tracemalloc.get_traced_memory()\n            print(f\"     \uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1 \ud65c\uc131\ud654\")\n\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        import time\n\n        self.end_time = time.perf_counter()\n        duration = self.end_time - self.start_time\n\n        print(f\"   \ud0c0\uc774\ubc0d \uc644\ub8cc: {self.operation_name}\")\n        print(f\"   \uc2e4\ud589 \uc2dc\uac04: {duration:.6f}\ucd08\")\n\n        if self.enable_profiling:\n            import tracemalloc\n            self.memory_usage['end'] = tracemalloc.get_traced_memory()\n            tracemalloc.stop()\n\n            current, peak = self.memory_usage['end']\n            start_current, start_peak = self.memory_usage['start']\n\n            print(f\"   \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ubcc0\ud654: {(current - start_current) / 1024:.2f} KB\")\n            print(f\"   \ucd5c\ub300 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9: {peak / 1024:.2f} KB\")\n\n    def get_duration(self):\n        \"\"\"\uc2e4\ud589 \uc2dc\uac04 \ubc18\ud658\"\"\"\n        if self.start_time and self.end_time:\n            return self.end_time - self.start_time\n        return None\n\ndef demonstrate_custom_context_managers():\n    \"\"\"\ucee4\uc2a4\ud140 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158:\")\n\n    # \uc815\uc0c1\uc801\uc778 \ud2b8\ub79c\uc7ad\uc158\n    with DatabaseTransaction(\"postgresql://localhost:5432/mydb\") as db:\n        db.execute(\"INSERT INTO users (name) VALUES (?)\", [\"Alice\"])\n        db.execute(\"UPDATE users SET status = ? WHERE name = ?\", [\"active\", \"Alice\"])\n\n    print(\"\\n   \uc608\uc678 \ubc1c\uc0dd \uc2dc:\")\n    try:\n        with DatabaseTransaction(\"postgresql://localhost:5432/mydb\") as db:\n            db.execute(\"INSERT INTO users (name) VALUES (?)\", [\"Bob\"])\n            raise ValueError(\"\ub370\uc774\ud130 \uac80\uc99d \uc2e4\ud328\")\n    except ValueError as e:\n        print(f\"   \ucc98\ub9ac\ub41c \uc608\uc678: {e}\")\n\n    print(\"\\n2. \ub9ac\uc18c\uc2a4 \uad00\ub9ac:\")\n\n    try:\n        with ResourceManager(\"database_connection\", acquisition_timeout=1) as resource:\n            print(f\"   \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9 \uc911: {resource}\")\n            import time\n            time.sleep(0.2)  # \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9 \uc2dc\ubbac\ub808\uc774\uc158\n    except TimeoutError as e:\n        print(f\"   \ub9ac\uc18c\uc2a4 \ud68d\ub4dd \uc2e4\ud328: {e}\")\n\n    print(\"\\n3. \uc2e4\ud589 \uc2dc\uac04 \uce21\uc815:\")\n\n    with TimingContext(\"\ubcf5\uc7a1\ud55c \uacc4\uc0b0\", enable_profiling=True) as timer:\n        # \ubcf5\uc7a1\ud55c \uacc4\uc0b0 \uc2dc\ubbac\ub808\uc774\uc158\n        result = sum(i**2 for i in range(10000))\n        data = [i for i in range(1000)]  # \uba54\ubaa8\ub9ac \uc0ac\uc6a9\n\n    duration = timer.get_duration()\n    print(f\"   \uce21\uc815\ub41c \uc2dc\uac04: {duration:.6f}\ucd08\")\n\ndemonstrate_custom_context_managers()\n</code></pre>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#32-contextlib","title":"3.2 contextlib \ubaa8\ub4c8 \uace0\uae09 \ud65c\uc6a9","text":"<pre><code>print(\"\\n=== contextlib \ubaa8\ub4c8 \uace0\uae09 \ud65c\uc6a9 ===\")\n\nimport contextlib\nimport functools\nfrom contextlib import contextmanager, ExitStack, suppress, redirect_stdout, redirect_stderr\nimport io\nimport sys\n\n@contextmanager\ndef temporary_directory():\n    \"\"\"\uc784\uc2dc \ub514\ub809\ud1a0\ub9ac \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n    import tempfile\n    import shutil\n    import os\n\n    temp_dir = tempfile.mkdtemp()\n    print(f\"   \uc784\uc2dc \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131: {temp_dir}\")\n\n    try:\n        yield temp_dir\n    finally:\n        # \uc815\ub9ac \uc791\uc5c5\n        if os.path.exists(temp_dir):\n            shutil.rmtree(temp_dir)\n            print(f\"   \uc784\uc2dc \ub514\ub809\ud1a0\ub9ac \uc0ad\uc81c: {temp_dir}\")\n\n@contextmanager\ndef environment_variable(name, value):\n    \"\"\"\ud658\uacbd \ubcc0\uc218 \uc784\uc2dc \uc124\uc815 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n    import os\n\n    old_value = os.environ.get(name)\n    os.environ[name] = value\n    print(f\"   \ud658\uacbd \ubcc0\uc218 \uc124\uc815: {name} = {value}\")\n\n    try:\n        yield\n    finally:\n        if old_value is None:\n            os.environ.pop(name, None)\n            print(f\"   \ud658\uacbd \ubcc0\uc218 \uc81c\uac70: {name}\")\n        else:\n            os.environ[name] = old_value\n            print(f\"   \ud658\uacbd \ubcc0\uc218 \ubcf5\uc6d0: {name} = {old_value}\")\n\n@contextmanager\ndef config_override(**config_changes):\n    \"\"\"\uc124\uc815 \uc784\uc2dc \ubcc0\uacbd \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n    # \uac00\uc0c1\uc758 \uc804\uc5ed \uc124\uc815 \uac1d\uccb4\n    global_config = {\n        'debug': False,\n        'timeout': 30,\n        'max_retries': 3\n    }\n\n    # \ud604\uc7ac \uc124\uc815 \ubc31\uc5c5\n    backup = global_config.copy()\n    print(f\"   \uc124\uc815 \ubc31\uc5c5: {backup}\")\n\n    # \uc0c8 \uc124\uc815 \uc801\uc6a9\n    global_config.update(config_changes)\n    print(f\"   \uc124\uc815 \ubcc0\uacbd: {config_changes}\")\n\n    try:\n        yield global_config\n    finally:\n        # \uc124\uc815 \ubcf5\uc6d0\n        global_config.clear()\n        global_config.update(backup)\n        print(f\"   \uc124\uc815 \ubcf5\uc6d0: {backup}\")\n\nclass ManagedResource:\n    \"\"\"contextlib\uacfc \ud568\uaed8 \uc0ac\uc6a9\ud560 \ub9ac\uc18c\uc2a4 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, name):\n        self.name = name\n        self.is_open = False\n\n    def open(self):\n        \"\"\"\ub9ac\uc18c\uc2a4 \uc5f4\uae30\"\"\"\n        self.is_open = True\n        print(f\"     \ub9ac\uc18c\uc2a4 \uc5f4\ub9bc: {self.name}\")\n        return self\n\n    def close(self):\n        \"\"\"\ub9ac\uc18c\uc2a4 \ub2eb\uae30\"\"\"\n        if self.is_open:\n            self.is_open = False\n            print(f\"     \ub9ac\uc18c\uc2a4 \ub2eb\ud798: {self.name}\")\n\n    def read(self):\n        \"\"\"\ub9ac\uc18c\uc2a4 \uc77d\uae30\"\"\"\n        if not self.is_open:\n            raise RuntimeError(f\"\ub9ac\uc18c\uc2a4\uac00 \ub2eb\ud600\uc788\uc74c: {self.name}\")\n        return f\"\ub370\uc774\ud130from-{self.name}\"\n\n@contextmanager\ndef managed_resource(name):\n    \"\"\"\ub9ac\uc18c\uc2a4\ub97c \uad00\ub9ac\ud558\ub294 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n    resource = ManagedResource(name)\n    try:\n        yield resource.open()\n    finally:\n        resource.close()\n\ndef demonstrate_contextlib_advanced():\n    \"\"\"contextlib \uace0\uae09 \uae30\ub2a5 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. @contextmanager \ub370\ucf54\ub808\uc774\ud130:\")\n\n    with temporary_directory() as temp_dir:\n        import os\n        test_file = os.path.join(temp_dir, \"test.txt\")\n        with open(test_file, 'w') as f:\n            f.write(\"\uc784\uc2dc \ud30c\uc77c \ub0b4\uc6a9\")\n        print(f\"   \ud30c\uc77c \uc0dd\uc131: {test_file}\")\n\n    print(\"\\n2. \ud658\uacbd \ubcc0\uc218 \uad00\ub9ac:\")\n\n    import os\n    print(f\"   \ud604\uc7ac DEBUG \uac12: {os.environ.get('DEBUG', 'None')}\")\n\n    with environment_variable('DEBUG', 'true'):\n        print(f\"   \ucee8\ud14d\uc2a4\ud2b8 \ub0b4 DEBUG \uac12: {os.environ.get('DEBUG')}\")\n\n        with environment_variable('TEMP_VAR', 'temporary'):\n            print(f\"   TEMP_VAR \uac12: {os.environ.get('TEMP_VAR')}\")\n\n    print(f\"   \ubcf5\uc6d0\ub41c DEBUG \uac12: {os.environ.get('DEBUG', 'None')}\")\n\n    print(\"\\n3. ExitStack \ud65c\uc6a9:\")\n\n    with ExitStack() as stack:\n        # \uc5ec\ub7ec \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub97c \ub3d9\uc801\uc73c\ub85c \ucd94\uac00\n        resources = []\n\n        for i in range(3):\n            resource = stack.enter_context(managed_resource(f\"resource_{i}\"))\n            resources.append(resource)\n\n        # \uc870\uac74\ubd80 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \ucd94\uac00\n        if len(resources) &gt; 2:\n            config = stack.enter_context(config_override(debug=True, timeout=60))\n            print(f\"   \uc870\uac74\ubd80 \uc124\uc815: {config}\")\n\n        # \ubaa8\ub4e0 \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\n        for resource in resources:\n            data = resource.read()\n            print(f\"   \uc77d\uc740 \ub370\uc774\ud130: {data}\")\n\n    print(\"\\n4. \uc608\uc678 \uc5b5\uc81c (suppress):\")\n\n    with suppress(ValueError, TypeError):\n        print(\"   \uc7a0\uc7ac\uc801 \uc608\uc678 \ubc1c\uc0dd \ucf54\ub4dc \uc2e4\ud589\")\n        raise ValueError(\"\uc774 \uc608\uc678\ub294 \uc5b5\uc81c\ub429\ub2c8\ub2e4\")\n        print(\"   \uc774 \ub77c\uc778\uc740 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\")\n\n    print(\"   \uc608\uc678\uac00 \uc5b5\uc81c\ub418\uc5b4 \uacc4\uc18d \uc2e4\ud589\ub429\ub2c8\ub2e4\")\n\n    print(\"\\n5. \ucd9c\ub825 \ub9ac\ub2e4\uc774\ub809\uc158:\")\n\n    # stdout \ub9ac\ub2e4\uc774\ub809\uc158\n    output_buffer = io.StringIO()\n    with redirect_stdout(output_buffer):\n        print(\"\uc774 \ucd9c\ub825\uc740 \ubc84\ud37c\ub85c \ub9ac\ub2e4\uc774\ub809\uc158\ub429\ub2c8\ub2e4\")\n        print(\"\uc5ec\ub7ec \uc904\uc758 \ucd9c\ub825\")\n\n    captured_output = output_buffer.getvalue()\n    print(f\"   \ucea1\ucc98\ub41c \ucd9c\ub825: {repr(captured_output)}\")\n\n    # stderr \ub9ac\ub2e4\uc774\ub809\uc158\n    error_buffer = io.StringIO()\n    with redirect_stderr(error_buffer):\n        sys.stderr.write(\"\uc5d0\ub7ec \uba54\uc2dc\uc9c0\\n\")\n        sys.stderr.write(\"\ub610 \ub2e4\ub978 \uc5d0\ub7ec\\n\")\n\n    captured_errors = error_buffer.getvalue()\n    print(f\"   \ucea1\ucc98\ub41c \uc5d0\ub7ec: {repr(captured_errors)}\")\n\ndemonstrate_contextlib_advanced()\n</code></pre>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#4","title":"4. \uc911\ucca9 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800","text":""},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#41","title":"4.1 \ubcf5\ud569 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800","text":"<pre><code>print(\"\\n=== \uc911\ucca9 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 ===\")\n\nclass CompositeContextManager:\n    \"\"\"\uc5ec\ub7ec \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub97c \uc870\ud569\ud558\ub294 \ubcf5\ud569 \ub9e4\ub2c8\uc800\"\"\"\n\n    def __init__(self, *context_managers):\n        self.context_managers = context_managers\n        self.entered_managers = []\n        self.results = []\n\n    def __enter__(self):\n        \"\"\"\ubaa8\ub4e0 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc9c4\uc785\"\"\"\n        print(f\"   \ubcf5\ud569 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc9c4\uc785 ({len(self.context_managers)}\uac1c)\")\n\n        try:\n            for i, cm in enumerate(self.context_managers):\n                print(f\"     \ucee8\ud14d\uc2a4\ud2b8 {i+1} \uc9c4\uc785: {type(cm).__name__}\")\n                result = cm.__enter__()\n                self.entered_managers.append(cm)\n                self.results.append(result)\n        except Exception:\n            # \uc2e4\ud328 \uc2dc \uc774\ubbf8 \uc9c4\uc785\ud55c \ucee8\ud14d\uc2a4\ud2b8\ub4e4 \uc815\ub9ac\n            self._cleanup_entered()\n            raise\n\n        return self.results if len(self.results) &gt; 1 else (self.results[0] if self.results else None)\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        \"\"\"\ubaa8\ub4e0 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc885\ub8cc (\uc5ed\uc21c)\"\"\"\n        print(f\"   \ubcf5\ud569 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc885\ub8cc\")\n\n        exception_occurred = exc_type is not None\n        suppressed_exceptions = []\n\n        # \uc5ed\uc21c\uc73c\ub85c \uc885\ub8cc\n        for i, cm in enumerate(reversed(self.entered_managers)):\n            try:\n                print(f\"     \ucee8\ud14d\uc2a4\ud2b8 {len(self.entered_managers)-i} \uc885\ub8cc: {type(cm).__name__}\")\n                result = cm.__exit__(exc_type, exc_value, traceback)\n\n                # \uc608\uc678 \uc5b5\uc81c \ucc98\ub9ac\n                if result and exception_occurred:\n                    suppressed_exceptions.append(cm)\n                    print(f\"       \uc608\uc678 \uc5b5\uc81c\ub428: {type(cm).__name__}\")\n\n            except Exception as cleanup_exc:\n                print(f\"       \uc815\ub9ac \uc911 \uc608\uc678 \ubc1c\uc0dd: {cleanup_exc}\")\n                # \uc815\ub9ac \uc911 \uc608\uc678\ub294 \ub85c\uadf8\ub9cc \ub0a8\uae30\uace0 \uacc4\uc18d \uc9c4\ud589\n\n        # \ubaa8\ub4e0 \uc608\uc678\uac00 \uc5b5\uc81c\ub418\uc5c8\ub2e4\uba74 True \ubc18\ud658\n        return len(suppressed_exceptions) &gt; 0 and exception_occurred\n\n    def _cleanup_entered(self):\n        \"\"\"\uc9c4\uc785\ud588\ub358 \ucee8\ud14d\uc2a4\ud2b8\ub4e4 \uc815\ub9ac\"\"\"\n        for cm in reversed(self.entered_managers):\n            try:\n                cm.__exit__(None, None, None)\n            except Exception as e:\n                print(f\"       \uc815\ub9ac \uc2e4\ud328: {e}\")\n\nclass TransactionManager:\n    \"\"\"\ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n\n    def __init__(self, name, auto_rollback=True):\n        self.name = name\n        self.auto_rollback = auto_rollback\n        self.committed = False\n        self.rolled_back = False\n\n    def __enter__(self):\n        print(f\"     \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791: {self.name}\")\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if exc_type is None and not self.committed and not self.rolled_back:\n            self.commit()\n        elif exc_type is not None and self.auto_rollback and not self.rolled_back:\n            self.rollback()\n\n        print(f\"     \ud2b8\ub79c\uc7ad\uc158 \uc885\ub8cc: {self.name}\")\n\n    def commit(self):\n        \"\"\"\ud2b8\ub79c\uc7ad\uc158 \ucee4\ubc0b\"\"\"\n        self.committed = True\n        print(f\"       {self.name} \ucee4\ubc0b\ub428\")\n\n    def rollback(self):\n        \"\"\"\ud2b8\ub79c\uc7ad\uc158 \ub864\ubc31\"\"\"\n        self.rolled_back = True\n        print(f\"       {self.name} \ub864\ubc31\ub428\")\n\nclass ConnectionPool:\n    \"\"\"\uc5f0\uacb0 \ud480 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n\n    def __init__(self, pool_name, max_connections=5):\n        self.pool_name = pool_name\n        self.max_connections = max_connections\n        self.active_connections = 0\n        self.connection_id = None\n\n    def __enter__(self):\n        if self.active_connections &gt;= self.max_connections:\n            raise RuntimeError(f\"\uc5f0\uacb0 \ud480 \ud55c\uacc4 \ucd08\uacfc: {self.pool_name}\")\n\n        self.active_connections += 1\n        self.connection_id = f\"{self.pool_name}-conn-{self.active_connections}\"\n        print(f\"     \uc5f0\uacb0 \ud68d\ub4dd: {self.connection_id}\")\n        return self.connection_id\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self.connection_id:\n            print(f\"     \uc5f0\uacb0 \ubc18\ud658: {self.connection_id}\")\n            self.active_connections -= 1\n            self.connection_id = None\n\nclass LockManager:\n    \"\"\"\ub77d \uad00\ub9ac \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n\n    def __init__(self, lock_name, timeout=5):\n        self.lock_name = lock_name\n        self.timeout = timeout\n        self.acquired = False\n\n    def __enter__(self):\n        import time\n        import random\n\n        print(f\"     \ub77d \ud68d\ub4dd \uc2dc\ub3c4: {self.lock_name}\")\n\n        # \ub77d \ud68d\ub4dd \uc2dc\ubbac\ub808\uc774\uc158\n        start_time = time.time()\n        while time.time() - start_time &lt; self.timeout:\n            if random.random() &gt; 0.2:  # 80% \ud655\ub960\ub85c \uc131\uacf5\n                self.acquired = True\n                print(f\"     \ub77d \ud68d\ub4dd \uc131\uacf5: {self.lock_name}\")\n                return self\n            time.sleep(0.1)\n\n        raise TimeoutError(f\"\ub77d \ud68d\ub4dd \ud0c0\uc784\uc544\uc6c3: {self.lock_name}\")\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self.acquired:\n            print(f\"     \ub77d \ud574\uc81c: {self.lock_name}\")\n            self.acquired = False\n\n@contextmanager\ndef nested_operation(operation_name, *sub_operations):\n    \"\"\"\uc911\ucca9\ub41c \uc791\uc5c5\uc744 \uad00\ub9ac\ud558\ub294 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n    print(f\"   \uc911\ucca9 \uc791\uc5c5 \uc2dc\uc791: {operation_name}\")\n\n    results = {}\n    completed_operations = []\n\n    try:\n        for sub_op in sub_operations:\n            print(f\"     \ud558\uc704 \uc791\uc5c5: {sub_op}\")\n            # \uc2e4\uc81c\ub85c\ub294 \ubcf5\uc7a1\ud55c \uc791\uc5c5 \uc218\ud589\n            import time\n            time.sleep(0.05)  # \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n\n            results[sub_op] = f\"result_of_{sub_op}\"\n            completed_operations.append(sub_op)\n\n        yield results\n\n        print(f\"   \uc911\ucca9 \uc791\uc5c5 \uc644\ub8cc: {operation_name}\")\n\n    except Exception as e:\n        print(f\"   \uc911\ucca9 \uc791\uc5c5 \uc2e4\ud328: {operation_name} - {e}\")\n\n        # \uc644\ub8cc\ub41c \uc791\uc5c5\ub4e4 \ub864\ubc31\n        for op in reversed(completed_operations):\n            print(f\"     \ub864\ubc31: {op}\")\n\n        raise\n\ndef demonstrate_nested_context_managers():\n    \"\"\"\uc911\ucca9 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \ubcf5\ud569 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800:\")\n\n    # \uc5ec\ub7ec \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc870\ud569\n    try:\n        with CompositeContextManager(\n            TransactionManager(\"main_tx\"),\n            ConnectionPool(\"db_pool\", max_connections=3),\n            LockManager(\"data_lock\", timeout=2)\n        ) as (tx, conn, lock):\n\n            print(f\"   \ubaa8\ub4e0 \ub9ac\uc18c\uc2a4 \ud68d\ub4dd \uc644\ub8cc\")\n            print(f\"   \ud2b8\ub79c\uc7ad\uc158: {tx.name}\")\n            print(f\"   \uc5f0\uacb0: {conn}\")\n            print(f\"   \ub77d: {lock.lock_name}\")\n\n            # \uc791\uc5c5 \uc218\ud589\n            tx.commit()\n\n    except Exception as e:\n        print(f\"   \ubcf5\ud569 \ucee8\ud14d\uc2a4\ud2b8 \uc2e4\ud328: {e}\")\n\n    print(\"\\n2. \uae4a\uc740 \uc911\ucca9 \uad6c\uc870:\")\n\n    with nested_operation(\"\ub370\uc774\ud130_\ucc98\ub9ac\", \"\ub370\uc774\ud130_\ub85c\ub4dc\", \"\ub370\uc774\ud130_\uac80\uc99d\", \"\ub370\uc774\ud130_\ubcc0\ud658\") as results:\n        print(f\"     \uc911\uac04 \uacb0\uacfc: {results}\")\n\n        with nested_operation(\"\ubd84\uc11d_\uc791\uc5c5\", \"\ud1b5\uacc4_\uacc4\uc0b0\", \"\uadf8\ub798\ud504_\uc0dd\uc131\") as analysis_results:\n            print(f\"     \ubd84\uc11d \uacb0\uacfc: {analysis_results}\")\n\n            # \ucd5c\uc885 \uc791\uc5c5\n            final_result = {**results, **analysis_results}\n            print(f\"   \ucd5c\uc885 \uacb0\uacfc: {final_result}\")\n\n    print(\"\\n3. \uc870\uac74\ubd80 \uc911\ucca9 \ucee8\ud14d\uc2a4\ud2b8:\")\n\n    def complex_data_processing(use_transaction=True, use_lock=True, use_pool=True):\n        \"\"\"\uc870\uac74\ubd80\ub85c \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc0ac\uc6a9\"\"\"\n        context_managers = []\n\n        if use_transaction:\n            context_managers.append(TransactionManager(\"conditional_tx\"))\n\n        if use_pool:\n            context_managers.append(ConnectionPool(\"conditional_pool\"))\n\n        if use_lock:\n            context_managers.append(LockManager(\"conditional_lock\"))\n\n        if context_managers:\n            return CompositeContextManager(*context_managers)\n        else:\n            return contextlib.nullcontext()\n\n    # \ubaa8\ub4e0 \ucee8\ud14d\uc2a4\ud2b8 \uc0ac\uc6a9\n    with complex_data_processing(True, True, True) as resources:\n        print(f\"   \ubaa8\ub4e0 \ucee8\ud14d\uc2a4\ud2b8 \ud65c\uc131\ud654: {type(resources)}\")\n\n    # \uc77c\ubd80 \ucee8\ud14d\uc2a4\ud2b8\ub9cc \uc0ac\uc6a9\n    with complex_data_processing(True, False, True) as resources:\n        print(f\"   \uc77c\ubd80 \ucee8\ud14d\uc2a4\ud2b8 \ud65c\uc131\ud654: {type(resources)}\")\n\n    # \ucee8\ud14d\uc2a4\ud2b8 \uc5c6\uc774 \uc0ac\uc6a9\n    with complex_data_processing(False, False, False) as resources:\n        print(f\"   \ucee8\ud14d\uc2a4\ud2b8 \uc5c6\uc74c: {resources}\")\n\ndemonstrate_nested_context_managers()\n</code></pre>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#42","title":"4.2 \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800","text":"<pre><code>print(\"\\n=== \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 ===\")\n\nimport asyncio\nfrom contextlib import asynccontextmanager\n\nclass AsyncResourceManager:\n    \"\"\"\ube44\ub3d9\uae30 \ub9ac\uc18c\uc2a4 \uad00\ub9ac\uc790\"\"\"\n\n    def __init__(self, resource_name, connection_delay=0.1):\n        self.resource_name = resource_name\n        self.connection_delay = connection_delay\n        self.connected = False\n        self.connection = None\n\n    async def __aenter__(self):\n        \"\"\"\ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \uc9c4\uc785\"\"\"\n        print(f\"   \ube44\ub3d9\uae30 \uc5f0\uacb0 \uc2dc\uc791: {self.resource_name}\")\n\n        # \ube44\ub3d9\uae30 \uc5f0\uacb0 \uc2dc\ubbac\ub808\uc774\uc158\n        await asyncio.sleep(self.connection_delay)\n\n        self.connected = True\n        self.connection = f\"AsyncConnection-{self.resource_name}-{id(self)}\"\n        print(f\"   \uc5f0\uacb0 \uc644\ub8cc: {self.connection}\")\n\n        return self\n\n    async def __aexit__(self, exc_type, exc_value, traceback):\n        \"\"\"\ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \uc885\ub8cc\"\"\"\n        print(f\"   \ube44\ub3d9\uae30 \uc5f0\uacb0 \uc885\ub8cc: {self.connection}\")\n\n        # \ube44\ub3d9\uae30 \uc815\ub9ac \uc791\uc5c5\n        await asyncio.sleep(0.05)\n\n        self.connected = False\n        self.connection = None\n        print(f\"   \uc815\ub9ac \uc644\ub8cc: {self.resource_name}\")\n\n    async def execute(self, command):\n        \"\"\"\ube44\ub3d9\uae30 \uba85\ub839 \uc2e4\ud589\"\"\"\n        if not self.connected:\n            raise RuntimeError(\"\uc5f0\uacb0\ub418\uc9c0 \uc54a\uc74c\")\n\n        print(f\"     \uba85\ub839 \uc2e4\ud589: {command}\")\n        await asyncio.sleep(0.02)  # \uc2e4\ud589 \uc2dc\ubbac\ub808\uc774\uc158\n        return f\"Result: {command}\"\n\n@asynccontextmanager\nasync def async_transaction(transaction_name):\n    \"\"\"\ube44\ub3d9\uae30 \ud2b8\ub79c\uc7ad\uc158 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n    print(f\"   \ube44\ub3d9\uae30 \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791: {transaction_name}\")\n\n    transaction_id = f\"AsyncTx-{transaction_name}-{id(asyncio.current_task())}\"\n\n    try:\n        yield transaction_id\n        # \uc131\uacf5 \uc2dc \ucee4\ubc0b\n        await asyncio.sleep(0.01)  # \ucee4\ubc0b \uc2dc\ubbac\ub808\uc774\uc158\n        print(f\"   \ud2b8\ub79c\uc7ad\uc158 \ucee4\ubc0b: {transaction_id}\")\n\n    except Exception as e:\n        # \uc2e4\ud328 \uc2dc \ub864\ubc31\n        await asyncio.sleep(0.01)  # \ub864\ubc31 \uc2dc\ubbac\ub808\uc774\uc158\n        print(f\"   \ud2b8\ub79c\uc7ad\uc158 \ub864\ubc31: {transaction_id} - {e}\")\n        raise\n\n    finally:\n        print(f\"   \ud2b8\ub79c\uc7ad\uc158 \uc815\ub9ac: {transaction_id}\")\n\n@asynccontextmanager\nasync def async_batch_processor(batch_size=10):\n    \"\"\"\ube44\ub3d9\uae30 \ubc30\uce58 \ucc98\ub9ac \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n    print(f\"   \ubc30\uce58 \ucc98\ub9ac\uae30 \uc2dc\uc791 (\ud06c\uae30: {batch_size})\")\n\n    batch_items = []\n    processed_count = 0\n\n    async def process_batch():\n        nonlocal processed_count\n        if batch_items:\n            print(f\"     \ubc30\uce58 \ucc98\ub9ac: {len(batch_items)}\uac1c \ud56d\ubaa9\")\n            # \uc2e4\uc81c \ubc30\uce58 \ucc98\ub9ac \uc2dc\ubbac\ub808\uc774\uc158\n            await asyncio.sleep(0.1)\n            processed_count += len(batch_items)\n            batch_items.clear()\n\n    try:\n        processor = {\n            'add_item': lambda item: batch_items.append(item),\n            'process_batch': process_batch,\n            'get_count': lambda: processed_count\n        }\n\n        yield processor\n\n        # \ub9c8\uc9c0\ub9c9 \ubc30\uce58 \ucc98\ub9ac\n        if batch_items:\n            await process_batch()\n\n        print(f\"   \ubc30\uce58 \ucc98\ub9ac \uc644\ub8cc: \ucd1d {processed_count}\uac1c \ud56d\ubaa9\")\n\n    except Exception as e:\n        print(f\"   \ubc30\uce58 \ucc98\ub9ac \uc624\ub958: {e}\")\n        raise\n\nclass AsyncCompositeManager:\n    \"\"\"\ube44\ub3d9\uae30 \ubcf5\ud569 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n\n    def __init__(self, *async_context_managers):\n        self.async_cms = async_context_managers\n        self.entered_cms = []\n        self.results = []\n\n    async def __aenter__(self):\n        \"\"\"\ubaa8\ub4e0 \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc9c4\uc785\"\"\"\n        print(f\"   \ube44\ub3d9\uae30 \ubcf5\ud569 \ub9e4\ub2c8\uc800 \uc9c4\uc785 ({len(self.async_cms)}\uac1c)\")\n\n        try:\n            for i, acm in enumerate(self.async_cms):\n                print(f\"     \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 {i+1} \uc9c4\uc785\")\n                result = await acm.__aenter__()\n                self.entered_cms.append(acm)\n                self.results.append(result)\n\n        except Exception:\n            await self._cleanup_entered()\n            raise\n\n        return self.results\n\n    async def __aexit__(self, exc_type, exc_value, traceback):\n        \"\"\"\ubaa8\ub4e0 \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc885\ub8cc\"\"\"\n        print(f\"   \ube44\ub3d9\uae30 \ubcf5\ud569 \ub9e4\ub2c8\uc800 \uc885\ub8cc\")\n\n        exceptions = []\n\n        # \uc5ed\uc21c\uc73c\ub85c \uc885\ub8cc\n        for i, acm in enumerate(reversed(self.entered_cms)):\n            try:\n                print(f\"     \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 {len(self.entered_cms)-i} \uc885\ub8cc\")\n                await acm.__aexit__(exc_type, exc_value, traceback)\n            except Exception as e:\n                exceptions.append(e)\n                print(f\"       \uc885\ub8cc \uc911 \uc608\uc678: {e}\")\n\n        # \uc885\ub8cc \uc911 \uc608\uc678\uac00 \uc788\uc5c8\ub2e4\uba74 \uccab \ubc88\uc9f8 \uc608\uc678 \uc7ac\ubc1c\uc0dd\n        if exceptions:\n            raise exceptions[0]\n\n    async def _cleanup_entered(self):\n        \"\"\"\uc9c4\uc785\ub41c \ucee8\ud14d\uc2a4\ud2b8\ub4e4 \uc815\ub9ac\"\"\"\n        for acm in reversed(self.entered_cms):\n            try:\n                await acm.__aexit__(None, None, None)\n            except Exception as e:\n                print(f\"       \uc815\ub9ac \uc2e4\ud328: {e}\")\n\nasync def demonstrate_async_context_managers():\n    \"\"\"\ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \uae30\ubcf8 \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800:\")\n\n    async with AsyncResourceManager(\"database\") as db:\n        result1 = await db.execute(\"SELECT * FROM users\")\n        result2 = await db.execute(\"INSERT INTO logs ...\")\n        print(f\"   \uc2e4\ud589 \uacb0\uacfc: {result1}, {result2}\")\n\n    print(\"\\n2. \ube44\ub3d9\uae30 \ud2b8\ub79c\uc7ad\uc158:\")\n\n    try:\n        async with async_transaction(\"user_update\") as tx_id:\n            print(f\"   \ud2b8\ub79c\uc7ad\uc158 ID: {tx_id}\")\n            # \uc791\uc5c5 \uc218\ud589\n            await asyncio.sleep(0.05)\n            print(f\"   \uc791\uc5c5 \uc644\ub8cc\")\n\n    except Exception as e:\n        print(f\"   \ud2b8\ub79c\uc7ad\uc158 \uc608\uc678: {e}\")\n\n    print(\"\\n3. \ube44\ub3d9\uae30 \ubc30\uce58 \ucc98\ub9ac:\")\n\n    async with async_batch_processor(batch_size=5) as processor:\n        # \ud56d\ubaa9\ub4e4 \ucd94\uac00\n        for i in range(12):\n            processor['add_item'](f\"item_{i}\")\n\n            # \ubc30\uce58 \ud06c\uae30\uc5d0 \ub3c4\ub2ec\ud558\uba74 \ucc98\ub9ac\n            if (i + 1) % 5 == 0:\n                await processor['process_batch']()\n\n        print(f\"   \uc911\uac04 \ucc98\ub9ac \uac1c\uc218: {processor['get_count']()}\")\n\n    print(\"\\n4. \ube44\ub3d9\uae30 \ubcf5\ud569 \ub9e4\ub2c8\uc800:\")\n\n    async with AsyncCompositeManager(\n        AsyncResourceManager(\"database\", 0.05),\n        async_transaction(\"bulk_operation\"),\n        async_batch_processor(3)\n    ) as (db, tx, batch):\n\n        print(f\"   \ubaa8\ub4e0 \ube44\ub3d9\uae30 \ub9ac\uc18c\uc2a4 \uc900\ube44 \uc644\ub8cc\")\n        print(f\"   DB: {db.connection}\")\n        print(f\"   TX: {tx}\")\n\n        # \ubcf5\ud569 \uc791\uc5c5 \uc218\ud589\n        for i in range(7):\n            batch['add_item'](f\"async_item_{i}\")\n            if i % 3 == 2:\n                await batch['process_batch']()\n\n        result = await db.execute(\"COMMIT BATCH\")\n        print(f\"   \ubcf5\ud569 \uc791\uc5c5 \uacb0\uacfc: {result}\")\n\n# \ube44\ub3d9\uae30 \ud568\uc218 \uc2e4\ud589\nasync def run_async_demos():\n    \"\"\"\ube44\ub3d9\uae30 \ub370\ubaa8 \uc2e4\ud589\"\"\"\n    await demonstrate_async_context_managers()\n\n# \uc774\ubca4\ud2b8 \ub8e8\ud504\uc5d0\uc11c \uc2e4\ud589\ntry:\n    asyncio.run(run_async_demos())\nexcept RuntimeError:\n    # \uc774\ubbf8 \uc2e4\ud589 \uc911\uc778 \uc774\ubca4\ud2b8 \ub8e8\ud504\uac00 \uc788\ub294 \uacbd\uc6b0\n    import nest_asyncio\n    nest_asyncio.apply()\n    asyncio.run(run_async_demos())\nexcept ImportError:\n    # nest_asyncio\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uac04\ub2e8\ud55c \ub3d9\uae30 \uc2dc\ubbac\ub808\uc774\uc158\n    print(\"   \ube44\ub3d9\uae30 \ub370\ubaa8\ub294 \uc2e4\uc81c \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ud558\uc138\uc694\")\n</code></pre>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#5","title":"5. \uc2e4\ubb34 \ud328\ud134\uacfc \uace0\uae09 \ud65c\uc6a9","text":""},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#51","title":"5.1 \uc131\ub2a5 \ucd5c\uc801\ud654 \ud328\ud134","text":"<pre><code>print(\"\\n=== \uc131\ub2a5 \ucd5c\uc801\ud654 \ud328\ud134 ===\")\n\nimport time\nimport functools\nimport threading\nfrom collections import defaultdict\n\nclass PerformanceDecorator:\n    \"\"\"\uc885\ud569\uc801\uc778 \uc131\ub2a5 \ubd84\uc11d \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, enable_profiling=True, enable_caching=True, cache_size=128):\n        self.enable_profiling = enable_profiling\n        self.enable_caching = enable_caching\n        self.cache_size = cache_size\n\n        # \uc131\ub2a5 \ud1b5\uacc4\n        self.call_stats = defaultdict(lambda: {\n            'count': 0,\n            'total_time': 0,\n            'min_time': float('inf'),\n            'max_time': 0,\n            'avg_time': 0\n        })\n\n        # \uce90\uc2dc\n        self.cache = {} if enable_caching else None\n        self.cache_hits = 0\n        self.cache_misses = 0\n\n        # \uc2a4\ub808\ub4dc \uc548\uc804\uc131\n        self.lock = threading.RLock()\n\n    def __call__(self, func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            func_name = func.__name__\n\n            # \uce90\uc2dc \ud655\uc778\n            if self.enable_caching:\n                cache_key = self._generate_cache_key(func, args, kwargs)\n\n                with self.lock:\n                    if cache_key in self.cache:\n                        self.cache_hits += 1\n                        print(f\"   \uce90\uc2dc \ud788\ud2b8: {func_name}\")\n                        return self.cache[cache_key]\n                    else:\n                        self.cache_misses += 1\n\n            # \uc131\ub2a5 \uce21\uc815 \uc2dc\uc791\n            start_time = time.perf_counter() if self.enable_profiling else None\n            start_memory = self._get_memory_usage() if self.enable_profiling else None\n\n            try:\n                # \ud568\uc218 \uc2e4\ud589\n                result = func(*args, **kwargs)\n\n                # \uce90\uc2dc \uc800\uc7a5\n                if self.enable_caching:\n                    with self.lock:\n                        if len(self.cache) &gt;= self.cache_size:\n                            # LRU \ubc29\uc2dd\uc73c\ub85c \uac00\uc7a5 \uc624\ub798\ub41c \ud56d\ubaa9 \uc81c\uac70\n                            oldest_key = next(iter(self.cache))\n                            del self.cache[oldest_key]\n\n                        self.cache[cache_key] = result\n\n                return result\n\n            finally:\n                # \uc131\ub2a5 \ud1b5\uacc4 \uc5c5\ub370\uc774\ud2b8\n                if self.enable_profiling:\n                    end_time = time.perf_counter()\n                    execution_time = end_time - start_time\n                    end_memory = self._get_memory_usage()\n\n                    with self.lock:\n                        stats = self.call_stats[func_name]\n                        stats['count'] += 1\n                        stats['total_time'] += execution_time\n                        stats['min_time'] = min(stats['min_time'], execution_time)\n                        stats['max_time'] = max(stats['max_time'], execution_time)\n                        stats['avg_time'] = stats['total_time'] / stats['count']\n\n                        memory_diff = end_memory - start_memory if start_memory else 0\n                        if memory_diff &gt; 0:\n                            stats['memory_usage'] = stats.get('memory_usage', 0) + memory_diff\n\n        # \ud1b5\uacc4 \uba54\uc11c\ub4dc \ucd94\uac00\n        wrapper.get_performance_stats = lambda: self.get_performance_stats()\n        wrapper.clear_cache = lambda: self.clear_cache()\n        wrapper.get_cache_stats = lambda: self.get_cache_stats()\n\n        return wrapper\n\n    def _generate_cache_key(self, func, args, kwargs):\n        \"\"\"\uce90\uc2dc \ud0a4 \uc0dd\uc131\"\"\"\n        try:\n            return hash((func.__name__, args, tuple(sorted(kwargs.items()))))\n        except TypeError:\n            # \ud574\uc2dc \ubd88\uac00\ub2a5\ud55c \uc778\uc218\uac00 \uc788\ub294 \uacbd\uc6b0\n            return f\"{func.__name__}:{id(args)}:{id(kwargs)}\"\n\n    def _get_memory_usage(self):\n        \"\"\"\ud604\uc7ac \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ubc18\ud658 (\uadfc\uc0ac\uce58)\"\"\"\n        import psutil\n        import os\n        try:\n            process = psutil.Process(os.getpid())\n            return process.memory_info().rss\n        except ImportError:\n            return 0\n\n    def get_performance_stats(self):\n        \"\"\"\uc131\ub2a5 \ud1b5\uacc4 \ubc18\ud658\"\"\"\n        with self.lock:\n            return dict(self.call_stats)\n\n    def get_cache_stats(self):\n        \"\"\"\uce90\uc2dc \ud1b5\uacc4 \ubc18\ud658\"\"\"\n        if not self.enable_caching:\n            return {'caching_disabled': True}\n\n        with self.lock:\n            total_requests = self.cache_hits + self.cache_misses\n            hit_rate = (self.cache_hits / total_requests * 100) if total_requests &gt; 0 else 0\n\n            return {\n                'cache_size': len(self.cache),\n                'max_cache_size': self.cache_size,\n                'cache_hits': self.cache_hits,\n                'cache_misses': self.cache_misses,\n                'hit_rate': hit_rate\n            }\n\n    def clear_cache(self):\n        \"\"\"\uce90\uc2dc \ucd08\uae30\ud654\"\"\"\n        if self.enable_caching:\n            with self.lock:\n                self.cache.clear()\n                self.cache_hits = 0\n                self.cache_misses = 0\n\nclass BatchProcessingDecorator:\n    \"\"\"\ubc30\uce58 \ucc98\ub9ac \ucd5c\uc801\ud654 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, batch_size=10, flush_interval=1.0):\n        self.batch_size = batch_size\n        self.flush_interval = flush_interval\n        self.batch_queue = []\n        self.last_flush = time.time()\n        self.lock = threading.Lock()\n        self.results = {}\n\n    def __call__(self, func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            request_id = id((args, kwargs))\n\n            with self.lock:\n                # \ubc30\uce58\uc5d0 \uc694\uccad \ucd94\uac00\n                self.batch_queue.append((request_id, args, kwargs))\n\n                # \ubc30\uce58 \ud06c\uae30 \ub3c4\ub2ec \ub610\ub294 \uc2dc\uac04 \ucd08\uacfc \uc2dc \ucc98\ub9ac\n                should_flush = (\n                    len(self.batch_queue) &gt;= self.batch_size or\n                    time.time() - self.last_flush &gt;= self.flush_interval\n                )\n\n                if should_flush:\n                    self._process_batch(func)\n\n            # \uacb0\uacfc \ub300\uae30\n            while request_id not in self.results:\n                time.sleep(0.001)  # \uc9e7\uc740 \ub300\uae30\n\n            with self.lock:\n                result = self.results.pop(request_id)\n\n            return result\n\n        # \uac15\uc81c \ud50c\ub7ec\uc2dc \uba54\uc11c\ub4dc \ucd94\uac00\n        wrapper.flush_batch = lambda: self._process_batch(func)\n        wrapper.get_batch_stats = lambda: self.get_batch_stats()\n\n        return wrapper\n\n    def _process_batch(self, func):\n        \"\"\"\ubc30\uce58 \ucc98\ub9ac \uc2e4\ud589\"\"\"\n        if not self.batch_queue:\n            return\n\n        current_batch = self.batch_queue.copy()\n        self.batch_queue.clear()\n        self.last_flush = time.time()\n\n        print(f\"   \ubc30\uce58 \ucc98\ub9ac: {len(current_batch)}\uac1c \uc694\uccad\")\n\n        # \ubc30\uce58\uc758 \uac01 \uc694\uccad \ucc98\ub9ac\n        for request_id, args, kwargs in current_batch:\n            try:\n                result = func(*args, **kwargs)\n                self.results[request_id] = result\n            except Exception as e:\n                self.results[request_id] = e\n\n    def get_batch_stats(self):\n        \"\"\"\ubc30\uce58 \ud1b5\uacc4 \ubc18\ud658\"\"\"\n        with self.lock:\n            return {\n                'batch_size': self.batch_size,\n                'flush_interval': self.flush_interval,\n                'current_queue_size': len(self.batch_queue),\n                'pending_results': len(self.results)\n            }\n\n@contextmanager\ndef resource_pool(resource_factory, pool_size=5):\n    \"\"\"\ub9ac\uc18c\uc2a4 \ud480 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n    pool = []\n    used_resources = set()\n\n    # \ub9ac\uc18c\uc2a4 \ud480 \ucd08\uae30\ud654\n    for i in range(pool_size):\n        resource = resource_factory()\n        pool.append(resource)\n\n    print(f\"   \ub9ac\uc18c\uc2a4 \ud480 \uc0dd\uc131: {pool_size}\uac1c\")\n\n    def acquire_resource():\n        \"\"\"\ub9ac\uc18c\uc2a4 \ud68d\ub4dd\"\"\"\n        if not pool:\n            raise RuntimeError(\"\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub9ac\uc18c\uc2a4\uac00 \uc5c6\uc2b5\ub2c8\ub2e4\")\n\n        resource = pool.pop()\n        used_resources.add(resource)\n        print(f\"     \ub9ac\uc18c\uc2a4 \ud68d\ub4dd: {id(resource)}\")\n        return resource\n\n    def release_resource(resource):\n        \"\"\"\ub9ac\uc18c\uc2a4 \ubc18\ud658\"\"\"\n        if resource in used_resources:\n            used_resources.remove(resource)\n            pool.append(resource)\n            print(f\"     \ub9ac\uc18c\uc2a4 \ubc18\ud658: {id(resource)}\")\n\n    try:\n        yield acquire_resource, release_resource\n    finally:\n        # \ubaa8\ub4e0 \ub9ac\uc18c\uc2a4 \uc815\ub9ac\n        print(f\"   \ub9ac\uc18c\uc2a4 \ud480 \uc815\ub9ac: \uc0ac\uc6a9 \uc911\uc778 \ub9ac\uc18c\uc2a4 {len(used_resources)}\uac1c\")\n\n        # \uc0ac\uc6a9 \uc911\uc778 \ub9ac\uc18c\uc2a4\ub4e4\uc744 \ud480\ub85c \ubc18\ud658\n        for resource in list(used_resources):\n            release_resource(resource)\n\n        # \ub9ac\uc18c\uc2a4 \uc815\ub9ac\n        for resource in pool:\n            if hasattr(resource, 'close'):\n                resource.close()\n\ndef demonstrate_performance_patterns():\n    \"\"\"\uc131\ub2a5 \ucd5c\uc801\ud654 \ud328\ud134 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \uc885\ud569 \uc131\ub2a5 \ub370\ucf54\ub808\uc774\ud130:\")\n\n    @PerformanceDecorator(enable_profiling=True, enable_caching=True, cache_size=5)\n    def fibonacci(n):\n        \"\"\"\ud53c\ubcf4\ub098\uce58 \uc218 \uacc4\uc0b0 (\ucd5c\uc801\ud654\ub428)\"\"\"\n        if n &lt;= 1:\n            return n\n        return fibonacci(n-1) + fibonacci(n-2)\n\n    # \uc131\ub2a5 \ud14c\uc2a4\ud2b8\n    for i in [10, 10, 15, 10, 20]:  # \uc77c\ubd80 \uc911\ubcf5 \ud638\ucd9c\ub85c \uce90\uc2dc \ud6a8\uacfc \ud655\uc778\n        result = fibonacci(i)\n        print(f\"   fibonacci({i}) = {result}\")\n\n    # \uc131\ub2a5 \ud1b5\uacc4 \ud655\uc778\n    perf_stats = fibonacci.get_performance_stats()\n    cache_stats = fibonacci.get_cache_stats()\n\n    print(f\"   \uc131\ub2a5 \ud1b5\uacc4: {perf_stats}\")\n    print(f\"   \uce90\uc2dc \ud788\ud2b8\uc728: {cache_stats['hit_rate']:.1f}%\")\n\n    print(\"\\n2. \ubc30\uce58 \ucc98\ub9ac \ub370\ucf54\ub808\uc774\ud130:\")\n\n    @BatchProcessingDecorator(batch_size=3, flush_interval=0.5)\n    def process_data(data):\n        \"\"\"\ub370\uc774\ud130 \ucc98\ub9ac (\ubc30\uce58 \ucd5c\uc801\ud654\ub428)\"\"\"\n        # \uc2e4\uc81c\ub85c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5 \ub4f1\n        import time\n        time.sleep(0.01)  # \ucc98\ub9ac \uc2dc\ubbac\ub808\uc774\uc158\n        return f\"processed_{data}\"\n\n    # \uc5ec\ub7ec \uc694\uccad \ub3d9\uc2dc \ucc98\ub9ac\n    import threading\n\n    def make_requests():\n        for i in range(5):\n            result = process_data(f\"data_{i}\")\n            print(f\"     \uc694\uccad \uacb0\uacfc: {result}\")\n\n    # \ub3d9\uc2dc \uc694\uccad \uc2dc\ubbac\ub808\uc774\uc158\n    threads = []\n    for _ in range(2):\n        thread = threading.Thread(target=make_requests)\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    batch_stats = process_data.get_batch_stats()\n    print(f\"   \ubc30\uce58 \ud1b5\uacc4: {batch_stats}\")\n\n    print(\"\\n3. \ub9ac\uc18c\uc2a4 \ud480 \ud328\ud134:\")\n\n    class DatabaseConnection:\n        \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        def __init__(self):\n            self.connected = True\n            print(f\"       DB \uc5f0\uacb0 \uc0dd\uc131: {id(self)}\")\n\n        def query(self, sql):\n            if not self.connected:\n                raise RuntimeError(\"\uc5f0\uacb0\uc774 \ub2eb\ud614\uc2b5\ub2c8\ub2e4\")\n            return f\"Result of: {sql}\"\n\n        def close(self):\n            self.connected = False\n            print(f\"       DB \uc5f0\uacb0 \uc885\ub8cc: {id(self)}\")\n\n    with resource_pool(DatabaseConnection, pool_size=3) as (acquire, release):\n        # \uc5ec\ub7ec \uc791\uc5c5\uc5d0\uc11c \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\n        conn1 = acquire()\n        result1 = conn1.query(\"SELECT * FROM users\")\n\n        conn2 = acquire()\n        result2 = conn2.query(\"SELECT * FROM orders\")\n\n        print(f\"   \ucffc\ub9ac \uacb0\uacfc: {result1}\")\n        print(f\"   \ucffc\ub9ac \uacb0\uacfc: {result2}\")\n\n        # \ub9ac\uc18c\uc2a4 \ubc18\ud658\n        release(conn1)\n        release(conn2)\n\n        # \ub2e4\uc2dc \uc0ac\uc6a9\n        conn3 = acquire()\n        result3 = conn3.query(\"SELECT COUNT(*) FROM products\")\n        print(f\"   \ucffc\ub9ac \uacb0\uacfc: {result3}\")\n        release(conn3)\n\ndemonstrate_performance_patterns()\n</code></pre>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#6","title":"6. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#1_1","title":"\uc5f0\uc2b5 1: \uace0\uae09 \uce90\uc2f1 \uc2dc\uc2a4\ud15c","text":"<p>\uba54\ubaa8\ub9ac\uc640 \ub514\uc2a4\ud06c \uce90\uc2dc\ub97c \uacb0\ud569\ud55c \ub2e4\ub2e8\uacc4 \uce90\uc2f1 \ub370\ucf54\ub808\uc774\ud130\ub97c \uad6c\ud604\ud558\uc138\uc694: - \uba54\ubaa8\ub9ac \uce90\uc2dc (\ube60\ub978 \uc811\uadfc) - \ub514\uc2a4\ud06c \uce90\uc2dc (\uc601\uad6c \uc800\uc7a5) - TTL\uacfc LRU \uc815\ucc45 - \uce90\uc2dc \ub3d9\uae30\ud654</p>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#2","title":"\uc5f0\uc2b5 2: \ubd84\uc0b0 \ub77d \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800","text":"<p>Redis\ub098 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \ud65c\uc6a9\ud55c \ubd84\uc0b0 \ub77d \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694: - \ub370\ub4dc\ub77d \ubc29\uc9c0 - \ub77d \ud0c0\uc784\uc544\uc6c3 - \uc790\ub3d9 \uac31\uc2e0 - \uc7a5\uc560 \ubcf5\uad6c</p>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#3-api","title":"\uc5f0\uc2b5 3: API \ub808\uc774\ud2b8 \ub9ac\ubbf8\ud130","text":"<p>\uace0\uae09 API \ud638\ucd9c \uc81c\ud55c \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694: - \uc0ac\uc6a9\uc790\ubcc4 \uc81c\ud55c - \uc2dc\uac04 \uc708\ub3c4\uc6b0\ubcc4 \uc81c\ud55c - \uc810\uc9c4\uc801 \uc81c\ud55c \uc644\ud654 - \uc6b0\uc120\uc21c\uc704 \uae30\ubc18 \uc81c\ud55c</p>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#4_1","title":"\uc5f0\uc2b5 4: \ud2b8\ub79c\uc7ad\uc158 \ub9e4\ub2c8\uc800","text":"<p>\ub2e4\uc911 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158\uc744 \uad00\ub9ac\ud558\ub294 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub97c \uad6c\ud604\ud558\uc138\uc694: - 2\ub2e8\uacc4 \ucee4\ubc0b \ud504\ub85c\ud1a0\ucf5c - \ubd80\ubd84 \uc2e4\ud328 \ucc98\ub9ac - \ubcf4\uc0c1 \ud2b8\ub79c\uc7ad\uc158 - \ubaa8\ub2c8\ud130\ub9c1\uacfc \ub85c\uae45</p>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\ud074\ub798\uc2a4 \uae30\ubc18 \ub370\ucf54\ub808\uc774\ud130: \uc0c1\ud0dc\ub97c \uc720\uc9c0\ud558\uace0 \ubcf5\uc7a1\ud55c \ub85c\uc9c1\uc744 \uad6c\ud604\ud558\ub294 \uac15\ub825\ud55c \ud328\ud134</li> <li>\ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub294 \ub370\ucf54\ub808\uc774\ud130: \uc124\uc815 \uac00\ub2a5\ud558\uace0 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub370\ucf54\ub808\uc774\ud130 \uad6c\ud604</li> <li>functools.wraps: \uba54\ud0c0\ub370\uc774\ud130 \ubcf4\uc874\uacfc \ud568\uc218 \uc2dc\uadf8\ub2c8\ucc98 \uc720\uc9c0\uc758 \uc911\uc694\uc131</li> <li>\uace0\uae09 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800: \ub9ac\uc18c\uc2a4 \uad00\ub9ac\uc640 \uc608\uc678 \ucc98\ub9ac\uc758 \uc815\uad50\ud55c \uc81c\uc5b4</li> <li>contextlib \ubaa8\ub4c8: \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc791\uc131\uc744 \uc704\ud55c \uc720\uc6a9\ud55c \ub3c4\uad6c\ub4e4</li> <li>\uc911\ucca9 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800: \ubcf5\uc7a1\ud55c \ub9ac\uc18c\uc2a4 \uc870\ud569\uacfc \uc758\uc874\uc131 \uad00\ub9ac</li> <li>\ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800: \ube44\ub3d9\uae30 \ud658\uacbd\uc5d0\uc11c\uc758 \ub9ac\uc18c\uc2a4 \uad00\ub9ac</li> <li>\uc131\ub2a5 \ucd5c\uc801\ud654 \ud328\ud134: \uc2e4\ubb34\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uace0\uc131\ub2a5 \ud328\ud134\ub4e4</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131 \uc2ec\ud654\ub97c \ud1b5\ud574 \ub354\uc6b1 \ubcf5\uc7a1\ud55c \ub3d9\uc2dc\uc131 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ubc95\uc744 \ud559\uc2b5\ud558\uac8c \ub429\ub2c8\ub2e4.</p>"},{"location":"tutorials/advanced/chapter03_advanced_decorators_context_managers/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ub370\ucf54\ub808\uc774\ud130\ub294 \ud568\uc218\uc758 \ub3d9\uc791\uc744 \ud655\uc7a5\ud558\ub294 \uac15\ub825\ud55c \ub3c4\uad6c\uc785\ub2c8\ub2e4</li> <li>\ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub294 \ub9ac\uc18c\uc2a4 \uad00\ub9ac\uc640 \uc608\uc678 \ucc98\ub9ac\ub97c \ubcf4\uc7a5\ud569\ub2c8\ub2e4</li> <li>functools.wraps\ub97c \uc0ac\uc6a9\ud558\uc5ec \uba54\ud0c0\ub370\uc774\ud130\ub97c \ubcf4\uc874\ud574\uc57c \ud569\ub2c8\ub2e4</li> <li>\ubcf5\uc7a1\ud55c \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 \uc911\ucca9\ub41c \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\uac00 \uc720\uc6a9\ud569\ub2c8\ub2e4</li> <li>\uc131\ub2a5 \ucd5c\uc801\ud654\ub97c \uc704\ud574 \uce90\uc2f1, \ubc30\uce58 \ucc98\ub9ac, \ub9ac\uc18c\uc2a4 \ud480\ub9c1 \ub4f1\uc744 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\ube44\ub3d9\uae30 \ud658\uacbd\uc5d0\uc11c\ub294 \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4  </li> </ul>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/","title":"Chapter 4: \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131 \uc2ec\ud654","text":""},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \uace0\uae09 \uc2a4\ub808\ub529 \ud328\ud134\uacfc \ub3d9\uae30\ud654 \ud504\ub9ac\ubbf8\ud2f0\ube0c\ub97c \uc124\uacc4\ud558\uace0 \uad6c\ud604\ud558\uae30 - AsyncIO\uc758 \uace0\uae09 \uae30\ub2a5\uacfc \uc131\ub2a5 \ucd5c\uc801\ud654 \uae30\ubc95 \ub9c8\uc2a4\ud130\ud558\uae30 - \uba40\ud2f0\ud504\ub85c\uc138\uc2f1 \uace0\uae09 \uae30\ubc95, \ubd84\uc0b0 \uc791\uc5c5 \ucc98\ub9ac, \uc131\ub2a5 \ucd5c\uc801\ud654, \ub3d9\uc2dc\uc131 \ub514\uc790\uc778 \ud328\ud134 \ub4f1\uc744 \uc2e4\ubb34 \uc911\uc2ec\uc73c\ub85c \ub2e4\ub8f9\ub2c8\ub2e4.</p>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#1","title":"1. \uace0\uae09 \uc2a4\ub808\ub529 \ud328\ud134\uacfc \ub3d9\uae30\ud654","text":""},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#11","title":"1.1 \uace0\uae09 \ub3d9\uae30\ud654 \ud504\ub9ac\ubbf8\ud2f0\ube0c","text":"<pre><code>print(\"=== \uace0\uae09 \ub3d9\uae30\ud654 \ud504\ub9ac\ubbf8\ud2f0\ube0c ===\")\n\nimport threading\nimport time\nimport queue\nimport weakref\nfrom contextlib import contextmanager\nfrom collections import defaultdict, deque\nfrom dataclasses import dataclass\nfrom typing import Any, Callable, Optional, List, Dict\nimport uuid\n\nclass ReadWriteLock:\n    \"\"\"\uc77d\uae30-\uc4f0\uae30 \ub77d \uad6c\ud604\"\"\"\n\n    def __init__(self):\n        self._read_ready = threading.Condition(threading.RLock())\n        self._readers = 0\n        self._writers = 0\n        self._write_ready = threading.Condition(threading.RLock())\n\n    def acquire_read(self):\n        \"\"\"\uc77d\uae30 \ub77d \ud68d\ub4dd\"\"\"\n        with self._read_ready:\n            while self._writers &gt; 0:\n                self._read_ready.wait()\n            self._readers += 1\n            print(f\"   \uc77d\uae30 \ub77d \ud68d\ub4dd: {threading.current_thread().name} (\uc77d\uae30 \uc911: {self._readers})\")\n\n    def release_read(self):\n        \"\"\"\uc77d\uae30 \ub77d \ud574\uc81c\"\"\"\n        with self._read_ready:\n            self._readers -= 1\n            print(f\"   \uc77d\uae30 \ub77d \ud574\uc81c: {threading.current_thread().name} (\uc77d\uae30 \uc911: {self._readers})\")\n            if self._readers == 0:\n                self._read_ready.notify_all()\n\n    def acquire_write(self):\n        \"\"\"\uc4f0\uae30 \ub77d \ud68d\ub4dd\"\"\"\n        with self._write_ready:\n            while self._writers &gt; 0 or self._readers &gt; 0:\n                self._write_ready.wait()\n            self._writers += 1\n            print(f\"   \uc4f0\uae30 \ub77d \ud68d\ub4dd: {threading.current_thread().name}\")\n\n    def release_write(self):\n        \"\"\"\uc4f0\uae30 \ub77d \ud574\uc81c\"\"\"\n        with self._write_ready:\n            self._writers -= 1\n            print(f\"   \uc4f0\uae30 \ub77d \ud574\uc81c: {threading.current_thread().name}\")\n            with self._read_ready:\n                self._read_ready.notify_all()\n            self._write_ready.notify_all()\n\n    @contextmanager\n    def read_lock(self):\n        \"\"\"\uc77d\uae30 \ub77d \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n        self.acquire_read()\n        try:\n            yield\n        finally:\n            self.release_read()\n\n    @contextmanager\n    def write_lock(self):\n        \"\"\"\uc4f0\uae30 \ub77d \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n        self.acquire_write()\n        try:\n            yield\n        finally:\n            self.release_write()\n\nclass Barrier:\n    \"\"\"\uc2a4\ub808\ub4dc \ub3d9\uae30\ud654 \uc7a5\ubcbd\"\"\"\n\n    def __init__(self, parties, action=None, timeout=None):\n        self.parties = parties\n        self.action = action\n        self.timeout = timeout\n        self._condition = threading.Condition()\n        self._count = 0\n        self._generation = 0\n        self._broken = False\n\n    def wait(self, timeout=None):\n        \"\"\"\uc7a5\ubcbd\uc5d0\uc11c \ub300\uae30\"\"\"\n        timeout = timeout or self.timeout\n\n        with self._condition:\n            if self._broken:\n                raise BrokenBarrierError(\"Barrier is broken\")\n\n            generation = self._generation\n            self._count += 1\n\n            try:\n                if self._count == self.parties:\n                    # \ub9c8\uc9c0\ub9c9 \uc2a4\ub808\ub4dc - \uc7a5\ubcbd \ud574\uc81c\n                    print(f\"   \uc7a5\ubcbd \ud574\uc81c: \ubaa8\ub4e0 {self.parties}\uac1c \uc2a4\ub808\ub4dc \ub3c4\ucc29\")\n                    if self.action:\n                        try:\n                            self.action()\n                        except Exception as e:\n                            self._break_barrier()\n                            raise\n\n                    self._next_generation()\n                    return self.parties - 1\n                else:\n                    # \ub2e4\ub978 \uc2a4\ub808\ub4dc\ub4e4 \ub300\uae30\n                    print(f\"   \uc7a5\ubcbd \ub300\uae30: {threading.current_thread().name} ({self._count}/{self.parties})\")\n\n                    while (self._count &lt; self.parties and \n                           generation == self._generation and \n                           not self._broken):\n\n                        if not self._condition.wait(timeout):\n                            self._break_barrier()\n                            raise TimeoutError(\"Barrier timeout\")\n\n                    if self._broken:\n                        raise BrokenBarrierError(\"Barrier broken during wait\")\n\n                    return self.parties - self._count\n\n            except Exception:\n                self._break_barrier()\n                raise\n\n    def _next_generation(self):\n        \"\"\"\ub2e4\uc74c \uc138\ub300\ub85c \uc9c4\ud589\"\"\"\n        self._count = 0\n        self._generation += 1\n        self._condition.notify_all()\n\n    def _break_barrier(self):\n        \"\"\"\uc7a5\ubcbd \ud30c\uad34\"\"\"\n        self._broken = True\n        self._condition.notify_all()\n\n    def reset(self):\n        \"\"\"\uc7a5\ubcbd \ub9ac\uc14b\"\"\"\n        with self._condition:\n            if self._count &gt; 0:\n                self._break_barrier()\n            self._broken = False\n            self._next_generation()\n\nclass BrokenBarrierError(Exception):\n    \"\"\"\uc7a5\ubcbd \ud30c\uad34 \uc608\uc678\"\"\"\n    pass\n\nclass CountDownLatch:\n    \"\"\"\uce74\uc6b4\ud2b8\ub2e4\uc6b4 \ub798\uce58\"\"\"\n\n    def __init__(self, count):\n        self._count = count\n        self._condition = threading.Condition()\n\n    def count_down(self):\n        \"\"\"\uce74\uc6b4\ud2b8 \uac10\uc18c\"\"\"\n        with self._condition:\n            if self._count &gt; 0:\n                self._count -= 1\n                print(f\"   \uce74\uc6b4\ud2b8\ub2e4\uc6b4: {self._count} \ub0a8\uc74c\")\n                if self._count == 0:\n                    self._condition.notify_all()\n\n    def wait(self, timeout=None):\n        \"\"\"\uce74\uc6b4\ud2b8\uac00 0\uc774 \ub420 \ub54c\uae4c\uc9c0 \ub300\uae30\"\"\"\n        with self._condition:\n            while self._count &gt; 0:\n                if not self._condition.wait(timeout):\n                    return False\n            return True\n\n    @property\n    def count(self):\n        \"\"\"\ud604\uc7ac \uce74\uc6b4\ud2b8 \ubc18\ud658\"\"\"\n        return self._count\n\ndef demonstrate_advanced_synchronization():\n    \"\"\"\uace0\uae09 \ub3d9\uae30\ud654 \ud504\ub9ac\ubbf8\ud2f0\ube0c \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \uc77d\uae30-\uc4f0\uae30 \ub77d:\")\n\n    rw_lock = ReadWriteLock()\n    shared_data = {\"value\": 0}\n\n    def reader(name, duration=0.1):\n        \"\"\"\uc77d\uae30 \uc791\uc5c5\"\"\"\n        with rw_lock.read_lock():\n            value = shared_data[\"value\"]\n            time.sleep(duration)  # \uc77d\uae30 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n            print(f\"     {name} \uc77d\uae30 \uc644\ub8cc: {value}\")\n\n    def writer(name, new_value, duration=0.1):\n        \"\"\"\uc4f0\uae30 \uc791\uc5c5\"\"\"\n        with rw_lock.write_lock():\n            old_value = shared_data[\"value\"]\n            time.sleep(duration)  # \uc4f0\uae30 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n            shared_data[\"value\"] = new_value\n            print(f\"     {name} \uc4f0\uae30 \uc644\ub8cc: {old_value} -&gt; {new_value}\")\n\n    # \ub3d9\uc2dc \uc77d\uae30/\uc4f0\uae30 \ud14c\uc2a4\ud2b8\n    threads = []\n\n    for i in range(3):\n        t = threading.Thread(target=reader, args=(f\"Reader-{i+1}\",), name=f\"Reader-{i+1}\")\n        threads.append(t)\n\n    t = threading.Thread(target=writer, args=(\"Writer-1\", 42), name=\"Writer-1\")\n    threads.append(t)\n\n    for i in range(2):\n        t = threading.Thread(target=reader, args=(f\"Reader-{i+4}\",), name=f\"Reader-{i+4}\")\n        threads.append(t)\n\n    for t in threads:\n        t.start()\n\n    for t in threads:\n        t.join()\n\n    print(\"\\n2. \uc2a4\ub808\ub4dc \ub3d9\uae30\ud654 \uc7a5\ubcbd:\")\n\n    def barrier_action():\n        print(\"     \ubaa8\ub4e0 \uc2a4\ub808\ub4dc\uac00 \uc7a5\ubcbd\uc5d0 \ub3c4\ub2ec\ud588\uc2b5\ub2c8\ub2e4!\")\n\n    barrier = Barrier(3, action=barrier_action)\n\n    def worker_with_barrier(name, work_time):\n        \"\"\"\uc7a5\ubcbd\uc744 \uc0ac\uc6a9\ud558\ub294 \uc6cc\ucee4\"\"\"\n        print(f\"     {name} \uc791\uc5c5 \uc2dc\uc791\")\n        time.sleep(work_time)  # \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n        print(f\"     {name} \uc7a5\ubcbd \ub3c4\ub2ec\")\n\n        try:\n            index = barrier.wait(timeout=2.0)\n            print(f\"     {name} \uc7a5\ubcbd \ud1b5\uacfc (\uc21c\uc11c: {index})\")\n        except (BrokenBarrierError, TimeoutError) as e:\n            print(f\"     {name} \uc7a5\ubcbd \uc624\ub958: {e}\")\n\n    barrier_threads = []\n    work_times = [0.1, 0.2, 0.15]  # \uc11c\ub85c \ub2e4\ub978 \uc791\uc5c5 \uc2dc\uac04\n\n    for i, work_time in enumerate(work_times):\n        t = threading.Thread(\n            target=worker_with_barrier, \n            args=(f\"Worker-{i+1}\", work_time),\n            name=f\"Worker-{i+1}\"\n        )\n        barrier_threads.append(t)\n        t.start()\n\n    for t in barrier_threads:\n        t.join()\n\n    print(\"\\n3. \uce74\uc6b4\ud2b8\ub2e4\uc6b4 \ub798\uce58:\")\n\n    latch = CountDownLatch(3)\n\n    def countdown_worker(name, work_time):\n        \"\"\"\uce74\uc6b4\ud2b8\ub2e4\uc6b4 \ub798\uce58\ub97c \uc0ac\uc6a9\ud558\ub294 \uc6cc\ucee4\"\"\"\n        print(f\"     {name} \ucd08\uae30\ud654 \uc791\uc5c5 \uc2dc\uc791\")\n        time.sleep(work_time)\n        print(f\"     {name} \ucd08\uae30\ud654 \uc644\ub8cc\")\n        latch.count_down()\n\n    def main_worker():\n        \"\"\"\uba54\uc778 \uc6cc\ucee4 - \ub2e4\ub978 \uc6cc\ucee4\ub4e4\uc758 \uc644\ub8cc\ub97c \ub300\uae30\"\"\"\n        print(\"     \uba54\uc778 \uc6cc\ucee4: \ucd08\uae30\ud654 \uc644\ub8cc \ub300\uae30 \uc911...\")\n        if latch.wait(timeout=2.0):\n            print(\"     \uba54\uc778 \uc6cc\ucee4: \ubaa8\ub4e0 \ucd08\uae30\ud654 \uc644\ub8cc, \uba54\uc778 \uc791\uc5c5 \uc2dc\uc791\")\n        else:\n            print(\"     \uba54\uc778 \uc6cc\ucee4: \ud0c0\uc784\uc544\uc6c3!\")\n\n    # \uce74\uc6b4\ud2b8\ub2e4\uc6b4 \ub798\uce58 \ud14c\uc2a4\ud2b8\n    countdown_threads = []\n\n    # \uba54\uc778 \uc6cc\ucee4 \uc2dc\uc791\n    main_thread = threading.Thread(target=main_worker, name=\"MainWorker\")\n    main_thread.start()\n\n    # \ucd08\uae30\ud654 \uc6cc\ucee4\ub4e4 \uc2dc\uc791\n    for i in range(3):\n        t = threading.Thread(\n            target=countdown_worker, \n            args=(f\"InitWorker-{i+1}\", 0.1 * (i + 1)),\n            name=f\"InitWorker-{i+1}\"\n        )\n        countdown_threads.append(t)\n        t.start()\n\n    main_thread.join()\n    for t in countdown_threads:\n        t.join()\n\ndemonstrate_advanced_synchronization()\n</code></pre>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#12","title":"1.2 \uc2a4\ub808\ub4dc \ud480 \uace0\uae09 \ud328\ud134","text":"<pre><code>print(\"\\n=== \uc2a4\ub808\ub4dc \ud480 \uace0\uae09 \ud328\ud134 ===\")\n\nimport concurrent.futures\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nimport functools\nimport heapq\nfrom enum import Enum\n\nclass TaskPriority(Enum):\n    \"\"\"\uc791\uc5c5 \uc6b0\uc120\uc21c\uc704\"\"\"\n    LOW = 3\n    NORMAL = 2\n    HIGH = 1\n    CRITICAL = 0\n\n@dataclass\nclass PriorityTask:\n    \"\"\"\uc6b0\uc120\uc21c\uc704 \uc791\uc5c5\"\"\"\n    priority: TaskPriority\n    task_id: str\n    func: Callable\n    args: tuple = ()\n    kwargs: dict = None\n    created_at: float = None\n\n    def __post_init__(self):\n        if self.kwargs is None:\n            self.kwargs = {}\n        if self.created_at is None:\n            self.created_at = time.time()\n\n    def __lt__(self, other):\n        \"\"\"\uc6b0\uc120\uc21c\uc704 \ube44\uad50\"\"\"\n        if self.priority.value != other.priority.value:\n            return self.priority.value &lt; other.priority.value\n        return self.created_at &lt; other.created_at\n\n    def execute(self):\n        \"\"\"\uc791\uc5c5 \uc2e4\ud589\"\"\"\n        return self.func(*self.args, **self.kwargs)\n\nclass PriorityThreadPool:\n    \"\"\"\uc6b0\uc120\uc21c\uc704 \uae30\ubc18 \uc2a4\ub808\ub4dc \ud480\"\"\"\n\n    def __init__(self, max_workers=4, name_prefix=\"PriorityWorker\"):\n        self.max_workers = max_workers\n        self.name_prefix = name_prefix\n        self._task_queue = queue.PriorityQueue()\n        self._shutdown = False\n        self._workers = []\n        self._results = {}\n        self._lock = threading.Lock()\n        self._active_tasks = set()\n\n        # \uc6cc\ucee4 \uc2a4\ub808\ub4dc \uc2dc\uc791\n        for i in range(max_workers):\n            worker = threading.Thread(\n                target=self._worker,\n                name=f\"{name_prefix}-{i+1}\"\n            )\n            worker.daemon = True\n            worker.start()\n            self._workers.append(worker)\n\n    def _worker(self):\n        \"\"\"\uc6cc\ucee4 \uc2a4\ub808\ub4dc \uba54\uc778 \ub8e8\ud504\"\"\"\n        while not self._shutdown:\n            try:\n                # \uc6b0\uc120\uc21c\uc704 \uc791\uc5c5 \uac00\uc838\uc624\uae30\n                priority_task = self._task_queue.get(timeout=1.0)\n\n                with self._lock:\n                    self._active_tasks.add(priority_task.task_id)\n\n                print(f\"   \uc791\uc5c5 \uc2dc\uc791: {priority_task.task_id} \"\n                      f\"(\uc6b0\uc120\uc21c\uc704: {priority_task.priority.name}) - {threading.current_thread().name}\")\n\n                try:\n                    # \uc791\uc5c5 \uc2e4\ud589\n                    result = priority_task.execute()\n\n                    with self._lock:\n                        self._results[priority_task.task_id] = {\n                            'result': result,\n                            'exception': None,\n                            'completed_at': time.time()\n                        }\n\n                    print(f\"   \uc791\uc5c5 \uc644\ub8cc: {priority_task.task_id}\")\n\n                except Exception as e:\n                    with self._lock:\n                        self._results[priority_task.task_id] = {\n                            'result': None,\n                            'exception': e,\n                            'completed_at': time.time()\n                        }\n\n                    print(f\"   \uc791\uc5c5 \uc2e4\ud328: {priority_task.task_id} - {e}\")\n\n                finally:\n                    with self._lock:\n                        self._active_tasks.discard(priority_task.task_id)\n                    self._task_queue.task_done()\n\n            except queue.Empty:\n                continue\n            except Exception as e:\n                print(f\"   \uc6cc\ucee4 \uc624\ub958: {e}\")\n\n    def submit(self, func, *args, priority=TaskPriority.NORMAL, task_id=None, **kwargs):\n        \"\"\"\uc791\uc5c5 \uc81c\ucd9c\"\"\"\n        if self._shutdown:\n            raise RuntimeError(\"\uc2a4\ub808\ub4dc \ud480\uc774 \uc885\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4\")\n\n        if task_id is None:\n            task_id = str(uuid.uuid4())[:8]\n\n        task = PriorityTask(\n            priority=priority,\n            task_id=task_id,\n            func=func,\n            args=args,\n            kwargs=kwargs\n        )\n\n        self._task_queue.put(task)\n        print(f\"   \uc791\uc5c5 \uc81c\ucd9c: {task_id} (\uc6b0\uc120\uc21c\uc704: {priority.name})\")\n\n        return task_id\n\n    def get_result(self, task_id, timeout=None):\n        \"\"\"\uc791\uc5c5 \uacb0\uacfc \uac00\uc838\uc624\uae30\"\"\"\n        start_time = time.time()\n\n        while True:\n            with self._lock:\n                if task_id in self._results:\n                    result_info = self._results.pop(task_id)\n                    if result_info['exception']:\n                        raise result_info['exception']\n                    return result_info['result']\n\n            if timeout and (time.time() - start_time) &gt; timeout:\n                raise TimeoutError(f\"\uc791\uc5c5 {task_id} \ud0c0\uc784\uc544\uc6c3\")\n\n            time.sleep(0.01)\n\n    def get_stats(self):\n        \"\"\"\ud480 \ud1b5\uacc4 \ubc18\ud658\"\"\"\n        with self._lock:\n            return {\n                'max_workers': self.max_workers,\n                'active_workers': len([w for w in self._workers if w.is_alive()]),\n                'queue_size': self._task_queue.qsize(),\n                'active_tasks': len(self._active_tasks),\n                'pending_results': len(self._results)\n            }\n\n    def shutdown(self, wait=True):\n        \"\"\"\uc2a4\ub808\ub4dc \ud480 \uc885\ub8cc\"\"\"\n        self._shutdown = True\n        if wait:\n            for worker in self._workers:\n                worker.join()\n\nclass AdaptiveThreadPool:\n    \"\"\"\uc801\uc751\ud615 \uc2a4\ub808\ub4dc \ud480\"\"\"\n\n    def __init__(self, min_workers=2, max_workers=8, scale_factor=1.5):\n        self.min_workers = min_workers\n        self.max_workers = max_workers\n        self.scale_factor = scale_factor\n        self._executor = ThreadPoolExecutor(max_workers=min_workers)\n        self._current_workers = min_workers\n        self._task_queue = queue.Queue()\n        self._submitted_tasks = 0\n        self._completed_tasks = 0\n        self._lock = threading.Lock()\n        self._monitor_thread = None\n        self._shutdown = False\n\n        self._start_monitor()\n\n    def _start_monitor(self):\n        \"\"\"\ubaa8\ub2c8\ud130\ub9c1 \uc2a4\ub808\ub4dc \uc2dc\uc791\"\"\"\n        self._monitor_thread = threading.Thread(target=self._monitor_load, daemon=True)\n        self._monitor_thread.start()\n\n    def _monitor_load(self):\n        \"\"\"\ubd80\ud558 \ubaa8\ub2c8\ud130\ub9c1 \ubc0f \uc6cc\ucee4 \uc218 \uc870\uc815\"\"\"\n        while not self._shutdown:\n            try:\n                with self._lock:\n                    queue_size = self._task_queue.qsize()\n                    pending_ratio = queue_size / max(self._current_workers, 1)\n\n                # \uc2a4\ucf00\uc77c \uc5c5 \uc870\uac74\n                if (pending_ratio &gt; self.scale_factor and \n                    self._current_workers &lt; self.max_workers):\n\n                    new_worker_count = min(\n                        int(self._current_workers * 1.5),\n                        self.max_workers\n                    )\n\n                    self._scale_up(new_worker_count)\n\n                # \uc2a4\ucf00\uc77c \ub2e4\uc6b4 \uc870\uac74\n                elif (pending_ratio &lt; 0.5 and \n                      self._current_workers &gt; self.min_workers):\n\n                    new_worker_count = max(\n                        int(self._current_workers * 0.8),\n                        self.min_workers\n                    )\n\n                    self._scale_down(new_worker_count)\n\n                time.sleep(1.0)  # \ubaa8\ub2c8\ud130\ub9c1 \uac04\uaca9\n\n            except Exception as e:\n                print(f\"   \ubaa8\ub2c8\ud130\ub9c1 \uc624\ub958: {e}\")\n\n    def _scale_up(self, new_worker_count):\n        \"\"\"\uc6cc\ucee4 \uc218 \uc99d\uac00\"\"\"\n        if new_worker_count &gt; self._current_workers:\n            print(f\"   \uc2a4\ucf00\uc77c \uc5c5: {self._current_workers} -&gt; {new_worker_count} \uc6cc\ucee4\")\n\n            self._executor.shutdown(wait=False)\n            self._executor = ThreadPoolExecutor(max_workers=new_worker_count)\n            self._current_workers = new_worker_count\n\n    def _scale_down(self, new_worker_count):\n        \"\"\"\uc6cc\ucee4 \uc218 \uac10\uc18c\"\"\"\n        if new_worker_count &lt; self._current_workers:\n            print(f\"   \uc2a4\ucf00\uc77c \ub2e4\uc6b4: {self._current_workers} -&gt; {new_worker_count} \uc6cc\ucee4\")\n\n            # \uc810\uc9c4\uc801 \uac10\uc18c (\uc989\uc2dc \uc885\ub8cc\ud558\uc9c0 \uc54a\uc74c)\n            self._current_workers = new_worker_count\n\n    def submit(self, func, *args, **kwargs):\n        \"\"\"\uc791\uc5c5 \uc81c\ucd9c\"\"\"\n        if self._shutdown:\n            raise RuntimeError(\"\ud480\uc774 \uc885\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4\")\n\n        with self._lock:\n            self._submitted_tasks += 1\n            self._task_queue.put(None)  # \ud050 \ud06c\uae30 \ucd94\uc801\uc6a9\n\n        def wrapper():\n            try:\n                result = func(*args, **kwargs)\n                return result\n            finally:\n                with self._lock:\n                    self._completed_tasks += 1\n                    if not self._task_queue.empty():\n                        self._task_queue.get_nowait()\n\n        return self._executor.submit(wrapper)\n\n    def get_stats(self):\n        \"\"\"\ud480 \ud1b5\uacc4\"\"\"\n        with self._lock:\n            return {\n                'current_workers': self._current_workers,\n                'min_workers': self.min_workers,\n                'max_workers': self.max_workers,\n                'queue_size': self._task_queue.qsize(),\n                'submitted_tasks': self._submitted_tasks,\n                'completed_tasks': self._completed_tasks,\n                'completion_rate': (self._completed_tasks / max(self._submitted_tasks, 1)) * 100\n            }\n\n    def shutdown(self, wait=True):\n        \"\"\"\ud480 \uc885\ub8cc\"\"\"\n        self._shutdown = True\n        self._executor.shutdown(wait=wait)\n        if self._monitor_thread:\n            self._monitor_thread.join()\n\ndef demonstrate_advanced_thread_pools():\n    \"\"\"\uace0\uae09 \uc2a4\ub808\ub4dc \ud480 \ud328\ud134 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \uc6b0\uc120\uc21c\uc704 \uc2a4\ub808\ub4dc \ud480:\")\n\n    priority_pool = PriorityThreadPool(max_workers=3)\n\n    def sample_task(name, duration, priority_name):\n        \"\"\"\uc0d8\ud50c \uc791\uc5c5\"\"\"\n        print(f\"     {name} \uc2e4\ud589 \uc2dc\uc791 (\uc6b0\uc120\uc21c\uc704: {priority_name})\")\n        time.sleep(duration)\n        return f\"{name} \uc644\ub8cc\"\n\n    # \ub2e4\uc591\ud55c \uc6b0\uc120\uc21c\uc704 \uc791\uc5c5 \uc81c\ucd9c\n    tasks = [\n        (TaskPriority.LOW, \"\uc800\uc6b0\uc120\uc21c\uc704\uc791\uc5c51\", 0.2),\n        (TaskPriority.CRITICAL, \"\uae34\uae09\uc791\uc5c5\", 0.1),\n        (TaskPriority.NORMAL, \"\uc77c\ubc18\uc791\uc5c51\", 0.15),\n        (TaskPriority.HIGH, \"\uace0\uc6b0\uc120\uc21c\uc704\uc791\uc5c5\", 0.1),\n        (TaskPriority.NORMAL, \"\uc77c\ubc18\uc791\uc5c52\", 0.1),\n        (TaskPriority.LOW, \"\uc800\uc6b0\uc120\uc21c\uc704\uc791\uc5c52\", 0.1)\n    ]\n\n    task_ids = []\n    for priority, name, duration in tasks:\n        task_id = priority_pool.submit(\n            sample_task, name, duration, priority.name,\n            priority=priority\n        )\n        task_ids.append(task_id)\n\n    # \uacb0\uacfc \uc218\uc9d1\n    print(\"\\n   \uc791\uc5c5 \uacb0\uacfc:\")\n    for task_id in task_ids:\n        try:\n            result = priority_pool.get_result(task_id, timeout=2.0)\n            print(f\"     {result}\")\n        except Exception as e:\n            print(f\"     \uc791\uc5c5 {task_id} \uc624\ub958: {e}\")\n\n    print(f\"\\n   \ud480 \ud1b5\uacc4: {priority_pool.get_stats()}\")\n    priority_pool.shutdown()\n\n    print(\"\\n2. \uc801\uc751\ud615 \uc2a4\ub808\ub4dc \ud480:\")\n\n    adaptive_pool = AdaptiveThreadPool(min_workers=2, max_workers=6)\n\n    def load_test_task(task_id, duration=0.1):\n        \"\"\"\ubd80\ud558 \ud14c\uc2a4\ud2b8 \uc791\uc5c5\"\"\"\n        time.sleep(duration)\n        return f\"\uc791\uc5c5 {task_id} \uc644\ub8cc\"\n\n    # \ubd80\ud558 \uc99d\uac00 \uc2dc\ubbac\ub808\uc774\uc158\n    print(\"   \ubd80\ud558 \uc99d\uac00 \uc2dc\ubbac\ub808\uc774\uc158...\")\n    futures = []\n\n    # \ucd08\uae30 \ubd80\ud558\n    for i in range(5):\n        future = adaptive_pool.submit(load_test_task, f\"batch1-{i}\")\n        futures.append(future)\n\n    time.sleep(0.5)\n    print(f\"   \ucd08\uae30 \ubd80\ud558 \ud6c4 \ud1b5\uacc4: {adaptive_pool.get_stats()}\")\n\n    # \ubd80\ud558 \uae09\uc99d\n    for i in range(15):\n        future = adaptive_pool.submit(load_test_task, f\"batch2-{i}\")\n        futures.append(future)\n\n    time.sleep(1.0)\n    print(f\"   \ubd80\ud558 \uae09\uc99d \ud6c4 \ud1b5\uacc4: {adaptive_pool.get_stats()}\")\n\n    # \ubaa8\ub4e0 \uc791\uc5c5 \uc644\ub8cc \ub300\uae30\n    for future in as_completed(futures, timeout=5.0):\n        try:\n            result = future.result()\n        except Exception as e:\n            print(f\"   \uc791\uc5c5 \uc624\ub958: {e}\")\n\n    time.sleep(2.0)  # \uc2a4\ucf00\uc77c \ub2e4\uc6b4 \ub300\uae30\n    print(f\"   \ucd5c\uc885 \ud1b5\uacc4: {adaptive_pool.get_stats()}\")\n\n    adaptive_pool.shutdown()\n\ndemonstrate_advanced_thread_pools()\n</code></pre>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#2-asyncio","title":"2. AsyncIO \uc2ec\ud654\uc640 \uace0\uae09 \ube44\ub3d9\uae30 \ud328\ud134","text":""},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#21-asyncio","title":"2.1 \uace0\uae09 AsyncIO \ud328\ud134","text":"<pre><code>print(\"\\n=== \uace0\uae09 AsyncIO \ud328\ud134 ===\")\n\nimport asyncio\nimport aiohttp\nfrom asyncio import Queue, Semaphore, gather, as_completed\nimport json\nfrom typing import AsyncGenerator, AsyncIterator\nimport weakref\n\nclass AsyncResourcePool:\n    \"\"\"\ube44\ub3d9\uae30 \ub9ac\uc18c\uc2a4 \ud480\"\"\"\n\n    def __init__(self, factory, min_size=2, max_size=10):\n        self.factory = factory\n        self.min_size = min_size\n        self.max_size = max_size\n        self._pool = Queue(maxsize=max_size)\n        self._created = 0\n        self._semaphore = Semaphore(max_size)\n        self._lock = asyncio.Lock()\n\n    async def _create_resource(self):\n        \"\"\"\ub9ac\uc18c\uc2a4 \uc0dd\uc131\"\"\"\n        resource = await self.factory()\n        self._created += 1\n        print(f\"   \ub9ac\uc18c\uc2a4 \uc0dd\uc131: \ucd1d {self._created}\uac1c\")\n        return resource\n\n    async def acquire(self):\n        \"\"\"\ub9ac\uc18c\uc2a4 \ud68d\ub4dd\"\"\"\n        await self._semaphore.acquire()\n\n        try:\n            resource = self._pool.get_nowait()\n            print(f\"   \ud480\uc5d0\uc11c \ub9ac\uc18c\uc2a4 \ud68d\ub4dd\")\n            return resource\n        except asyncio.QueueEmpty:\n            resource = await self._create_resource()\n            print(f\"   \uc0c8 \ub9ac\uc18c\uc2a4 \uc0dd\uc131\")\n            return resource\n\n    async def release(self, resource):\n        \"\"\"\ub9ac\uc18c\uc2a4 \ubc18\ud658\"\"\"\n        try:\n            self._pool.put_nowait(resource)\n            print(f\"   \ub9ac\uc18c\uc2a4 \ud480 \ubc18\ud658\")\n        except asyncio.QueueFull:\n            # \ud480\uc774 \uac00\ub4dd \ucc2c \uacbd\uc6b0 \ub9ac\uc18c\uc2a4 \uc0ad\uc81c\n            if hasattr(resource, 'close'):\n                await resource.close()\n            print(f\"   \ub9ac\uc18c\uc2a4 \uc0ad\uc81c (\ud480 \uac00\ub4dd\ucc38)\")\n        finally:\n            self._semaphore.release()\n\n    async def __aenter__(self):\n        return await self.acquire()\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.release(self)\n\nclass AsyncCircuitBreaker:\n    \"\"\"\ube44\ub3d9\uae30 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\"\"\"\n\n    def __init__(self, failure_threshold=5, timeout=60, expected_exception=Exception):\n        self.failure_threshold = failure_threshold\n        self.timeout = timeout\n        self.expected_exception = expected_exception\n\n        self._failure_count = 0\n        self._last_failure_time = None\n        self._state = 'CLOSED'  # CLOSED, OPEN, HALF_OPEN\n        self._lock = asyncio.Lock()\n\n    async def call(self, func, *args, **kwargs):\n        \"\"\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\ub97c \ud1b5\ud55c \ud568\uc218 \ud638\ucd9c\"\"\"\n        async with self._lock:\n            state = self._get_state()\n\n            if state == 'OPEN':\n                raise CircuitBreakerOpenException(\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\uac00 \uc5f4\ub824\uc788\uc2b5\ub2c8\ub2e4\")\n\n            if state == 'HALF_OPEN':\n                print(\"   \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ud14c\uc2a4\ud2b8 \ud638\ucd9c\")\n\n        try:\n            result = await func(*args, **kwargs)\n            await self._on_success()\n            return result\n\n        except self.expected_exception as e:\n            await self._on_failure()\n            raise\n\n    def _get_state(self):\n        \"\"\"\ud604\uc7ac \uc0c1\ud0dc \ud655\uc778\"\"\"\n        if self._state == 'CLOSED':\n            return 'CLOSED'\n\n        if self._state == 'OPEN':\n            if (time.time() - self._last_failure_time) &gt; self.timeout:\n                self._state = 'HALF_OPEN'\n                return 'HALF_OPEN'\n            return 'OPEN'\n\n        return self._state\n\n    async def _on_success(self):\n        \"\"\"\uc131\uacf5 \uc2dc \ucc98\ub9ac\"\"\"\n        async with self._lock:\n            self._failure_count = 0\n            if self._state == 'HALF_OPEN':\n                self._state = 'CLOSED'\n                print(\"   \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ubcf5\uad6c: CLOSED \uc0c1\ud0dc\")\n\n    async def _on_failure(self):\n        \"\"\"\uc2e4\ud328 \uc2dc \ucc98\ub9ac\"\"\"\n        async with self._lock:\n            self._failure_count += 1\n            self._last_failure_time = time.time()\n\n            if self._failure_count &gt;= self.failure_threshold:\n                self._state = 'OPEN'\n                print(f\"   \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uac1c\ubc29: {self._failure_count}\ud68c \uc2e4\ud328\")\n\nclass CircuitBreakerOpenException(Exception):\n    \"\"\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uac1c\ubc29 \uc608\uc678\"\"\"\n    pass\n\nclass AsyncBatcher:\n    \"\"\"\ube44\ub3d9\uae30 \ubc30\uce58 \ucc98\ub9ac\uae30\"\"\"\n\n    def __init__(self, batch_size=10, flush_interval=1.0):\n        self.batch_size = batch_size\n        self.flush_interval = flush_interval\n        self._queue = Queue()\n        self._batch = []\n        self._results = {}\n        self._flush_task = None\n        self._lock = asyncio.Lock()\n        self._processors = []\n\n    async def start(self):\n        \"\"\"\ubc30\ucc98 \uc2dc\uc791\"\"\"\n        self._flush_task = asyncio.create_task(self._flush_loop())\n\n        # \ubc30\uce58 \ucc98\ub9ac \uc6cc\ucee4\ub4e4 \uc2dc\uc791\n        for i in range(2):\n            processor = asyncio.create_task(self._process_batches())\n            self._processors.append(processor)\n\n    async def add_item(self, item, item_id=None):\n        \"\"\"\uc544\uc774\ud15c \ucd94\uac00\"\"\"\n        if item_id is None:\n            item_id = str(uuid.uuid4())[:8]\n\n        future = asyncio.Future()\n\n        async with self._lock:\n            self._batch.append((item_id, item, future))\n\n            if len(self._batch) &gt;= self.batch_size:\n                await self._flush_batch()\n\n        return await future\n\n    async def _flush_loop(self):\n        \"\"\"\uc8fc\uae30\uc801 \ud50c\ub7ec\uc2dc\"\"\"\n        while True:\n            try:\n                await asyncio.sleep(self.flush_interval)\n                async with self._lock:\n                    if self._batch:\n                        await self._flush_batch()\n            except asyncio.CancelledError:\n                break\n            except Exception as e:\n                print(f\"   \ud50c\ub7ec\uc2dc \ub8e8\ud504 \uc624\ub958: {e}\")\n\n    async def _flush_batch(self):\n        \"\"\"\ubc30\uce58 \ud50c\ub7ec\uc2dc\"\"\"\n        if not self._batch:\n            return\n\n        batch = self._batch.copy()\n        self._batch.clear()\n\n        print(f\"   \ubc30\uce58 \ud50c\ub7ec\uc2dc: {len(batch)}\uac1c \uc544\uc774\ud15c\")\n        await self._queue.put(batch)\n\n    async def _process_batches(self):\n        \"\"\"\ubc30\uce58 \ucc98\ub9ac\"\"\"\n        while True:\n            try:\n                batch = await self._queue.get()\n\n                print(f\"   \ubc30\uce58 \ucc98\ub9ac \uc2dc\uc791: {len(batch)}\uac1c \uc544\uc774\ud15c\")\n\n                # \uc2e4\uc81c \ubc30\uce58 \ucc98\ub9ac (\uc5ec\uae30\uc11c\ub294 \uac04\ub2e8\ud55c \uc2dc\ubbac\ub808\uc774\uc158)\n                await asyncio.sleep(0.1)\n\n                # \uacb0\uacfc \uc124\uc815\n                for item_id, item, future in batch:\n                    if not future.done():\n                        result = f\"processed_{item}\"\n                        future.set_result(result)\n\n                print(f\"   \ubc30\uce58 \ucc98\ub9ac \uc644\ub8cc\")\n                self._queue.task_done()\n\n            except asyncio.CancelledError:\n                break\n            except Exception as e:\n                print(f\"   \ubc30\uce58 \ucc98\ub9ac \uc624\ub958: {e}\")\n\n                # \uc624\ub958 \uc2dc futures\uc5d0 \uc608\uc678 \uc124\uc815\n                for item_id, item, future in batch:\n                    if not future.done():\n                        future.set_exception(e)\n\n    async def stop(self):\n        \"\"\"\ubc30\ucc98 \uc911\uc9c0\"\"\"\n        if self._flush_task:\n            self._flush_task.cancel()\n\n        for processor in self._processors:\n            processor.cancel()\n\n        # \ub0a8\uc740 \ubc30\uce58 \ucc98\ub9ac\n        async with self._lock:\n            if self._batch:\n                await self._flush_batch()\n\n        await self._queue.join()\n\nasync def async_retry(max_attempts=3, delay=1.0, backoff=2.0, exceptions=(Exception,)):\n    \"\"\"\ube44\ub3d9\uae30 \uc7ac\uc2dc\ub3c4 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n    def decorator(func):\n        async def wrapper(*args, **kwargs):\n            last_exception = None\n            current_delay = delay\n\n            for attempt in range(max_attempts):\n                try:\n                    return await func(*args, **kwargs)\n                except exceptions as e:\n                    last_exception = e\n                    if attempt == max_attempts - 1:\n                        break\n\n                    print(f\"   \uc7ac\uc2dc\ub3c4 {attempt + 1}/{max_attempts}: {func.__name__} - {e}\")\n                    await asyncio.sleep(current_delay)\n                    current_delay *= backoff\n\n            raise last_exception\n        return wrapper\n    return decorator\n\nasync def demonstrate_advanced_asyncio():\n    \"\"\"\uace0\uae09 AsyncIO \ud328\ud134 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \ube44\ub3d9\uae30 \ub9ac\uc18c\uc2a4 \ud480:\")\n\n    async def connection_factory():\n        \"\"\"\uc5f0\uacb0 \ud329\ud1a0\ub9ac\"\"\"\n        await asyncio.sleep(0.1)  # \uc5f0\uacb0 \uc0dd\uc131 \uc2dc\ubbac\ub808\uc774\uc158\n        return {\"connection_id\": str(uuid.uuid4())[:8], \"created_at\": time.time()}\n\n    pool = AsyncResourcePool(connection_factory, min_size=2, max_size=5)\n\n    async def use_connection(task_name):\n        \"\"\"\uc5f0\uacb0 \uc0ac\uc6a9\"\"\"\n        conn = await pool.acquire()\n        try:\n            print(f\"   {task_name}: \uc5f0\uacb0 \uc0ac\uc6a9 \uc911 {conn['connection_id']}\")\n            await asyncio.sleep(0.2)  # \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n            return f\"{task_name} \uc644\ub8cc\"\n        finally:\n            await pool.release(conn)\n\n    # \ub3d9\uc2dc \uc5f0\uacb0 \uc0ac\uc6a9\n    tasks = [use_connection(f\"Task-{i+1}\") for i in range(8)]\n    results = await gather(*tasks)\n    print(f\"   \uacb0\uacfc: {results}\")\n\n    print(f\"\\n   \ud480 \ud1b5\uacc4: {pool.get_stats()}\")\n    pool.shutdown()\n\n    print(\"\\n2. \ube44\ub3d9\uae30 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4:\")\n\n    circuit_breaker = AsyncCircuitBreaker(failure_threshold=3, timeout=2)\n\n    @async_retry(max_attempts=2)\n    async def unreliable_service(fail_rate=0.7):\n        \"\"\"\ubd88\uc548\uc815\ud55c \uc11c\ube44\uc2a4\"\"\"\n        import random\n        await asyncio.sleep(0.1)\n\n        if random.random() &lt; fail_rate:\n            raise ConnectionError(\"\uc11c\ube44\uc2a4 \uc5f0\uacb0 \uc2e4\ud328\")\n\n        return \"\uc11c\ube44\uc2a4 \uc751\ub2f5\"\n\n    # \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ud14c\uc2a4\ud2b8\n    for i in range(8):\n        try:\n            result = await circuit_breaker.call(unreliable_service, 0.8)\n            print(f\"   \ud638\ucd9c {i+1}: {result}\")\n        except Exception as e:\n            print(f\"   \ud638\ucd9c {i+1}: \uc2e4\ud328 - {e}\")\n\n        await asyncio.sleep(0.1)\n\n    print(\"\\n3. \ube44\ub3d9\uae30 \ubc30\uce58 \ucc98\ub9ac:\")\n\n    batcher = AsyncBatcher(batch_size=3, flush_interval=0.5)\n    await batcher.start()\n\n    # \ubc30\uce58 \ucc98\ub9ac \ud14c\uc2a4\ud2b8\n    batch_tasks = []\n    for i in range(10):\n        task = batcher.add_item(f\"item_{i+1}\")\n        batch_tasks.append(task)\n        await asyncio.sleep(0.1)  # \uc810\uc9c4\uc801 \ucd94\uac00\n\n    # \uacb0\uacfc \uc218\uc9d1\n    results = await gather(*batch_tasks)\n    print(f\"   \ubc30\uce58 \uacb0\uacfc: {results}\")\n\n    await batcher.stop()\n\n# \uc774\ubca4\ud2b8 \ub8e8\ud504 \uc2e4\ud589\nasync def run_advanced_asyncio():\n    \"\"\"\uace0\uae09 AsyncIO \ub370\ubaa8 \uc2e4\ud589\"\"\"\n    await demonstrate_advanced_asyncio()\n\ntry:\n    asyncio.run(run_advanced_asyncio())\nexcept RuntimeError:\n    # \uc774\ubbf8 \uc2e4\ud589 \uc911\uc778 \uc774\ubca4\ud2b8 \ub8e8\ud504\uac00 \uc788\ub294 \uacbd\uc6b0\n    print(\"   \uace0\uae09 AsyncIO \ub370\ubaa8\ub294 \ubcc4\ub3c4 \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ud558\uc138\uc694\")\n</code></pre>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#22","title":"2.2 \ube44\ub3d9\uae30 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9ac\ubc0d \uc2dc\uc2a4\ud15c","text":"<p>\uc2e4\uc2dc\uac04 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9ac\ubc0d\uc744 \uc704\ud55c \ube44\ub3d9\uae30 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694: - \ubc31\ud504\ub808\uc154(backpressure) \ucc98\ub9ac - \uc2a4\ud2b8\ub9bc \ubd84\uae30 \ubc0f \ubcd1\ud569 - \uc624\ub958 \ubcf5\uad6c \ubc0f \uc7ac\uc2dc\ub3c4 - \uba54\ud2b8\ub9ad\uc2a4 \uc218\uc9d1 \ubc0f \ubaa8\ub2c8\ud130\ub9c1</p> <pre><code>print(\"\\n=== \ube44\ub3d9\uae30 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9ac\ubc0d \uc2dc\uc2a4\ud15c ===\")\n\nfrom typing import AsyncGenerator, AsyncIterable\nimport json\n\nclass AsyncStreamProcessor:\n    \"\"\"\ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc \ucc98\ub9ac\uae30\"\"\"\n\n    def __init__(self, buffer_size=100):\n        self.buffer_size = buffer_size\n        self._processors = []\n\n    async def process_stream(self, stream: AsyncIterable, \n                           processors: List[Callable] = None) -&gt; AsyncGenerator:\n        \"\"\"\uc2a4\ud2b8\ub9bc \ucc98\ub9ac\"\"\"\n        if processors is None:\n            processors = self._processors\n\n        buffer = []\n\n        async for item in stream:\n            # \uc804\ucc98\ub9ac\n            processed_item = item\n            for processor in processors:\n                if asyncio.iscoroutinefunction(processor):\n                    processed_item = await processor(processed_item)\n                else:\n                    processed_item = processor(processed_item)\n\n            buffer.append(processed_item)\n\n            # \ubc84\ud37c\uac00 \ucc2c \uacbd\uc6b0 \ubc30\uce58 \ucc98\ub9ac\n            if len(buffer) &gt;= self.buffer_size:\n                yield buffer\n                buffer = []\n\n        # \ub0a8\uc740 \ud56d\ubaa9\ub4e4 \ucc98\ub9ac\n        if buffer:\n            yield buffer\n\n    def add_processor(self, processor):\n        \"\"\"\ucc98\ub9ac\uae30 \ucd94\uac00\"\"\"\n        self._processors.append(processor)\n\n    async def filter_stream(self, stream: AsyncIterable, \n                          predicate: Callable) -&gt; AsyncGenerator:\n        \"\"\"\uc2a4\ud2b8\ub9bc \ud544\ud130\ub9c1\"\"\"\n        async for item in stream:\n            if asyncio.iscoroutinefunction(predicate):\n                should_include = await predicate(item)\n            else:\n                should_include = predicate(item)\n\n            if should_include:\n                yield item\n\n    async def map_stream(self, stream: AsyncIterable, \n                        mapper: Callable) -&gt; AsyncGenerator:\n        \"\"\"\uc2a4\ud2b8\ub9bc \ub9e4\ud551\"\"\"\n        async for item in stream:\n            if asyncio.iscoroutinefunction(mapper):\n                mapped_item = await mapper(item)\n            else:\n                mapped_item = mapper(item)\n\n            yield mapped_item\n\n    async def reduce_stream(self, stream: AsyncIterable, \n                          reducer: Callable, initial=None):\n        \"\"\"\uc2a4\ud2b8\ub9bc \ucd95\uc57d\"\"\"\n        accumulator = initial\n\n        async for item in stream:\n            if accumulator is None:\n                accumulator = item\n            else:\n                if asyncio.iscoroutinefunction(reducer):\n                    accumulator = await reducer(accumulator, item)\n                else:\n                    accumulator = reducer(accumulator, item)\n\n        return accumulator\n\nclass AsyncDataPipeline:\n    \"\"\"\ube44\ub3d9\uae30 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\"\"\"\n\n    def __init__(self):\n        self.stages = []\n        self.metrics = {\n            'processed_items': 0,\n            'errors': 0,\n            'start_time': None,\n            'end_time': None\n        }\n\n    def add_stage(self, stage_func, error_handler=None):\n        \"\"\"\ud30c\uc774\ud504\ub77c\uc778 \uc2a4\ud14c\uc774\uc9c0 \ucd94\uac00\"\"\"\n        self.stages.append({\n            'func': stage_func,\n            'error_handler': error_handler\n        })\n        return self\n\n    async def execute(self, input_stream: AsyncIterable):\n        \"\"\"\ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589\"\"\"\n        self.metrics['start_time'] = time.time()\n        current_stream = input_stream\n\n        for i, stage in enumerate(self.stages):\n            print(f\"   \ud30c\uc774\ud504\ub77c\uc778 \uc2a4\ud14c\uc774\uc9c0 {i+1} \uc2e4\ud589: {stage['func'].__name__}\")\n            current_stream = self._execute_stage(current_stream, stage)\n\n        # \ucd5c\uc885 \uacb0\uacfc \uc218\uc9d1\n        results = []\n        async for item in current_stream:\n            results.append(item)\n            self.metrics['processed_items'] += 1\n\n        self.metrics['end_time'] = time.time()\n        return results\n\n    async def _execute_stage(self, input_stream: AsyncIterable, stage):\n        \"\"\"\uc2a4\ud14c\uc774\uc9c0 \uc2e4\ud589\"\"\"\n        stage_func = stage['func']\n        error_handler = stage['error_handler']\n\n        async for item in input_stream:\n            try:\n                if asyncio.iscoroutinefunction(stage_func):\n                    result = await stage_func(item)\n                else:\n                    result = stage_func(item)\n\n                yield result\n\n            except Exception as e:\n                self.metrics['errors'] += 1\n\n                if error_handler:\n                    try:\n                        if asyncio.iscoroutinefunction(error_handler):\n                            handled_result = await error_handler(item, e)\n                        else:\n                            handled_result = error_handler(item, e)\n\n                        if handled_result is not None:\n                            yield handled_result\n                    except Exception as handler_error:\n                        print(f\"     \uc624\ub958 \ud578\ub4e4\ub7ec \uc2e4\ud328: {handler_error}\")\n                else:\n                    print(f\"     \uc2a4\ud14c\uc774\uc9c0 \uc624\ub958: {e}\")\n\n    def get_metrics(self):\n        \"\"\"\ud30c\uc774\ud504\ub77c\uc778 \uba54\ud2b8\ub9ad\uc2a4\"\"\"\n        duration = None\n        if self.metrics['start_time'] and self.metrics['end_time']:\n            duration = self.metrics['end_time'] - self.metrics['start_time']\n\n        return {\n            **self.metrics,\n            'duration': duration,\n            'items_per_second': (self.metrics['processed_items'] / duration) \n                              if duration and duration &gt; 0 else 0\n        }\n\nasync def data_source() -&gt; AsyncGenerator[Dict, None]:\n    \"\"\"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc18c\uc2a4\"\"\"\n    for i in range(20):\n        yield {\n            'id': i + 1,\n            'value': i * 2,\n            'category': 'A' if i % 2 == 0 else 'B',\n            'timestamp': time.time()\n        }\n        await asyncio.sleep(0.05)  # \uc2a4\ud2b8\ub9ac\ubc0d \uc2dc\ubbac\ub808\uc774\uc158\n\nasync def validate_data(item):\n    \"\"\"\ub370\uc774\ud130 \uac80\uc99d\"\"\"\n    await asyncio.sleep(0.01)  # \uac80\uc99d \uc2dc\ubbac\ub808\uc774\uc158\n\n    if item['value'] &lt; 0:\n        raise ValueError(\"\uc74c\uc218 \uac12\")\n\n    return item\n\ndef transform_data(item):\n    \"\"\"\ub370\uc774\ud130 \ubcc0\ud658\"\"\"\n    return {\n        **item,\n        'value_squared': item['value'] ** 2,\n        'processed_at': time.time()\n    }\n\ndef filter_category_a(item):\n    \"\"\"\uce74\ud14c\uace0\ub9ac A \ud544\ud130\ub9c1\"\"\"\n    return item['category'] == 'A'\n\nasync def enrich_data(item):\n    \"\"\"\ub370\uc774\ud130 \ubcf4\uac15\"\"\"\n    await asyncio.sleep(0.02)  # \uc678\ubd80 API \ud638\ucd9c \uc2dc\ubbac\ub808\uc774\uc158\n\n    return {\n        **item,\n        'enriched': True,\n        'external_data': f\"ext_data_{item['id']}\"\n    }\n\ndef error_handler(item, error):\n    \"\"\"\uc624\ub958 \ucc98\ub9ac\"\"\"\n    print(f\"     \ub370\uc774\ud130 \ucc98\ub9ac \uc624\ub958: {item['id']} - {error}\")\n    return {**item, 'error': str(error), 'processed': False}\n\nasync def demonstrate_async_streams():\n    \"\"\"\ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc \ucc98\ub9ac \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc \ucc98\ub9ac\uae30:\")\n\n    processor = AsyncStreamProcessor(buffer_size=5)\n\n    # \uc2a4\ud2b8\ub9bc \ucc98\ub9ac \ud14c\uc2a4\ud2b8\n    stream = data_source()\n\n    # \ud544\ud130\ub9c1\n    filtered_stream = processor.filter_stream(stream, filter_category_a)\n\n    # \ub9e4\ud551\n    mapped_stream = processor.map_stream(filtered_stream, transform_data)\n\n    # \ubc30\uce58 \ucc98\ub9ac\n    batch_count = 0\n    async for batch in processor.process_stream(mapped_stream):\n        batch_count += 1\n        print(f\"   \ubc30\uce58 {batch_count}: {len(batch)}\uac1c \ud56d\ubaa9\")\n        for item in batch[:2]:  # \ucc98\uc74c 2\uac1c\ub9cc \ucd9c\ub825\n            print(f\"     \uc544\uc774\ud15c: ID={item['id']}, Value\u00b2={item['value_squared']}\")\n\n    print(\"\\n2. \ube44\ub3d9\uae30 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778:\")\n\n    # \ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc131\n    pipeline = (AsyncDataPipeline()\n                .add_stage(validate_data, error_handler)\n                .add_stage(transform_data)\n                .add_stage(enrich_data))\n\n    # \ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589\n    input_stream = data_source()\n    results = await pipeline.execute(input_stream)\n\n    print(f\"\\n   \ud30c\uc774\ud504\ub77c\uc778 \uacb0\uacfc: {len(results)}\uac1c \ud56d\ubaa9 \ucc98\ub9ac\")\n\n    # \ucc98\uc74c 3\uac1c \uacb0\uacfc \ucd9c\ub825\n    for i, result in enumerate(results[:3]):\n        print(f\"     \uacb0\uacfc {i+1}: ID={result['id']}, \"\n              f\"enriched={result.get('enriched', False)}\")\n\n    # \uba54\ud2b8\ub9ad\uc2a4 \ucd9c\ub825\n    metrics = pipeline.get_metrics()\n    print(f\"\\n   \ud30c\uc774\ud504\ub77c\uc778 \uba54\ud2b8\ub9ad\uc2a4:\")\n    print(f\"     \ucc98\ub9ac\ub41c \ud56d\ubaa9: {metrics['processed_items']}\")\n    print(f\"     \uc624\ub958 \uc218: {metrics['errors']}\")\n    print(f\"     \uc2e4\ud589 \uc2dc\uac04: {metrics['duration']:.3f}\ucd08\")\n    print(f\"     \ucc98\ub9ac \uc18d\ub3c4: {metrics['items_per_second']:.1f} \ud56d\ubaa9/\ucd08\")\n\n# \ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc \ub370\ubaa8 \uc2e4\ud589\nasync def run_stream_demo():\n    \"\"\"\uc2a4\ud2b8\ub9bc \ub370\ubaa8 \uc2e4\ud589\"\"\"\n    await demonstrate_async_streams()\n\ntry:\n    asyncio.run(run_stream_demo())\nexcept RuntimeError:\n    print(\"   \ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc \ub370\ubaa8\ub294 \ubcc4\ub3c4 \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ud558\uc138\uc694\")\n</code></pre>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#3","title":"3. \uba40\ud2f0\ud504\ub85c\uc138\uc2f1 \uace0\uae09 \uae30\ubc95","text":""},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#31","title":"3.1 \uace0\uae09 \ud504\ub85c\uc138\uc2a4 \uac04 \ud1b5\uc2e0","text":"<pre><code>print(\"\\n=== \uace0\uae09 \ud504\ub85c\uc138\uc2a4 \uac04 \ud1b5\uc2e0 ===\")\n\nimport multiprocessing as mp\nfrom multiprocessing import Process, Queue, Pipe, Lock, Value, Array\nfrom multiprocessing.managers import BaseManager\nimport pickle\nimport signal\nimport os\n\nclass SharedCounter:\n    \"\"\"\uacf5\uc720 \uce74\uc6b4\ud130 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, initial_value=0):\n        self._value = Value('i', initial_value)\n        self._lock = Lock()\n\n    def increment(self, amount=1):\n        \"\"\"\uce74\uc6b4\ud130 \uc99d\uac00\"\"\"\n        with self._lock:\n            self._value.value += amount\n            return self._value.value\n\n    def decrement(self, amount=1):\n        \"\"\"\uce74\uc6b4\ud130 \uac10\uc18c\"\"\"\n        with self._lock:\n            self._value.value -= amount\n            return self._value.value\n\n    @property\n    def value(self):\n        \"\"\"\ud604\uc7ac \uac12 \ubc18\ud658\"\"\"\n        return self._value.value\n\n    def reset(self):\n        \"\"\"\uce74\uc6b4\ud130 \ub9ac\uc14b\"\"\"\n        with self._lock:\n            self._value.value = 0\n\nclass TaskQueue:\n    \"\"\"\uc791\uc5c5 \ud050 \uad00\ub9ac\uc790\"\"\"\n\n    def __init__(self):\n        self.task_queue = Queue()\n        self.result_queue = Queue()\n        self.workers = []\n        self.task_counter = SharedCounter()\n        self.completed_counter = SharedCounter()\n        self._shutdown_event = mp.Event()\n\n    def add_worker(self, worker_func, worker_id):\n        \"\"\"\uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \ucd94\uac00\"\"\"\n        worker = Process(\n            target=self._worker_loop,\n            args=(worker_func, worker_id),\n            name=f\"Worker-{worker_id}\"\n        )\n        self.workers.append(worker)\n        return worker\n\n    def _worker_loop(self, worker_func, worker_id):\n        \"\"\"\uc6cc\ucee4 \uba54\uc778 \ub8e8\ud504\"\"\"\n        print(f\"   \uc6cc\ucee4 {worker_id} \uc2dc\uc791 (PID: {os.getpid()})\")\n\n        while not self._shutdown_event.is_set():\n            try:\n                # \uc791\uc5c5 \uac00\uc838\uc624\uae30\n                task = self.task_queue.get(timeout=1.0)\n\n                if task is None:  # \uc885\ub8cc \uc2e0\ud638\n                    break\n\n                self._current_task = task\n\n                # \uc791\uc5c5 \ucc98\ub9ac\n                result = self._process_task(task)\n\n                # \uacb0\uacfc \uc81c\ucd9c\n                self.result_queue.put(result)\n\n                self._current_task = None\n\n            except Exception as e:\n                print(f\"   \uc6cc\ucee4 {worker_id} \uc624\ub958: {e}\")\n                break\n\n        print(f\"   \uc6cc\ucee4 {worker_id} \uc885\ub8cc\")\n\n    def _process_task(self, task):\n        \"\"\"\uc791\uc5c5 \ucc98\ub9ac\"\"\"\n        start_time = time.time()\n\n        try:\n            handler = self.task_queue._task_handlers.get(task.task_type)\n            if not handler:\n                raise ValueError(f\"No handler for task type: {task.task_type}\")\n\n            print(f\"     \uc6cc\ucee4 {os.getpid()}: \uc791\uc5c5 \ucc98\ub9ac \uc911 {task.task_id}\")\n\n            # \ud0c0\uc784\uc544\uc6c3 \ucc98\ub9ac (\uac04\ub2e8\ud55c \uad6c\ud604)\n            result = handler.handle(task)\n\n            end_time = time.time()\n            processing_time = end_time - start_time\n\n            return {\n                'task_id': task.task_id,\n                'result': result,\n                'status': 'success',\n                'started_at': start_time,\n                'completed_at': end_time,\n                'processing_time': processing_time\n            }\n\n        except Exception as e:\n            self.result_queue.put({\n                'task_id': task.task_id,\n                'error': str(e),\n                'status': 'failed'\n            })\n            return None\n\n    def start_workers(self):\n        \"\"\"\ubaa8\ub4e0 \uc6cc\ucee4 \uc2dc\uc791\"\"\"\n        for worker in self.workers:\n            worker.start()\n        print(f\"   {len(self.workers)}\uac1c \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \uc2dc\uc791\")\n\n    def shutdown(self, timeout=5):\n        \"\"\"\uc6cc\ucee4\ub4e4 \uc885\ub8cc\"\"\"\n        print(\"   \uc6cc\ucee4 \uc885\ub8cc \uc2dc\uc791...\")\n\n        # \uc885\ub8cc \uc2e0\ud638 \uc124\uc815\n        self._shutdown_event.set()\n\n        # \uc885\ub8cc \ud1a0\ud070 \uc804\uc1a1\n        for _ in self.workers:\n            self.task_queue.put(None)\n\n        # \uc6cc\ucee4\ub4e4 \uc885\ub8cc \ub300\uae30\n        for worker in self.workers:\n            worker.join(timeout=timeout)\n\n        print(\"   \ubaa8\ub4e0 \uc6cc\ucee4 \uc885\ub8cc \uc644\ub8cc\")\n\n    def get_stats(self):\n        \"\"\"\ud1b5\uacc4 \uc815\ubcf4\"\"\"\n        return {\n            'submitted_tasks': self.task_counter.value,\n            'completed_tasks': self.completed_counter.value,\n            'active_workers': len([w for w in self.workers if w.is_alive()]),\n            'queue_size': self.task_queue.qsize(),\n            'result_queue_size': self.result_queue.qsize()\n        }\n\nclass DistributedDataProcessor:\n    \"\"\"\ubd84\uc0b0 \ub370\uc774\ud130 \ucc98\ub9ac\uae30\"\"\"\n\n    def __init__(self, num_workers=4):\n        self.num_workers = num_workers\n        self.data_chunks = Queue()\n        self.results = Queue()\n        self.progress = Value('i', 0)\n        self.total_chunks = Value('i', 0)\n        self.lock = Lock()\n\n    def chunk_data(self, data, chunk_size=100):\n        \"\"\"\ub370\uc774\ud130 \uccad\ud06c \ubd84\ud560\"\"\"\n        chunks = []\n        for i in range(0, len(data), chunk_size):\n            chunk = data[i:i + chunk_size]\n            chunks.append(chunk)\n\n        with self.lock:\n            self.total_chunks.value = len(chunks)\n\n        return chunks\n\n    def process_chunk(self, chunk):\n        \"\"\"\uccad\ud06c \ucc98\ub9ac (\uc6cc\ucee4\uc5d0\uc11c \uc2e4\ud589)\"\"\"\n        pid = os.getpid()\n        print(f\"     \ud504\ub85c\uc138\uc2a4 {pid}: {len(chunk)}\uac1c \ud56d\ubaa9 \ucc98\ub9ac \uc911...\")\n\n        # \uc2e4\uc81c \ucc98\ub9ac (\uc5ec\uae30\uc11c\ub294 \uac04\ub2e8\ud55c \ubcc0\ud658)\n        processed = []\n        for item in chunk:\n            # \ubcf5\uc7a1\ud55c \ucc98\ub9ac \uc2dc\ubbac\ub808\uc774\uc158\n            time.sleep(0.01)\n            processed.append(item * 2 + 1)\n\n        # \uc9c4\ud589\ub960 \uc5c5\ub370\uc774\ud2b8\n        with self.lock:\n            self.progress.value += 1\n            current_progress = self.progress.value\n            total = self.total_chunks.value\n\n        print(f\"     \ud504\ub85c\uc138\uc2a4 {pid}: \uccad\ud06c \uc644\ub8cc ({current_progress}/{total})\")\n        return processed\n\n    def worker_process(self, worker_id):\n        \"\"\"\uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \uba54\uc778 \ud568\uc218\"\"\"\n        print(f\"   \ub370\uc774\ud130 \uc6cc\ucee4 {worker_id} \uc2dc\uc791 (PID: {os.getpid()})\")\n\n        while True:\n            try:\n                chunk = self.data_chunks.get(timeout=2.0)\n\n                if chunk is None:  # \uc885\ub8cc \uc2e0\ud638\n                    break\n\n                result = self.process_chunk(chunk)\n                self.results.put(result)\n                self.data_chunks.task_done()\n\n            except queue.Empty:\n                break  # \ub354 \uc774\uc0c1 \uc791\uc5c5\uc774 \uc5c6\uc74c\n            except Exception as e:\n                print(f\"   \uc6cc\ucee4 {worker_id} \uc624\ub958: {e}\")\n                break\n\n        print(f\"   \ub370\uc774\ud130 \uc6cc\ucee4 {worker_id} \uc885\ub8cc\")\n\n    def process_data(self, data, chunk_size=50):\n        \"\"\"\ub370\uc774\ud130 \ubd84\uc0b0 \ucc98\ub9ac\"\"\"\n        print(f\"   \ubd84\uc0b0 \ucc98\ub9ac \uc2dc\uc791: {len(data)}\uac1c \ud56d\ubaa9\")\n\n        # \ub370\uc774\ud130 \uccad\ud06c \ubd84\ud560\n        chunks = self.chunk_data(data, chunk_size)\n        print(f\"   {len(chunks)}\uac1c \uccad\ud06c\ub85c \ubd84\ud560\")\n\n        # \uccad\ud06c\ub97c \ud050\uc5d0 \ucd94\uac00\n        for chunk in chunks:\n            self.data_chunks.put(chunk)\n\n        # \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \uc2dc\uc791\n        workers = []\n        for i in range(self.num_workers):\n            worker = Process(\n                target=self.worker_process,\n                args=(i + 1,),\n                name=f\"DataWorker-{i+1}\"\n            )\n            workers.append(worker)\n            worker.start()\n\n        # \uc885\ub8cc \uc2e0\ud638 \uc804\uc1a1\n        for _ in workers:\n            self.data_chunks.put(None)\n\n        # \uacb0\uacfc \uc218\uc9d1\n        all_results = []\n        expected_results = len(chunks)\n\n        while len(all_results) &lt; expected_results:\n            try:\n                result = self.results.get(timeout=5.0)\n                all_results.extend(result)\n            except queue.Empty:\n                print(\"   \uacb0\uacfc \uc218\uc9d1 \ud0c0\uc784\uc544\uc6c3\")\n                break\n\n        # \uc6cc\ucee4\ub4e4 \uc885\ub8cc \ub300\uae30\n        for worker in workers:\n            worker.join(timeout=3)\n            if worker.is_alive():\n                worker.terminate()\n                worker.join()\n\n        print(f\"   \ubd84\uc0b0 \ucc98\ub9ac \uc644\ub8cc: {len(all_results)}\uac1c \uacb0\uacfc\")\n        return all_results\n\ndef cpu_intensive_task(task_data):\n    \"\"\"CPU \uc9d1\uc57d\uc801 \uc791\uc5c5\"\"\"\n    task_id, numbers = task_data\n\n    # \ubcf5\uc7a1\ud55c \uacc4\uc0b0 \uc2dc\ubbac\ub808\uc774\uc158\n    result = 0\n    for num in numbers:\n        for i in range(num % 1000 + 1):\n            result += i * i\n\n    return f\"Task-{task_id}: {result}\"\n\ndef demonstrate_advanced_multiprocessing():\n    \"\"\"\uace0\uae09 \uba40\ud2f0\ud504\ub85c\uc138\uc2f1 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \uc791\uc5c5 \ud050 \uad00\ub9ac:\")\n\n    task_queue = TaskQueue()\n\n    # \uc6cc\ucee4 \ucd94\uac00\n    for i in range(3):\n        task_queue.add_worker(cpu_intensive_task, i + 1)\n\n    # \uc6cc\ucee4 \uc2dc\uc791\n    task_queue.start_workers()\n\n    # \uc791\uc5c5 \uc81c\ucd9c\n    test_tasks = [\n        (1, list(range(100, 200))),\n        (2, list(range(200, 300))),\n        (3, list(range(150, 250))),\n        (4, list(range(300, 400))),\n        (5, list(range(50, 150)))\n    ]\n\n    for task in test_tasks:\n        task_queue.submit_task(task)\n\n    # \ubaa8\ub4e0 \uc791\uc5c5 \uc644\ub8cc \ub300\uae30\n    time.sleep(2.0)\n\n    # \uacb0\uacfc \uc218\uc9d1\n    results = task_queue.get_results()\n    print(f\"\\n   \uc791\uc5c5 \uacb0\uacfc:\")\n    for result in results:\n        print(f\"     {result}\")\n\n    # \ud1b5\uacc4 \ucd9c\ub825\n    stats = task_queue.get_stats()\n    print(f\"\\n   \uc791\uc5c5 \ud050 \ud1b5\uacc4: {stats}\")\n\n    # \uc6cc\ucee4 \uc885\ub8cc\n    task_queue.shutdown()\n\nif __name__ == \"__main__\":\n    # \uba40\ud2f0\ud504\ub85c\uc138\uc2f1 \ub370\ubaa8\ub294 \uba54\uc778 \ubaa8\ub4c8\uc5d0\uc11c\ub9cc \uc2e4\ud589\n    demonstrate_advanced_multiprocessing()\nelse:\n    print(\"   \uba40\ud2f0\ud504\ub85c\uc138\uc2f1 \ub370\ubaa8\ub294 \uba54\uc778 \ubaa8\ub4c8\uc5d0\uc11c \uc2e4\ud589\ud558\uc138\uc694\")\n</code></pre>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#32","title":"3.2 \uace0\uc131\ub2a5 \ubcd1\ub82c \ucc98\ub9ac \ud328\ud134","text":"<pre><code>print(\"\\n=== \uace0\uc131\ub2a5 \ubcd1\ub82c \ucc98\ub9ac \ud328\ud134 ===\")\n\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\nimport numpy as np\nfrom functools import partial\nimport psutil\n\nclass ParallelProcessingFramework:\n    \"\"\"\ubcd1\ub82c \ucc98\ub9ac \ud504\ub808\uc784\uc6cc\ud06c\"\"\"\n\n    def __init__(self, max_workers=None):\n        self.max_workers = max_workers or min(32, os.cpu_count() + 4)\n        self._executor = None\n        self.submitted_tasks = []\n        self.completed_tasks = []\n        self.stats = {\n            'total_tasks': 0,\n            'completed_tasks': 0,\n            'failed_tasks': 0,\n            'total_time': 0,\n            'cpu_usage': [],\n            'memory_usage': []\n        }\n\n    def __enter__(self):\n        self._executor = ProcessPoolExecutor(max_workers=self.max_workers)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if self._executor:\n            self._executor.shutdown(wait=True)\n\n    def submit_batch(self, func, data_batches, *args, **kwargs):\n        \"\"\"\ubc30\uce58 \uc791\uc5c5 \uc81c\ucd9c\"\"\"\n        if not self._executor:\n            raise RuntimeError(\"Framework not initialized\")\n\n        futures = []\n        for i, batch in enumerate(data_batches):\n            if args or kwargs:\n                task_func = partial(func, *args, **kwargs)\n                future = self._executor.submit(task_func, batch)\n            else:\n                task_func = partial(func, batch)\n                future = self._executor.submit(task_func)\n\n            future.batch_id = i\n            futures.append(future)\n            self.stats['total_tasks'] += 1\n\n        self.submitted_tasks.extend(futures)\n        return futures\n\n    def collect_results(self, futures, timeout=None):\n        \"\"\"\uacb0\uacfc \uc218\uc9d1\"\"\"\n        results = []\n\n        for future in as_completed(futures, timeout=timeout):\n            try:\n                result = future.result()\n                results.append(result)\n                self.stats['completed_tasks'] += 1\n\n            except Exception as e:\n                results.append(None)\n                self.stats['failed_tasks'] += 1\n\n        self.completed_tasks.extend(results)\n        return results\n\n    def get_stats(self):\n        \"\"\"\ud504\ub808\uc784\uc6cc\ud06c \ud1b5\uacc4\"\"\"\n        return self.stats\n\ndef matrix_multiply_chunk(data):\n    \"\"\"\ub9e4\ud2b8\ub9ad\uc2a4 \uacf1\uc148 \uccad\ud06c \ucc98\ub9ac\"\"\"\n    matrix_a, matrix_b, start_row, end_row = data\n\n    result_chunk = []\n    for i in range(start_row, end_row):\n        row = []\n        for j in range(len(matrix_b[0])):\n            cell_value = sum(matrix_a[i][k] * matrix_b[k][j] for k in range(len(matrix_b)))\n            row.append(cell_value)\n        result_chunk.append(row)\n\n    return result_chunk\n\ndef sum_of_squares_map(numbers):\n    \"\"\"\uc81c\uacf1\uc758 \ud569 \ub9e4\ud551 \ud568\uc218\"\"\"\n    return sum(x * x for x in numbers)\n\ndef sum_reduce(a, b):\n    \"\"\"\ud569\uacc4 \ub9ac\ub4c0\uc2a4 \ud568\uc218\"\"\"\n    return a + b\n\ndef prime_count_in_range(range_data):\n    \"\"\"\ubc94\uc704 \ub0b4 \uc18c\uc218 \uac1c\uc218 \uacc4\uc0b0\"\"\"\n    start, end = range_data\n\n    def is_prime(n):\n        if n &lt; 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = sum(1 for n in range(start, end + 1) if is_prime(n))\n    return count\n\ndef statistical_analysis(data_chunk):\n    \"\"\"\ud1b5\uacc4 \ubd84\uc11d\"\"\"\n    import statistics\n\n    return {\n        'mean': statistics.mean(data_chunk),\n        'median': statistics.median(data_chunk),\n        'stdev': statistics.stdev(data_chunk) if len(data_chunk) &gt; 1 else 0,\n        'min': min(data_chunk),\n        'max': max(data_chunk),\n        'count': len(data_chunk)\n    }\n\ndef merge_statistics(stats1, stats2):\n    \"\"\"\ud1b5\uacc4 \ubcd1\ud569\"\"\"\n    total_count = stats1['count'] + stats2['count']\n\n    # \uac00\uc911 \ud3c9\uade0 \uacc4\uc0b0\n    combined_mean = ((stats1['mean'] * stats1['count'] + \n                     stats2['mean'] * stats2['count']) / total_count)\n\n    return {\n        'mean': combined_mean,\n        'median': (stats1['median'] + stats2['median']) / 2,  # \uadfc\uc0ac\uce58\n        'stdev': max(stats1['stdev'], stats2['stdev']),  # \uadfc\uc0ac\uce58\n        'min': min(stats1['min'], stats2['min']),\n        'max': max(stats1['max'], stats2['max']),\n        'count': total_count\n    }\n\ndef demonstrate_parallel_processing():\n    \"\"\"\uace0\uc131\ub2a5 \ubcd1\ub82c \ucc98\ub9ac \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \ubcd1\ub82c \ub9e4\ud2b8\ub9ad\uc2a4 \uacf1\uc148:\")\n\n    # \ud14c\uc2a4\ud2b8 \ub9e4\ud2b8\ub9ad\uc2a4 \uc0dd\uc131\n    size = 100\n    matrix_a = [[i + j for j in range(size)] for i in range(size)]\n    matrix_b = [[i * j + 1 for j in range(size)] for i in range(size)]\n\n    with ParallelProcessingFramework(max_workers=4) as framework:\n        # \ud589 \ub2e8\uc704\ub85c \ubd84\ud560\n        chunk_size = max(1, size // framework.max_workers)\n        chunks = []\n\n        for start_row in range(0, size, chunk_size):\n            end_row = min(start_row + chunk_size, size)\n            chunks.append((matrix_a, matrix_b, start_row, end_row))\n\n        print(f\"   \ub9e4\ud2b8\ub9ad\uc2a4 {size}x{size}, {len(chunks)}\uac1c \uccad\ud06c\ub85c \ubd84\ud560\")\n\n        start_time = time.time()\n        futures = framework.submit_batch(matrix_multiply_chunk, chunks)\n        results = framework.collect_results(futures)\n        end_time = time.time()\n\n        # \uacb0\uacfc \uc870\ud569\n        final_matrix = []\n        successful_results = [r for r in results if r is not None]\n        successful_results.sort(key=lambda x: x['batch_id'])\n\n        for result in successful_results:\n            final_matrix.extend(result)\n\n        print(f\"   \ub9e4\ud2b8\ub9ad\uc2a4 \uacf1\uc148 \uc644\ub8cc: {end_time - start_time:.3f}\ucd08\")\n        print(f\"   \uacb0\uacfc \ub9e4\ud2b8\ub9ad\uc2a4 \ud06c\uae30: {len(final_matrix)}x{len(final_matrix[0])}\")\n\n        stats = framework.get_stats()\n        print(f\"   \uc131\ub2a5 \ud1b5\uacc4: {stats}\")\n\n    print(\"\\n2. \ub9f5-\ub9ac\ub4c0\uc2a4 \ud328\ud134:\")\n\n    # \ud070 \uc22b\uc790 \ub9ac\uc2a4\ud2b8\uc758 \uc81c\uacf1\ud569 \uacc4\uc0b0\n    large_numbers = list(range(1, 10001))  # 1\ubd80\ud130 10000\uae4c\uc9c0\n\n    with ParallelProcessingFramework(max_workers=6) as framework:\n        print(f\"   {len(large_numbers)}\uac1c \uc22b\uc790\uc758 \uc81c\uacf1\ud569 \uacc4\uc0b0\")\n\n        start_time = time.time()\n        result = framework.map_reduce(\n            map_func=sum_of_squares_map,\n            reduce_func=sum_reduce,\n            data=large_numbers,\n            chunk_size=1000\n        )\n        end_time = time.time()\n\n        print(f\"   \ub9f5-\ub9ac\ub4c0\uc2a4 \uacb0\uacfc: {result}\")\n        print(f\"   \uc2e4\ud589 \uc2dc\uac04: {end_time - start_time:.3f}\ucd08\")\n\n        # \uac80\uc99d (\uc21c\ucc28 \uacc4\uc0b0)\n        sequential_result = sum(x * x for x in large_numbers)\n        print(f\"   \uac80\uc99d (\uc21c\ucc28 \uacc4\uc0b0): {sequential_result}\")\n        print(f\"   \uacb0\uacfc \uc77c\uce58: {result == sequential_result}\")\n\n    print(\"\\n3. \ubcf5\ud569 \ubcd1\ub82c \ucc98\ub9ac:\")\n\n    with ParallelProcessingFramework(max_workers=4) as framework:\n        # \uc18c\uc218 \uac1c\uc218 \uacc4\uc0b0\n        ranges = [(1, 2500), (2501, 5000), (5001, 7500), (7501, 10000)]\n\n        print(\"   \ubc94\uc704\ubcc4 \uc18c\uc218 \uac1c\uc218 \uacc4\uc0b0...\")\n        futures1 = framework.submit_batch(prime_count_in_range, ranges)\n\n        # \ud1b5\uacc4 \ubd84\uc11d\n        import random\n        test_data = [random.randint(1, 1000) for _ in range(10000)]\n        data_chunks = [test_data[i:i+2500] for i in range(0, len(test_data), 2500)]\n\n        print(\"   \ud1b5\uacc4 \ubd84\uc11d...\")\n        futures2 = framework.submit_batch(statistical_analysis, data_chunks)\n\n        # \uc18c\uc218 \uacb0\uacfc \uc218\uc9d1\n        prime_results = framework.collect_results(futures1)\n        total_primes = sum(r for r in prime_results if r is not None)\n        print(f\"   1-10000 \ubc94\uc704 \uc18c\uc218 \uac1c\uc218: {total_primes}\")\n\n        # \ud1b5\uacc4 \uacb0\uacfc \uc218\uc9d1 \ubc0f \ubcd1\ud569\n        stats_results = framework.collect_results(futures2)\n        successful_stats = [r for r in stats_results if r is not None]\n\n        if successful_stats:\n            final_stats = successful_stats[0]\n            for stats in successful_stats[1:]:\n                final_stats = merge_statistics(final_stats, stats)\n\n            print(f\"   \ud1b5\uacc4 \ubd84\uc11d \uacb0\uacfc:\")\n            print(f\"     \ud3c9\uade0: {final_stats['mean']:.2f}\")\n            print(f\"     \ucd5c\uc18c/\ucd5c\ub300: {final_stats['min']}/{final_stats['max']}\")\n            print(f\"     \ud45c\uc900\ud3b8\ucc28: {final_stats['stdev']:.2f}\")\n            print(f\"     \ucd1d \uac1c\uc218: {final_stats['count']}\")\n\n        final_stats = framework.get_stats()\n        print(f\"\\n   \uc804\uccb4 \uc131\ub2a5 \ud1b5\uacc4: {final_stats}\")\n\nif __name__ == \"__main__\":\n    demonstrate_parallel_processing()\nelse:\n    print(\"   \ubcd1\ub82c \ucc98\ub9ac \ub370\ubaa8\ub294 \uba54\uc778 \ubaa8\ub4c8\uc5d0\uc11c \uc2e4\ud589\ud558\uc138\uc694\")\n</code></pre>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#4","title":"4. \ubd84\uc0b0 \uc791\uc5c5 \ucc98\ub9ac\uc640 \uc6cc\ucee4 \ud480","text":""},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#41","title":"4.1 \ubd84\uc0b0 \uc6cc\ucee4 \uc2dc\uc2a4\ud15c","text":"<pre><code>print(\"\\n=== \ubd84\uc0b0 \uc6cc\ucee4 \uc2dc\uc2a4\ud15c ===\")\n\nimport json\nimport socket\nimport threading\nfrom abc import ABC, abstractmethod\nfrom dataclasses import dataclass, asdict\nfrom typing import Any, Dict, List, Optional, Callable\nfrom enum import Enum\nimport hashlib\n\nclass TaskStatus(Enum):\n    \"\"\"\uc791\uc5c5 \uc0c1\ud0dc\"\"\"\n    PENDING = \"pending\"\n    RUNNING = \"running\"\n    COMPLETED = \"completed\"\n    FAILED = \"failed\"\n    CANCELLED = \"cancelled\"\n\n@dataclass\nclass Task:\n    \"\"\"\uc791\uc5c5 \uc815\uc758\"\"\"\n    task_id: str\n    task_type: str\n    payload: Dict[str, Any]\n    priority: int = 0\n    max_retries: int = 3\n    timeout: float = 30.0\n    created_at: float = 0.0\n\n    def __post_init__(self):\n        if self.created_at == 0.0:\n            self.created_at = time.time()\n\n    def to_dict(self):\n        \"\"\"\ub515\uc154\ub108\ub9ac\ub85c \ubcc0\ud658\"\"\"\n        return asdict(self)\n\n    @classmethod\n    def from_dict(cls, data):\n        \"\"\"\ub515\uc154\ub108\ub9ac\uc5d0\uc11c \uc0dd\uc131\"\"\"\n        return cls(**data)\n\n@dataclass\nclass TaskResult:\n    \"\"\"\uc791\uc5c5 \uacb0\uacfc\"\"\"\n    task_id: str\n    status: TaskStatus\n    result: Any = None\n    error: str = None\n    worker_id: str = None\n    started_at: float = 0.0\n    completed_at: float = 0.0\n\n    def to_dict(self):\n        \"\"\"\ub515\uc154\ub108\ub9ac\ub85c \ubcc0\ud658\"\"\"\n        data = asdict(self)\n        data['status'] = self.status.value\n        return data\n\n    @classmethod\n    def from_dict(cls, data):\n        \"\"\"\ub515\uc154\ub108\ub9ac\uc5d0\uc11c \uc0dd\uc131\"\"\"\n        data['status'] = TaskStatus(data['status'])\n        return cls(**data)\n\nclass TaskHandler(ABC):\n    \"\"\"\uc791\uc5c5 \ud578\ub4e4\ub7ec \uc778\ud130\ud398\uc774\uc2a4\"\"\"\n\n    @abstractmethod\n    def handle(self, task: Task) -&gt; Any:\n        \"\"\"\uc791\uc5c5 \ucc98\ub9ac\"\"\"\n        pass\n\n    @abstractmethod\n    def get_task_type(self) -&gt; str:\n        \"\"\"\ucc98\ub9ac \uac00\ub2a5\ud55c \uc791\uc5c5 \ud0c0\uc785 \ubc18\ud658\"\"\"\n        pass\n\nclass DistributedTaskQueue:\n    \"\"\"\ubd84\uc0b0 \uc791\uc5c5 \ud050\"\"\"\n\n    def __init__(self, max_size=1000):\n        self.max_size = max_size\n        self._tasks = {}  # task_id -&gt; Task\n        self._pending_tasks = []  # priority queue\n        self._running_tasks = {}  # task_id -&gt; worker_id\n        self._completed_tasks = {}  # task_id -&gt; TaskResult\n        self._lock = threading.RLock()\n        self._task_handlers = {}  # task_type -&gt; TaskHandler\n        self._workers = {}  # worker_id -&gt; worker_info\n        self._metrics = {\n            'total_submitted': 0,\n            'total_completed': 0,\n            'total_failed': 0,\n            'avg_processing_time': 0.0\n        }\n\n    def register_handler(self, handler: TaskHandler):\n        \"\"\"\uc791\uc5c5 \ud578\ub4e4\ub7ec \ub4f1\ub85d\"\"\"\n        task_type = handler.get_task_type()\n        self._task_handlers[task_type] = handler\n        print(f\"   \ud578\ub4e4\ub7ec \ub4f1\ub85d: {task_type}\")\n\n    def submit_task(self, task: Task) -&gt; bool:\n        \"\"\"\uc791\uc5c5 \uc81c\ucd9c\"\"\"\n        with self._lock:\n            if len(self._tasks) &gt;= self.max_size:\n                return False\n\n            if task.task_type not in self._task_handlers:\n                raise ValueError(f\"Unknown task type: {task.task_type}\")\n\n            self._tasks[task.task_id] = task\n            self._pending_tasks.append(task)\n            self._pending_tasks.sort(key=lambda t: (-t.priority, t.created_at))\n\n            self._metrics['total_submitted'] += 1\n\n            print(f\"   \uc791\uc5c5 \uc81c\ucd9c: {task.task_id} ({task.task_type})\")\n            return True\n\n    def get_next_task(self, worker_id: str) -&gt; Optional[Task]:\n        \"\"\"\ub2e4\uc74c \uc791\uc5c5 \uac00\uc838\uc624\uae30\"\"\"\n        with self._lock:\n            if not self._pending_tasks:\n                return None\n\n            task = self._pending_tasks.pop(0)\n            self._running_tasks[task.task_id] = worker_id\n\n            print(f\"   \uc791\uc5c5 \ud560\ub2f9: {task.task_id} -&gt; \uc6cc\ucee4 {worker_id}\")\n            return task\n\n    def complete_task(self, task_result: TaskResult):\n        \"\"\"\uc791\uc5c5 \uc644\ub8cc \ucc98\ub9ac\"\"\"\n        with self._lock:\n            task_id = task_result.task_id\n\n            if task_id in self._running_tasks:\n                del self._running_tasks[task_id]\n\n            self._completed_tasks[task_id] = task_result\n\n            if task_result.status == TaskStatus.COMPLETED:\n                self._metrics['total_completed'] += 1\n\n                # \ud3c9\uade0 \ucc98\ub9ac \uc2dc\uac04 \uc5c5\ub370\uc774\ud2b8\n                processing_time = task_result.completed_at - task_result.started_at\n                current_avg = self._metrics['avg_processing_time']\n                completed_count = self._metrics['total_completed']\n                new_avg = ((current_avg * (completed_count - 1) + processing_time) / \n                          completed_count)\n                self._metrics['avg_processing_time'] = new_avg\n\n            elif task_result.status == TaskStatus.FAILED:\n                self._metrics['total_failed'] += 1\n\n                # \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1\n                task = self._tasks.get(task_id)\n                if task and task.max_retries &gt; 0:\n                    task.max_retries -= 1\n                    self._pending_tasks.append(task)\n                    self._pending_tasks.sort(key=lambda t: (-t.priority, t.created_at))\n                    print(f\"   \uc791\uc5c5 \uc7ac\uc2dc\ub3c4: {task_id} (\ub0a8\uc740 \uc2dc\ub3c4: {task.max_retries})\")\n\n            print(f\"   \uc791\uc5c5 \uc644\ub8cc: {task_id} ({task_result.status.value})\")\n\n    def get_task_status(self, task_id: str) -&gt; Optional[TaskStatus]:\n        \"\"\"\uc791\uc5c5 \uc0c1\ud0dc \uc870\ud68c\"\"\"\n        with self._lock:\n            if task_id in self._completed_tasks:\n                return self._completed_tasks[task_id].status\n            elif task_id in self._running_tasks:\n                return TaskStatus.RUNNING\n            elif task_id in self._tasks:\n                return TaskStatus.PENDING\n            return None\n\n    def get_metrics(self):\n        \"\"\"\uba54\ud2b8\ub9ad\uc2a4 \ubc18\ud658\"\"\"\n        with self._lock:\n            return {\n                **self._metrics,\n                'pending_tasks': len(self._pending_tasks),\n                'running_tasks': len(self._running_tasks),\n                'completed_tasks': len(self._completed_tasks),\n                'active_workers': len(self._workers)\n            }\n\nclass DistributedWorker:\n    \"\"\"\ubd84\uc0b0 \uc6cc\ucee4\"\"\"\n\n    def __init__(self, worker_id: str, task_queue: DistributedTaskQueue):\n        self.worker_id = worker_id\n        self.task_queue = task_queue\n        self._running = False\n        self._thread = None\n        self._current_task = None\n        self._stats = {\n            'tasks_processed': 0,\n            'tasks_failed': 0,\n            'total_processing_time': 0.0,\n            'start_time': None\n        }\n\n    def start(self):\n        \"\"\"\uc6cc\ucee4 \uc2dc\uc791\"\"\"\n        if self._running:\n            return\n\n        self._running = True\n        self._stats['start_time'] = time.time()\n        self._thread = threading.Thread(target=self._work_loop, daemon=True)\n        self._thread.start()\n        print(f\"   \uc6cc\ucee4 \uc2dc\uc791: {self.worker_id}\")\n\n    def stop(self):\n        \"\"\"\uc6cc\ucee4 \uc911\uc9c0\"\"\"\n        self._running = False\n        if self._thread:\n            self._thread.join()\n        print(f\"   \uc6cc\ucee4 \uc911\uc9c0: {self.worker_id}\")\n\n    def _work_loop(self):\n        \"\"\"\uc6cc\ucee4 \uba54\uc778 \ub8e8\ud504\"\"\"\n        while self._running:\n            try:\n                # \uc791\uc5c5 \uac00\uc838\uc624\uae30\n                task = self.task_queue.get_next_task(self.worker_id)\n\n                if task is None:\n                    time.sleep(0.1)  # \uc791\uc5c5\uc774 \uc5c6\uc73c\uba74 \uc7a0\uc2dc \ub300\uae30\n                    continue\n\n                self._current_task = task\n\n                # \uc791\uc5c5 \ucc98\ub9ac\n                result = self._process_task(task)\n\n                # \uacb0\uacfc \uc81c\ucd9c\n                self.task_queue.complete_task(result)\n\n                self._current_task = None\n\n            except Exception as e:\n                print(f\"   \uc6cc\ucee4 {self.worker_id} \uc624\ub958: {e}\")\n                break\n\n        print(f\"   \uc6cc\ucee4 {self.worker_id} \uc885\ub8cc\")\n\n    def _process_task(self, task: Task) -&gt; TaskResult:\n        \"\"\"\uc791\uc5c5 \ucc98\ub9ac\"\"\"\n        start_time = time.time()\n\n        try:\n            handler = self.task_queue._task_handlers.get(task.task_type)\n            if not handler:\n                raise ValueError(f\"No handler for task type: {task.task_type}\")\n\n            print(f\"     \uc6cc\ucee4 {self.worker_id}: \uc791\uc5c5 \ucc98\ub9ac \uc911 {task.task_id}\")\n\n            # \ud0c0\uc784\uc544\uc6c3 \ucc98\ub9ac (\uac04\ub2e8\ud55c \uad6c\ud604)\n            result = handler.handle(task)\n\n            end_time = time.time()\n            processing_time = end_time - start_time\n\n            return TaskResult(\n                task_id=task.task_id,\n                status=TaskStatus.COMPLETED,\n                result=result,\n                worker_id=self.worker_id,\n                started_at=start_time,\n                completed_at=end_time,\n                processing_time=processing_time\n            )\n\n        except Exception as e:\n            end_time = time.time()\n            self._stats['tasks_failed'] += 1\n\n            return TaskResult(\n                task_id=task.task_id,\n                status=TaskStatus.FAILED,\n                error=str(e),\n                worker_id=self.worker_id,\n                completed_at=end_time\n            )\n\n    def get_stats(self):\n        \"\"\"\uc6cc\ucee4 \ud1b5\uacc4\"\"\"\n        uptime = time.time() - self._stats['start_time'] if self._stats['start_time'] else 0\n        avg_processing_time = (self._stats['total_processing_time'] / \n                              max(self._stats['tasks_processed'], 1))\n\n        return {\n            'worker_id': self.worker_id,\n            'uptime': uptime,\n            'tasks_processed': self._stats['tasks_processed'],\n            'tasks_failed': self._stats['tasks_failed'],\n            'avg_processing_time': avg_processing_time,\n            'current_task': self._current_task.task_id if self._current_task else None\n        }\n\nclass MathTaskHandler(TaskHandler):\n    \"\"\"\uc218\ud559 \uacc4\uc0b0 \uc791\uc5c5 \ud578\ub4e4\ub7ec\"\"\"\n\n    def get_task_type(self) -&gt; str:\n        return \"math\"\n\n    def handle(self, task: Task) -&gt; Any:\n        operation = task.payload.get('operation')\n        numbers = task.payload.get('numbers', [])\n\n        if operation == 'sum':\n            return sum(numbers)\n        elif operation == 'product':\n            result = 1\n            for num in numbers:\n                result *= num\n            return result\n        elif operation == 'factorial':\n            n = task.payload.get('number', 0)\n            result = 1\n            for i in range(1, n + 1):\n                result *= i\n            return result\n        elif operation == 'fibonacci':\n            n = task.payload.get('number', 0)\n            if n &lt;= 1:\n                return n\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n        else:\n            raise ValueError(f\"Unknown math operation: {operation}\")\n\nclass StringTaskHandler(TaskHandler):\n    \"\"\"\ubb38\uc790\uc5f4 \ucc98\ub9ac \uc791\uc5c5 \ud578\ub4e4\ub7ec\"\"\"\n\n    def get_task_type(self) -&gt; str:\n        return \"string\"\n\n    def handle(self, task: Task) -&gt; Any:\n        operation = task.payload.get('operation')\n        text = task.payload.get('text', '')\n\n        # \ucc98\ub9ac \uc2dc\ubbac\ub808\uc774\uc158\n        time.sleep(0.1)\n\n        if operation == 'reverse':\n            return text[::-1]\n        elif operation == 'uppercase':\n            return text.upper()\n        elif operation == 'word_count':\n            return len(text.split())\n        elif operation == 'hash':\n            return hashlib.md5(text.encode()).hexdigest()\n        else:\n            raise ValueError(f\"Unknown string operation: {operation}\")\n\ndef demonstrate_distributed_system():\n    \"\"\"\ubd84\uc0b0 \uc6cc\ucee4 \uc2dc\uc2a4\ud15c \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \ubd84\uc0b0 \uc791\uc5c5 \ud050 \uc124\uc815:\")\n\n    task_queue = DistributedTaskQueue(max_size=100)\n\n    # \ud578\ub4e4\ub7ec \ub4f1\ub85d\n    task_queue.register_handler(MathTaskHandler())\n    task_queue.register_handler(StringTaskHandler())\n\n    # \uc6cc\ucee4\ub4e4 \uc0dd\uc131 \ubc0f \uc2dc\uc791\n    workers = []\n    for i in range(4):\n        worker = DistributedWorker(f\"worker-{i+1}\", task_queue)\n        workers.append(worker)\n        worker.start()\n\n    print(\"\\n2. \uc791\uc5c5 \uc81c\ucd9c:\")\n\n    # \ub2e4\uc591\ud55c \uc791\uc5c5 \uc81c\ucd9c\n    tasks = [\n        Task(\"math-1\", \"math\", {\"operation\": \"factorial\", \"number\": 10}, priority=2),\n        Task(\"string-1\", \"string\", {\"operation\": \"reverse\", \"text\": \"Hello World\"}, priority=1),\n        Task(\"math-2\", \"math\", {\"operation\": \"fibonacci\", \"number\": 15}, priority=3),\n        Task(\"string-2\", \"string\", {\"operation\": \"word_count\", \"text\": \"The quick brown fox jumps\"}, priority=1),\n        Task(\"math-3\", \"math\", {\"operation\": \"sum\", \"numbers\": list(range(1, 101))}, priority=2),\n        Task(\"string-3\", \"string\", {\"operation\": \"hash\", \"text\": \"distribute processing\"}, priority=1),\n        Task(\"math-4\", \"math\", {\"operation\": \"product\", \"numbers\": [2, 3, 4, 5]}, priority=2),\n        Task(\"string-4\", \"string\", {\"operation\": \"uppercase\", \"text\": \"distributed system\"}, priority=1)\n    ]\n\n    for task in tasks:\n        task_queue.submit_task(task)\n\n    # \ubaa8\ub4e0 \uc791\uc5c5 \uc644\ub8cc \ub300\uae30\n    time.sleep(2.0)\n\n    # \uacb0\uacfc \uc218\uc9d1\n    results = task_queue.get_results()\n    print(f\"\\n   \uc791\uc5c5 \uacb0\uacfc:\")\n    for result in results:\n        print(f\"     {result}\")\n\n    # \ud1b5\uacc4 \ucd9c\ub825\n    stats = task_queue.get_stats()\n    print(f\"\\n   \uc791\uc5c5 \ud050 \ud1b5\uacc4: {stats}\")\n\n    # \uc6cc\ucee4 \uc885\ub8cc\n    task_queue.shutdown()\n\nif __name__ == \"__main__\":\n    # \uba40\ud2f0\ud504\ub85c\uc138\uc2f1 \ub370\ubaa8\ub294 \uba54\uc778 \ubaa8\ub4c8\uc5d0\uc11c\ub9cc \uc2e4\ud589\n    demonstrate_distributed_system()\nelse:\n    print(\"   \ubd84\uc0b0 \uc6cc\ucee4 \uc2dc\uc2a4\ud15c\uc740 \uba54\uc778 \ubaa8\ub4c8\uc5d0\uc11c\ub9cc \uc2e4\ud589\ud558\uc138\uc694\")\n</code></pre>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#5","title":"5. \uc131\ub2a5 \ubd84\uc11d\uacfc \ucd5c\uc801\ud654","text":""},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#51","title":"5.1 \ub3d9\uc2dc\uc131 \uc131\ub2a5 \ud504\ub85c\ud30c\uc77c\ub9c1","text":"<pre><code>print(\"\\n=== \ub3d9\uc2dc\uc131 \uc131\ub2a5 \ud504\ub85c\ud30c\uc77c\ub9c1 ===\")\n\nimport cProfile\nimport pstats\nimport tracemalloc\nfrom memory_profiler import profile as memory_profile\nfrom line_profiler import LineProfiler\nimport matplotlib.pyplot as plt\nimport gc\nimport resource\n\nclass ConcurrencyProfiler:\n    \"\"\"\ub3d9\uc2dc\uc131 \uc131\ub2a5 \ud504\ub85c\ud30c\uc77c\ub7ec\"\"\"\n\n    def __init__(self):\n        self.results = {}\n        self.memory_snapshots = []\n        self.cpu_profiles = {}\n\n    def profile_function(self, func, *args, **kwargs):\n        \"\"\"\ud568\uc218 \ud504\ub85c\ud30c\uc77c\ub9c1\"\"\"\n        # CPU \ud504\ub85c\ud30c\uc77c\ub9c1\n        profiler = cProfile.Profile()\n\n        # \uba54\ubaa8\ub9ac \ucd94\uc801 \uc2dc\uc791\n        tracemalloc.start()\n\n        # \uc2e4\ud589 \uc2dc\uac04 \uce21\uc815\n        start_time = time.perf_counter()\n        start_cpu = time.process_time()\n\n        # \ud568\uc218 \uc2e4\ud589\n        profiler.enable()\n        try:\n            result = func(*args, **kwargs)\n        finally:\n            profiler.disable()\n\n        # \uc2dc\uac04 \uce21\uc815 \uc644\ub8cc\n        end_time = time.perf_counter()\n        end_cpu = time.process_time()\n\n        # \uba54\ubaa8\ub9ac \uc2a4\ub0c5\uc0f7\n        current, peak = tracemalloc.get_traced_memory()\n        tracemalloc.stop()\n\n        # \uacb0\uacfc \uc800\uc7a5\n        func_name = func.__name__\n        self.results[func_name] = {\n            'wall_time': end_time - start_time,\n            'cpu_time': end_cpu - start_cpu,\n            'memory_current': current,\n            'memory_peak': peak,\n            'result': result\n        }\n\n        # CPU \ud504\ub85c\ud30c\uc77c \uc800\uc7a5\n        stats = pstats.Stats(profiler)\n        self.cpu_profiles[func_name] = stats\n\n        return result\n\n    def compare_implementations(self, implementations, test_data):\n        \"\"\"\uad6c\ud604 \ubc29\uc2dd \ube44\uad50\"\"\"\n        comparison_results = {}\n\n        for name, impl_func in implementations.items():\n            print(f\"   \ud504\ub85c\ud30c\uc77c\ub9c1: {name}\")\n\n            # \uc5ec\ub7ec \ubc88 \uc2e4\ud589\ud558\uc5ec \ud3c9\uade0 \uad6c\ud558\uae30\n            iterations = 3\n            total_metrics = {\n                'wall_time': 0,\n                'cpu_time': 0,\n                'memory_peak': 0\n            }\n\n            for i in range(iterations):\n                result = self.profile_function(impl_func, test_data)\n                metrics = self.results[impl_func.__name__]\n\n                total_metrics['wall_time'] += metrics['wall_time']\n                total_metrics['cpu_time'] += metrics['cpu_time']\n                total_metrics['memory_peak'] = max(\n                    total_metrics['memory_peak'], \n                    metrics['memory_peak']\n                )\n\n            # \ud3c9\uade0 \uacc4\uc0b0\n            comparison_results[name] = {\n                'avg_wall_time': total_metrics['wall_time'] / iterations,\n                'avg_cpu_time': total_metrics['cpu_time'] / iterations,\n                'peak_memory': total_metrics['memory_peak']\n            }\n\n        return comparison_results\n\n    def analyze_bottlenecks(self, func_name):\n        \"\"\"\ubcd1\ubaa9 \ubd84\uc11d\"\"\"\n        if func_name not in self.cpu_profiles:\n            return None\n\n        stats = self.cpu_profiles[func_name]\n\n        # \uac00\uc7a5 \uc2dc\uac04\uc744 \ub9ce\uc774 \uc18c\ubaa8\ud55c \ud568\uc218\ub4e4\n        print(f\"\\n   {func_name} \ubcd1\ubaa9 \ubd84\uc11d:\")\n        stats.sort_stats('cumulative')\n        stats.print_stats(10)  # \uc0c1\uc704 10\uac1c\ub9cc \ucd9c\ub825\n\n        return stats\n\n    def get_summary(self):\n        \"\"\"\ud504\ub85c\ud30c\uc77c\ub9c1 \uc694\uc57d\"\"\"\n        summary = {}\n\n        for func_name, metrics in self.results.items():\n            summary[func_name] = {\n                'wall_time': f\"{metrics['wall_time']:.4f}s\",\n                'cpu_time': f\"{metrics['cpu_time']:.4f}s\",\n                'memory_peak': f\"{metrics['memory_peak'] / 1024 / 1024:.2f}MB\",\n                'cpu_efficiency': f\"{(metrics['cpu_time'] / metrics['wall_time'] * 100):.1f}%\"\n            }\n\n        return summary\n\n# \ud14c\uc2a4\ud2b8 \uad6c\ud604\ub4e4\ndef sequential_processing(data):\n    \"\"\"\uc21c\ucc28 \ucc98\ub9ac\"\"\"\n    result = []\n    for item in data:\n        # CPU \uc9d1\uc57d\uc801 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n        processed = sum(i * i for i in range(item % 100 + 1))\n        result.append(processed)\n    return result\n\ndef threaded_processing(data):\n    \"\"\"\uc2a4\ub808\ub4dc \uae30\ubc18 \ucc98\ub9ac\"\"\"\n    def worker(chunk):\n        return [sum(i * i for i in range(item % 100 + 1)) for item in chunk]\n\n    chunk_size = len(data) // 4\n    chunks = [data[i:i + chunk_size] for i in range(0, len(data), chunk_size)]\n\n    with ThreadPoolExecutor(max_workers=4) as executor:\n        futures = [executor.submit(worker, chunk) for chunk in chunks]\n        result = []\n        for future in futures:\n            result.extend(future.result())\n\n    return result\n\ndef multiprocess_processing(data):\n    \"\"\"\uba40\ud2f0\ud504\ub85c\uc138\uc2a4 \ucc98\ub9ac\"\"\"\n    def worker(chunk):\n        return [sum(i * i for i in range(item % 100 + 1)) for item in chunk]\n\n    chunk_size = len(data) // 4\n    chunks = [data[i:i + chunk_size] for i in range(0, len(data), chunk_size)]\n\n    with ProcessPoolExecutor(max_workers=4) as executor:\n        futures = [executor.submit(worker, chunk) for chunk in chunks]\n        result = []\n        for future in futures:\n            result.extend(future.result())\n\n    return result\n\nasync def async_processing(data):\n    \"\"\"\ube44\ub3d9\uae30 \ucc98\ub9ac\"\"\"\n    async def worker(chunk):\n        result = []\n        for item in chunk:\n            # I/O \uc2dc\ubbac\ub808\uc774\uc158\n            await asyncio.sleep(0.001)\n            processed = sum(i * i for i in range(item % 50 + 1))\n            result.append(processed)\n        return result\n\n    chunk_size = len(data) // 4\n    chunks = [data[i:i + chunk_size] for i in range(0, len(data), chunk_size)]\n\n    tasks = [worker(chunk) for chunk in chunks]\n    results = await asyncio.gather(*tasks)\n\n    final_result = []\n    for result in results:\n        final_result.extend(result)\n\n    return final_result\n\nclass MemoryMonitor:\n    \"\"\"\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ubaa8\ub2c8\ud130\"\"\"\n\n    def __init__(self, interval=0.1):\n        self.interval = interval\n        self.monitoring = False\n        self.memory_usage = []\n        self.monitor_thread = None\n\n    def start_monitoring(self):\n        \"\"\"\ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc791\"\"\"\n        self.monitoring = True\n        self.memory_usage = []\n        self.monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)\n        self.monitor_thread.start()\n\n    def stop_monitoring(self):\n        \"\"\"\ubaa8\ub2c8\ud130\ub9c1 \uc911\uc9c0\"\"\"\n        self.monitoring = False\n        if self.monitor_thread:\n            self.monitor_thread.join()\n\n    def _monitor_loop(self):\n        \"\"\"\ubaa8\ub2c8\ud130\ub9c1 \ub8e8\ud504\"\"\"\n        while self.monitoring:\n            try:\n                # \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \uce21\uc815 (RSS)\n                import psutil\n                process = psutil.Process()\n                memory_mb = process.memory_info().rss / 1024 / 1024\n                self.memory_usage.append({\n                    'timestamp': time.time(),\n                    'memory_mb': memory_mb\n                })\n                time.sleep(self.interval)\n            except Exception as e:\n                print(f\"   \uba54\ubaa8\ub9ac \ubaa8\ub2c8\ud130\ub9c1 \uc624\ub958: {e}\")\n                break\n\n    def get_peak_memory(self):\n        \"\"\"\ucd5c\ub300 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\"\"\"\n        if not self.memory_usage:\n            return 0\n        return max(entry['memory_mb'] for entry in self.memory_usage)\n\n    def get_average_memory(self):\n        \"\"\"\ud3c9\uade0 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\"\"\"\n        if not self.memory_usage:\n            return 0\n        return sum(entry['memory_mb'] for entry in self.memory_usage) / len(self.memory_usage)\n\ndef demonstrate_performance_profiling():\n    \"\"\"\uc131\ub2a5 \ud504\ub85c\ud30c\uc77c\ub9c1 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \ub3d9\uc2dc\uc131 \uad6c\ud604 \ubc29\uc2dd \ube44\uad50:\")\n\n    # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\n    test_data = list(range(1000))\n\n    profiler = ConcurrencyProfiler()\n\n    # \uad6c\ud604 \ubc29\uc2dd\ub4e4\n    implementations = {\n        'Sequential': sequential_processing,\n        'Threading': threaded_processing,\n        'Multiprocessing': multiprocess_processing\n    }\n\n    # \ube44\uad50 \uc2e4\ud589\n    comparison = profiler.compare_implementations(implementations, test_data)\n\n    # \uacb0\uacfc \ucd9c\ub825\n    print(\"\\n   \uc131\ub2a5 \ube44\uad50 \uacb0\uacfc:\")\n    print(f\"   {'Method':&lt;15} {'Wall Time':&lt;12} {'CPU Time':&lt;12} {'Memory (MB)':&lt;12}\")\n    print(\"   \" + \"-\" * 60)\n\n    for method, metrics in comparison.items():\n        wall_time = f\"{metrics['avg_wall_time']:.4f}s\"\n        cpu_time = f\"{metrics['avg_cpu_time']:.4f}s\"\n        memory = f\"{metrics['peak_memory'] / 1024 / 1024:.2f}MB\"\n\n        print(f\"   {method:&lt;15} {wall_time:&lt;12} {cpu_time:&lt;12} {memory:&lt;12}\")\n\n    # \uc0c1\uc138 \ud504\ub85c\ud30c\uc77c\ub9c1 \uc694\uc57d\n    print(\"\\n   \ud504\ub85c\ud30c\uc77c\ub9c1 \uc694\uc57d:\")\n    summary = profiler.get_summary()\n    for func_name, metrics in summary.items():\n        print(f\"   {func_name}:\")\n        for metric, value in metrics.items():\n            print(f\"     {metric}: {value}\")\n\n    print(\"\\n2. \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ubaa8\ub2c8\ud130\ub9c1:\")\n\n    monitor = MemoryMonitor(interval=0.05)\n\n    # \uba54\ubaa8\ub9ac \uc9d1\uc57d\uc801 \uc791\uc5c5 \ud14c\uc2a4\ud2b8\n    def memory_intensive_task():\n        \"\"\"\uba54\ubaa8\ub9ac \uc9d1\uc57d\uc801 \uc791\uc5c5\"\"\"\n        data = []\n        for i in range(100000):\n            data.append([j for j in range(i % 100)])\n        return len(data)\n\n    monitor.start_monitoring()\n\n    start_time = time.time()\n    result = memory_intensive_task()\n    end_time = time.time()\n\n    monitor.stop_monitoring()\n\n    peak_memory = monitor.get_peak_memory()\n    avg_memory = monitor.get_average_memory()\n\n    print(f\"   \uc791\uc5c5 \uacb0\uacfc: {result}\")\n    print(f\"   \uc2e4\ud589 \uc2dc\uac04: {end_time - start_time:.3f}\ucd08\")\n    print(f\"   \ucd5c\ub300 \uba54\ubaa8\ub9ac: {peak_memory:.2f}MB\")\n    print(f\"   \ud3c9\uade0 \uba54\ubaa8\ub9ac: {avg_memory:.2f}MB\")\n\n    print(\"\\n3. \ub3d9\uc2dc\uc131 \ucd5c\uc801\ud654 \uad8c\uc7a5\uc0ac\ud56d:\")\n\n    # \uae30\ubcf8 \ubd84\uc11d\n    fastest_method = min(comparison.items(), key=lambda x: x[1]['avg_wall_time'])\n    most_efficient = min(comparison.items(), \n                        key=lambda x: x[1]['peak_memory'] / x[1]['avg_wall_time'])\n\n    print(f\"   \uac00\uc7a5 \ube60\ub978 \ubc29\ubc95: {fastest_method[0]} \"\n          f\"({fastest_method[1]['avg_wall_time']:.4f}\ucd08)\")\n    print(f\"   \uac00\uc7a5 \ud6a8\uc728\uc801\uc778 \ubc29\ubc95: {most_efficient[0]} \"\n          f\"(\uba54\ubaa8\ub9ac/\uc2dc\uac04 \ube44\uc728 \uae30\uc900)\")\n\n    # \uad8c\uc7a5\uc0ac\ud56d \ucd9c\ub825\n    recommendations = [\n        \"CPU \uc9d1\uc57d\uc801 \uc791\uc5c5\uc5d0\ub294 \uba40\ud2f0\ud504\ub85c\uc138\uc2f1 \uc0ac\uc6a9\",\n        \"I/O \uc9d1\uc57d\uc801 \uc791\uc5c5\uc5d0\ub294 \ube44\ub3d9\uae30 \ucc98\ub9ac \uc0ac\uc6a9\",\n        \"\uba54\ubaa8\ub9ac \uc81c\uc57d\uc774 \uc788\ub294 \ud658\uacbd\uc5d0\uc11c\ub294 \uc2a4\ub808\ub529 \uace0\ub824\",\n        \"\uc791\uc740 \ub370\uc774\ud130\uc14b\uc5d0\ub294 \uc21c\ucc28 \ucc98\ub9ac\uac00 \uc624\ubc84\ud5e4\ub4dc \uc5c6\uc774 \ud6a8\uc728\uc801\",\n        \"\ud504\ub85c\ud30c\uc77c\ub9c1\uc744 \ud1b5\ud55c \ubcd1\ubaa9 \uc9c0\uc810 \uc2dd\ubcc4 \ud6c4 \ucd5c\uc801\ud654\"\n    ]\n\n    print(\"   \ucd5c\uc801\ud654 \uad8c\uc7a5\uc0ac\ud56d:\")\n    for i, rec in enumerate(recommendations, 1):\n        print(f\"     {i}. {rec}\")\n\ndemonstrate_performance_profiling()\n</code></pre>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#6","title":"6. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#1_1","title":"\uc5f0\uc2b5 1: \uace0\uae09 \uc2a4\ub808\ub4dc \ud480 \uad00\ub9ac\uc790","text":"<p>\ub2e4\uc74c \uae30\ub2a5\uc744 \uac00\uc9c4 \uace0\uae09 \uc2a4\ub808\ub4dc \ud480 \uad00\ub9ac\uc790\ub97c \uad6c\ud604\ud558\uc138\uc694: - \ub3d9\uc801 \uc2a4\ub808\ub4dc \uc218 \uc870\uc815 - \uc791\uc5c5 \uc6b0\uc120\uc21c\uc704 \ucc98\ub9ac - \ub370\ub4dc\ub77d \uac10\uc9c0 \ubc0f \ubcf5\uad6c - \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1 \ubc0f \ucd5c\uc801\ud654</p>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#2","title":"\uc5f0\uc2b5 2: \ube44\ub3d9\uae30 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9ac\ubc0d \uc2dc\uc2a4\ud15c","text":"<p>\uc2e4\uc2dc\uac04 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9ac\ubc0d\uc744 \uc704\ud55c \ube44\ub3d9\uae30 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694: - \ubc31\ud504\ub808\uc154(backpressure) \ucc98\ub9ac - \uc2a4\ud2b8\ub9bc \ubd84\uae30 \ubc0f \ubcd1\ud569 - \uc624\ub958 \ubcf5\uad6c \ubc0f \uc7ac\uc2dc\ub3c4 - \uba54\ud2b8\ub9ad\uc2a4 \uc218\uc9d1 \ubc0f \ubaa8\ub2c8\ud130\ub9c1</p>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#3_1","title":"\uc5f0\uc2b5 3: \ubd84\uc0b0 \uc791\uc5c5 \uc2a4\ucf00\uc904\ub7ec","text":"<p>\uace0\uac00\uc6a9\uc131 \ubd84\uc0b0 \uc791\uc5c5 \uc2a4\ucf00\uc904\ub7ec\ub97c \uad6c\ud604\ud558\uc138\uc694: - \uc791\uc5c5 \ud30c\ud2f0\uc154\ub2dd \ubc0f \ub85c\ub4dc \ubc38\ub7f0\uc2f1 - \uc6cc\ucee4 \ub178\ub4dc \uc7a5\uc560 \ucc98\ub9ac - \uc791\uc5c5 \uacb0\uacfc \uc218\uc9d1 \ubc0f \uc9d1\uacc4 - \ud655\uc7a5\uc131 \uace0\ub824\ud55c \uc544\ud0a4\ud14d\ucc98</p>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#4_1","title":"\uc5f0\uc2b5 4: \uc131\ub2a5 \ucd5c\uc801\ud654 \ud504\ub808\uc784\uc6cc\ud06c","text":"<p>\ub3d9\uc2dc\uc131 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc704\ud55c \uc131\ub2a5 \ucd5c\uc801\ud654 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uad6c\ud604\ud558\uc138\uc694: - \uc790\ub3d9 \ubcd1\ubaa9 \uc9c0\uc810 \ud0d0\uc9c0 - \ucd5c\uc801 \uc2a4\ub808\ub4dc/\ud504\ub85c\uc138\uc2a4 \uc218 \ucd94\ucc9c - \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ucd5c\uc801\ud654 - \uc2e4\uc2dc\uac04 \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1</p>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\uace0\uae09 \uc2a4\ub808\ub4dc \ud480 \uad00\ub9ac\uc790: \uc6b0\uc120\uc21c\uc704 \uae30\ubc18 \uc2a4\ub808\ub4dc \ud480, \uc801\uc751\ud615 \uc2a4\ucf00\uc77c\ub9c1</li> <li>AsyncIO \uc2ec\ud654: \ube44\ub3d9\uae30 \ub9ac\uc18c\uc2a4 \ud480, \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4, \ubc30\uce58 \ucc98\ub9ac</li> <li>\uba40\ud2f0\ud504\ub85c\uc138\uc2f1 \uace0\uae09 \uae30\ubc95: \uace0\uae09 \ud504\ub85c\uc138\uc2a4 \uac04 \ud1b5\uc2e0, \ubd84\uc0b0 \ub370\uc774\ud130 \ucc98\ub9ac</li> <li>\uc131\ub2a5 \ucd5c\uc801\ud654: \ud504\ub85c\ud30c\uc77c\ub9c1 \uae30\ubc95, \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ubaa8\ub2c8\ud130\ub9c1</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \ub124\ud2b8\uc6cc\ud0b9\uacfc \uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ud1b5\ud574 \ubd84\uc0b0 \uc2dc\uc2a4\ud15c \uad6c\ucd95\uc758 \uae30\ucd08\ub97c \ud559\uc2b5\ud558\uac8c \ub429\ub2c8\ub2e4.</p>"},{"location":"tutorials/advanced/chapter04_advanced_concurrency_parallelism/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ub3d9\uc2dc\uc131 \ud328\ud134 \uc120\ud0dd\uc740 \uc791\uc5c5\uc758 \ud2b9\uc131(CPU/I/O \uc9d1\uc57d\uc801)\uc5d0 \ub530\ub77c \uacb0\uc815\ud574\uc57c \ud569\ub2c8\ub2e4</li> <li>\uace0\uae09 \ub3d9\uae30\ud654 \ud504\ub9ac\ubbf8\ud2f0\ube0c\ub97c \ud1b5\ud574 \ubcf5\uc7a1\ud55c \ub3d9\uc2dc\uc131 \uc2dc\ub098\ub9ac\uc624\ub97c \uc548\uc804\ud558\uac8c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d\uc740 I/O \uc9d1\uc57d\uc801 \uc791\uc5c5\uc5d0\uc11c \ub6f0\uc5b4\ub09c \uc131\ub2a5\uc744 \ubcf4\uc785\ub2c8\ub2e4</li> <li>\ubd84\uc0b0 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 \uc7a5\uc560 \ucc98\ub9ac\uc640 \ubcf5\uad6c \uba54\ucee4\ub2c8\uc998\uc774 \ud544\uc218\uc801\uc785\ub2c8\ub2e4</li> <li>\uc131\ub2a5 \ud504\ub85c\ud30c\uc77c\ub9c1\uc744 \ud1b5\ud574 \ubcd1\ubaa9\uc744 \uc2dd\ubcc4\ud558\uace0 \ucd5c\uc801\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\uba54\ubaa8\ub9ac \ud6a8\uc728\uc131\uacfc \ud655\uc7a5\uc131\uc744 \uace0\ub824\ud55c \uc124\uacc4\uac00 \uc911\uc694\ud569\ub2c8\ub2e4  </li> </ul>"},{"location":"tutorials/advanced/chapter05_networking_socket_programming/","title":"Chapter 5: \ub124\ud2b8\uc6cc\ud0b9\uacfc \uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d","text":""},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \ud575\uc2ec \uac1c\ub150\uacfc \uc800\uc218\uc900 \ub124\ud2b8\uc6cc\ud0b9 \uad6c\ud604\ud558\uae30 - TCP/UDP \ud504\ub85c\ud1a0\ucf5c\uc744 \ud65c\uc6a9\ud55c \uc548\uc815\uc801\uc774\uace0 \ud6a8\uc728\uc801\uc778 \ub124\ud2b8\uc6cc\ud06c \ud1b5\uc2e0 \uc124\uacc4\ud558\uae30 - \ube44\ub3d9\uae30 \ub124\ud2b8\uc6cc\ud0b9\uacfc \uace0\uc131\ub2a5 I/O \ud328\ud134 \ub9c8\uc2a4\ud130\ud558\uae30 - \uc6f9 \uc11c\ubc84\uc640 \ud504\ub85d\uc2dc \uad6c\ud604\uc744 \ud1b5\ud55c HTTP \ud504\ub85c\ud1a0\ucf5c \uc2ec\ud654 \uc774\ud574\ud558\uae30 - \ub124\ud2b8\uc6cc\ud06c \ubcf4\uc548\uacfc \uc554\ud638\ud654 \ud1b5\uc2e0 \uad6c\ud604\ud558\uae30 - \ubd84\uc0b0 \uc2dc\uc2a4\ud15c\uc744 \uc704\ud55c \uba54\uc2dc\uc9c0 \ud328\uc2f1\uacfc RPC \uc2dc\uc2a4\ud15c \uc124\uacc4\ud558\uae30 - \uace0\uc131\ub2a5 \ub124\ud2b8\uc6cc\ud0b9 \ud328\ud134\uacfc \uc2a4\ucf00\uc77c\ub9c1 \uc804\ub7b5 \uc801\uc6a9\ud558\uae30 - \uc2e4\ubb34 \uc911\uc2ec\uc758 \ub124\ud2b8\uc6cc\ud06c \ubaa8\ub2c8\ud130\ub9c1\uacfc \ubb38\uc81c \ud574\uacb0 \uae30\ubc95 \ud65c\uc6a9\ud558\uae30</p>"},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#1","title":"1. \uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08\uc640 \uace0\uae09 \ud328\ud134","text":""},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#11","title":"1.1 \uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d \ud575\uc2ec \uac1c\ub150","text":"<pre><code>print(\"=== \uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08\uc640 \uace0\uae09 \ud328\ud134 ===\")\n\nimport socket\nimport threading\nimport time\nimport json\nimport struct\nimport select\nimport errno\nfrom typing import Dict, List, Optional, Callable, Any\nfrom dataclasses import dataclass\nfrom enum import Enum\nimport logging\n\nclass SocketType(Enum):\n    \"\"\"\uc18c\ucf13 \ud0c0\uc785 \uc5f4\uac70\ud615\"\"\"\n    TCP = socket.SOCK_STREAM\n    UDP = socket.SOCK_DGRAM\n\nclass ConnectionState(Enum):\n    \"\"\"\uc5f0\uacb0 \uc0c1\ud0dc\"\"\"\n    DISCONNECTED = \"disconnected\"\n    CONNECTING = \"connecting\"\n    CONNECTED = \"connected\"\n    DISCONNECTING = \"disconnecting\"\n    ERROR = \"error\"\n\n@dataclass\nclass NetworkMessage:\n    \"\"\"\ub124\ud2b8\uc6cc\ud06c \uba54\uc2dc\uc9c0 \uad6c\uc870\"\"\"\n    msg_type: str\n    payload: Dict[str, Any]\n    timestamp: float = None\n    sender_id: str = None\n\n    def __post_init__(self):\n        if self.timestamp is None:\n            self.timestamp = time.time()\n\n    def to_bytes(self) -&gt; bytes:\n        \"\"\"\uba54\uc2dc\uc9c0\ub97c \ubc14\uc774\ud2b8\ub85c \uc9c1\ub82c\ud654\"\"\"\n        data = {\n            'type': self.msg_type,\n            'payload': self.payload,\n            'timestamp': self.timestamp,\n            'sender_id': self.sender_id\n        }\n        json_data = json.dumps(data).encode('utf-8')\n        # \uba54\uc2dc\uc9c0 \uae38\uc774\ub97c \ud5e4\ub354\ub85c \ucd94\uac00 (4\ubc14\uc774\ud2b8 \ube45\uc5d4\ub514\uc548)\n        header = struct.pack('&gt;I', len(json_data))\n        return header + json_data\n\n    @classmethod\n    def from_bytes(cls, data: bytes) -&gt; 'NetworkMessage':\n        \"\"\"\ubc14\uc774\ud2b8\uc5d0\uc11c \uba54\uc2dc\uc9c0 \ubcf5\uc6d0\"\"\"\n        decoded = json.loads(data.decode('utf-8'))\n        return cls(\n            msg_type=decoded['type'],\n            payload=decoded['payload'],\n            timestamp=decoded['timestamp'],\n            sender_id=decoded['sender_id']\n        )\n\nclass AdvancedSocket:\n    \"\"\"\uace0\uae09 \uc18c\ucf13 \ub798\ud37c \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, socket_type: SocketType = SocketType.TCP):\n        self.socket_type = socket_type\n        self.socket = socket.socket(socket.AF_INET, socket_type.value)\n        self.state = ConnectionState.DISCONNECTED\n        self.callbacks = {}\n        self.buffer = b''\n        self.stats = {\n            'bytes_sent': 0,\n            'bytes_received': 0,\n            'messages_sent': 0,\n            'messages_received': 0,\n            'connections': 0,\n            'errors': 0\n        }\n\n        # \uc18c\ucf13 \uc635\uc158 \uc124\uc815\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        if socket_type == SocketType.TCP:\n            self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n\n    def set_callback(self, event: str, callback: Callable):\n        \"\"\"\uc774\ubca4\ud2b8 \ucf5c\ubc31 \uc124\uc815\"\"\"\n        self.callbacks[event] = callback\n\n    def _trigger_callback(self, event: str, *args, **kwargs):\n        \"\"\"\ucf5c\ubc31 \ud2b8\ub9ac\uac70\"\"\"\n        if event in self.callbacks:\n            try:\n                self.callbacks[event](*args, **kwargs)\n            except Exception as e:\n                logging.error(f\"Callback error for {event}: {e}\")\n\n    def connect(self, host: str, port: int, timeout: float = 5.0) -&gt; bool:\n        \"\"\"\uc5f0\uacb0 \uc124\uc815\"\"\"\n        try:\n            self.state = ConnectionState.CONNECTING\n            self.socket.settimeout(timeout)\n            self.socket.connect((host, port))\n            self.state = ConnectionState.CONNECTED\n            self.stats['connections'] += 1\n\n            print(f\"   \uc5f0\uacb0 \uc131\uacf5: {host}:{port}\")\n            self._trigger_callback('connected', host, port)\n            return True\n\n        except socket.error as e:\n            self.state = ConnectionState.ERROR\n            self.stats['errors'] += 1\n            print(f\"   \uc5f0\uacb0 \uc2e4\ud328: {e}\")\n            self._trigger_callback('connection_failed', e)\n            return False\n\n    def send_message(self, message: NetworkMessage) -&gt; bool:\n        \"\"\"\uba54\uc2dc\uc9c0 \uc804\uc1a1\"\"\"\n        if self.state != ConnectionState.CONNECTED:\n            return False\n\n        try:\n            data = message.to_bytes()\n            bytes_sent = self.socket.send(data)\n\n            self.stats['bytes_sent'] += bytes_sent\n            self.stats['messages_sent'] += 1\n\n            print(f\"   \uba54\uc2dc\uc9c0 \uc804\uc1a1: {message.msg_type} ({bytes_sent} bytes)\")\n            self._trigger_callback('message_sent', message)\n            return True\n\n        except socket.error as e:\n            self.stats['errors'] += 1\n            print(f\"   \uc804\uc1a1 \uc2e4\ud328: {e}\")\n            self._trigger_callback('send_error', e)\n            return False\n\n    def receive_message(self, timeout: float = 1.0) -&gt; Optional[NetworkMessage]:\n        \"\"\"\uba54\uc2dc\uc9c0 \uc218\uc2e0\"\"\"\n        if self.state != ConnectionState.CONNECTED:\n            return None\n\n        try:\n            self.socket.settimeout(timeout)\n\n            # \uba54\uc2dc\uc9c0 \ud5e4\ub354 \uc77d\uae30 (4\ubc14\uc774\ud2b8 \uae38\uc774 \uc815\ubcf4)\n            while len(self.buffer) &lt; 4:\n                chunk = self.socket.recv(4 - len(self.buffer))\n                if not chunk:\n                    return None\n                self.buffer += chunk\n\n            # \uba54\uc2dc\uc9c0 \uae38\uc774 \ucd94\ucd9c\n            msg_length = struct.unpack('&gt;I', self.buffer[:4])[0]\n            self.buffer = self.buffer[4:]\n\n            # \uba54\uc2dc\uc9c0 \ubcf8\ubb38 \uc77d\uae30\n            while len(self.buffer) &lt; msg_length:\n                remaining = msg_length - len(self.buffer)\n                chunk = self.socket.recv(remaining)\n                if not chunk:\n                    return None\n                self.buffer += chunk\n\n            # \uba54\uc2dc\uc9c0 \ud30c\uc2f1\n            message_data = self.buffer[:msg_length]\n            self.buffer = self.buffer[msg_length:]\n\n            message = NetworkMessage.from_bytes(message_data)\n\n            self.stats['bytes_received'] += msg_length + 4\n            self.stats['messages_received'] += 1\n\n            print(f\"   \uba54\uc2dc\uc9c0 \uc218\uc2e0: {message.msg_type}\")\n            self._trigger_callback('message_received', message)\n            return message\n\n        except socket.timeout:\n            return None\n        except socket.error as e:\n            self.stats['errors'] += 1\n            print(f\"   \uc218\uc2e0 \uc2e4\ud328: {e}\")\n            self._trigger_callback('receive_error', e)\n            return None\n\n    def close(self):\n        \"\"\"\uc5f0\uacb0 \uc885\ub8cc\"\"\"\n        if self.state == ConnectionState.CONNECTED:\n            self.state = ConnectionState.DISCONNECTING\n            self._trigger_callback('disconnecting')\n\n        try:\n            self.socket.close()\n            self.state = ConnectionState.DISCONNECTED\n            print(\"   \uc5f0\uacb0 \uc885\ub8cc\")\n            self._trigger_callback('disconnected')\n        except socket.error as e:\n            print(f\"   \uc885\ub8cc \uc624\ub958: {e}\")\n\n    def get_stats(self) -&gt; Dict[str, Any]:\n        \"\"\"\ud1b5\uacc4 \uc815\ubcf4 \ubc18\ud658\"\"\"\n        return {\n            **self.stats,\n            'state': self.state.value,\n            'socket_type': self.socket_type.name\n        }\n\nclass SocketPool:\n    \"\"\"\uc18c\ucf13 \ud480 \uad00\ub9ac\uc790\"\"\"\n\n    def __init__(self, max_size: int = 10):\n        self.max_size = max_size\n        self.available_sockets = []\n        self.in_use_sockets = set()\n        self.lock = threading.Lock()\n        self.stats = {\n            'created': 0,\n            'reused': 0,\n            'closed': 0\n        }\n\n    def get_socket(self, socket_type: SocketType = SocketType.TCP) -&gt; AdvancedSocket:\n        \"\"\"\uc18c\ucf13 \ud68d\ub4dd\"\"\"\n        with self.lock:\n            # \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uc18c\ucf13 \ud655\uc778\n            for sock in self.available_sockets[:]:\n                if sock.socket_type == socket_type and sock.state == ConnectionState.DISCONNECTED:\n                    self.available_sockets.remove(sock)\n                    self.in_use_sockets.add(sock)\n                    self.stats['reused'] += 1\n                    print(f\"   \uc18c\ucf13 \uc7ac\uc0ac\uc6a9: {socket_type.name}\")\n                    return sock\n\n            # \uc0c8 \uc18c\ucf13 \uc0dd\uc131\n            new_socket = AdvancedSocket(socket_type)\n            self.in_use_sockets.add(new_socket)\n            self.stats['created'] += 1\n            print(f\"   \uc0c8 \uc18c\ucf13 \uc0dd\uc131: {socket_type.name}\")\n            return new_socket\n\n    def return_socket(self, sock: AdvancedSocket):\n        \"\"\"\uc18c\ucf13 \ubc18\ud658\"\"\"\n        with self.lock:\n            if sock in self.in_use_sockets:\n                self.in_use_sockets.remove(sock)\n\n                if len(self.available_sockets) &lt; self.max_size:\n                    # \uc18c\ucf13 \uc0c1\ud0dc \ucd08\uae30\ud654\n                    sock.buffer = b''\n                    sock.state = ConnectionState.DISCONNECTED\n                    self.available_sockets.append(sock)\n                    print(\"   \uc18c\ucf13 \ud480 \ubc18\ud658\")\n                else:\n                    # \ud480\uc774 \uac00\ub4dd \ucc2c \uacbd\uc6b0 \uc18c\ucf13 \ub2eb\uae30\n                    sock.close()\n                    self.stats['closed'] += 1\n                    print(\"   \uc18c\ucf13 \ud480 \uac00\ub4dd\ucc38, \uc18c\ucf13 \ub2eb\uae30\")\n\n    def close_all(self):\n        \"\"\"\ubaa8\ub4e0 \uc18c\ucf13 \ub2eb\uae30\"\"\"\n        with self.lock:\n            all_sockets = list(self.available_sockets) + list(self.in_use_sockets)\n            for sock in all_sockets:\n                sock.close()\n\n            self.available_sockets.clear()\n            self.in_use_sockets.clear()\n            print(\"   \ubaa8\ub4e0 \uc18c\ucf13 \ub2eb\uae30 \uc644\ub8cc\")\n\n    def get_stats(self) -&gt; Dict[str, Any]:\n        \"\"\"\ud480 \ud1b5\uacc4\"\"\"\n        with self.lock:\n            return {\n                **self.stats,\n                'available': len(self.available_sockets),\n                'in_use': len(self.in_use_sockets),\n                'total': len(self.available_sockets) + len(self.in_use_sockets)\n            }\n\ndef demonstrate_socket_basics():\n    \"\"\"\uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \uae30\ubcf8 \uc18c\ucf13 \ud1b5\uc2e0:\")\n\n    def on_connected(host, port):\n        print(f\"     \ucf5c\ubc31: {host}:{port}\uc5d0 \uc5f0\uacb0\ub428\")\n\n    def on_message_received(message):\n        print(f\"     \ucf5c\ubc31: \uba54\uc2dc\uc9c0 \uc218\uc2e0\ub428 - {message.msg_type}\")\n\n    # \ud074\ub77c\uc774\uc5b8\ud2b8 \uc18c\ucf13 \uc0dd\uc131\n    client = AdvancedSocket(SocketType.TCP)\n    client.set_callback('connected', on_connected)\n    client.set_callback('message_received', on_message_received)\n\n    # \uac04\ub2e8\ud55c \uc5d0\ucf54 \uc11c\ubc84 \uc2dc\ubbac\ub808\uc774\uc158 (\uc2e4\uc81c\ub85c\ub294 \uc11c\ubc84\uac00 \ud544\uc694)\n    print(\"   \ud074\ub77c\uc774\uc5b8\ud2b8 \uc18c\ucf13 \uc0dd\uc131 \uc644\ub8cc\")\n    print(\"   (\uc2e4\uc81c \uc11c\ubc84 \uc5f0\uacb0\uc744 \uc704\ud574\uc11c\ub294 \uc11c\ubc84\uac00 \uc2e4\ud589 \uc911\uc774\uc5b4\uc57c \ud568)\")\n\n    # \uba54\uc2dc\uc9c0 \uc0dd\uc131 \ubc0f \uc9c1\ub82c\ud654 \ud14c\uc2a4\ud2b8\n    test_message = NetworkMessage(\n        msg_type=\"echo\",\n        payload={\"text\": \"Hello, Server!\"},\n        sender_id=\"client_001\"\n    )\n\n    serialized = test_message.to_bytes()\n    deserialized = NetworkMessage.from_bytes(serialized[4:])  # \ud5e4\ub354 \uc81c\uac70\n\n    print(f\"   \uc6d0\ubcf8 \uba54\uc2dc\uc9c0: {test_message.msg_type} - {test_message.payload}\")\n    print(f\"   \uc9c1\ub82c\ud654 \ud06c\uae30: {len(serialized)} bytes\")\n    print(f\"   \ubcf5\uc6d0\ub41c \uba54\uc2dc\uc9c0: {deserialized.msg_type} - {deserialized.payload}\")\n\n    client.close()\n\n    print(\"\\n2. \uc18c\ucf13 \ud480 \uad00\ub9ac:\")\n\n    pool = SocketPool(max_size=3)\n\n    # \uc18c\ucf13 \ud68d\ub4dd \ubc0f \ubc18\ud658 \ud14c\uc2a4\ud2b8\n    sockets = []\n    for i in range(5):\n        sock = pool.get_socket(SocketType.TCP)\n        sockets.append(sock)\n\n    print(f\"   \ud480 \uc0c1\ud0dc: {pool.get_stats()}\")\n\n    # \uc18c\ucf13 \ubc18\ud658\n    for sock in sockets:\n        pool.return_socket(sock)\n\n    print(f\"   \ubc18\ud658 \ud6c4 \ud480 \uc0c1\ud0dc: {pool.get_stats()}\")\n\n    pool.close_all()\n\ndemonstrate_socket_basics()\n</code></pre>"},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#12-tcpudp-","title":"1.2 TCP/UDP \uc11c\ubc84-\ud074\ub77c\uc774\uc5b8\ud2b8 \uad6c\ud604","text":"<pre><code>print(\"\\n=== TCP/UDP \uc11c\ubc84-\ud074\ub77c\uc774\uc5b8\ud2b8 \uad6c\ud604 ===\")\n\nimport asyncio\nimport queue\nimport concurrent.futures\nfrom threading import Thread, Event\n\nclass TCPServer:\n    \"\"\"\uace0\uae09 TCP \uc11c\ubc84\"\"\"\n\n    def __init__(self, host: str = 'localhost', port: int = 8888):\n        self.host = host\n        self.port = port\n        self.socket = None\n        self.clients = {}\n        self.running = False\n        self.thread_pool = concurrent.futures.ThreadPoolExecutor(max_workers=10)\n        self.message_handlers = {}\n        self.stats = {\n            'total_connections': 0,\n            'active_connections': 0,\n            'total_messages': 0,\n            'errors': 0\n        }\n\n    def register_handler(self, msg_type: str, handler: Callable):\n        \"\"\"\uba54\uc2dc\uc9c0 \ud578\ub4e4\ub7ec \ub4f1\ub85d\"\"\"\n        self.message_handlers[msg_type] = handler\n        print(f\"   \ud578\ub4e4\ub7ec \ub4f1\ub85d: {msg_type}\")\n\n    def start(self):\n        \"\"\"\uc11c\ubc84 \uc2dc\uc791\"\"\"\n        try:\n            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self.socket.bind((self.host, self.port))\n            self.socket.listen(5)\n\n            self.running = True\n            print(f\"   TCP \uc11c\ubc84 \uc2dc\uc791: {self.host}:{self.port}\")\n\n            while self.running:\n                try:\n                    client_socket, address = self.socket.accept()\n                    client_id = f\"{address[0]}:{address[1]}\"\n\n                    print(f\"   \ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0: {client_id}\")\n\n                    # \ud074\ub77c\uc774\uc5b8\ud2b8 \uc815\ubcf4 \uc800\uc7a5\n                    self.clients[client_id] = {\n                        'socket': client_socket,\n                        'address': address,\n                        'connected_at': time.time()\n                    }\n\n                    self.stats['total_connections'] += 1\n                    self.stats['active_connections'] += 1\n\n                    # \ud074\ub77c\uc774\uc5b8\ud2b8 \ucc98\ub9ac\ub97c \uc2a4\ub808\ub4dc \ud480\uc5d0 \uc704\uc784\n                    self.thread_pool.submit(self._handle_client, client_id, client_socket)\n\n                except socket.error as e:\n                    if self.running:\n                        print(f\"   \uc5f0\uacb0 \uc218\ub77d \uc624\ub958: {e}\")\n                        self.stats['errors'] += 1\n\n        except Exception as e:\n            print(f\"   \uc11c\ubc84 \uc2dc\uc791 \uc2e4\ud328: {e}\")\n        finally:\n            self._cleanup()\n\n    def _handle_client(self, client_id: str, client_socket: socket.socket):\n        \"\"\"\ud074\ub77c\uc774\uc5b8\ud2b8 \ucc98\ub9ac\"\"\"\n        advanced_socket = AdvancedSocket()\n        advanced_socket.socket = client_socket\n        advanced_socket.state = ConnectionState.CONNECTED\n\n        try:\n            while self.running:\n                message = advanced_socket.receive_message(timeout=1.0)\n                if message is None:\n                    continue\n\n                self.stats['total_messages'] += 1\n                print(f\"   \uba54\uc2dc\uc9c0 \uc218\uc2e0: {client_id} -&gt; {message.msg_type}\")\n\n                # \uba54\uc2dc\uc9c0 \ucc98\ub9ac\n                response = self._process_message(client_id, message)\n                if response:\n                    advanced_socket.send_message(response)\n\n        except Exception as e:\n            print(f\"   \ud074\ub77c\uc774\uc5b8\ud2b8 \ucc98\ub9ac \uc624\ub958: {client_id} - {e}\")\n            self.stats['errors'] += 1\n        finally:\n            self._disconnect_client(client_id)\n\n    def _process_message(self, client_id: str, message: NetworkMessage) -&gt; Optional[NetworkMessage]:\n        \"\"\"\uba54\uc2dc\uc9c0 \ucc98\ub9ac\"\"\"\n        handler = self.message_handlers.get(message.msg_type)\n        if handler:\n            try:\n                return handler(client_id, message)\n            except Exception as e:\n                print(f\"   \ud578\ub4e4\ub7ec \uc624\ub958: {message.msg_type} - {e}\")\n                return NetworkMessage(\n                    msg_type=\"error\",\n                    payload={\"error\": str(e)},\n                    sender_id=\"server\"\n                )\n        else:\n            print(f\"   \uc54c \uc218 \uc5c6\ub294 \uba54\uc2dc\uc9c0 \ud0c0\uc785: {message.msg_type}\")\n            return NetworkMessage(\n                msg_type=\"error\",\n                payload={\"error\": f\"Unknown message type: {message.msg_type}\"},\n                sender_id=\"server\"\n            )\n\n    def _disconnect_client(self, client_id: str):\n        \"\"\"\ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0 \ud574\uc81c\"\"\"\n        if client_id in self.clients:\n            try:\n                self.clients[client_id]['socket'].close()\n            except:\n                pass\n\n            del self.clients[client_id]\n            self.stats['active_connections'] -= 1\n            print(f\"   \ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0 \ud574\uc81c: {client_id}\")\n\n    def broadcast_message(self, message: NetworkMessage):\n        \"\"\"\ubaa8\ub4e0 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \uba54\uc2dc\uc9c0 \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8\"\"\"\n        disconnected_clients = []\n\n        for client_id, client_info in self.clients.items():\n            try:\n                client_socket = client_info['socket']\n                advanced_socket = AdvancedSocket()\n                advanced_socket.socket = client_socket\n                advanced_socket.state = ConnectionState.CONNECTED\n                advanced_socket.send_message(message)\n            except Exception as e:\n                print(f\"   \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8 \uc2e4\ud328: {client_id} - {e}\")\n                disconnected_clients.append(client_id)\n\n        # \uc5f0\uacb0\uc774 \ub04a\uc5b4\uc9c4 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc81c\uac70\n        for client_id in disconnected_clients:\n            self._disconnect_client(client_id)\n\n    def stop(self):\n        \"\"\"\uc11c\ubc84 \uc911\uc9c0\"\"\"\n        self.running = False\n\n        # \ubaa8\ub4e0 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0 \ud574\uc81c\n        for client_id in list(self.clients.keys()):\n            self._disconnect_client(client_id)\n\n        if self.socket:\n            self.socket.close()\n\n        self.thread_pool.shutdown(wait=True)\n        print(\"   TCP \uc11c\ubc84 \uc911\uc9c0\")\n\n    def _cleanup(self):\n        \"\"\"\uc815\ub9ac \uc791\uc5c5\"\"\"\n        if self.socket:\n            self.socket.close()\n\n        for client_id in list(self.clients.keys()):\n            self._disconnect_client(client_id)\n\n    def get_stats(self) -&gt; Dict[str, Any]:\n        \"\"\"\uc11c\ubc84 \ud1b5\uacc4\"\"\"\n        return {\n            **self.stats,\n            'running': self.running,\n            'connected_clients': len(self.clients)\n        }\n\nclass UDPServer:\n    \"\"\"\uace0\uae09 UDP \uc11c\ubc84\"\"\"\n\n    def __init__(self, host: str = 'localhost', port: int = 8889):\n        self.host = host\n        self.port = port\n        self.socket = None\n        self.running = False\n        self.message_handlers = {}\n        self.clients = {}  # address -&gt; last_seen\n        self.stats = {\n            'total_messages': 0,\n            'unique_clients': 0,\n            'errors': 0\n        }\n\n    def register_handler(self, msg_type: str, handler: Callable):\n        \"\"\"\uba54\uc2dc\uc9c0 \ud578\ub4e4\ub7ec \ub4f1\ub85d\"\"\"\n        self.message_handlers[msg_type] = handler\n        print(f\"   UDP \ud578\ub4e4\ub7ec \ub4f1\ub85d: {msg_type}\")\n\n    def start(self):\n        \"\"\"\uc11c\ubc84 \uc2dc\uc791\"\"\"\n        try:\n            self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n            self.socket.bind((self.host, self.port))\n            self.running = True\n\n            print(f\"   UDP \uc11c\ubc84 \uc2dc\uc791: {self.host}:{self.port}\")\n\n            while self.running:\n                try:\n                    # \uba54\uc2dc\uc9c0 \uc218\uc2e0 (\ucd5c\ub300 64KB)\n                    data, address = self.socket.recvfrom(65536)\n\n                    # \ud074\ub77c\uc774\uc5b8\ud2b8 \ucd94\uc801\n                    if address not in self.clients:\n                        self.clients[address] = time.time()\n                        self.stats['unique_clients'] += 1\n                        print(f\"   \uc0c8 UDP \ud074\ub77c\uc774\uc5b8\ud2b8: {address}\")\n                    else:\n                        self.clients[address] = time.time()\n\n                    self.stats['total_messages'] += 1\n\n                    # \uba54\uc2dc\uc9c0 \ud30c\uc2f1\n                    if len(data) &lt; 4:\n                        continue\n\n                    msg_length = struct.unpack('&gt;I', data[:4])[0]\n                    if len(data) != msg_length + 4:\n                        continue\n\n                    message = NetworkMessage.from_bytes(data[4:])\n                    print(f\"   UDP \uba54\uc2dc\uc9c0 \uc218\uc2e0: {address} -&gt; {message.msg_type}\")\n\n                    # \uba54\uc2dc\uc9c0 \ucc98\ub9ac\n                    response = self._process_message(address, message)\n                    if response:\n                        self._send_response(address, response)\n\n                except socket.error as e:\n                    if self.running:\n                        print(f\"   UDP \uc218\uc2e0 \uc624\ub958: {e}\")\n                        self.stats['errors'] += 1\n\n        except Exception as e:\n            print(f\"   UDP \uc11c\ubc84 \uc2dc\uc791 \uc2e4\ud328: {e}\")\n        finally:\n            if self.socket:\n                self.socket.close()\n\n    def _process_message(self, address: tuple, message: NetworkMessage) -&gt; Optional[NetworkMessage]:\n        \"\"\"\uba54\uc2dc\uc9c0 \ucc98\ub9ac\"\"\"\n        handler = self.message_handlers.get(message.msg_type)\n        if handler:\n            try:\n                return handler(address, message)\n            except Exception as e:\n                print(f\"   UDP \ud578\ub4e4\ub7ec \uc624\ub958: {message.msg_type} - {e}\")\n                return NetworkMessage(\n                    msg_type=\"error\",\n                    payload={\"error\": str(e)},\n                    sender_id=\"udp_server\"\n                )\n        else:\n            return NetworkMessage(\n                msg_type=\"error\",\n                payload={\"error\": f\"Unknown message type: {message.msg_type}\"},\n                sender_id=\"udp_server\"\n            )\n\n    def _send_response(self, address: tuple, message: NetworkMessage):\n        \"\"\"\uc751\ub2f5 \uc804\uc1a1\"\"\"\n        try:\n            data = message.to_bytes()\n            self.socket.sendto(data, address)\n            print(f\"   UDP \uc751\ub2f5 \uc804\uc1a1: {message.msg_type} -&gt; {address}\")\n        except socket.error as e:\n            print(f\"   UDP \uc804\uc1a1 \uc2e4\ud328: {e}\")\n            self.stats['errors'] += 1\n\n    def stop(self):\n        \"\"\"\uc11c\ubc84 \uc911\uc9c0\"\"\"\n        self.running = False\n        if self.socket:\n            self.socket.close()\n        print(\"   UDP \uc11c\ubc84 \uc911\uc9c0\")\n\n    def get_stats(self) -&gt; Dict[str, Any]:\n        \"\"\"\uc11c\ubc84 \ud1b5\uacc4\"\"\"\n        active_clients = sum(1 for last_seen in self.clients.values() \n                           if time.time() - last_seen &lt; 300)  # 5\ubd84 \uc774\ub0b4\n\n        return {\n            **self.stats,\n            'running': self.running,\n            'active_clients': active_clients,\n            'total_clients': len(self.clients)\n        }\n\ndef demonstrate_tcp_udp_servers():\n    \"\"\"TCP/UDP \uc11c\ubc84 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. TCP \uc11c\ubc84 \ud578\ub4e4\ub7ec \uc124\uc815:\")\n\n    tcp_server = TCPServer('localhost', 8888)\n\n    def echo_handler(client_id: str, message: NetworkMessage) -&gt; NetworkMessage:\n        \"\"\"\uc5d0\ucf54 \ud578\ub4e4\ub7ec\"\"\"\n        return NetworkMessage(\n            msg_type=\"echo_response\",\n            payload={\"original\": message.payload, \"client\": client_id},\n            sender_id=\"tcp_server\"\n        )\n\n    def ping_handler(client_id: str, message: NetworkMessage) -&gt; NetworkMessage:\n        \"\"\"\ud551 \ud578\ub4e4\ub7ec\"\"\"\n        return NetworkMessage(\n            msg_type=\"pong\",\n            payload={\"timestamp\": time.time()},\n            sender_id=\"tcp_server\"\n        )\n\n    tcp_server.register_handler(\"echo\", echo_handler)\n    tcp_server.register_handler(\"ping\", ping_handler)\n\n    print(f\"   TCP \uc11c\ubc84 \uc124\uc815 \uc644\ub8cc: {tcp_server.get_stats()}\")\n\n    print(\"\\n2. UDP \uc11c\ubc84 \ud578\ub4e4\ub7ec \uc124\uc815:\")\n\n    udp_server = UDPServer('localhost', 8889)\n\n    def udp_echo_handler(address: tuple, message: NetworkMessage) -&gt; NetworkMessage:\n        \"\"\"UDP \uc5d0\ucf54 \ud578\ub4e4\ub7ec\"\"\"\n        return NetworkMessage(\n            msg_type=\"udp_echo_response\",\n            payload={\"original\": message.payload, \"address\": f\"{address[0]}:{address[1]}\"},\n            sender_id=\"udp_server\"\n        )\n\n    def broadcast_handler(address: tuple, message: NetworkMessage) -&gt; NetworkMessage:\n        \"\"\"\ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8 \ud578\ub4e4\ub7ec\"\"\"\n        return NetworkMessage(\n            msg_type=\"broadcast_ack\",\n            payload={\"message\": \"Broadcast received\"},\n            sender_id=\"udp_server\"\n        )\n\n    udp_server.register_handler(\"echo\", udp_echo_handler)\n    udp_server.register_handler(\"broadcast\", broadcast_handler)\n\n    print(f\"   UDP \uc11c\ubc84 \uc124\uc815 \uc644\ub8cc: {udp_server.get_stats()}\")\n\n    print(\"\\n3. \uc11c\ubc84 \uc2dc\ubbac\ub808\uc774\uc158 (\uc2e4\uc81c \uc2e4\ud589\uc740 \ubcc4\ub3c4 \ud504\ub85c\uc138\uc2a4 \ud544\uc694):\")\n    print(\"   \uc2e4\uc81c \uc11c\ubc84 \uc2e4\ud589:\")\n    print(\"   - TCP: python -c \\\"from server import TCPServer; TCPServer().start()\\\"\")\n    print(\"   - UDP: python -c \\\"from server import UDPServer; UDPServer().start()\\\"\")\n\n    # \ud074\ub77c\uc774\uc5b8\ud2b8 \uc2dc\ubbac\ub808\uc774\uc158\n    print(\"\\n4. \ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0 \uc2dc\ubbac\ub808\uc774\uc158:\")\n\n    client = AdvancedSocket(SocketType.TCP)\n\n    # \uba54\uc2dc\uc9c0 \uc0dd\uc131 \ud14c\uc2a4\ud2b8\n    test_messages = [\n        NetworkMessage(\"echo\", {\"text\": \"Hello, TCP Server!\"}),\n        NetworkMessage(\"ping\", {}),\n        NetworkMessage(\"unknown\", {\"test\": \"data\"})\n    ]\n\n    for msg in test_messages:\n        print(f\"   \ud14c\uc2a4\ud2b8 \uba54\uc2dc\uc9c0: {msg.msg_type} - {msg.payload}\")\n        # \uc2e4\uc81c \uc804\uc1a1\uc740 \uc11c\ubc84\uac00 \uc2e4\ud589 \uc911\uc77c \ub54c\ub9cc \uac00\ub2a5\n\n    print(f\"   \ud074\ub77c\uc774\uc5b8\ud2b8 \ud1b5\uacc4: {client.get_stats()}\")\n\ndemonstrate_tcp_udp_servers()\n</code></pre>"},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#2","title":"2. \ube44\ub3d9\uae30 \ub124\ud2b8\uc6cc\ud0b9\uacfc \uc774\ubca4\ud2b8 \ub8e8\ud504","text":""},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#21-asyncio","title":"2.1 AsyncIO \uae30\ubc18 \ub124\ud2b8\uc6cc\ud06c \uc11c\ubc84","text":"<pre><code>print(\"\\n=== \ube44\ub3d9\uae30 \ub124\ud2b8\uc6cc\ud0b9\uacfc \uc774\ubca4\ud2b8 \ub8e8\ud504 ===\")\n\nimport asyncio\nimport aiofiles\nimport weakref\nfrom asyncio import StreamReader, StreamWriter\nfrom typing import Set, Dict, Callable, Awaitable\n\nclass AsyncNetworkMessage:\n    \"\"\"\ube44\ub3d9\uae30 \ub124\ud2b8\uc6cc\ud06c \uba54\uc2dc\uc9c0\"\"\"\n\n    def __init__(self, msg_type: str, payload: Dict[str, Any], \n                 sender_id: str = None, correlation_id: str = None):\n        self.msg_type = msg_type\n        self.payload = payload\n        self.sender_id = sender_id\n        self.correlation_id = correlation_id or str(time.time())\n        self.timestamp = time.time()\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"\ub515\uc154\ub108\ub9ac\ub85c \ubcc0\ud658\"\"\"\n        return {\n            'type': self.msg_type,\n            'payload': self.payload,\n            'sender_id': self.sender_id,\n            'correlation_id': self.correlation_id,\n            'timestamp': self.timestamp\n        }\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; 'AsyncNetworkMessage':\n        \"\"\"\ub515\uc154\ub108\ub9ac\uc5d0\uc11c \uc0dd\uc131\"\"\"\n        return cls(\n            msg_type=data['type'],\n            payload=data['payload'],\n            sender_id=data.get('sender_id'),\n            correlation_id=data.get('correlation_id')\n        )\n\n    async def to_bytes(self) -&gt; bytes:\n        \"\"\"\ube44\ub3d9\uae30 \uc9c1\ub82c\ud654\"\"\"\n        data = json.dumps(self.to_dict()).encode('utf-8')\n        header = struct.pack('&gt;I', len(data))\n        return header + data\n\n    @classmethod\n    async def from_reader(cls, reader: StreamReader) -&gt; Optional['AsyncNetworkMessage']:\n        \"\"\"StreamReader\uc5d0\uc11c \uba54\uc2dc\uc9c0 \uc77d\uae30\"\"\"\n        try:\n            # \ud5e4\ub354 \uc77d\uae30\n            header = await reader.readexactly(4)\n            msg_length = struct.unpack('&gt;I', header)[0]\n\n            # \uba54\uc2dc\uc9c0 \ubcf8\ubb38 \uc77d\uae30\n            data = await reader.readexactly(msg_length)\n            message_dict = json.loads(data.decode('utf-8'))\n\n            return cls.from_dict(message_dict)\n\n        except (asyncio.IncompleteReadError, json.JSONDecodeError) as e:\n            return None\n\nclass AsyncTCPServer:\n    \"\"\"\ube44\ub3d9\uae30 TCP \uc11c\ubc84\"\"\"\n\n    def __init__(self, host: str = 'localhost', port: int = 8890):\n        self.host = host\n        self.port = port\n        self.server = None\n        self.clients: Set[StreamWriter] = set()\n        self.client_info: Dict[StreamWriter, Dict] = {}\n        self.message_handlers: Dict[str, Callable] = {}\n        self.middleware: List[Callable] = []\n        self.stats = {\n            'total_connections': 0,\n            'active_connections': 0,\n            'total_messages': 0,\n            'errors': 0,\n            'start_time': None\n        }\n\n        # \uc57d\ud55c \ucc38\uc870\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud074\ub77c\uc774\uc5b8\ud2b8 \uad00\ub9ac\n        self.client_refs = weakref.WeakSet()\n\n    def add_middleware(self, middleware: Callable):\n        \"\"\"\ubbf8\ub4e4\uc6e8\uc5b4 \ucd94\uac00\"\"\"\n        self.middleware.append(middleware)\n        print(f\"   \ubbf8\ub4e4\uc6e8\uc5b4 \ucd94\uac00: {middleware.__name__}\")\n\n    def register_handler(self, msg_type: str, handler: Callable[..., Awaitable]):\n        \"\"\"\ube44\ub3d9\uae30 \uba54\uc2dc\uc9c0 \ud578\ub4e4\ub7ec \ub4f1\ub85d\"\"\"\n        self.message_handlers[msg_type] = handler\n        print(f\"   \ube44\ub3d9\uae30 \ud578\ub4e4\ub7ec \ub4f1\ub85d: {msg_type}\")\n\n    async def start(self):\n        \"\"\"\uc11c\ubc84 \uc2dc\uc791\"\"\"\n        try:\n            self.server = await asyncio.start_server(\n                self._handle_client,\n                self.host,\n                self.port\n            )\n\n            self.stats['start_time'] = time.time()\n            print(f\"   \ube44\ub3d9\uae30 TCP \uc11c\ubc84 \uc2dc\uc791: {self.host}:{self.port}\")\n\n            async with self.server:\n                await self.server.serve_forever()\n\n        except Exception as e:\n            print(f\"   \ube44\ub3d9\uae30 \uc11c\ubc84 \uc2dc\uc791 \uc2e4\ud328: {e}\")\n\n    async def _handle_client(self, reader: StreamReader, writer: StreamWriter):\n        \"\"\"\ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0 \ucc98\ub9ac\"\"\"\n        client_address = writer.get_extra_info('peername')\n        client_id = f\"{client_address[0]}:{client_address[1]}\"\n\n        # \ud074\ub77c\uc774\uc5b8\ud2b8 \ub4f1\ub85d\n        self.clients.add(writer)\n        self.client_info[writer] = {\n            'address': client_address,\n            'connected_at': time.time(),\n            'client_id': client_id,\n            'messages_received': 0\n        }\n\n        self.stats['total_connections'] += 1\n        self.stats['active_connections'] += 1\n\n        print(f\"   \ube44\ub3d9\uae30 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0: {client_id}\")\n\n        try:\n            while True:\n                # \uba54\uc2dc\uc9c0 \uc218\uc2e0\n                message = await AsyncNetworkMessage.from_reader(reader)\n                if message is None:\n                    break\n\n                self.client_info[writer]['messages_received'] += 1\n                self.stats['total_messages'] += 1\n\n                print(f\"   \ube44\ub3d9\uae30 \uba54\uc2dc\uc9c0 \uc218\uc2e0: {client_id} -&gt; {message.msg_type}\")\n\n                # \ubbf8\ub4e4\uc6e8\uc5b4 \uc2e4\ud589\n                for middleware in self.middleware:\n                    try:\n                        await middleware(client_id, message)\n                    except Exception as e:\n                        print(f\"   \ubbf8\ub4e4\uc6e8\uc5b4 \uc624\ub958: {e}\")\n\n                # \uba54\uc2dc\uc9c0 \ucc98\ub9ac\n                response = await self._process_message(client_id, message)\n                if response:\n                    await self._send_message(writer, response)\n\n        except asyncio.CancelledError:\n            print(f\"   \ud074\ub77c\uc774\uc5b8\ud2b8 \ucc98\ub9ac \ucde8\uc18c: {client_id}\")\n        except Exception as e:\n            print(f\"   \ud074\ub77c\uc774\uc5b8\ud2b8 \ucc98\ub9ac \uc624\ub958: {client_id} - {e}\")\n            self.stats['errors'] += 1\n        finally:\n            await self._disconnect_client(writer)\n\n    async def _process_message(self, client_id: str, message: AsyncNetworkMessage) -&gt; Optional[AsyncNetworkMessage]:\n        \"\"\"\uba54\uc2dc\uc9c0 \ucc98\ub9ac\"\"\"\n        handler = self.message_handlers.get(message.msg_type)\n        if handler:\n            try:\n                return await handler(client_id, message)\n            except Exception as e:\n                print(f\"   \ube44\ub3d9\uae30 \ud578\ub4e4\ub7ec \uc624\ub958: {message.msg_type} - {e}\")\n                return AsyncNetworkMessage(\n                    msg_type=\"error\",\n                    payload={\"error\": str(e)},\n                    sender_id=\"async_server\",\n                    correlation_id=message.correlation_id\n                )\n        else:\n            return AsyncNetworkMessage(\n                msg_type=\"error\",\n                payload={\"error\": f\"Unknown message type: {message.msg_type}\"},\n                sender_id=\"async_server\",\n                correlation_id=message.correlation_id\n            )\n\n    async def _send_message(self, writer: StreamWriter, message: AsyncNetworkMessage):\n        \"\"\"\uba54\uc2dc\uc9c0 \uc804\uc1a1\"\"\"\n        try:\n            data = await message.to_bytes()\n            writer.write(data)\n            await writer.drain()\n            print(f\"   \ube44\ub3d9\uae30 \uba54\uc2dc\uc9c0 \uc804\uc1a1: {message.msg_type}\")\n        except Exception as e:\n            print(f\"   \ube44\ub3d9\uae30 \uc804\uc1a1 \uc2e4\ud328: {e}\")\n            self.stats['errors'] += 1\n\n    async def _disconnect_client(self, writer: StreamWriter):\n        \"\"\"\ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0 \ud574\uc81c\"\"\"\n        if writer in self.clients:\n            client_info = self.client_info.get(writer, {})\n            client_id = client_info.get('client_id', 'unknown')\n\n            self.clients.discard(writer)\n            self.client_info.pop(writer, None)\n            self.stats['active_connections'] -= 1\n\n            try:\n                writer.close()\n                await writer.wait_closed()\n            except Exception:\n                pass\n\n            print(f\"   \ube44\ub3d9\uae30 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0 \ud574\uc81c: {client_id}\")\n\n    async def broadcast_message(self, message: AsyncNetworkMessage):\n        \"\"\"\ubaa8\ub4e0 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8\"\"\"\n        if not self.clients:\n            return\n\n        print(f\"   \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8: {message.msg_type} to {len(self.clients)} clients\")\n\n        # \ubcd1\ub82c \uc804\uc1a1\n        tasks = []\n        for writer in list(self.clients):\n            task = asyncio.create_task(self._send_message(writer, message))\n            tasks.append(task)\n\n        # \uc804\uc1a1 \uc644\ub8cc \ub300\uae30\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        # \uc624\ub958 \ucc98\ub9ac\n        errors = [r for r in results if isinstance(r, Exception)]\n        if errors:\n            print(f\"   \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8 \uc624\ub958: {len(errors)}\uac1c\")\n\n    async def stop(self):\n        \"\"\"\uc11c\ubc84 \uc911\uc9c0\"\"\"\n        if self.server:\n            self.server.close()\n            await self.server.wait_closed()\n\n        # \ubaa8\ub4e0 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0 \ud574\uc81c\n        for writer in list(self.clients):\n            await self._disconnect_client(writer)\n\n        print(\"   \ube44\ub3d9\uae30 TCP \uc11c\ubc84 \uc911\uc9c0\")\n\n    def get_stats(self) -&gt; Dict[str, Any]:\n        \"\"\"\uc11c\ubc84 \ud1b5\uacc4\"\"\"\n        uptime = time.time() - self.stats['start_time'] if self.stats['start_time'] else 0\n\n        return {\n            **self.stats,\n            'uptime': uptime,\n            'connected_clients': len(self.clients),\n            'handlers_registered': len(self.message_handlers),\n            'middleware_count': len(self.middleware)\n        }\n\nclass AsyncClient:\n    \"\"\"\ube44\ub3d9\uae30 \ud074\ub77c\uc774\uc5b8\ud2b8\"\"\"\n\n    def __init__(self):\n        self.reader = None\n        self.writer = None\n        self.connected = False\n        self.response_futures = {}\n        self.stats = {\n            'messages_sent': 0,\n            'messages_received': 0,\n            'errors': 0\n        }\n\n    async def connect(self, host: str, port: int) -&gt; bool:\n        \"\"\"\uc11c\ubc84\uc5d0 \uc5f0\uacb0\"\"\"\n        try:\n            self.reader, self.writer = await asyncio.open_connection(host, port)\n            self.connected = True\n            print(f\"   \ube44\ub3d9\uae30 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0: {host}:{port}\")\n\n            # \uc218\uc2e0 \ud0dc\uc2a4\ud06c \uc2dc\uc791\n            asyncio.create_task(self._receive_loop())\n            return True\n\n        except Exception as e:\n            print(f\"   \ube44\ub3d9\uae30 \uc5f0\uacb0 \uc2e4\ud328: {e}\")\n            self.stats['errors'] += 1\n            return False\n\n    async def send_message(self, message: AsyncNetworkMessage) -&gt; Optional[AsyncNetworkMessage]:\n        \"\"\"\uba54\uc2dc\uc9c0 \uc804\uc1a1 \ubc0f \uc751\ub2f5 \ub300\uae30\"\"\"\n        if not self.connected:\n            return None\n\n        try:\n            # \uc751\ub2f5 \ub300\uae30\ub97c \uc704\ud55c Future \uc0dd\uc131\n            if message.correlation_id:\n                future = asyncio.Future()\n                self.response_futures[message.correlation_id] = future\n\n            # \uba54\uc2dc\uc9c0 \uc804\uc1a1\n            data = await message.to_bytes()\n            self.writer.write(data)\n            await self.writer.drain()\n\n            self.stats['messages_sent'] += 1\n            print(f\"   \ube44\ub3d9\uae30 \uba54\uc2dc\uc9c0 \uc804\uc1a1: {message.msg_type}\")\n\n            # \uc751\ub2f5\uc774 \ud544\uc694\ud55c \uacbd\uc6b0 \ub300\uae30\n            if message.correlation_id:\n                try:\n                    response = await asyncio.wait_for(future, timeout=5.0)\n                    return response\n                except asyncio.TimeoutError:\n                    print(f\"   \uc751\ub2f5 \ud0c0\uc784\uc544\uc6c3: {message.correlation_id}\")\n                    return None\n                finally:\n                    self.response_futures.pop(message.correlation_id, None)\n\n            return None\n\n        except Exception as e:\n            print(f\"   \ube44\ub3d9\uae30 \uc804\uc1a1 \uc2e4\ud328: {e}\")\n            self.stats['errors'] += 1\n            return None\n\n    async def _receive_loop(self):\n        \"\"\"\uba54\uc2dc\uc9c0 \uc218\uc2e0 \ub8e8\ud504\"\"\"\n        try:\n            while self.connected:\n                message = await AsyncNetworkMessage.from_reader(self.reader)\n                if message is None:\n                    break\n\n                self.stats['messages_received'] += 1\n                print(f\"   \ube44\ub3d9\uae30 \uba54\uc2dc\uc9c0 \uc218\uc2e0: {message.msg_type}\")\n\n                # \uc751\ub2f5 \uba54\uc2dc\uc9c0 \ucc98\ub9ac\n                if message.correlation_id in self.response_futures:\n                    future = self.response_futures[message.correlation_id]\n                    if not future.done():\n                        future.set_result(message)\n\n        except Exception as e:\n            print(f\"   \uc218\uc2e0 \ub8e8\ud504 \uc624\ub958: {e}\")\n            self.stats['errors'] += 1\n        finally:\n            self.connected = False\n\n    async def disconnect(self):\n        \"\"\"\uc5f0\uacb0 \ud574\uc81c\"\"\"\n        if self.writer:\n            self.writer.close()\n            await self.writer.wait_closed()\n\n        self.connected = False\n        print(\"   \ube44\ub3d9\uae30 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0 \ud574\uc81c\")\n\n    def get_stats(self) -&gt; Dict[str, Any]:\n        \"\"\"\ud074\ub77c\uc774\uc5b8\ud2b8 \ud1b5\uacc4\"\"\"\n        return {\n            **self.stats,\n            'connected': self.connected,\n            'pending_responses': len(self.response_futures)\n        }\n\nasync def demonstrate_async_networking():\n    \"\"\"\ube44\ub3d9\uae30 \ub124\ud2b8\uc6cc\ud0b9 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. \ube44\ub3d9\uae30 \uc11c\ubc84 \uc124\uc815:\")\n\n    server = AsyncTCPServer('localhost', 8890)\n\n    # \ubbf8\ub4e4\uc6e8\uc5b4 \uc815\uc758\n    async def logging_middleware(client_id: str, message: AsyncNetworkMessage):\n        \"\"\"\ub85c\uae45 \ubbf8\ub4e4\uc6e8\uc5b4\"\"\"\n        print(f\"     \ubbf8\ub4e4\uc6e8\uc5b4 \ub85c\uadf8: {client_id} -&gt; {message.msg_type}\")\n\n    async def rate_limit_middleware(client_id: str, message: AsyncNetworkMessage):\n        \"\"\"\uc18d\ub3c4 \uc81c\ud55c \ubbf8\ub4e4\uc6e8\uc5b4\"\"\"\n        # \uc2e4\uc81c\ub85c\ub294 \ud074\ub77c\uc774\uc5b8\ud2b8\ubcc4 \uc18d\ub3c4 \uc81c\ud55c \uad6c\ud604\n        pass\n\n    server.add_middleware(logging_middleware)\n    server.add_middleware(rate_limit_middleware)\n\n    # \ud578\ub4e4\ub7ec \uc815\uc758\n    async def async_echo_handler(client_id: str, message: AsyncNetworkMessage) -&gt; AsyncNetworkMessage:\n        \"\"\"\ube44\ub3d9\uae30 \uc5d0\ucf54 \ud578\ub4e4\ub7ec\"\"\"\n        await asyncio.sleep(0.1)  # \ube44\ub3d9\uae30 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n        return AsyncNetworkMessage(\n            msg_type=\"echo_response\",\n            payload={\"echo\": message.payload, \"processed_by\": \"async_server\"},\n            sender_id=\"async_server\",\n            correlation_id=message.correlation_id\n        )\n\n    async def async_compute_handler(client_id: str, message: AsyncNetworkMessage) -&gt; AsyncNetworkMessage:\n        \"\"\"\ube44\ub3d9\uae30 \uacc4\uc0b0 \ud578\ub4e4\ub7ec\"\"\"\n        numbers = message.payload.get('numbers', [])\n\n        # CPU \uc9d1\uc57d\uc801 \uc791\uc5c5\uc744 \ubcc4\ub3c4 \uc2a4\ub808\ub4dc\uc5d0\uc11c \uc2e4\ud589\n        loop = asyncio.get_event_loop()\n        result = await loop.run_in_executor(None, sum, numbers)\n\n        return AsyncNetworkMessage(\n            msg_type=\"compute_response\",\n            payload={\"result\": result, \"count\": len(numbers)},\n            sender_id=\"async_server\",\n            correlation_id=message.correlation_id\n        )\n\n    server.register_handler(\"echo\", async_echo_handler)\n    server.register_handler(\"compute\", async_compute_handler)\n\n    print(f\"   \ube44\ub3d9\uae30 \uc11c\ubc84 \uc124\uc815 \uc644\ub8cc: {server.get_stats()}\")\n\n    print(\"\\n2. \ube44\ub3d9\uae30 \ud074\ub77c\uc774\uc5b8\ud2b8 \ud14c\uc2a4\ud2b8:\")\n\n    client = AsyncClient()\n\n    # \ud14c\uc2a4\ud2b8 \uba54\uc2dc\uc9c0\ub4e4\n    test_messages = [\n        AsyncNetworkMessage(\"echo\", {\"text\": \"Hello Async!\"}, correlation_id=\"test_1\"),\n        AsyncNetworkMessage(\"compute\", {\"numbers\": list(range(100))}, correlation_id=\"test_2\"),\n        AsyncNetworkMessage(\"unknown\", {\"data\": \"test\"}, correlation_id=\"test_3\")\n    ]\n\n    print(\"   \ud14c\uc2a4\ud2b8 \uba54\uc2dc\uc9c0 \uc900\ube44:\")\n    for msg in test_messages:\n        print(f\"     {msg.msg_type}: {msg.correlation_id}\")\n\n    print(f\"   \ud074\ub77c\uc774\uc5b8\ud2b8 \uc124\uc815 \uc644\ub8cc: {client.get_stats()}\")\n\n    print(\"\\n3. \uc2e4\uc81c \ube44\ub3d9\uae30 \uc11c\ubc84 \uc2e4\ud589 (\ub370\ubaa8):\")\n    print(\"   \uc2e4\uc81c \uc2e4\ud589: asyncio.run(server.start())\")\n    print(\"   \ud074\ub77c\uc774\uc5b8\ud2b8: asyncio.run(client.connect('localhost', 8890))\")\n\n# \ube44\ub3d9\uae30 \ub124\ud2b8\uc6cc\ud0b9 \ub370\ubaa8 \uc2e4\ud589\ntry:\n    # \uc2e4\uc81c \ud658\uacbd\uc5d0\uc11c\ub294 asyncio.run() \uc0ac\uc6a9\n    print(\"   \ube44\ub3d9\uae30 \ub124\ud2b8\uc6cc\ud0b9 \ub370\ubaa8 \uc124\uc815 \uc644\ub8cc\")\n    print(\"   \uc2e4\uc81c \uc2e4\ud589\uc740 \ubcc4\ub3c4 \ube44\ub3d9\uae30 \ud658\uacbd\uc5d0\uc11c \uc9c4\ud589\ud558\uc138\uc694\")\nexcept Exception as e:\n    print(f\"   \ube44\ub3d9\uae30 \ub370\ubaa8 \uc624\ub958: {e}\")\n</code></pre>"},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#3-http","title":"3. HTTP \uc11c\ubc84\uc640 \uc6f9 \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604","text":""},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#31-http","title":"3.1 \ucee4\uc2a4\ud140 HTTP \uc11c\ubc84 \uad6c\ud604","text":"<pre><code>print(\"\\n=== HTTP \uc11c\ubc84\uc640 \uc6f9 \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604 ===\")\n\nimport urllib.parse\nimport mimetypes\nimport os\nfrom http import HTTPStatus\nfrom typing import Dict, List, Tuple, Optional, Union\nimport base64\nimport hashlib\n\nclass HTTPRequest:\n    \"\"\"HTTP \uc694\uccad \ud30c\uc11c\"\"\"\n\n    def __init__(self, raw_request: str):\n        self.raw = raw_request\n        self.method = \"\"\n        self.path = \"\"\n        self.version = \"\"\n        self.headers = {}\n        self.query_params = {}\n        self.body = \"\"\n        self.cookies = {}\n\n        self._parse_request()\n\n    def _parse_request(self):\n        \"\"\"\uc694\uccad \ud30c\uc2f1\"\"\"\n        if not self.raw.strip():\n            return\n\n        lines = self.raw.split('\\r\\n')\n        if not lines:\n            return\n\n        # \uccab \ubc88\uc9f8 \uc904: \uba54\uc11c\ub4dc, \uacbd\ub85c, \ubc84\uc804\n        request_line = lines[0].split(' ')\n        if len(request_line) &gt;= 3:\n            self.method = request_line[0]\n            full_path = request_line[1]\n            self.version = request_line[2]\n\n            # \uacbd\ub85c\uc640 \ucffc\ub9ac \ud30c\ub77c\ubbf8\ud130 \ubd84\ub9ac\n            if '?' in full_path:\n                self.path, query_string = full_path.split('?', 1)\n                self.query_params = urllib.parse.parse_qs(query_string)\n            else:\n                self.path = full_path\n\n        # \ud5e4\ub354 \ud30c\uc2f1\n        header_end = len(lines)\n        for i, line in enumerate(lines[1:], 1):\n            if line == '':\n                header_end = i\n                break\n\n            if ':' in line:\n                key, value = line.split(':', 1)\n                self.headers[key.strip().lower()] = value.strip()\n\n        # \ucfe0\ud0a4 \ud30c\uc2f1\n        if 'cookie' in self.headers:\n            cookie_header = self.headers['cookie']\n            for cookie in cookie_header.split(';'):\n                if '=' in cookie:\n                    key, value = cookie.split('=', 1)\n                    self.cookies[key.strip()] = value.strip()\n\n        # \ubc14\ub514 \ud30c\uc2f1\n        if header_end &lt; len(lines):\n            self.body = '\\r\\n'.join(lines[header_end + 1:])\n\n    def get_header(self, name: str, default: str = None) -&gt; str:\n        \"\"\"\ud5e4\ub354 \uac12 \uac00\uc838\uc624\uae30\"\"\"\n        return self.headers.get(name.lower(), default)\n\n    def get_query_param(self, name: str, default: str = None) -&gt; str:\n        \"\"\"\ucffc\ub9ac \ud30c\ub77c\ubbf8\ud130 \uac00\uc838\uc624\uae30\"\"\"\n        values = self.query_params.get(name, [default])\n        return values[0] if values else default\n\n    def get_cookie(self, name: str, default: str = None) -&gt; str:\n        \"\"\"\ucfe0\ud0a4 \uac12 \uac00\uc838\uc624\uae30\"\"\"\n        return self.cookies.get(name, default)\n\nclass HTTPResponse:\n    \"\"\"HTTP \uc751\ub2f5 \uc0dd\uc131\uae30\"\"\"\n\n    def __init__(self, status_code: int = 200, status_text: str = None):\n        self.status_code = status_code\n        self.status_text = status_text or HTTPStatus(status_code).phrase\n        self.headers = {}\n        self.cookies = {}\n        self.body = \"\"\n\n        # \uae30\ubcf8 \ud5e4\ub354 \uc124\uc815\n        self.headers['Server'] = 'AdvancedPythonServer/1.0'\n        self.headers['Date'] = time.strftime('%a, %d %b %Y %H:%M:%S GMT', time.gmtime())\n        self.headers['Connection'] = 'close'\n\n    def set_header(self, name: str, value: str):\n        \"\"\"\ud5e4\ub354 \uc124\uc815\"\"\"\n        self.headers[name] = value\n\n    def set_cookie(self, name: str, value: str, max_age: int = None, \n                   path: str = \"/\", secure: bool = False, http_only: bool = True):\n        \"\"\"\ucfe0\ud0a4 \uc124\uc815\"\"\"\n        cookie_value = f\"{name}={value}; Path={path}\"\n\n        if max_age:\n            cookie_value += f\"; Max-Age={max_age}\"\n\n        if secure:\n            cookie_value += \"; Secure\"\n\n        if http_only:\n            cookie_value += \"; HttpOnly\"\n\n        self.cookies[name] = cookie_value\n\n    def set_json_body(self, data: Dict[str, Any]):\n        \"\"\"JSON \uc751\ub2f5 \uc124\uc815\"\"\"\n        self.body = json.dumps(data)\n        self.headers['Content-Type'] = 'application/json'\n        self.headers['Content-Length'] = str(len(self.body.encode('utf-8')))\n\n    def set_html_body(self, html: str):\n        \"\"\"HTML \uc751\ub2f5 \uc124\uc815\"\"\"\n        self.body = html\n        self.headers['Content-Type'] = 'text/html; charset=utf-8'\n        self.headers['Content-Length'] = str(len(self.body.encode('utf-8')))\n\n    def set_file_body(self, file_path: str):\n        \"\"\"\ud30c\uc77c \uc751\ub2f5 \uc124\uc815\"\"\"\n        try:\n            with open(file_path, 'rb') as f:\n                file_content = f.read()\n\n            self.body = file_content\n\n            # MIME \ud0c0\uc785 \uc124\uc815\n            mime_type, _ = mimetypes.guess_type(file_path)\n            if mime_type:\n                self.headers['Content-Type'] = mime_type\n            else:\n                self.headers['Content-Type'] = 'application/octet-stream'\n\n            self.headers['Content-Length'] = str(len(file_content))\n\n        except FileNotFoundError:\n            self.status_code = 404\n            self.status_text = 'Not Found'\n            self.set_html_body('&lt;h1&gt;404 Not Found&lt;/h1&gt;')\n\n    def to_bytes(self) -&gt; bytes:\n        \"\"\"\ubc14\uc774\ud2b8\ub85c \ubcc0\ud658\"\"\"\n        # \uc0c1\ud0dc \ub77c\uc778\n        response_lines = [f\"HTTP/1.1 {self.status_code} {self.status_text}\"]\n\n        # \ud5e4\ub354\n        for name, value in self.headers.items():\n            response_lines.append(f\"{name}: {value}\")\n\n        # \ucfe0\ud0a4\n        for cookie_value in self.cookies.values():\n            response_lines.append(f\"Set-Cookie: {cookie_value}\")\n\n        # \ube48 \uc904\n        response_lines.append(\"\")\n\n        # \uc751\ub2f5 \ud5e4\ub354 \uc0dd\uc131\n        response_header = '\\r\\n'.join(response_lines)\n\n        # \ubc14\ub514 \ucd94\uac00\n        if isinstance(self.body, str):\n            return response_header.encode('utf-8') + self.body.encode('utf-8')\n        else:\n            return response_header.encode('utf-8') + self.body\n\nclass HTTPRouter:\n    \"\"\"HTTP \ub77c\uc6b0\ud130\"\"\"\n\n    def __init__(self):\n        self.routes = {}\n        self.middleware = []\n\n    def add_route(self, method: str, path: str, handler: Callable):\n        \"\"\"\ub77c\uc6b0\ud2b8 \ucd94\uac00\"\"\"\n        key = f\"{method.upper()}:{path}\"\n        self.routes[key] = handler\n        print(f\"   \ub77c\uc6b0\ud2b8 \ub4f1\ub85d: {method.upper()} {path}\")\n\n    def get(self, path: str):\n        \"\"\"GET \ub77c\uc6b0\ud2b8 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n        def decorator(handler):\n            self.add_route('GET', path, handler)\n            return handler\n        return decorator\n\n    def post(self, path: str):\n        \"\"\"POST \ub77c\uc6b0\ud2b8 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n        def decorator(handler):\n            self.add_route('POST', path, handler)\n            return handler\n        return decorator\n\n    def add_middleware(self, middleware: Callable):\n        \"\"\"\ubbf8\ub4e4\uc6e8\uc5b4 \ucd94\uac00\"\"\"\n        self.middleware.append(middleware)\n        print(f\"   \ubbf8\ub4e4\uc6e8\uc5b4 \ub4f1\ub85d: {middleware.__name__}\")\n\n    def find_handler(self, method: str, path: str) -&gt; Optional[Callable]:\n        \"\"\"\ud578\ub4e4\ub7ec \ucc3e\uae30\"\"\"\n        # \uc815\ud655\ud55c \ub9e4\uce58 \uba3c\uc800 \ud655\uc778\n        exact_key = f\"{method.upper()}:{path}\"\n        if exact_key in self.routes:\n            return self.routes[exact_key]\n\n        # \ud328\ud134 \ub9e4\uce6d (\uac04\ub2e8\ud55c \uad6c\ud604)\n        for route_key, handler in self.routes.items():\n            route_method, route_path = route_key.split(':', 1)\n            if route_method == method.upper():\n                # \uc640\uc77c\ub4dc\uce74\ub4dc \ud328\ud134 \ucc98\ub9ac\n                if route_path.endswith('/*') and path.startswith(route_path[:-1]):\n                    return handler\n\n        return None\n\n    def apply_middleware(self, request: HTTPRequest, response: HTTPResponse):\n        \"\"\"\ubbf8\ub4e4\uc6e8\uc5b4 \uc801\uc6a9\"\"\"\n        for middleware in self.middleware:\n            try:\n                middleware(request, response)\n            except Exception as e:\n                print(f\"   \ubbf8\ub4e4\uc6e8\uc5b4 \uc624\ub958: {middleware.__name__} - {e}\")\n\nclass AdvancedHTTPServer:\n    \"\"\"\uace0\uae09 HTTP \uc11c\ubc84\"\"\"\n\n    def __init__(self, host: str = 'localhost', port: int = 8000):\n        self.host = host\n        self.port = port\n        self.router = HTTPRouter()\n        self.socket = None\n        self.running = False\n        self.static_dir = None\n        self.stats = {\n            'total_requests': 0,\n            'successful_requests': 0,\n            'error_requests': 0,\n            'start_time': None\n        }\n\n        # \uae30\ubcf8 \ub77c\uc6b0\ud2b8 \uc124\uc815\n        self._setup_default_routes()\n\n    def _setup_default_routes(self):\n        \"\"\"\uae30\ubcf8 \ub77c\uc6b0\ud2b8 \uc124\uc815\"\"\"\n        @self.router.get('/')\n        def index_handler(request: HTTPRequest) -&gt; HTTPResponse:\n            html = \"\"\"\n            &lt;!DOCTYPE html&gt;\n            &lt;html&gt;\n            &lt;head&gt;&lt;title&gt;Advanced Python Server&lt;/title&gt;&lt;/head&gt;\n            &lt;body&gt;\n                &lt;h1&gt;Welcome to Advanced Python Server&lt;/h1&gt;\n                &lt;p&gt;Server is running successfully!&lt;/p&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;a href=\"/api/status\"&gt;Server Status&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"/api/stats\"&gt;Server Statistics&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/body&gt;\n            &lt;/html&gt;\n            \"\"\"\n            response = HTTPResponse()\n            response.set_html_body(html)\n            return response\n\n        @self.router.get('/api/status')\n        def status_handler(request: HTTPRequest) -&gt; HTTPResponse:\n            response = HTTPResponse()\n            response.set_json_body({\n                'status': 'running',\n                'uptime': time.time() - self.stats['start_time'] if self.stats['start_time'] else 0,\n                'server': 'AdvancedPythonServer/1.0'\n            })\n            return response\n\n        @self.router.get('/api/stats')\n        def stats_handler(request: HTTPRequest) -&gt; HTTPResponse:\n            response = HTTPResponse()\n            response.set_json_body(self.get_stats())\n            return response\n\n    def set_static_directory(self, directory: str):\n        \"\"\"\uc815\uc801 \ud30c\uc77c \ub514\ub809\ud1a0\ub9ac \uc124\uc815\"\"\"\n        self.static_dir = directory\n\n        @self.router.get('/static/*')\n        def static_handler(request: HTTPRequest) -&gt; HTTPResponse:\n            # /static/ \uc81c\uac70\n            file_path = request.path[8:]\n            full_path = os.path.join(self.static_dir, file_path)\n\n            # \ubcf4\uc548: \ub514\ub809\ud1a0\ub9ac \ud0d0\uc0c9 \ubc29\uc9c0\n            if '..' in file_path or not full_path.startswith(self.static_dir):\n                response = HTTPResponse(403, 'Forbidden')\n                response.set_html_body('&lt;h1&gt;403 Forbidden&lt;/h1&gt;')\n                return response\n\n            response = HTTPResponse()\n            response.set_file_body(full_path)\n            return response\n\n        print(f\"   \uc815\uc801 \ud30c\uc77c \ub514\ub809\ud1a0\ub9ac \uc124\uc815: {directory}\")\n\n    def start(self):\n        \"\"\"\uc11c\ubc84 \uc2dc\uc791\"\"\"\n        try:\n            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self.socket.bind((self.host, self.port))\n            self.socket.listen(5)\n\n            self.running = True\n            self.stats['start_time'] = time.time()\n\n            print(f\"   HTTP \uc11c\ubc84 \uc2dc\uc791: http://{self.host}:{self.port}\")\n\n            while self.running:\n                try:\n                    client_socket, address = self.socket.accept()\n                    self._handle_request(client_socket, address)\n\n                except socket.error as e:\n                    if self.running:\n                        print(f\"   \uc694\uccad \ucc98\ub9ac \uc624\ub958: {e}\")\n                        self.stats['error_requests'] += 1\n\n        except Exception as e:\n            print(f\"   HTTP \uc11c\ubc84 \uc2dc\uc791 \uc2e4\ud328: {e}\")\n        finally:\n            self._cleanup()\n\n    def _handle_request(self, client_socket: socket.socket, address: tuple):\n        \"\"\"HTTP \uc694\uccad \ucc98\ub9ac\"\"\"\n        try:\n            # \uc694\uccad \ub370\uc774\ud130 \uc218\uc2e0\n            raw_request = client_socket.recv(8192).decode('utf-8')\n            if not raw_request.strip():\n                return\n\n            self.stats['total_requests'] += 1\n\n            # \uc694\uccad \ud30c\uc2f1\n            request = HTTPRequest(raw_request)\n            print(f\"   {request.method} {request.path} from {address[0]}\")\n\n            # \ud578\ub4e4\ub7ec \ucc3e\uae30\n            handler = self.router.find_handler(request.method, request.path)\n\n            if handler:\n                # \ud578\ub4e4\ub7ec \uc2e4\ud589\n                response = handler(request)\n                self.stats['successful_requests'] += 1\n            else:\n                # 404 \uc751\ub2f5\n                response = HTTPResponse(404, 'Not Found')\n                response.set_html_body('&lt;h1&gt;404 Not Found&lt;/h1&gt;')\n                self.stats['error_requests'] += 1\n\n            # \ubbf8\ub4e4\uc6e8\uc5b4 \uc801\uc6a9\n            self.router.apply_middleware(request, response)\n\n            # \uc751\ub2f5 \uc804\uc1a1\n            response_data = response.to_bytes()\n            client_socket.send(response_data)\n\n        except Exception as e:\n            print(f\"   \uc694\uccad \ucc98\ub9ac \uc911 \uc624\ub958: {e}\")\n            self.stats['error_requests'] += 1\n\n            # 500 \uc751\ub2f5\n            try:\n                error_response = HTTPResponse(500, 'Internal Server Error')\n                error_response.set_html_body('&lt;h1&gt;500 Internal Server Error&lt;/h1&gt;')\n                client_socket.send(error_response.to_bytes())\n            except:\n                pass\n\n        finally:\n            try:\n                client_socket.close()\n            except:\n                pass\n\n    def stop(self):\n        \"\"\"\uc11c\ubc84 \uc911\uc9c0\"\"\"\n        self.running = False\n        if self.socket:\n            self.socket.close()\n        print(\"   HTTP \uc11c\ubc84 \uc911\uc9c0\")\n\n    def _cleanup(self):\n        \"\"\"\uc815\ub9ac \uc791\uc5c5\"\"\"\n        if self.socket:\n            self.socket.close()\n\n    def get_stats(self) -&gt; Dict[str, Any]:\n        \"\"\"\uc11c\ubc84 \ud1b5\uacc4\"\"\"\n        uptime = time.time() - self.stats['start_time'] if self.stats['start_time'] else 0\n\n        return {\n            **self.stats,\n            'uptime': uptime,\n            'running': self.running,\n            'routes_registered': len(self.router.routes),\n            'middleware_count': len(self.router.middleware)\n        }\n\ndef demonstrate_http_server():\n    \"\"\"HTTP \uc11c\ubc84 \uc2dc\uc5f0\"\"\"\n    print(\"\\n1. HTTP \uc11c\ubc84 \uc124\uc815:\")\n\n    server = AdvancedHTTPServer('localhost', 8000)\n\n    # \ucee4\uc2a4\ud140 \ub77c\uc6b0\ud2b8 \ucd94\uac00\n    @server.router.get('/api/echo')\n    def echo_handler(request: HTTPRequest) -&gt; HTTPResponse:\n        \"\"\"\uc5d0\ucf54 \ud578\ub4e4\ub7ec\"\"\"\n        response = HTTPResponse()\n        response.set_json_body({\n            'method': request.method,\n            'path': request.path,\n            'headers': dict(request.headers),\n            'query_params': request.query_params,\n            'body': request.body\n        })\n        return response\n\n    @server.router.post('/api/data')\n    def data_handler(request: HTTPRequest) -&gt; HTTPResponse:\n        \"\"\"\ub370\uc774\ud130 \ucc98\ub9ac \ud578\ub4e4\ub7ec\"\"\"\n        try:\n            if request.get_header('content-type', '').startswith('application/json'):\n                data = json.loads(request.body)\n            else:\n                data = {'raw_body': request.body}\n\n            response = HTTPResponse()\n            response.set_json_body({\n                'received': data,\n                'timestamp': time.time(),\n                'processed': True\n            })\n            return response\n\n        except json.JSONDecodeError:\n            response = HTTPResponse(400, 'Bad Request')\n            response.set_json_body({'error': 'Invalid JSON'})\n            return response\n\n    # \ubbf8\ub4e4\uc6e8\uc5b4 \ucd94\uac00\n    def cors_middleware(request: HTTPRequest, response: HTTPResponse):\n        \"\"\"CORS \ubbf8\ub4e4\uc6e8\uc5b4\"\"\"\n        response.set_header('Access-Control-Allow-Origin', '*')\n        response.set_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE')\n        response.set_header('Access-Control-Allow-Headers', 'Content-Type')\n\n    def logging_middleware(request: HTTPRequest, response: HTTPResponse):\n        \"\"\"\ub85c\uae45 \ubbf8\ub4e4\uc6e8\uc5b4\"\"\"\n        print(f\"     \ub85c\uadf8: {request.method} {request.path} -&gt; {response.status_code}\")\n\n    server.router.add_middleware(cors_middleware)\n    server.router.add_middleware(logging_middleware)\n\n    print(f\"   HTTP \uc11c\ubc84 \uc124\uc815 \uc644\ub8cc: {server.get_stats()}\")\n\n    print(\"\\n2. HTTP \uc694\uccad/\uc751\ub2f5 \ud14c\uc2a4\ud2b8:\")\n\n    # \ud14c\uc2a4\ud2b8 \uc694\uccad \uc0dd\uc131\n    test_request = \"\"\"GET /api/echo?name=test&amp;value=123 HTTP/1.1\\r\nHost: localhost:8000\\r\nUser-Agent: TestClient/1.0\\r\nAccept: application/json\\r\nCookie: session_id=abc123; user_pref=dark\\r\n\\r\n\"\"\"\n\n    request = HTTPRequest(test_request)\n    print(f\"   \ud30c\uc2f1\ub41c \uc694\uccad:\")\n    print(f\"     \uba54\uc11c\ub4dc: {request.method}\")\n    print(f\"     \uacbd\ub85c: {request.path}\")\n    print(f\"     \ucffc\ub9ac: {request.query_params}\")\n    print(f\"     \ud5e4\ub354: {len(request.headers)}\uac1c\")\n    print(f\"     \ucfe0\ud0a4: {request.cookies}\")\n\n    # \ud14c\uc2a4\ud2b8 \uc751\ub2f5 \uc0dd\uc131\n    response = HTTPResponse()\n    response.set_json_body({\n        'message': 'Hello, World!',\n        'timestamp': time.time()\n    })\n    response.set_cookie('response_id', 'xyz789', max_age=3600)\n\n    print(f\"\\n   \uc751\ub2f5 \uc0dd\uc131:\")\n    print(f\"     \uc0c1\ud0dc: {response.status_code} {response.status_text}\")\n    print(f\"     \ud5e4\ub354: {len(response.headers)}\uac1c\")\n    print(f\"     \ucfe0\ud0a4: {len(response.cookies)}\uac1c\")\n    print(f\"     \ubc14\ub514 \ud06c\uae30: {len(response.body)} bytes\")\n\n    print(\"\\n3. \uc2e4\uc81c \uc11c\ubc84 \uc2e4\ud589 (\ub370\ubaa8):\")\n    print(\"   \uc2e4\ud589 \uba85\ub839: server.start()\")\n    print(\"   \uc811\uc18d URL: http://localhost:8000\")\n    print(\"   API \uc5d4\ub4dc\ud3ec\uc778\ud2b8:\")\n    print(\"     GET  /              - \uba54\uc778 \ud398\uc774\uc9c0\")\n    print(\"     GET  /api/status    - \uc11c\ubc84 \uc0c1\ud0dc\")\n    print(\"     GET  /api/stats     - \uc11c\ubc84 \ud1b5\uacc4\")\n    print(\"     GET  /api/echo      - \uc5d0\ucf54 \ud14c\uc2a4\ud2b8\")\n    print(\"     POST /api/data      - \ub370\uc774\ud130 \ucc98\ub9ac\")\n\ndemonstrate_http_server()\n</code></pre>"},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#4","title":"4. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#1_1","title":"\uc5f0\uc2b5 1: \uace0\uc131\ub2a5 \ucc44\ud305 \uc11c\ubc84","text":"<p>WebSocket\uc744 \uc9c0\uc6d0\ud558\ub294 \uc2e4\uc2dc\uac04 \ucc44\ud305 \uc11c\ubc84\ub97c \uad6c\ud604\ud558\uc138\uc694: - \uba40\ud2f0\ub8f8 \uc9c0\uc6d0 - \uc0ac\uc6a9\uc790 \uc778\uc99d \ubc0f \uad8c\ud55c \uad00\ub9ac - \uba54\uc2dc\uc9c0 \ud788\uc2a4\ud1a0\ub9ac \uc800\uc7a5 - \ud30c\uc77c \uc804\uc1a1 \uae30\ub2a5 - \uc811\uc18d\uc790 \uc218 \uc81c\ud55c \ubc0f \ubc34 \uae30\ub2a5</p>"},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#2_1","title":"\uc5f0\uc2b5 2: \ubd84\uc0b0 \uba54\uc2dc\uc9c0 \ud050 \uc2dc\uc2a4\ud15c","text":"<p>\uace0\uac00\uc6a9\uc131 \uba54\uc2dc\uc9c0 \ud050 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694: - \uba54\uc2dc\uc9c0 \uc601\uc18d\uc131 - \ud074\ub7ec\uc2a4\ud130\ub9c1 \uc9c0\uc6d0 - \ubc31\ud504\ub808\uc154 \uc81c\uc5b4 - \uba54\uc2dc\uc9c0 \ub77c\uc6b0\ud305 - \ubaa8\ub2c8\ud130\ub9c1 \ub300\uc2dc\ubcf4\ub4dc</p>"},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#3","title":"\uc5f0\uc2b5 3: \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uac8c\uc774\ud2b8\uc6e8\uc774","text":"<p>API \uac8c\uc774\ud2b8\uc6e8\uc774 \uc11c\ubc84\ub97c \uad6c\ud604\ud558\uc138\uc694: - \ub85c\ub4dc \ubc38\ub7f0\uc2f1 - \uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac - \uc778\uc99d \ubc0f \uc778\uac00 - \uc694\uccad/\uc751\ub2f5 \ubcc0\ud658 - \uc18d\ub3c4 \uc81c\ud55c \ubc0f \uce90\uc2f1</p>"},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#4_1","title":"\uc5f0\uc2b5 4: \ub124\ud2b8\uc6cc\ud06c \ubaa8\ub2c8\ud130\ub9c1 \ub3c4\uad6c","text":"<p>\uc2e4\uc2dc\uac04 \ub124\ud2b8\uc6cc\ud06c \ubaa8\ub2c8\ud130\ub9c1 \ub3c4\uad6c\ub97c \uad6c\ud604\ud558\uc138\uc694: - \ud328\ud0b7 \ucea1\ucc98 \ubc0f \ubd84\uc11d - \ub300\uc5ed\ud3ed \uce21\uc815 - \uc5f0\uacb0 \uc0c1\ud0dc \ucd94\uc801 - \uc54c\ub9bc \uc2dc\uc2a4\ud15c - \uc6f9 \uae30\ubc18 \ub300\uc2dc\ubcf4\ub4dc</p>"},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\uc18c\ucf13 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08: \uace0\uae09 \uc18c\ucf13 \ub798\ud37c, \uba54\uc2dc\uc9c0 \ud504\ub85c\ud1a0\ucf5c, \uc18c\ucf13 \ud480\ub9c1</li> <li>TCP/UDP \uad6c\ud604: \uc11c\ubc84-\ud074\ub77c\uc774\uc5b8\ud2b8 \uc544\ud0a4\ud14d\ucc98, \uba40\ud2f0\uc2a4\ub808\ub4dc \ucc98\ub9ac, \ube0c\ub85c\ub4dc\uce90\uc2a4\ud305</li> <li>\ube44\ub3d9\uae30 \ub124\ud2b8\uc6cc\ud0b9: AsyncIO \uae30\ubc18 \uc11c\ubc84, \uc2a4\ud2b8\ub9bc \ucc98\ub9ac, \ubbf8\ub4e4\uc6e8\uc5b4 \ud328\ud134</li> <li>HTTP \ud504\ub85c\ud1a0\ucf5c: \ucee4\uc2a4\ud140 HTTP \uc11c\ubc84, \ub77c\uc6b0\ud305, \uc815\uc801 \ud30c\uc77c \uc11c\ube59</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \uace0\uae09 \ud30c\uc77c I/O\uc640 \uc2a4\ud2b8\ub9ac\ubc0d\uc744 \ud1b5\ud574 \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ucc98\ub9ac \uae30\ubc95\uc744 \ud559\uc2b5\ud558\uac8c \ub429\ub2c8\ub2e4.</p>"},{"location":"tutorials/advanced/chapter05_networking_socket_programming/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ub124\ud2b8\uc6cc\ud06c \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \ub3d9\uc2dc\uc131\uacfc \ube44\ub3d9\uae30 \ucc98\ub9ac\uac00 \ud575\uc2ec\uc785\ub2c8\ub2e4</li> <li>\ud504\ub85c\ud1a0\ucf5c \uc124\uacc4 \uc2dc \ud655\uc7a5\uc131\uacfc \ud638\ud658\uc131\uc744 \uace0\ub824\ud574\uc57c \ud569\ub2c8\ub2e4</li> <li>\uc624\ub958 \ucc98\ub9ac\uc640 \ubcf5\uad6c \uba54\ucee4\ub2c8\uc998\uc774 \uc548\uc815\uc131\uc744 \uacb0\uc815\ud569\ub2c8\ub2e4</li> <li>\uc131\ub2a5 \ucd5c\uc801\ud654\ub97c \uc704\ud574 \ubc84\ud37c\ub9c1\uacfc \ucee4\ub125\uc158 \ud480\ub9c1\uc774 \uc911\uc694\ud569\ub2c8\ub2e4</li> <li>\ubcf4\uc548\uc744 \uace0\ub824\ud55c \uc548\uc804\ud55c \ud1b5\uc2e0 \uad6c\ud604\uc774 \ud544\uc218\uc801\uc785\ub2c8\ub2e4</li> <li>\ubaa8\ub2c8\ud130\ub9c1\uacfc \ub85c\uae45\uc744 \ud1b5\ud55c \uc6b4\uc601 \uac00\uc2dc\uc131 \ud655\ubcf4\uac00 \uc911\uc694\ud569\ub2c8\ub2e4 </li> </ul>"},{"location":"tutorials/beginner/","title":"\ud83d\udfe2 \ucd08\uae09 \ud30c\uc774\uc36c \ud29c\ud1a0\ub9ac\uc5bc","text":"<p>\ud30c\uc774\uc36c \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uae30\ucd08\ub97c \ucc28\uadfc\ucc28\uadfc \ubc30\uc6cc\ubcf4\uc138\uc694. \uc774 \uacfc\uc815\uc740 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ucc98\uc74c \uc811\ud558\ub294 \ubd84\ub4e4\uc744 \uc704\ud574 \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/beginner/#_2","title":"\ud83c\udfaf \uacfc\uc815 \ubaa9\ud45c","text":"<ul> <li>\ud30c\uc774\uc36c\uc758 \uae30\ubcf8 \ubb38\ubc95\uacfc \uac1c\ub150 \uc774\ud574</li> <li>\uae30\ubcf8\uc801\uc778 \ud504\ub85c\uadf8\ub798\ubc0d \uc0ac\uace0\ub825 \uac1c\ubc1c</li> <li>\uac04\ub2e8\ud55c \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud560 \uc218 \uc788\ub294 \ub2a5\ub825 \uc2b5\ub4dd</li> <li>\ub2e4\uc74c \ub2e8\uacc4 \ud559\uc2b5\uc744 \uc704\ud55c \ud0c4\ud0c4\ud55c \uae30\ucd08 \uad6c\ucd95</li> </ul>"},{"location":"tutorials/beginner/#_3","title":"\ud83d\udcda \ucc55\ud130 \ubaa9\ub85d","text":""},{"location":"tutorials/beginner/#_4","title":"\uae30\ucd08 \uc900\ube44","text":"<ol> <li>\ud30c\uc774\uc36c \uc18c\uac1c </li> <li>\ud30c\uc774\uc36c\uc758 \ud2b9\uc9d5\uacfc \uc7a5\uc810</li> <li>\uac1c\ubc1c \ud658\uacbd \uc124\uc815</li> <li>\uccab \ubc88\uc9f8 \ud504\ub85c\uadf8\ub7a8 \uc791\uc131</li> </ol>"},{"location":"tutorials/beginner/#_5","title":"\uae30\ubcf8 \ubb38\ubc95","text":"<ol> <li>\ubcc0\uc218\uc640 \ub370\uc774\ud130\ud0c0\uc785</li> <li>\ubcc0\uc218 \uc120\uc5b8\uacfc \uc0ac\uc6a9\ubc95</li> <li>\uc22b\uc790, \ubb38\uc790\uc5f4, \ubd88\ub9b0 \ud0c0\uc785</li> <li> <p>\ud0c0\uc785 \ubcc0\ud658</p> </li> <li> <p>\ubb38\uc790\uc5f4 \ucc98\ub9ac</p> </li> <li>\ubb38\uc790\uc5f4 \uc0dd\uc131\uacfc \uc870\uc791</li> <li>\ubb38\uc790\uc5f4 \uba54\uc11c\ub4dc \ud65c\uc6a9</li> <li> <p>\ud3ec\ub9e4\ud305 \uae30\ubc95</p> </li> <li> <p>\uc5f0\uc0b0\uc790\uc640 \ud45c\ud604\uc2dd</p> </li> <li>\uc0b0\uc220, \ube44\uad50, \ub17c\ub9ac \uc5f0\uc0b0\uc790</li> <li>\uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704</li> <li> <p>\ud45c\ud604\uc2dd \uc791\uc131\ubc95</p> </li> <li> <p>\uc785\ucd9c\ub825</p> </li> <li>\uc0ac\uc6a9\uc790 \uc785\ub825 \ubc1b\uae30</li> <li>\ud654\uba74 \ucd9c\ub825\ud558\uae30</li> <li>\ud30c\uc77c \uc785\ucd9c\ub825 \uae30\ucd08</li> </ol>"},{"location":"tutorials/beginner/#_6","title":"\uc81c\uc5b4 \uad6c\uc870","text":"<ol> <li>\uc870\uac74\ubb38</li> <li>if, elif, else \ubb38</li> <li>\uc911\ucca9 \uc870\uac74\ubb38</li> <li> <p>\uc0bc\ud56d \uc5f0\uc0b0\uc790</p> </li> <li> <p>\ubc18\ubcf5\ubb38</p> </li> <li>for\uc640 while \ub8e8\ud504</li> <li>\ubc18\ubcf5\ubb38 \uc81c\uc5b4 (break, continue)</li> <li>\uc911\ucca9 \ubc18\ubcf5\ubb38</li> </ol>"},{"location":"tutorials/beginner/#_7","title":"\uc790\ub8cc\uad6c\uc870","text":"<ol> <li>\ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c</li> <li>\uc21c\uc11c\uac00 \uc788\ub294 \ub370\uc774\ud130 \uc800\uc7a5</li> <li>\ub9ac\uc2a4\ud2b8 \uc870\uc791 \uba54\uc11c\ub4dc</li> <li> <p>\ud29c\ud50c\uc758 \ud2b9\uc9d5\uacfc \ud65c\uc6a9</p> </li> <li> <p>\ub515\uc154\ub108\ub9ac\uc640 \uc9d1\ud569</p> </li> <li>\ud0a4-\uac12 \uc30d \ub370\uc774\ud130 \uad6c\uc870</li> <li>\uc911\ubcf5 \uc5c6\ub294 \ub370\uc774\ud130 \uc9d1\ud569</li> <li>\uc2e4\uc6a9\uc801 \ud65c\uc6a9\ubc95</li> </ol>"},{"location":"tutorials/beginner/#_8","title":"\ud568\uc218\uc640 \uc624\ub958 \ucc98\ub9ac","text":"<ol> <li> <p>\ud568\uc218 \uae30\ucd08</p> <ul> <li>\ud568\uc218 \uc815\uc758\uc640 \ud638\ucd9c</li> <li>\ub9e4\uac1c\ubcc0\uc218\uc640 \ubc18\ud658\uac12</li> <li>\uc9c0\uc5ed\ubcc0\uc218\uc640 \uc804\uc5ed\ubcc0\uc218</li> </ul> </li> <li> <p>\uc624\ub958 \ucc98\ub9ac\uc640 \ub514\ubc84\uae45</p> <ul> <li>\uc624\ub958\uc758 \uc885\ub958 \uc774\ud574</li> <li>try-except \ubb38 \uc0ac\uc6a9\ubc95</li> <li>\ub514\ubc84\uae45 \uae30\ubc95</li> </ul> </li> </ol>"},{"location":"tutorials/beginner/#_9","title":"\ud83d\udcca \ud559\uc2b5 \uac00\uc774\ub4dc","text":""},{"location":"tutorials/beginner/#_10","title":"\uad8c\uc7a5 \ud559\uc2b5 \uc21c\uc11c","text":"<ol> <li>\uac01 \ucc55\ud130\ub97c \uc21c\uc11c\ub300\ub85c \ud559\uc2b5\ud558\uc138\uc694</li> <li>\uc608\uc81c \ucf54\ub4dc\ub97c \uc9c1\uc811 \ud0c0\uc774\ud551\ud558\uace0 \uc2e4\ud589\ud574\ubcf4\uc138\uc694</li> <li>\uc5f0\uc2b5 \ubb38\uc81c\ub97c \ubc18\ub4dc\uc2dc \ud480\uc5b4\ubcf4\uc138\uc694</li> <li>\uc774\ud574\uac00 \uc548 \ub418\ub294 \ubd80\ubd84\uc740 \ubc18\ubcf5 \ud559\uc2b5\ud558\uc138\uc694</li> </ol>"},{"location":"tutorials/beginner/#_11","title":"\uc608\uc0c1 \ud559\uc2b5 \uc2dc\uac04","text":"<ul> <li>\uc804\uccb4 \uacfc\uc815: 4-6\uc8fc (\uc8fc 3-4\uc2dc\uac04 \ud559\uc2b5 \uae30\uc900)</li> <li>\ucc55\ud130\ub2f9: 3-5\uc2dc\uac04</li> <li>\ubcf5\uc2b5 \uc2dc\uac04: \uc8fc 1\uc2dc\uac04</li> </ul>"},{"location":"tutorials/beginner/#_12","title":"\ud83c\udf93 \uc644\ub8cc \ud6c4 \ub2e4\uc74c \ub2e8\uacc4","text":"<p>\ucd08\uae09 \uacfc\uc815\uc744 \uc644\ub8cc\ud558\uba74: - \uc911\uae09 \ud29c\ud1a0\ub9ac\uc5bc\ub85c \uc9c4\ud589 - \ub354 \ubcf5\uc7a1\ud55c \ud504\ub85c\uadf8\ub7a8 \uc791\uc131 \uac00\ub2a5 - \uc2e4\ubb34\uc5d0\uc11c \ud65c\uc6a9\ud560 \uc218 \uc788\ub294 \uae30\uc220 \ud559\uc2b5</p> <p>\uc9c0\uae08 \ubc14\ub85c Chapter 1\ubd80\ud130 \uc2dc\uc791\ud574\ubcf4\uc138\uc694! \ud83d\ude80 </p>"},{"location":"tutorials/beginner/chapter01_python_introduction/","title":"Chapter 1: Python \uc18c\uac1c\uc640 \uac1c\ubc1c \ud658\uacbd \uc124\uc815","text":""},{"location":"tutorials/beginner/chapter01_python_introduction/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - Python\uc758 \uc5ed\uc0ac\uc640 \ud2b9\uc9d5\uc744 \uc774\ud574\ud55c\ub2e4 - Python \uac1c\ubc1c \ud658\uacbd\uc744 \uc124\uc815\ud55c\ub2e4 - Python \uc778\ud130\ud504\ub9ac\ud130\ub97c \uc0ac\uc6a9\ud55c\ub2e4 - \uccab \ubc88\uc9f8 Python \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uace0 \uc2e4\ud589\ud55c\ub2e4</p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#1-python","title":"1. Python\uc774\ub780?","text":""},{"location":"tutorials/beginner/chapter01_python_introduction/#11-python","title":"1.1 Python\uc758 \uc5ed\uc0ac","text":"<p>Python\uc740 1991\ub144 \ub124\ub35c\ub780\ub4dc\uc758 \uadc0\ub3c4 \ubc18 \ub85c\uc12c(Guido van Rossum)\uc774 \uac1c\ubc1c\ud55c \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc785\ub2c8\ub2e4. \uc601\uad6d\uc758 \ucf54\ubbf8\ub514 \uadf8\ub8f9 \"\ubaac\ud2f0 \ud30c\uc774\uc36c\"\uc5d0\uc11c \uc774\ub984\uc744 \ub530\uc654\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#12-python","title":"1.2 Python\uc758 \ud2b9\uc9d5","text":""},{"location":"tutorials/beginner/chapter01_python_introduction/#_2","title":"\ud83d\udd39 \uac04\ub2e8\ud558\uace0 \uc77d\uae30 \uc26c\uc6b4 \ubb38\ubc95","text":"<pre><code># Python\nprint(\"Hello, World!\")\n\n# Java (\ube44\uad50)\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n</code></pre>"},{"location":"tutorials/beginner/chapter01_python_introduction/#_3","title":"\ud83d\udd39 \uc778\ud130\ud504\ub9ac\ud130 \uc5b8\uc5b4","text":"<ul> <li>\ucef4\ud30c\uc77c \uc5c6\uc774 \ubc14\ub85c \uc2e4\ud589 \uac00\ub2a5</li> <li>\ub300\ud654\ud615 \uc2e4\ud589 \ud658\uacbd \uc81c\uacf5</li> </ul>"},{"location":"tutorials/beginner/chapter01_python_introduction/#_4","title":"\ud83d\udd39 \ud50c\ub7ab\ud3fc \ub3c5\ub9bd\uc801","text":"<ul> <li>Windows, macOS, Linux\uc5d0\uc11c \ub3d9\uc77c\ud558\uac8c \uc791\ub3d9</li> </ul>"},{"location":"tutorials/beginner/chapter01_python_introduction/#_5","title":"\ud83d\udd39 \ud48d\ubd80\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac","text":"<ul> <li>\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 \uc11c\ub4dc\ud30c\ud2f0 \ud328\ud0a4\uc9c0 \uc0dd\ud0dc\uacc4</li> </ul>"},{"location":"tutorials/beginner/chapter01_python_introduction/#_6","title":"\ud83d\udd39 \ub2e4\uc591\ud55c \uc6a9\ub3c4","text":"<ul> <li>\uc6f9 \uac1c\ubc1c: Django, Flask</li> <li>\ub370\uc774\ud130 \ubd84\uc11d: Pandas, NumPy</li> <li>\uba38\uc2e0\ub7ec\ub2dd: TensorFlow, PyTorch</li> <li>\uc790\ub3d9\ud654: \uc2a4\ud06c\ub9bd\ud2b8, \uc5c5\ubb34 \uc790\ub3d9\ud654</li> </ul>"},{"location":"tutorials/beginner/chapter01_python_introduction/#2-python","title":"2. Python \uc124\uce58\ud558\uae30","text":""},{"location":"tutorials/beginner/chapter01_python_introduction/#21-python","title":"2.1 Python \uacf5\uc2dd \ud648\ud398\uc774\uc9c0\uc5d0\uc11c \uc124\uce58","text":"<ol> <li>Python \uacf5\uc2dd \ud648\ud398\uc774\uc9c0 \ubc29\ubb38</li> <li>\"Downloads\" \ud074\ub9ad</li> <li>\ubcf8\uc778\uc758 \uc6b4\uc601\uccb4\uc81c\uc5d0 \ub9de\ub294 \ucd5c\uc2e0 \ubc84\uc804 \ub2e4\uc6b4\ub85c\ub4dc</li> <li>\uc124\uce58 \ud30c\uc77c \uc2e4\ud589</li> </ol> <p>\u26a0\ufe0f \uc124\uce58 \uc2dc \uc8fc\uc758\uc0ac\ud56d - Windows: \"Add Python to PATH\" \uccb4\ud06c\ubc15\uc2a4 \ubc18\ub4dc\uc2dc \uc120\ud0dd - \"Install launcher for all users\" \uad8c\uc7a5</p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#22","title":"2.2 \uc124\uce58 \ud655\uc778","text":"<p>\ud130\ubbf8\ub110/\uba85\ub839 \ud504\ub86c\ud504\ud2b8\uc5d0\uc11c \ub2e4\uc74c \uba85\ub839\uc5b4 \uc2e4\ud589:</p> <pre><code>python --version\n</code></pre> <p>\ub610\ub294</p> <pre><code>python -V\n</code></pre> <p>\uc608\uc0c1 \ucd9c\ub825: <pre><code>Python 3.11.5\n</code></pre></p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#3-python","title":"3. Python \uc2e4\ud589 \ubc29\ubc95","text":""},{"location":"tutorials/beginner/chapter01_python_introduction/#31-interactive-mode","title":"3.1 \ub300\ud654\ud615 \ubaa8\ub4dc (Interactive Mode)","text":"<p>\ud130\ubbf8\ub110\uc5d0\uc11c <code>python</code> \uc785\ub825:</p> <pre><code>$ python\nPython 3.11.5 (main, Sep 11 2023, 08:17:37) \n[Clang 14.0.6 ] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; \n</code></pre>"},{"location":"tutorials/beginner/chapter01_python_introduction/#_7","title":"\uac04\ub2e8\ud55c \uacc4\uc0b0\ud574\ubcf4\uae30","text":"<pre><code>&gt;&gt;&gt; 2 + 3\n5\n&gt;&gt;&gt; 10 * 5\n50\n&gt;&gt;&gt; \"Hello\" + \" World\"\n'Hello World'\n</code></pre>"},{"location":"tutorials/beginner/chapter01_python_introduction/#_8","title":"\ub300\ud654\ud615 \ubaa8\ub4dc \uc885\ub8cc\ud558\uae30","text":"<pre><code>&gt;&gt;&gt; exit()\n</code></pre> <p>\ub610\ub294 <code>Ctrl + D</code> (Linux/macOS), <code>Ctrl + Z</code> (Windows)</p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#32","title":"3.2 \uc2a4\ud06c\ub9bd\ud2b8 \ud30c\uc77c \uc2e4\ud589","text":""},{"location":"tutorials/beginner/chapter01_python_introduction/#hellopy","title":"hello.py \ud30c\uc77c \ub9cc\ub4e4\uae30","text":"<p>\ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130\ub85c <code>hello.py</code> \ud30c\uc77c \uc0dd\uc131:</p> <pre><code># This is my first Python program\nprint(\"Hello, World!\")\nprint(\"Welcome to Python!\")\n\n# Variables\nname = \"Alice\"\nage = 25\nprint(f\"My name is {name} and I am {age} years old.\")\n</code></pre>"},{"location":"tutorials/beginner/chapter01_python_introduction/#_9","title":"\ud30c\uc77c \uc2e4\ud589\ud558\uae30","text":"<pre><code>python hello.py\n</code></pre> <p>\uc608\uc0c1 \ucd9c\ub825: <pre><code>Hello, World!\nWelcome to Python!\nMy name is Alice and I am 25 years old.\n</code></pre></p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#4","title":"4. \uac1c\ubc1c \ud658\uacbd \uc124\uc815","text":""},{"location":"tutorials/beginner/chapter01_python_introduction/#41-vs-ide","title":"4.1 \ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130 vs IDE","text":""},{"location":"tutorials/beginner/chapter01_python_introduction/#_10","title":"\ucd94\ucc9c \ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130","text":"<ul> <li>Visual Studio Code (\ubb34\ub8cc, \uac15\ub825\ud55c \ud655\uc7a5 \uae30\ub2a5)</li> <li>Sublime Text (\ube60\ub978 \uc18d\ub3c4)</li> <li>Atom (GitHub \uc81c\uc791)</li> </ul>"},{"location":"tutorials/beginner/chapter01_python_introduction/#ide","title":"\ucd94\ucc9c IDE","text":"<ul> <li>PyCharm (Professional, Community \ubc84\uc804 \uc788\uc74c)</li> <li>Spyder (\uacfc\ud559 \uacc4\uc0b0\uc6a9)</li> <li>IDLE (Python \uae30\ubcf8 \uc81c\uacf5)</li> </ul>"},{"location":"tutorials/beginner/chapter01_python_introduction/#42-visual-studio-code","title":"4.2 Visual Studio Code \uc124\uc815 (\uad8c\uc7a5)","text":"<ol> <li>VS Code \ub2e4\uc6b4\ub85c\ub4dc</li> <li>Python \ud655\uc7a5 \ud504\ub85c\uadf8\ub7a8 \uc124\uce58:</li> <li><code>Ctrl + Shift + X</code> \u2192 \"Python\" \uac80\uc0c9 \u2192 \uc124\uce58</li> </ol>"},{"location":"tutorials/beginner/chapter01_python_introduction/#vs-code-python","title":"VS Code\uc5d0\uc11c Python \ud30c\uc77c \ub9cc\ub4e4\uace0 \uc2e4\ud589\ud558\uae30","text":"<ol> <li><code>Ctrl + N</code> \u2192 \uc0c8 \ud30c\uc77c</li> <li><code>Ctrl + S</code> \u2192 <code>.py</code> \ud655\uc7a5\uc790\ub85c \uc800\uc7a5</li> <li>\ucf54\ub4dc \uc791\uc131</li> <li><code>Ctrl + F5</code> \u2192 \uc2e4\ud589</li> </ol>"},{"location":"tutorials/beginner/chapter01_python_introduction/#5","title":"5. \uccab \ubc88\uc9f8 \ud504\ub85c\uadf8\ub7a8 \uc791\uc131\ud558\uae30","text":""},{"location":"tutorials/beginner/chapter01_python_introduction/#51","title":"5.1 \uc2e4\uc2b5: \uc790\uae30\uc18c\uac1c \ud504\ub85c\uadf8\ub7a8","text":"<p><code>introduction.py</code> \ud30c\uc77c\uc744 \ub9cc\ub4e4\uace0 \ub2e4\uc74c \ucf54\ub4dc\ub97c \uc791\uc131\ud574\ubcf4\uc138\uc694:</p> <pre><code># Personal Introduction Program\n\n# Get user input\nprint(\"=== \uc790\uae30\uc18c\uac1c \ud504\ub85c\uadf8\ub7a8 ===\")\nname = input(\"\uc774\ub984\uc744 \uc785\ub825\ud558\uc138\uc694: \")\nage = input(\"\ub098\uc774\ub97c \uc785\ub825\ud558\uc138\uc694: \")\nhobby = input(\"\ucde8\ubbf8\ub97c \uc785\ub825\ud558\uc138\uc694: \")\n\n# Display introduction\nprint(\"\\n=== \uc790\uae30\uc18c\uac1c ===\")\nprint(f\"\uc548\ub155\ud558\uc138\uc694! \uc81c \uc774\ub984\uc740 {name}\uc785\ub2c8\ub2e4.\")\nprint(f\"\uc800\ub294 {age}\uc0b4\uc774\uace0, {hobby}\uc744/\ub97c \uc88b\uc544\ud569\ub2c8\ub2e4.\")\nprint(\"Python \ud559\uc2b5\uc744 \uc2dc\uc791\ud569\ub2c8\ub2e4!\")\n</code></pre> <p>\uc2e4\ud589 \uc608\uc2dc: <pre><code>=== \uc790\uae30\uc18c\uac1c \ud504\ub85c\uadf8\ub7a8 ===\n\uc774\ub984\uc744 \uc785\ub825\ud558\uc138\uc694: \uae40\ubbfc\uc218\n\ub098\uc774\ub97c \uc785\ub825\ud558\uc138\uc694: 20\n\ucde8\ubbf8\ub97c \uc785\ub825\ud558\uc138\uc694: \ub3c5\uc11c\n\n=== \uc790\uae30\uc18c\uac1c ===\n\uc548\ub155\ud558\uc138\uc694! \uc81c \uc774\ub984\uc740 \uae40\ubbfc\uc218\uc785\ub2c8\ub2e4.\n\uc800\ub294 20\uc0b4\uc774\uace0, \ub3c5\uc11c\uc744/\ub97c \uc88b\uc544\ud569\ub2c8\ub2e4.\nPython \ud559\uc2b5\uc744 \uc2dc\uc791\ud569\ub2c8\ub2e4!\n</code></pre></p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#52","title":"5.2 \ucf54\ub4dc \uc124\uba85","text":""},{"location":"tutorials/beginner/chapter01_python_introduction/#comments","title":"\uc8fc\uc11d (Comments)","text":"<p><pre><code># \uc774\uac83\uc740 \uc8fc\uc11d\uc785\ub2c8\ub2e4\n</code></pre> - <code>#</code> \ub4a4\uc758 \ub0b4\uc6a9\uc740 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc74c - \ucf54\ub4dc \uc124\uba85\uc774\ub098 \uba54\ubaa8 \uc6a9\ub3c4</p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#print","title":"print() \ud568\uc218","text":"<p><pre><code>print(\"Hello, World!\")\n</code></pre> - \ud654\uba74\uc5d0 \ud14d\uc2a4\ud2b8\ub97c \ucd9c\ub825\ud558\ub294 \ud568\uc218</p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#input","title":"input() \ud568\uc218","text":"<p><pre><code>name = input(\"\uc774\ub984\uc744 \uc785\ub825\ud558\uc138\uc694: \")\n</code></pre> - \uc0ac\uc6a9\uc790\ub85c\ubd80\ud130 \uc785\ub825\uc744 \ubc1b\ub294 \ud568\uc218 - \uc785\ub825\ubc1b\uc740 \uac12\uc744 \ubcc0\uc218\uc5d0 \uc800\uc7a5</p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#f-string","title":"f-string (\ud3ec\ub9f7 \ubb38\uc790\uc5f4)","text":"<p><pre><code>print(f\"\uc81c \uc774\ub984\uc740 {name}\uc785\ub2c8\ub2e4.\")\n</code></pre> - \ubcc0\uc218 \uac12\uc744 \ubb38\uc790\uc5f4\uc5d0 \uc0bd\uc785\ud558\ub294 \ubc29\ubc95 - <code>{}</code> \uc548\uc5d0 \ubcc0\uc218\uba85 \uc791\uc131</p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#6","title":"6. \uc77c\ubc18\uc801\uc778 \uc624\ub958\uc640 \ud574\uacb0\ubc95","text":""},{"location":"tutorials/beginner/chapter01_python_introduction/#61-syntaxerror","title":"6.1 SyntaxError","text":"<p><pre><code># \uc798\ubabb\ub41c \ucf54\ub4dc\nprint(\"Hello World\"\n</code></pre> \uc624\ub958 \uba54\uc2dc\uc9c0: <pre><code>SyntaxError: unexpected EOF while parsing\n</code></pre> \ud574\uacb0\ubc95: \uad04\ud638 \ub2eb\uae30 <code>)</code></p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#62-nameerror","title":"6.2 NameError","text":"<p><pre><code># \uc798\ubabb\ub41c \ucf54\ub4dc\nprint(message)\n</code></pre> \uc624\ub958 \uba54\uc2dc\uc9c0: <pre><code>NameError: name 'message' is not defined\n</code></pre> \ud574\uacb0\ubc95: \ubcc0\uc218\ub97c \uba3c\uc800 \uc815\uc758 <pre><code>message = \"Hello\"\nprint(message)\n</code></pre></p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#63-indentationerror","title":"6.3 IndentationError","text":"<p><pre><code># \uc798\ubabb\ub41c \ucf54\ub4dc\nif True:\nprint(\"Hello\")\n</code></pre> \uc624\ub958 \uba54\uc2dc\uc9c0: <pre><code>IndentationError: expected an indented block\n</code></pre> \ud574\uacb0\ubc95: \ub4e4\uc5ec\uc4f0\uae30 \ucd94\uac00 <pre><code>if True:\n    print(\"Hello\")\n</code></pre></p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#7","title":"7. \uc2e4\uc2b5 \uacfc\uc81c","text":""},{"location":"tutorials/beginner/chapter01_python_introduction/#1","title":"\uacfc\uc81c 1: \uacc4\uc0b0\uae30 \ud504\ub85c\uadf8\ub7a8","text":"<p>\ub450 \uc22b\uc790\ub97c \uc785\ub825\ubc1b\uc544 \uc0ac\uce59\uc5f0\uc0b0 \uacb0\uacfc\ub97c \ucd9c\ub825\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p> <p>\uc694\uad6c\uc0ac\ud56d: - \ub450 \uc22b\uc790 \uc785\ub825\ubc1b\uae30 - \ub367\uc148, \ube84\uc148, \uacf1\uc148, \ub098\ub217\uc148 \uacb0\uacfc \ucd9c\ub825 - \uc801\uc808\ud55c \uc124\uba85 \uba54\uc2dc\uc9c0 \ud3ec\ud568</p> <p>\uc608\uc2dc \ucd9c\ub825: <pre><code>=== \uac04\ub2e8\ud55c \uacc4\uc0b0\uae30 ===\n\uccab \ubc88\uc9f8 \uc22b\uc790: 10\n\ub450 \ubc88\uc9f8 \uc22b\uc790: 3\n\n=== \uacc4\uc0b0 \uacb0\uacfc ===\n10 + 3 = 13\n10 - 3 = 7\n10 * 3 = 30\n10 / 3 = 3.33\n</code></pre></p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#2","title":"\uacfc\uc81c 2: \uc815\ubcf4 \uc218\uc9d1 \ud504\ub85c\uadf8\ub7a8","text":"<p>\uc0ac\uc6a9\uc790\uc758 \uc5ec\ub7ec \uc815\ubcf4\ub97c \uc785\ub825\ubc1b\uc544 \uc815\ub9ac\ud574\uc11c \ucd9c\ub825\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p> <p>\uc218\uc9d1\ud560 \uc815\ubcf4: - \uc774\ub984, \ub098\uc774, \uac70\uc8fc\uc9c0\uc5ed, \uc9c1\uc5c5, \uc88b\uc544\ud558\ub294 \uc0c9\uc0c1</p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#8","title":"8. \ub2e4\uc74c \ucc55\ud130 \ubbf8\ub9ac\ubcf4\uae30","text":"<p>Chapter 2\uc5d0\uc11c\ub294 \ub2e4\uc74c \ub0b4\uc6a9\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4: - \ubcc0\uc218\uc640 \ub370\uc774\ud130 \ud0c0\uc785: \uc22b\uc790, \ubb38\uc790\uc5f4, \ubd88\ub9b0 - \ubcc0\uc218 \uba85\uba85 \uaddc\uce59\uacfc \uc0c1\uc218 - \ud0c0\uc785 \ubcc0\ud658\uacfc \ud0c0\uc785 \ud655\uc778 - \uae30\ubcf8 \uc5f0\uc0b0\uc790: \uc0b0\uc220, \ube44\uad50, \ub17c\ub9ac \uc5f0\uc0b0\uc790</p>"},{"location":"tutorials/beginner/chapter01_python_introduction/#9","title":"9. \ud575\uc2ec \uc815\ub9ac","text":"<p>\u2705 Python \ud2b9\uc9d5 - \uac04\ub2e8\ud558\uace0 \uc77d\uae30 \uc26c\uc6b4 \ubb38\ubc95 - \uc778\ud130\ud504\ub9ac\ud130 \uc5b8\uc5b4\ub85c \uc989\uc2dc \uc2e4\ud589 \uac00\ub2a5 - \ud48d\ubd80\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0dd\ud0dc\uacc4</p> <p>\u2705 \uc2e4\ud589 \ubc29\ubc95 - \ub300\ud654\ud615 \ubaa8\ub4dc: <code>python</code> \uba85\ub839\uc5b4 - \uc2a4\ud06c\ub9bd\ud2b8 \uc2e4\ud589: <code>python \ud30c\uc77c\uba85.py</code></p> <p>\u2705 \uae30\ubcf8 \ud568\uc218 - <code>print()</code>: \ucd9c\ub825 - <code>input()</code>: \uc785\ub825 - <code>#</code>: \uc8fc\uc11d</p> <p>\u2705 \uac1c\ubc1c \ud658\uacbd - Visual Studio Code + Python \ud655\uc7a5 \ud504\ub85c\uadf8\ub7a8 \uad8c\uc7a5</p> <p>\ud83c\udf89 \ucd95\ud558\ud569\ub2c8\ub2e4! Chapter 1\uc744 \uc644\ub8cc\ud588\uc2b5\ub2c8\ub2e4. \uc774\uc81c Python\uc758 \uae30\ubcf8 \uac1c\ub150\uc744 \uc774\ud574\ud558\uace0 \uac1c\ubc1c \ud658\uacbd\uc744 \uc124\uc815\ud588\uc2b5\ub2c8\ub2e4. Chapter 2\uc5d0\uc11c\ub294 \ubcc0\uc218\uc640 \ub370\uc774\ud130 \ud0c0\uc785\uc5d0 \ub300\ud574 \ub354 \uc790\uc138\ud788 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. </p>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/","title":"Chapter 2: \ubcc0\uc218\uc640 \uae30\ubcf8 \ub370\uc774\ud130 \ud0c0\uc785","text":""},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \ubcc0\uc218\uc758 \uac1c\ub150\uc744 \uc774\ud574\ud558\uace0 \uc62c\ubc14\ub974\uac8c \uc0ac\uc6a9\ud55c\ub2e4 - Python\uc758 \uae30\ubcf8 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uad6c\ubd84\ud558\uace0 \ud65c\uc6a9\ud55c\ub2e4 - \ud0c0\uc785 \ud655\uc778\uacfc \ud615\ubcc0\ud658\uc744 \uc218\ud589\ud55c\ub2e4 - \ubcc0\uc218 \uba85\uba85 \uaddc\uce59\uc744 \uc900\uc218\ud55c\ub2e4 - \ub3d9\uc801 \ud0c0\uc774\ud551\uc758 \uac1c\ub150\uc744 \uc774\ud574\ud55c\ub2e4</p>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#1","title":"1. \ubcc0\uc218\ub780 \ubb34\uc5c7\uc778\uac00?","text":""},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#11","title":"1.1 \ubcc0\uc218\uc758 \uac1c\ub150","text":"<p>\ubcc0\uc218(Variable)\ub294 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\ub294 \uba54\ubaa8\ub9ac \uacf5\uac04\uc5d0 \ubd99\uc778 \uc774\ub984\uc785\ub2c8\ub2e4. \ub9c8\uce58 \ubb3c\uac74\uc744 \ub2f4\ub294 \uc0c1\uc790\uc5d0 \ub77c\ubca8\uc744 \ubd99\uc774\ub294 \uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4.</p> <pre><code># \ubcc0\uc218 \uc0dd\uc131 \ubc0f \uac12 \ud560\ub2f9\nname = \"\uae40\ubbfc\uc218\"        # \ubb38\uc790\uc5f4\uc744 \ub2f4\ub294 \ubcc0\uc218\nage = 25              # \uc22b\uc790\ub97c \ub2f4\ub294 \ubcc0\uc218\nis_student = True     # \ucc38/\uac70\uc9d3\uc744 \ub2f4\ub294 \ubcc0\uc218\n\nprint(name)           # \uae40\ubbfc\uc218\nprint(age)            # 25\nprint(is_student)     # True\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#12-assignment","title":"1.2 \ubcc0\uc218 \ud560\ub2f9 (Assignment)","text":"<pre><code># \ub4f1\ud638(=)\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac12\uc744 \ud560\ub2f9\nx = 10                # x\ub77c\ub294 \ubcc0\uc218\uc5d0 10 \uc800\uc7a5\nmessage = \"\uc548\ub155\ud558\uc138\uc694\"  # message\ub77c\ub294 \ubcc0\uc218\uc5d0 \ubb38\uc790\uc5f4 \uc800\uc7a5\n\n# \ubcc0\uc218\uc758 \uac12 \ubcc0\uacbd \uac00\ub2a5\nx = 20                # x\uc758 \uac12\uc744 20\uc73c\ub85c \ubcc0\uacbd\nprint(x)              # 20\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#13","title":"1.3 \uc5ec\ub7ec \ubcc0\uc218\uc5d0 \ub3d9\uc2dc \ud560\ub2f9","text":"<pre><code># \uc5ec\ub7ec \ubcc0\uc218\uc5d0 \uac19\uc740 \uac12 \ud560\ub2f9\na = b = c = 100\nprint(a, b, c)        # 100 100 100\n\n# \uc5ec\ub7ec \ubcc0\uc218\uc5d0 \ub2e4\ub978 \uac12 \ud560\ub2f9\nx, y, z = 1, 2, 3\nprint(x, y, z)        # 1 2 3\n\n# \ubcc0\uc218 \uac12 \uad50\ud658\na, b = 10, 20\na, b = b, a           # \uac12 \uad50\ud658\nprint(a, b)           # 20 10\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#2-python","title":"2. Python\uc758 \uae30\ubcf8 \ub370\uc774\ud130 \ud0c0\uc785","text":""},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#21-int","title":"2.1 \uc815\uc218\ud615 (int)","text":"<p>\uc18c\uc218\uc810\uc774 \uc5c6\ub294 \uc815\uc218\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.</p> <pre><code># \uc815\uc218\ud615 \ubcc0\uc218\ub4e4\npositive_num = 42         # \uc591\uc218\nnegative_num = -15        # \uc74c\uc218\nzero = 0                  # 0\n\n# \ud070 \uc218\ub3c4 \ucc98\ub9ac \uac00\ub2a5\nbig_number = 1234567890123456789\nprint(big_number)         # 1234567890123456789\n\n# \ub2e4\uc591\ud55c \uc9c4\ubc95\uc73c\ub85c \ud45c\ud604\nbinary = 0b1010           # 2\uc9c4\ubc95 (10\uc9c4\ubc95\uc73c\ub85c 10)\noctal = 0o12              # 8\uc9c4\ubc95 (10\uc9c4\ubc95\uc73c\ub85c 10)\nhexadecimal = 0xA         # 16\uc9c4\ubc95 (10\uc9c4\ubc95\uc73c\ub85c 10)\nprint(binary, octal, hexadecimal)  # 10 10 10\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#22-float","title":"2.2 \uc2e4\uc218\ud615 (float)","text":"<p>\uc18c\uc218\uc810\uc774 \uc788\ub294 \uc2e4\uc218\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.</p> <pre><code># \uc2e4\uc218\ud615 \ubcc0\uc218\ub4e4\npi = 3.14159\ntemperature = -5.5\nheight = 175.0            # \uc815\uc218\ub3c4 \uc2e4\uc218\ub85c \ud45c\ud604 \uac00\ub2a5\n\n# \uc9c0\uc218 \ud45c\ud604\nscientific = 1.23e4       # 1.23 \u00d7 10^4 = 12300.0\nsmall_num = 2.5e-3        # 2.5 \u00d7 10^-3 = 0.0025\nprint(scientific)         # 12300.0\nprint(small_num)          # 0.0025\n\n# \ud2b9\uc218 \uac12\ub4e4\ninfinity = float('inf')   # \ubb34\ud55c\ub300\nneg_infinity = float('-inf')  # \uc74c\uc758 \ubb34\ud55c\ub300\nnot_a_number = float('nan')   # Not a Number\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#23-str","title":"2.3 \ubb38\uc790\uc5f4 (str)","text":"<p>\ud14d\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.</p> <pre><code># \ub2e4\uc591\ud55c \ubc29\ubc95\uc73c\ub85c \ubb38\uc790\uc5f4 \uc0dd\uc131\nsingle_quote = '\uc548\ub155\ud558\uc138\uc694'\ndouble_quote = \"Hello, World!\"\ntriple_quote = \"\"\"\uc5ec\ub7ec \uc904\n\ubb38\uc790\uc5f4\ub3c4\n\uac00\ub2a5\ud569\ub2c8\ub2e4\"\"\"\n\n# \ube48 \ubb38\uc790\uc5f4\nempty_string = \"\"\nempty_string2 = ''\n\n# \ubb38\uc790\uc5f4 \uc548\uc5d0 \ub530\uc634\ud45c \ud3ec\ud568\nquote_inside = \"\uadf8\ub294 '\uc548\ub155'\uc774\ub77c\uace0 \ub9d0\ud588\ub2e4\"\nquote_inside2 = '\uadf8\ub294 \"\uc548\ub155\"\uc774\ub77c\uace0 \ub9d0\ud588\ub2e4'\n\nprint(single_quote)       # \uc548\ub155\ud558\uc138\uc694\nprint(triple_quote)\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#_2","title":"\uc774\uc2a4\ucf00\uc774\ud504 \ubb38\uc790","text":"<pre><code># \ud2b9\uc218 \ubb38\uc790 \ud45c\ud604\nnewline = \"\uccab \ubc88\uc9f8 \uc904\\n\ub450 \ubc88\uc9f8 \uc904\"       # \\n: \uc904\ubc14\uafc8\ntab = \"\uc774\ub984:\\t\uae40\ubbfc\uc218\"                   # \\t: \ud0ed\nbackslash = \"\uacbd\ub85c: C:\\\\Users\\\\kim\"      # \\\\: \ubc31\uc2ac\ub798\uc2dc\nquote = \"\uadf8\ub294 \\\"\uc548\ub155\\\"\uc774\ub77c\uace0 \ub9d0\ud588\ub2e4\"      # \\\": \ud070\ub530\uc634\ud45c\n\nprint(newline)\nprint(tab)\nprint(backslash)\nprint(quote)\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#24-bool","title":"2.4 \ubd88\ub9b0 (bool)","text":"<p>\ucc38(True) \ub610\ub294 \uac70\uc9d3(False) \uac12\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.</p> <pre><code># \ubd88\ub9b0 \uac12\nis_raining = True\nis_sunny = False\n\n# \ube44\uad50 \uc5f0\uc0b0\uc758 \uacb0\uacfc\nage = 20\nis_adult = age &gt;= 18      # True\nis_child = age &lt; 10       # False\n\nprint(is_adult)           # True\nprint(is_child)           # False\n\n# \ub2e4\ub978 \ud0c0\uc785\uc744 \ubd88\ub9b0\uc73c\ub85c \ubcc0\ud658\nprint(bool(1))            # True (0\uc774 \uc544\ub2cc \uc22b\uc790)\nprint(bool(0))            # False (0)\nprint(bool(\"hello\"))      # True (\ube48 \ubb38\uc790\uc5f4\uc774 \uc544\ub2d8)\nprint(bool(\"\"))           # False (\ube48 \ubb38\uc790\uc5f4)\nprint(bool([1, 2, 3]))    # True (\ube48 \ub9ac\uc2a4\ud2b8\uac00 \uc544\ub2d8)\nprint(bool([]))           # False (\ube48 \ub9ac\uc2a4\ud2b8)\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#3","title":"3. \ud0c0\uc785 \ud655\uc778\uacfc \ubcc0\ud658","text":""},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#31","title":"3.1 \ud0c0\uc785 \ud655\uc778\ud558\uae30","text":"<pre><code># type() \ud568\uc218\ub85c \ud0c0\uc785 \ud655\uc778\nname = \"\uae40\ubbfc\uc218\"\nage = 25\nheight = 175.5\nis_student = True\n\nprint(type(name))         # &lt;class 'str'&gt;\nprint(type(age))          # &lt;class 'int'&gt;\nprint(type(height))       # &lt;class 'float'&gt;\nprint(type(is_student))   # &lt;class 'bool'&gt;\n\n# isinstance() \ud568\uc218\ub85c \ud0c0\uc785 \uac80\uc0ac\nprint(isinstance(age, int))        # True\nprint(isinstance(height, float))   # True\nprint(isinstance(name, str))       # True\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#32-type-conversion","title":"3.2 \ud0c0\uc785 \ubcc0\ud658 (Type Conversion)","text":""},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#_3","title":"\uba85\uc2dc\uc801 \ud0c0\uc785 \ubcc0\ud658","text":"<pre><code># \ubb38\uc790\uc5f4\uc744 \uc22b\uc790\ub85c \ubcc0\ud658\nstr_number = \"123\"\nint_number = int(str_number)      # 123 (\uc815\uc218)\nfloat_number = float(str_number)  # 123.0 (\uc2e4\uc218)\n\nprint(int_number)         # 123\nprint(float_number)       # 123.0\n\n# \uc22b\uc790\ub97c \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\nage = 25\nage_str = str(age)        # \"25\"\nprint(\"\ub098\uc774: \" + age_str)  # \ub098\uc774: 25\n\n# \uc2e4\uc218\ub97c \uc815\uc218\ub85c \ubcc0\ud658 (\uc18c\uc218\uc810 \ubc84\ub9bc)\npi = 3.14159\npi_int = int(pi)          # 3\nprint(pi_int)             # 3\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#_4","title":"\ubcc0\ud658 \uc2dc \uc8fc\uc758\uc0ac\ud56d","text":"<pre><code># \uc798\ubabb\ub41c \ubcc0\ud658 \uc2dc \uc624\ub958 \ubc1c\uc0dd\ntry:\n    invalid = int(\"hello\")  # \uc624\ub958!\nexcept ValueError as e:\n    print(f\"\ubcc0\ud658 \uc624\ub958: {e}\")\n\n# \uc548\uc804\ud55c \ubcc0\ud658 \ubc29\ubc95\ndef safe_int_conversion(value):\n    try:\n        return int(value)\n    except ValueError:\n        return None\n\nresult = safe_int_conversion(\"123\")   # 123\nresult2 = safe_int_conversion(\"abc\")  # None\nprint(result, result2)\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#4","title":"4. \ubcc0\uc218 \uba85\uba85 \uaddc\uce59","text":""},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#41","title":"4.1 \ud544\uc218 \uaddc\uce59","text":"<pre><code># \u2705 \uc62c\ubc14\ub978 \ubcc0\uc218\uba85\nname = \"\uae40\ubbfc\uc218\"\nage = 25\nstudent_name = \"\uc774\uc601\ud76c\"\nMAX_SIZE = 100\n_private_var = \"\ube44\uacf5\uac1c\"\n\n# \u274c \uc798\ubabb\ub41c \ubcc0\uc218\uba85 (\uc624\ub958 \ubc1c\uc0dd)\n# 2name = \"\uae40\ubbfc\uc218\"        # \uc22b\uc790\ub85c \uc2dc\uc791 \ubd88\uac00\n# my-name = \"\uae40\ubbfc\uc218\"      # \ud558\uc774\ud508 \uc0ac\uc6a9 \ubd88\uac00  \n# class = \"A\ubc18\"           # \uc608\uc57d\uc5b4 \uc0ac\uc6a9 \ubd88\uac00\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#42-pep-8","title":"4.2 \uad8c\uc7a5 \uaddc\uce59 (PEP 8 \uc2a4\ud0c0\uc77c \uac00\uc774\ub4dc)","text":"<pre><code># \u2705 \uc88b\uc740 \ubcc0\uc218\uba85 (\uc2a4\ub124\uc774\ud06c \ucf00\uc774\uc2a4)\nuser_name = \"\uae40\ubbfc\uc218\"\nbirth_year = 1998\nis_valid = True\nmax_retry_count = 3\n\n# \u274c \uad8c\uc7a5\ud558\uc9c0 \uc54a\ub294 \ubcc0\uc218\uba85\nuserName = \"\uae40\ubbfc\uc218\"       # \uce74\uba5c \ucf00\uc774\uc2a4 (\ud568\uc218/\ud074\ub798\uc2a4\uc6a9)\nBIRTH_YEAR = 1998        # \ub300\ubb38\uc790 (\uc0c1\uc218\uc6a9)\nn = \"\uae40\ubbfc\uc218\"             # \uc758\ubbf8 \ubd88\ubd84\uba85\nx1 = \"\uae40\ubbfc\uc218\"            # \uc758\ubbf8 \ubd88\ubd84\uba85\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#43","title":"4.3 \uc758\ubbf8 \uc788\ub294 \ubcc0\uc218\uba85 \uc0ac\uc6a9","text":"<pre><code># \u274c \ub098\uc05c \uc608\na = 25\nb = \"\uae40\ubbfc\uc218\" \nc = True\n\n# \u2705 \uc88b\uc740 \uc608\nstudent_age = 25\nstudent_name = \"\uae40\ubbfc\uc218\"\nis_enrolled = True\n\n# \uacc4\uc0b0 \uc608\uc2dc\n# \u274c \ub098\uc05c \uc608\nr = 5\nresult = 3.14159 * r * r\n\n# \u2705 \uc88b\uc740 \uc608\nradius = 5\npi = 3.14159\ncircle_area = pi * radius * radius\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#5-dynamic-typing","title":"5. \ub3d9\uc801 \ud0c0\uc774\ud551 (Dynamic Typing)","text":""},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#51","title":"5.1 \ub3d9\uc801 \ud0c0\uc774\ud551\uc774\ub780?","text":"<p>Python\uc740 \uc2e4\ud589 \uc2dc\uac04\uc5d0 \ubcc0\uc218\uc758 \ud0c0\uc785\uc774 \uacb0\uc815\ub418\ub294 \ub3d9\uc801 \ud0c0\uc774\ud551 \uc5b8\uc5b4\uc785\ub2c8\ub2e4.</p> <pre><code># \uac19\uc740 \ubcc0\uc218\uc5d0 \ub2e4\ub978 \ud0c0\uc785 \ud560\ub2f9 \uac00\ub2a5\ndata = 42           # \uc815\uc218\nprint(type(data))   # &lt;class 'int'&gt;\n\ndata = \"Hello\"      # \ubb38\uc790\uc5f4\ub85c \ubcc0\uacbd\nprint(type(data))   # &lt;class 'str'&gt;\n\ndata = 3.14         # \uc2e4\uc218\ub85c \ubcc0\uacbd\nprint(type(data))   # &lt;class 'float'&gt;\n\ndata = True         # \ubd88\ub9b0\uc73c\ub85c \ubcc0\uacbd\nprint(type(data))   # &lt;class 'bool'&gt;\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#52","title":"5.2 \ub3d9\uc801 \ud0c0\uc774\ud551\uc758 \uc7a5\ub2e8\uc810","text":""},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#_5","title":"\uc7a5\uc810","text":"<pre><code># \uc720\uc5f0\ud55c \ud504\ub85c\uadf8\ub798\ubc0d \uac00\ub2a5\ndef process_data(value):\n    if isinstance(value, int):\n        return value * 2\n    elif isinstance(value, str):\n        return value.upper()\n    elif isinstance(value, list):\n        return len(value)\n    else:\n        return \"Unknown type\"\n\nprint(process_data(5))        # 10\nprint(process_data(\"hello\"))  # HELLO\nprint(process_data([1,2,3]))  # 3\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#_6","title":"\uc8fc\uc758\ud560 \uc810","text":"<pre><code># \ud0c0\uc785 \uad00\ub828 \uc624\ub958 \ubc1c\uc0dd \uac00\ub2a5\nage = \"25\"  # \ubb38\uc790\uc5f4\ub85c \uc800\uc7a5\nbirth_year = 2024 - age  # \uc624\ub958! \ubb38\uc790\uc5f4\uacfc \uc22b\uc790\ub294 \uc5f0\uc0b0 \ubd88\uac00\n\n# \uc62c\ubc14\ub978 \ubc29\ubc95\nage = int(\"25\")  # \uc815\uc218\ub85c \ubcc0\ud658\nbirth_year = 2024 - age  # 1999\nprint(birth_year)\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#6","title":"6. \uc2e4\uc2b5 \uc608\uc81c","text":""},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#61","title":"6.1 \uac1c\uc778 \uc815\ubcf4 \ud504\ub85c\uadf8\ub7a8","text":"<pre><code># Personal Information Program\n\n# \uac1c\uc778 \uc815\ubcf4 \uc218\uc9d1\nprint(\"=== \uac1c\uc778 \uc815\ubcf4 \uc785\ub825 ===\")\nname = input(\"\uc774\ub984: \")\nage = int(input(\"\ub098\uc774: \"))  # \ubb38\uc790\uc5f4\uc744 \uc815\uc218\ub85c \ubcc0\ud658\nheight = float(input(\"\ud0a4 (cm): \"))  # \ubb38\uc790\uc5f4\uc744 \uc2e4\uc218\ub85c \ubcc0\ud658\nis_student = input(\"\ud559\uc0dd\uc778\uac00\uc694? (y/n): \").lower() == 'y'\n\n# \uacc4\uc0b0\nbirth_year = 2024 - age\nheight_m = height / 100  # \ubbf8\ud130 \ub2e8\uc704\ub85c \ubcc0\ud658\n\n# \uc815\ubcf4 \ucd9c\ub825\nprint(\"\\n=== \uc785\ub825\ub41c \uc815\ubcf4 ===\")\nprint(f\"\uc774\ub984: {name} (\ud0c0\uc785: {type(name).__name__})\")\nprint(f\"\ub098\uc774: {age}\uc138 (\ud0c0\uc785: {type(age).__name__})\")\nprint(f\"\ud0a4: {height}cm = {height_m:.2f}m (\ud0c0\uc785: {type(height).__name__})\")\nprint(f\"\ucd9c\uc0dd\uc5f0\ub3c4: \uc57d {birth_year}\ub144\")\nprint(f\"\ud559\uc0dd \uc5ec\ubd80: {is_student} (\ud0c0\uc785: {type(is_student).__name__})\")\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#62","title":"6.2 \uacc4\uc0b0\uae30 \ud504\ub85c\uadf8\ub7a8","text":"<pre><code># Simple Calculator Program\n\nprint(\"=== \uac04\ub2e8\ud55c \uacc4\uc0b0\uae30 ===\")\n\n# \uc0ac\uc6a9\uc790 \uc785\ub825\nnum1 = float(input(\"\uccab \ubc88\uc9f8 \uc22b\uc790: \"))\noperator = input(\"\uc5f0\uc0b0\uc790 (+, -, *, /): \")\nnum2 = float(input(\"\ub450 \ubc88\uc9f8 \uc22b\uc790: \"))\n\n# \uacc4\uc0b0 \uc218\ud589\nif operator == '+':\n    result = num1 + num2\nelif operator == '-':\n    result = num1 - num2\nelif operator == '*':\n    result = num1 * num2\nelif operator == '/':\n    if num2 != 0:\n        result = num1 / num2\n    else:\n        result = \"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\"\nelse:\n    result = \"\uc798\ubabb\ub41c \uc5f0\uc0b0\uc790\uc785\ub2c8\ub2e4\"\n\n# \uacb0\uacfc \ucd9c\ub825\nprint(f\"\\n\uacb0\uacfc: {num1} {operator} {num2} = {result}\")\nprint(f\"\uacb0\uacfc\uc758 \ud0c0\uc785: {type(result).__name__}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#7","title":"7. \uc0c1\uc218\uc640 \uad00\ub840","text":""},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#71-constants","title":"7.1 \uc0c1\uc218 (Constants)","text":"<p>Python\uc5d0\ub294 \uc9c4\uc815\ud55c \uc0c1\uc218\uac00 \uc5c6\uc9c0\ub9cc, \ub300\ubb38\uc790\ub85c \uc774\ub984\uc744 \uc9c0\uc5b4 \uc0c1\uc218\uc784\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4.</p> <pre><code># \uc0c1\uc218 \uc815\uc758 (\uad00\ub840\uc801\uc73c\ub85c \ub300\ubb38\uc790 \uc0ac\uc6a9)\nPI = 3.14159\nMAX_STUDENTS = 30\nDEFAULT_NAME = \"Unknown\"\n\n# \uc0c1\uc218 \uc0ac\uc6a9\nradius = 5\ncircle_area = PI * radius ** 2\nprint(f\"\uc6d0\uc758 \ub113\uc774: {circle_area}\")\n\n# \uc0c1\uc218\ub294 \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294 \uac83\uc774 \uc6d0\uce59 (\ud558\uc9c0\ub9cc \uac00\ub2a5\ud568)\n# PI = 3.14  # \uad8c\uc7a5\ud558\uc9c0 \uc54a\uc74c\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#72-none","title":"7.2 None \ud0c0\uc785","text":"<pre><code># None: \uac12\uc774 \uc5c6\uc74c\uc744 \ub098\ud0c0\ub0b4\ub294 \ud2b9\ubcc4\ud55c \uac12\nresult = None\nprint(type(result))  # &lt;class 'NoneType'&gt;\n\n# None\uacfc \ube44\uad50\nif result is None:\n    print(\"\uacb0\uacfc\uac00 \uc5c6\uc2b5\ub2c8\ub2e4\")\n\n# \ud568\uc218\uc5d0\uc11c \uac12\uc744 \ubc18\ud658\ud558\uc9c0 \uc54a\uc744 \ub54c None\uc774 \ubc18\ud658\ub428\ndef greet(name):\n    print(f\"\uc548\ub155\ud558\uc138\uc694, {name}\ub2d8!\")\n    # return \ubb38\uc774 \uc5c6\uc73c\uba74 None \ubc18\ud658\n\nreturned_value = greet(\"\uae40\ubbfc\uc218\")\nprint(returned_value)  # None\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#8","title":"8. \uc77c\ubc18\uc801\uc778 \uc624\ub958\uc640 \ud574\uacb0\ubc95","text":""},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#81","title":"8.1 \ud0c0\uc785 \uad00\ub828 \uc624\ub958","text":"<pre><code># TypeError: \uc11c\ub85c \ub2e4\ub978 \ud0c0\uc785 \uac04 \uc5f0\uc0b0\nage = \"25\"\nbirth_year = 2024 - age  # \uc624\ub958!\n# TypeError: unsupported operand type(s) for -: 'int' and 'str'\n\n# \ud574\uacb0\ubc95: \ud0c0\uc785 \ubcc0\ud658\nage = int(\"25\")\nbirth_year = 2024 - age  # \uc815\uc0c1 \uc791\ub3d9\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#82","title":"8.2 \ubcc0\uc218\uba85 \uc624\ub958","text":"<pre><code># NameError: \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218 \uc0ac\uc6a9\nprint(username)  # \uc624\ub958! username\uc774 \uc815\uc758\ub418\uc9c0 \uc54a\uc74c\n# NameError: name 'username' is not defined\n\n# \ud574\uacb0\ubc95: \ubcc0\uc218 \uba3c\uc800 \uc815\uc758\nusername = \"\uae40\ubbfc\uc218\"\nprint(username)  # \uc815\uc0c1 \uc791\ub3d9\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#83","title":"8.3 \ubcc0\ud658 \uc624\ub958","text":"<pre><code># ValueError: \uc798\ubabb\ub41c \ud615\uc2dd\uc758 \ubb38\uc790\uc5f4 \ubcc0\ud658\nnumber = int(\"hello\")  # \uc624\ub958!\n# ValueError: invalid literal for int() with base 10: 'hello'\n\n# \ud574\uacb0\ubc95: \uc608\uc678 \ucc98\ub9ac \ub610\ub294 \uc720\ud6a8\uc131 \uac80\uc0ac\ntext = \"hello\"\nif text.isdigit():\n    number = int(text)\nelse:\n    print(\"\uc22b\uc790\uac00 \uc544\ub2d9\ub2c8\ub2e4\")\n</code></pre>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#9","title":"9. \uc2e4\uc2b5 \uacfc\uc81c","text":""},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#1_1","title":"\uacfc\uc81c 1: \uc628\ub3c4 \ubcc0\ud658\uae30","text":"<p>\ud654\uc528\uc640 \uc12d\uc528 \uc628\ub3c4\ub97c \uc11c\ub85c \ubcc0\ud658\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p> <p>\uc694\uad6c\uc0ac\ud56d: - \uc0ac\uc6a9\uc790\ub85c\ubd80\ud130 \uc628\ub3c4\uac12\uacfc \ub2e8\uc704(C \ub610\ub294 F)\ub97c \uc785\ub825\ubc1b\uae30 - \uc801\uc808\ud55c \uacf5\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubcc0\ud658 - \uacb0\uacfc\ub97c \uc18c\uc218\uc810 \ub458\uc9f8 \uc790\ub9ac\uae4c\uc9c0 \ucd9c\ub825 - \ubcc0\ud658 \uacf5\uc2dd: \u00b0F = (\u00b0C \u00d7 9/5) + 32, \u00b0C = (\u00b0F - 32) \u00d7 5/9</p>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#2-bmi","title":"\uacfc\uc81c 2: BMI \uacc4\uc0b0\uae30","text":"<p>\uc0ac\uc6a9\uc790\uc758 \ud0a4\uc640 \ubab8\ubb34\uac8c\ub97c \uc785\ub825\ubc1b\uc544 BMI\ub97c \uacc4\uc0b0\ud558\uace0 \uac74\uac15 \uc0c1\ud0dc\ub97c \uc54c\ub824\uc8fc\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p> <p>\uc694\uad6c\uc0ac\ud56d: - \ud0a4(cm)\uc640 \ubab8\ubb34\uac8c(kg) \uc785\ub825\ubc1b\uae30 - BMI \uacc4\uc0b0 (BMI = \ubab8\ubb34\uac8c / (\ud0a4(m))\u00b2) - BMI \uc9c0\uc218\uc5d0 \ub530\ub978 \uac74\uac15 \uc0c1\ud0dc \ucd9c\ub825   - 18.5 \ubbf8\ub9cc: \uc800\uccb4\uc911   - 18.5~24.9: \uc815\uc0c1\uccb4\uc911   - 25~29.9: \uacfc\uccb4\uc911   - 30 \uc774\uc0c1: \ube44\ub9cc</p>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#3_1","title":"\uacfc\uc81c 3: \ubcc0\uc218 \ud0c0\uc785 \ubd84\uc11d\uae30","text":"<p>\uc0ac\uc6a9\uc790\uac00 \uc785\ub825\ud55c \uac12\uc758 \ud0c0\uc785\uc744 \ubd84\uc11d\ud558\uace0 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ud574\ubcf4\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p> <p>\uc694\uad6c\uc0ac\ud56d: - \uc0ac\uc6a9\uc790 \uc785\ub825 \ubc1b\uae30 - \uc6d0\ubcf8 \ud0c0\uc785 \ud655\uc778 - int, float, bool\ub85c \ubcc0\ud658 \uc2dc\ub3c4 (\uac00\ub2a5\ud55c \uacbd\uc6b0) - \uac01 \ubcc0\ud658 \uacb0\uacfc\uc640 \uc131\uacf5/\uc2e4\ud328 \uc5ec\ubd80 \ucd9c\ub825</p>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#10","title":"10. \ub2e4\uc74c \ucc55\ud130 \ubbf8\ub9ac\ubcf4\uae30","text":"<p>Chapter 3\uc5d0\uc11c\ub294 \ub2e4\uc74c \ub0b4\uc6a9\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4: - \ubb38\uc790\uc5f4 \uc778\ub371\uc2f1\uacfc \uc2ac\ub77c\uc774\uc2f1: \ubb38\uc790\uc5f4\uc758 \ud2b9\uc815 \ubd80\ubd84 \ucd94\ucd9c - \ubb38\uc790\uc5f4 \uba54\uc11c\ub4dc: split, join, replace, strip, find \ub4f1 - \ubb38\uc790\uc5f4 \ud3ec\ub9f7\ud305: f-string, format() \uba54\uc11c\ub4dc \ud65c\uc6a9 - \uc774\uc2a4\ucf00\uc774\ud504 \ubb38\uc790\uc640 raw \ubb38\uc790\uc5f4 - \ubb38\uc790\uc5f4 \uac80\uc99d \uba54\uc11c\ub4dc: isdigit, isalpha, isalnum \ub4f1</p>"},{"location":"tutorials/beginner/chapter02_variables_and_datatypes/#11_1","title":"11. \ud575\uc2ec \uc815\ub9ac","text":"<p>\u2705 \ubcc0\uc218\uc640 \ud560\ub2f9 - \ubcc0\uc218\ub294 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\ub294 \uba54\ubaa8\ub9ac \uacf5\uac04\uc758 \uc774\ub984 - <code>=</code> \uc5f0\uc0b0\uc790\ub85c \uac12 \ud560\ub2f9 - \uc5ec\ub7ec \ubcc0\uc218 \ub3d9\uc2dc \ud560\ub2f9 \uac00\ub2a5</p> <p>\u2705 \uae30\ubcf8 \ub370\uc774\ud130 \ud0c0\uc785 - <code>int</code>: \uc815\uc218\ud615 (42, -15, 0) - <code>float</code>: \uc2e4\uc218\ud615 (3.14, -5.5) - <code>str</code>: \ubb38\uc790\uc5f4 (\"Hello\", '\uc548\ub155') - <code>bool</code>: \ubd88\ub9b0 (True, False)</p> <p>\u2705 \ud0c0\uc785 \ud655\uc778\uacfc \ubcc0\ud658 - <code>type()</code>: \ud0c0\uc785 \ud655\uc778 - <code>int()</code>, <code>float()</code>, <code>str()</code>: \ud0c0\uc785 \ubcc0\ud658 - \ubcc0\ud658 \uc2dc ValueError \uc8fc\uc758</p> <p>\u2705 \ubcc0\uc218 \uba85\uba85 \uaddc\uce59 - \ubb38\uc790, \uc22b\uc790, \uc5b8\ub354\uc2a4\ucf54\uc5b4 \uc0ac\uc6a9 \uac00\ub2a5 - \uc22b\uc790\ub85c \uc2dc\uc791 \ubd88\uac00 - \uc608\uc57d\uc5b4 \uc0ac\uc6a9 \ubd88\uac00 - \uc2a4\ub124\uc774\ud06c \ucf00\uc774\uc2a4 \uad8c\uc7a5</p> <p>\u2705 \ub3d9\uc801 \ud0c0\uc774\ud551 - \uc2e4\ud589 \uc2dc\uac04\uc5d0 \ud0c0\uc785 \uacb0\uc815 - \uac19\uc740 \ubcc0\uc218\uc5d0 \ub2e4\ub978 \ud0c0\uc785 \ud560\ub2f9 \uac00\ub2a5 - \uc720\uc5f0\ud558\uc9c0\ub9cc \uc8fc\uc758 \ud544\uc694</p> <p>\ud83c\udf89 \ucd95\ud558\ud569\ub2c8\ub2e4! Chapter 2\ub97c \uc644\ub8cc\ud588\uc2b5\ub2c8\ub2e4. \uc774\uc81c Python\uc758 \uae30\ubcf8 \ub370\uc774\ud130 \ud0c0\uc785\uacfc \ubcc0\uc218\ub97c \uc790\uc720\uc790\uc7ac\ub85c \ub2e4\ub8f0 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Chapter 3\uc5d0\uc11c\ub294 \ubb38\uc790\uc5f4\uc744 \ub354 \uae4a\uc774 \uc788\uac8c \ub2e4\ub904\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. </p>"},{"location":"tutorials/beginner/chapter03_string_handling/","title":"Chapter 3: \ubb38\uc790\uc5f4 \ub2e4\ub8e8\uae30","text":""},{"location":"tutorials/beginner/chapter03_string_handling/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \ubb38\uc790\uc5f4 \uc778\ub371\uc2f1\uacfc \uc2ac\ub77c\uc774\uc2f1\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubb38\uc790\uc5f4\uc758 \uc77c\ubd80\ub97c \ucd94\ucd9c\ud55c\ub2e4 - \ub2e4\uc591\ud55c \ubb38\uc790\uc5f4 \uba54\uc11c\ub4dc\ub97c \ud65c\uc6a9\ud558\uc5ec \ubb38\uc790\uc5f4\uc744 \uc870\uc791\ud55c\ub2e4 - \ubb38\uc790\uc5f4 \ud3ec\ub9f7\ud305\uc744 \ud1b5\ud574 \ub3d9\uc801\uc778 \ud14d\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud55c\ub2e4 - \uc774\uc2a4\ucf00\uc774\ud504 \ubb38\uc790\uc640 raw \ubb38\uc790\uc5f4\uc744 \uc62c\ubc14\ub974\uac8c \uc0ac\uc6a9\ud55c\ub2e4 - \ubb38\uc790\uc5f4 \uac80\uc99d \uba54\uc11c\ub4dc\ub85c \ubb38\uc790\uc5f4\uc758 \ud2b9\uc131\uc744 \ud655\uc778\ud55c\ub2e4</p>"},{"location":"tutorials/beginner/chapter03_string_handling/#1-string-indexing","title":"1. \ubb38\uc790\uc5f4 \uc778\ub371\uc2f1 (String Indexing)","text":""},{"location":"tutorials/beginner/chapter03_string_handling/#11","title":"1.1 \uc778\ub371\uc2a4 \uac1c\ub150","text":"<p>\ubb38\uc790\uc5f4\uc758 \uac01 \ubb38\uc790\ub294 \uc704\uce58 \ubc88\ud638(\uc778\ub371\uc2a4)\ub97c \uac00\uc9d1\ub2c8\ub2e4. Python\uc5d0\uc11c\ub294 0\ubd80\ud130 \uc2dc\uc791\ud569\ub2c8\ub2e4.</p> <pre><code>text = \"Python\"\n#       012345  (\uc591\uc218 \uc778\ub371\uc2a4)\n#      -654321  (\uc74c\uc218 \uc778\ub371\uc2a4)\n\n# \uc591\uc218 \uc778\ub371\uc2a4\ub85c \uc811\uadfc\nprint(text[0])    # P (\uccab \ubc88\uc9f8 \ubb38\uc790)\nprint(text[1])    # y (\ub450 \ubc88\uc9f8 \ubb38\uc790)\nprint(text[5])    # n (\ub9c8\uc9c0\ub9c9 \ubb38\uc790)\n\n# \uc74c\uc218 \uc778\ub371\uc2a4\ub85c \uc811\uadfc (\ub4a4\uc5d0\uc11c\ubd80\ud130)\nprint(text[-1])   # n (\ub9c8\uc9c0\ub9c9 \ubb38\uc790)\nprint(text[-2])   # o (\ub4a4\uc5d0\uc11c \ub450 \ubc88\uc9f8)\nprint(text[-6])   # P (\uccab \ubc88\uc9f8 \ubb38\uc790)\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#12","title":"1.2 \ubb38\uc790\uc5f4 \uae38\uc774\uc640 \uc778\ub371\uc2a4","text":"<pre><code>message = \"\uc548\ub155\ud558\uc138\uc694\"\nprint(len(message))      # 5 (\ubb38\uc790\uc5f4 \uae38\uc774)\n\n# \uc720\ud6a8\ud55c \uc778\ub371\uc2a4 \ubc94\uc704: 0 ~ len(message)-1\nprint(message[0])        # \uc548\nprint(message[4])        # \uc694\n# print(message[5])      # \uc624\ub958! IndexError\n\n# \ub9c8\uc9c0\ub9c9 \ubb38\uc790 \uc548\uc804\ud558\uac8c \uc811\uadfc\nlast_char = message[len(message) - 1]  # \uc694\nlast_char = message[-1]                # \ub354 \uac04\ub2e8\ud55c \ubc29\ubc95\nprint(last_char)\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#13","title":"1.3 \ubb38\uc790\uc5f4 \uc21c\ud68c","text":"<pre><code>word = \"Hello\"\n\n# \uc778\ub371\uc2a4\ub97c \uc0ac\uc6a9\ud55c \uc21c\ud68c\nfor i in range(len(word)):\n    print(f\"\uc778\ub371\uc2a4 {i}: {word[i]}\")\n\n# \uc9c1\uc811 \ubb38\uc790 \uc21c\ud68c (\ub354 pythonic)\nfor char in word:\n    print(char)\n\n# \uc778\ub371\uc2a4\uc640 \ubb38\uc790\ub97c \ud568\uaed8 \uc21c\ud68c\nfor i, char in enumerate(word):\n    print(f\"\uc778\ub371\uc2a4 {i}: {char}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#2-string-slicing","title":"2. \ubb38\uc790\uc5f4 \uc2ac\ub77c\uc774\uc2f1 (String Slicing)","text":""},{"location":"tutorials/beginner/chapter03_string_handling/#21","title":"2.1 \uae30\ubcf8 \uc2ac\ub77c\uc774\uc2f1 \ubb38\ubc95","text":"<p>\uc2ac\ub77c\uc774\uc2f1\uc740 <code>\ubb38\uc790\uc5f4[\uc2dc\uc791:\ub05d:\uac04\uaca9]</code> \ud615\uc2dd\uc73c\ub85c \ubb38\uc790\uc5f4\uc758 \uc77c\ubd80\ubd84\uc744 \ucd94\ucd9c\ud569\ub2c8\ub2e4.</p> <pre><code>text = \"Python Programming\"\n#       0123456789012345678\n\n# \uae30\ubcf8 \uc2ac\ub77c\uc774\uc2f1\nprint(text[0:6])     # Python (0\ubd80\ud130 5\uae4c\uc9c0)\nprint(text[7:18])    # Programming (7\ubd80\ud130 17\uae4c\uc9c0)\nprint(text[7:])      # Programming (7\ubd80\ud130 \ub05d\uae4c\uc9c0)\nprint(text[:6])      # Python (\ucc98\uc74c\ubd80\ud130 5\uae4c\uc9c0)\nprint(text[:])       # Python Programming (\uc804\uccb4)\n\n# \uc74c\uc218 \uc778\ub371\uc2a4 \uc0ac\uc6a9\nprint(text[-11:])    # Programming (\ub4a4\uc5d0\uc11c 11\ubc88\uc9f8\ubd80\ud130 \ub05d\uae4c\uc9c0)\nprint(text[:-12])    # Python (\ucc98\uc74c\ubd80\ud130 \ub4a4\uc5d0\uc11c 12\ubc88\uc9f8 \uc804\uae4c\uc9c0)\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#22-step","title":"2.2 \uac04\uaca9(Step)\uc744 \uc774\uc6a9\ud55c \uc2ac\ub77c\uc774\uc2f1","text":"<pre><code>numbers = \"0123456789\"\n\n# \uac04\uaca9 \uc9c0\uc815\nprint(numbers[::2])     # 02468 (2\uce78\uc529 \uac74\ub108\ub6f0\uae30)\nprint(numbers[1::2])    # 13579 (1\ubd80\ud130 2\uce78\uc529)\nprint(numbers[::3])     # 0369 (3\uce78\uc529 \uac74\ub108\ub6f0\uae30)\n\n# \uc5ed\uc21c \ucd9c\ub825\nprint(numbers[::-1])    # 9876543210 (\uc804\uccb4\ub97c \uc5ed\uc21c\uc73c\ub85c)\nprint(numbers[5:1:-1])  # 5432 (5\ubd80\ud130 2\uae4c\uc9c0 \uc5ed\uc21c\uc73c\ub85c)\n\n# \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c\nemail = \"user@example.com\"\nusername = email[:email.index('@')]     # user\ndomain = email[email.index('@')+1:]     # example.com\nprint(f\"\uc0ac\uc6a9\uc790\uba85: {username}, \ub3c4\uba54\uc778: {domain}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#23","title":"2.3 \uc2ac\ub77c\uc774\uc2f1 \ud65c\uc6a9 \uc608\uc81c","text":"<pre><code># \ubb38\uc790\uc5f4 \ub4a4\uc9d1\uae30\ndef reverse_string(s):\n    return s[::-1]\n\n# \ud330\ub9b0\ub4dc\ub86c \uac80\uc0ac\ndef is_palindrome(s):\n    s = s.lower().replace(\" \", \"\")  # \uc18c\ubb38\uc790\ub85c \ubcc0\ud658, \uacf5\ubc31 \uc81c\uac70\n    return s == s[::-1]\n\n# \ud30c\uc77c \ud655\uc7a5\uc790 \ucd94\ucd9c\ndef get_file_extension(filename):\n    dot_index = filename.rfind('.')  # \ub9c8\uc9c0\ub9c9 \uc810\uc758 \uc704\uce58\n    if dot_index != -1:\n        return filename[dot_index+1:]\n    return \"\"\n\n# \ud14c\uc2a4\ud2b8\nprint(reverse_string(\"Hello\"))           # olleH\nprint(is_palindrome(\"A man a plan a canal Panama\"))  # True\nprint(get_file_extension(\"document.pdf\"))            # pdf\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#3-string-methods","title":"3. \ubb38\uc790\uc5f4 \uba54\uc11c\ub4dc (String Methods)","text":""},{"location":"tutorials/beginner/chapter03_string_handling/#31","title":"3.1 \ub300\uc18c\ubb38\uc790 \ubcc0\ud658 \uba54\uc11c\ub4dc","text":"<pre><code>text = \"Hello World\"\n\n# \ub300\uc18c\ubb38\uc790 \ubcc0\ud658\nprint(text.upper())         # HELLO WORLD\nprint(text.lower())         # hello world\nprint(text.capitalize())    # Hello world (\uccab \uae00\uc790\ub9cc \ub300\ubb38\uc790)\nprint(text.title())         # Hello World (\uac01 \ub2e8\uc5b4 \uccab \uae00\uc790 \ub300\ubb38\uc790)\nprint(text.swapcase())      # hELLO wORLD (\ub300\uc18c\ubb38\uc790 \ubc18\uc804)\n\n# \ucf00\uc774\uc2a4 \ud655\uc778\nprint(text.isupper())       # False\nprint(text.islower())       # False\nprint(text.istitle())       # True\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#32","title":"3.2 \uacf5\ubc31 \ucc98\ub9ac \uba54\uc11c\ub4dc","text":"<pre><code>text = \"   Hello World   \"\n\n# \uacf5\ubc31 \uc81c\uac70\nprint(f\"'{text.strip()}'\")      # 'Hello World' (\uc591\ucabd \uacf5\ubc31 \uc81c\uac70)\nprint(f\"'{text.lstrip()}'\")     # 'Hello World   ' (\uc67c\ucabd \uacf5\ubc31 \uc81c\uac70)\nprint(f\"'{text.rstrip()}'\")     # '   Hello World' (\uc624\ub978\ucabd \uacf5\ubc31 \uc81c\uac70)\n\n# \ud2b9\uc815 \ubb38\uc790 \uc81c\uac70\ndata = \"...Hello World...\"\nprint(data.strip('.'))          # Hello World\n\n# \ubb38\uc790\uc5f4 \uc815\ub82c\nprint(text.strip().center(20, '*'))  # ****Hello World****\nprint(text.strip().ljust(20, '-'))   # Hello World--------\nprint(text.strip().rjust(20, '-'))   # --------Hello World\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#33","title":"3.3 \uac80\uc0c9\uacfc \ud655\uc778 \uba54\uc11c\ub4dc","text":"<pre><code>sentence = \"Python is easy to learn\"\n\n# \uac80\uc0c9 \uba54\uc11c\ub4dc\nprint(sentence.find('is'))          # 7 (\uccab \ubc88\uc9f8 \uc704\uce58)\nprint(sentence.find('Java'))        # -1 (\uc5c6\uc73c\uba74 -1 \ubc18\ud658)\nprint(sentence.index('is'))         # 7 (\uccab \ubc88\uc9f8 \uc704\uce58)\n# print(sentence.index('Java'))     # \uc624\ub958! ValueError\n\nprint(sentence.rfind('e'))          # 18 (\ub4a4\uc5d0\uc11c\ubd80\ud130 \uac80\uc0c9)\nprint(sentence.count('a'))          # 3 (\uac1c\uc218 \uc138\uae30)\n\n# \uc2dc\uc791/\ub05d \ud655\uc778\nprint(sentence.startswith('Python'))  # True\nprint(sentence.endswith('learn'))     # True\nprint(sentence.startswith('Java'))    # False\n\n# \ud3ec\ud568 \ud655\uc778 ('in' \uc5f0\uc0b0\uc790)\nprint('Python' in sentence)          # True\nprint('Java' in sentence)            # False\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#34","title":"3.4 \ubd84\ud560\uacfc \uacb0\ud569 \uba54\uc11c\ub4dc","text":"<pre><code># split() - \ubb38\uc790\uc5f4\uc744 \ub9ac\uc2a4\ud2b8\ub85c \ubd84\ud560\nsentence = \"Python,Java,JavaScript,C++\"\nlanguages = sentence.split(',')\nprint(languages)  # ['Python', 'Java', 'JavaScript', 'C++']\n\ntext = \"Hello World Python\"\nwords = text.split()  # \uacf5\ubc31\uc73c\ub85c \ubd84\ud560 (\uae30\ubcf8\uac12)\nprint(words)  # ['Hello', 'World', 'Python']\n\n# \ubd84\ud560 \uac1c\uc218 \uc81c\ud55c\ndata = \"apple-banana-cherry-date\"\nfruits = data.split('-', 2)  # \ucd5c\ub300 2\ubc88 \ubd84\ud560\nprint(fruits)  # ['apple', 'banana', 'cherry-date']\n\n# join() - \ub9ac\uc2a4\ud2b8\ub97c \ubb38\uc790\uc5f4\ub85c \uacb0\ud569\nwords = ['Python', 'is', 'awesome']\nsentence = ' '.join(words)\nprint(sentence)  # Python is awesome\n\nnumbers = ['1', '2', '3', '4', '5']\ncsv_data = ','.join(numbers)\nprint(csv_data)  # 1,2,3,4,5\n\n# \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c: \uacbd\ub85c \uacb0\ud569\npath_parts = ['home', 'user', 'documents', 'file.txt']\nfile_path = '/'.join(path_parts)\nprint(file_path)  # home/user/documents/file.txt\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#35","title":"3.5 \uce58\ud658 \uba54\uc11c\ub4dc","text":"<pre><code>text = \"Hello World Hello Python\"\n\n# replace() - \ubb38\uc790\uc5f4 \uce58\ud658\nnew_text = text.replace('Hello', 'Hi')\nprint(new_text)  # Hi World Hi Python\n\n# \uce58\ud658 \ud69f\uc218 \uc81c\ud55c\nnew_text = text.replace('Hello', 'Hi', 1)  # \uccab \ubc88\uc9f8 \uac83\ub9cc \uce58\ud658\nprint(new_text)  # Hi World Hello Python\n\n# \uc5ec\ub7ec \ubc88 \uce58\ud658\ud558\uae30\nmessage = \"I love cats and cats love me\"\nmessage = message.replace('cats', 'dogs')\nprint(message)  # I love dogs and dogs love me\n\n# \ubcf5\uc7a1\ud55c \uce58\ud658 \uc608\uc81c\ndef clean_phone_number(phone):\n    # \uc804\ud654\ubc88\ud638\uc5d0\uc11c \ubd88\ud544\uc694\ud55c \ubb38\uc790 \uc81c\uac70\n    phone = phone.replace('-', '')\n    phone = phone.replace(' ', '')\n    phone = phone.replace('(', '')\n    phone = phone.replace(')', '')\n    return phone\n\nphone = \"(010) 1234-5678\"\nclean_phone = clean_phone_number(phone)\nprint(clean_phone)  # 01012345678\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#4-string-formatting","title":"4. \ubb38\uc790\uc5f4 \ud3ec\ub9f7\ud305 (String Formatting)","text":""},{"location":"tutorials/beginner/chapter03_string_handling/#41-f-string","title":"4.1 f-string (\uad8c\uc7a5 \ubc29\ubc95)","text":"<pre><code>name = \"\uae40\ubbfc\uc218\"\nage = 25\nheight = 175.5\n\n# \uae30\ubcf8 f-string\nprint(f\"\uc774\ub984: {name}, \ub098\uc774: {age}\uc138\")\n\n# \uc218\uc2dd \uacc4\uc0b0\nprint(f\"\ud0dc\uc5b4\ub09c \ud574: {2024 - age}\ub144\")\n\n# \ud3ec\ub9f7 \uc9c0\uc815\nprint(f\"\ud0a4: {height:.1f}cm\")      # \uc18c\uc218\uc810 1\uc790\ub9ac\nprint(f\"\ub098\uc774: {age:02d}\uc138\")       # 2\uc790\ub9ac \uc218, \uc55e\uc5d0 0 \ucc44\uc6b0\uae30\n\n# \uc815\ub82c\nprint(f\"|{name:&gt;10}|\")           # \uc624\ub978\ucabd \uc815\ub82c (10\uc790\ub9ac)\nprint(f\"|{name:&lt;10}|\")           # \uc67c\ucabd \uc815\ub82c (10\uc790\ub9ac)\nprint(f\"|{name:^10}|\")           # \uac00\uc6b4\ub370 \uc815\ub82c (10\uc790\ub9ac)\n\n# \ucc9c \ub2e8\uc704 \uad6c\ubd84\uc790\nprice = 1234567\nprint(f\"\uac00\uaca9: {price:,}\uc6d0\")       # \uac00\uaca9: 1,234,567\uc6d0\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#42-format","title":"4.2 format() \uba54\uc11c\ub4dc","text":"<pre><code># \uae30\ubcf8 \uc0ac\uc6a9\ubc95\ntemplate = \"\uc774\ub984: {}, \ub098\uc774: {}\uc138\"\nprint(template.format(\"\uc774\uc601\ud76c\", 30))\n\n# \uc778\ub371\uc2a4 \uc9c0\uc815\ntemplate = \"\uc774\ub984: {0}, \ub098\uc774: {1}\uc138, \ub2e4\uc2dc \uc774\ub984: {0}\"\nprint(template.format(\"\uc774\uc601\ud76c\", 30))\n\n# \ud0a4\uc6cc\ub4dc \uc778\uc218\ntemplate = \"\uc774\ub984: {name}, \ub098\uc774: {age}\uc138\"\nprint(template.format(name=\"\uc774\uc601\ud76c\", age=30))\n\n# \ud3ec\ub9f7 \uc9c0\uc815\nprint(\"\uc6d0\uc8fc\uc728: {:.3f}\".format(3.14159))  # \uc18c\uc218\uc810 3\uc790\ub9ac\nprint(\"\ubc31\ubd84\uc728: {:.1%}\".format(0.85))     # \ud37c\uc13c\ud2b8 \ud615\uc2dd\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#43","title":"4.3 % \ud3ec\ub9f7\ud305 (\ub808\uac70\uc2dc)","text":"<pre><code># \uae30\ubcf8 \uc0ac\uc6a9\ubc95 (\uad8c\uc7a5\ud558\uc9c0 \uc54a\uc74c, \ud638\ud658\uc131\uc744 \uc704\ud574 \uc54c\uc544\ub450\uae30)\nname = \"\uae40\ucca0\uc218\"\nage = 28\nprint(\"\uc774\ub984: %s, \ub098\uc774: %d\uc138\" % (name, age))\n\n# \ud3ec\ub9f7 \uc9c0\uc815\npi = 3.14159\nprint(\"\uc6d0\uc8fc\uc728: %.2f\" % pi)  # \uc18c\uc218\uc810 2\uc790\ub9ac\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#44","title":"4.4 \uace0\uae09 \ud3ec\ub9f7\ud305 \uc608\uc81c","text":"<pre><code># \ud14c\uc774\ube14 \ud615\ud0dc \ucd9c\ub825\nstudents = [\n    (\"\uae40\ubbfc\uc218\", 25, 85.5),\n    (\"\uc774\uc601\ud76c\", 23, 92.0),\n    (\"\ubc15\ucca0\uc218\", 26, 78.5)\n]\n\nprint(\"\uc774\ub984      \ub098\uc774  \uc810\uc218\")\nprint(\"-\" * 20)\nfor name, age, score in students:\n    print(f\"{name:&lt;8} {age:&gt;3} {score:&gt;5.1f}\")\n\n# \uc9c4\ud589\ub960 \ud45c\uc2dc\ndef show_progress(current, total):\n    percentage = current / total\n    bar_length = 20\n    filled = int(bar_length * percentage)\n    bar = '\u2588' * filled + '\u2591' * (bar_length - filled)\n    return f\"[{bar}] {percentage:.1%} ({current}/{total})\"\n\nprint(show_progress(7, 10))  # [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591] 70.0% (7/10)\n\n# \ub85c\uadf8 \ud3ec\ub9f7\nimport datetime\n\ndef log_message(level, message):\n    timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    return f\"[{timestamp}] {level:&lt;5} {message}\"\n\nprint(log_message(\"INFO\", \"\ud504\ub85c\uadf8\ub7a8\uc774 \uc2dc\uc791\ub418\uc5c8\uc2b5\ub2c8\ub2e4\"))\nprint(log_message(\"ERROR\", \"\ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\"))\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#5-raw","title":"5. \uc774\uc2a4\ucf00\uc774\ud504 \ubb38\uc790\uc640 Raw \ubb38\uc790\uc5f4","text":""},{"location":"tutorials/beginner/chapter03_string_handling/#51","title":"5.1 \uc774\uc2a4\ucf00\uc774\ud504 \ubb38\uc790","text":"<pre><code># \uae30\ubcf8 \uc774\uc2a4\ucf00\uc774\ud504 \ubb38\uc790\nprint(\"\uccab \ubc88\uc9f8 \uc904\\n\ub450 \ubc88\uc9f8 \uc904\")        # \\n: \uc904\ubc14\uafc8\nprint(\"\uc774\ub984:\\t\uae40\ubbfc\uc218\")                 # \\t: \ud0ed\nprint(\"\uadf8\ub294 \\\"\uc548\ub155\\\"\uc774\ub77c\uace0 \ub9d0\ud588\ub2e4\")      # \\\": \ub530\uc634\ud45c\nprint(\"\ud30c\uc77c \uacbd\ub85c: C:\\\\Users\\\\kim\")      # \\\\: \ubc31\uc2ac\ub798\uc2dc\n\n# \uae30\ud0c0 \uc774\uc2a4\ucf00\uc774\ud504 \ubb38\uc790\nprint(\"\ubca8 \uc18c\ub9ac: \\a\")                   # \\a: \uacbd\uace0\uc74c\nprint(\"\ubc31\uc2a4\ud398\uc774\uc2a4: Hello\\b!\")          # \\b: \ubc31\uc2a4\ud398\uc774\uc2a4\nprint(\"\uce90\ub9ac\uc9c0 \ub9ac\ud134: Hello\\rHi\")        # \\r: \ucee4\uc11c\ub97c \uc904 \uc2dc\uc791\uc73c\ub85c\nprint(\"\uc138\ub85c \ud0ed: Line1\\vLine2\")         # \\v: \uc218\uc9c1 \ud0ed\n\n# \uc720\ub2c8\ucf54\ub4dc \ubb38\uc790\nprint(\"\ud558\ud2b8: \\u2665\")                  # \u2665\nprint(\"\uc2a4\ub9c8\uc77c: \\u263A\")                # \u263a\nprint(\"\ud55c\uae00: \\uD55C\\uAE00\")           # \ud55c\uae00\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#52-raw","title":"5.2 Raw \ubb38\uc790\uc5f4","text":"<p>Raw \ubb38\uc790\uc5f4\uc740 \uc774\uc2a4\ucf00\uc774\ud504 \ubb38\uc790\ub97c \ubb34\uc2dc\ud558\uace0 \ubb38\uc790 \uadf8\ub300\ub85c \ucc98\ub9ac\ud569\ub2c8\ub2e4.</p> <pre><code># \uc77c\ubc18 \ubb38\uc790\uc5f4 vs Raw \ubb38\uc790\uc5f4\nnormal_string = \"C:\\new\\text.txt\"\nraw_string = r\"C:\\new\\text.txt\"\n\nprint(\"\uc77c\ubc18:\", normal_string)  # C:\nprint(\"Raw:\", raw_string)     # C:\\new\\text.txt\n\n# \uc815\uaddc\ud45c\ud604\uc2dd\uc5d0\uc11c \uc720\uc6a9\nimport re\n\n# \uc77c\ubc18 \ubb38\uc790\uc5f4 (\ubcf5\uc7a1\ud568)\npattern1 = \"\\\\d+\\\\.\\\\d+\"  # \uc22b\uc790.\uc22b\uc790 \ud328\ud134\n# Raw \ubb38\uc790\uc5f4 (\uac04\ub2e8\ud568)\npattern2 = r\"\\d+\\.\\d+\"    # \uac19\uc740 \uc758\ubbf8\n\ntext = \"\uac00\uaca9\uc740 123.45\uc6d0\uc785\ub2c8\ub2e4\"\nmatch = re.search(pattern2, text)\nif match:\n    print(f\"\ucc3e\uc740 \uc22b\uc790: {match.group()}\")  # 123.45\n\n# \ud30c\uc77c \uacbd\ub85c \ucc98\ub9ac\nfile_path = r\"C:\\Users\\Documents\\data.txt\"\nprint(f\"\ud30c\uc77c \uacbd\ub85c: {file_path}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#53","title":"5.3 \uc0bc\uc911 \ub530\uc634\ud45c \ubb38\uc790\uc5f4","text":"<pre><code># \uc5ec\ub7ec \uc904 \ubb38\uc790\uc5f4\nmulti_line = \"\"\"\uccab \ubc88\uc9f8 \uc904\n\ub450 \ubc88\uc9f8 \uc904\n    \ub4e4\uc5ec\uc4f0\uae30\uac00 \uc788\ub294 \uc904\n\ub9c8\uc9c0\ub9c9 \uc904\"\"\"\n\nprint(multi_line)\n\n# \ubb38\uc11c\ud654 \ubb38\uc790\uc5f4 (docstring)\ndef calculate_area(radius):\n    \"\"\"\n    \uc6d0\uc758 \ub113\uc774\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n\n    Args:\n        radius (float): \uc6d0\uc758 \ubc18\uc9c0\ub984\n\n    Returns:\n        float: \uc6d0\uc758 \ub113\uc774\n    \"\"\"\n    return 3.14159 * radius ** 2\n\n# HTML/SQL \ub4f1 \uae34 \ud14d\uc2a4\ud2b8\nhtml_template = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{heading}&lt;/h1&gt;\n    &lt;p&gt;{content}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\nwebpage = html_template.format(\n    title=\"\ub0b4 \uc6f9\ud398\uc774\uc9c0\",\n    heading=\"\ud658\uc601\ud569\ub2c8\ub2e4\",\n    content=\"Python \ubb38\uc790\uc5f4 \ud559\uc2b5 \uc911\uc785\ub2c8\ub2e4.\"\n)\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#6","title":"6. \ubb38\uc790\uc5f4 \uac80\uc99d \uba54\uc11c\ub4dc","text":""},{"location":"tutorials/beginner/chapter03_string_handling/#61","title":"6.1 \ubb38\uc790 \ud0c0\uc785 \ud655\uc778","text":"<pre><code># \uc22b\uc790 \ud655\uc778\nprint(\"123\".isdigit())      # True  (\ubaa8\ub4e0 \ubb38\uc790\uac00 \uc22b\uc790)\nprint(\"12.3\".isdigit())     # False (\uc18c\uc218\uc810 \ud3ec\ud568)\nprint(\"-123\".isdigit())     # False (\uc74c\uc218 \uae30\ud638 \ud3ec\ud568)\n\nprint(\"123\".isdecimal())    # True  (\uc2ed\uc9c4\uc218)\nprint(\"\u00bd\".isdecimal())      # False (\ubd84\uc218)\n\nprint(\"123\".isnumeric())    # True  (\uc22b\uc790\ud615)\nprint(\"\u00bd\".isnumeric())      # True  (\ubd84\uc218\ub3c4 \uc22b\uc790\ud615)\nprint(\"\u2164\".isnumeric())      # True  (\ub85c\ub9c8 \uc22b\uc790)\n\n# \uc54c\ud30c\ubcb3 \ud655\uc778\nprint(\"Hello\".isalpha())    # True  (\ubaa8\ub4e0 \ubb38\uc790\uac00 \uc54c\ud30c\ubcb3)\nprint(\"Hello123\".isalpha()) # False (\uc22b\uc790 \ud3ec\ud568)\nprint(\"\uc548\ub155\".isalpha())     # True  (\ud55c\uae00\ub3c4 \uc54c\ud30c\ubcb3\uc73c\ub85c \uc778\uc2dd)\n\n# \uc54c\ud30c\ubcb3\uacfc \uc22b\uc790 \uc870\ud569 \ud655\uc778\nprint(\"Hello123\".isalnum()) # True  (\uc54c\ud30c\ubcb3 + \uc22b\uc790)\nprint(\"Hello 123\".isalnum()) # False (\uacf5\ubc31 \ud3ec\ud568)\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#62","title":"6.2 \uacf5\ubc31 \ubc0f \ud2b9\uc218 \ubb38\uc790 \ud655\uc778","text":"<pre><code># \uacf5\ubc31 \ud655\uc778\nprint(\" \".isspace())        # True  (\uacf5\ubc31)\nprint(\"\\t\\n\".isspace())     # True  (\ud0ed, \uac1c\ud589)\nprint(\"\".isspace())         # False (\ube48 \ubb38\uc790\uc5f4)\n\n# \ucd9c\ub825 \uac00\ub2a5\ud55c \ubb38\uc790 \ud655\uc778\nprint(\"Hello\".isprintable()) # True\nprint(\"Hello\\n\".isprintable()) # False (\uac1c\ud589 \ubb38\uc790 \ud3ec\ud568)\n\n# \uc2dd\ubcc4\uc790 \ud655\uc778 (\ubcc0\uc218\uba85\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud55c\uc9c0)\nprint(\"variable_name\".isidentifier())  # True\nprint(\"2nd_variable\".isidentifier())   # False (\uc22b\uc790\ub85c \uc2dc\uc791)\nprint(\"class\".isidentifier())          # True (\ud558\uc9c0\ub9cc \uc608\uc57d\uc5b4)\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#63","title":"6.3 \uc2e4\uc6a9\uc801\uc778 \uac80\uc99d \ud568\uc218\ub4e4","text":"<pre><code>def validate_email(email):\n    \"\"\"\uac04\ub2e8\ud55c \uc774\uba54\uc77c \uac80\uc99d\"\"\"\n    if '@' not in email:\n        return False\n    parts = email.split('@')\n    if len(parts) != 2:\n        return False\n    username, domain = parts\n    if not username or not domain:\n        return False\n    if '.' not in domain:\n        return False\n    return True\n\ndef validate_phone_korean(phone):\n    \"\"\"\ud55c\uad6d \uc804\ud654\ubc88\ud638 \uac80\uc99d (010-XXXX-XXXX \ud615\uc2dd)\"\"\"\n    # \ud558\uc774\ud508 \uc81c\uac70 \ud6c4 \uac80\uc99d\n    clean_phone = phone.replace('-', '')\n    if len(clean_phone) != 11:\n        return False\n    if not clean_phone.isdigit():\n        return False\n    if not clean_phone.startswith('010'):\n        return False\n    return True\n\ndef validate_password(password):\n    \"\"\"\ube44\ubc00\ubc88\ud638 \uac15\ub3c4 \uac80\uc99d\"\"\"\n    if len(password) &lt; 8:\n        return False, \"\ube44\ubc00\ubc88\ud638\ub294 \ucd5c\uc18c 8\uc790 \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4\"\n\n    has_upper = any(c.isupper() for c in password)\n    has_lower = any(c.islower() for c in password)\n    has_digit = any(c.isdigit() for c in password)\n    has_special = any(not c.isalnum() for c in password)\n\n    if not (has_upper and has_lower and has_digit and has_special):\n        return False, \"\ub300\ubb38\uc790, \uc18c\ubb38\uc790, \uc22b\uc790, \ud2b9\uc218\ubb38\uc790\ub97c \ubaa8\ub450 \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4\"\n\n    return True, \"\uc548\uc804\ud55c \ube44\ubc00\ubc88\ud638\uc785\ub2c8\ub2e4\"\n\n# \ud14c\uc2a4\ud2b8\nprint(validate_email(\"user@example.com\"))    # True\nprint(validate_phone_korean(\"010-1234-5678\")) # True\nprint(validate_password(\"MyPass123!\"))        # (True, '\uc548\uc804\ud55c \ube44\ubc00\ubc88\ud638\uc785\ub2c8\ub2e4')\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#7","title":"7. \uc2e4\uc2b5 \uc608\uc81c","text":""},{"location":"tutorials/beginner/chapter03_string_handling/#71","title":"7.1 \ubb38\uc790\uc5f4 \ubd84\uc11d\uae30","text":"<pre><code>def analyze_text(text):\n    \"\"\"\ud14d\uc2a4\ud2b8\ub97c \ubd84\uc11d\ud558\uc5ec \ub2e4\uc591\ud55c \ud1b5\uacc4\ub97c \uc81c\uacf5\"\"\"\n    # \uae30\ubcf8 \ud1b5\uacc4\n    char_count = len(text)\n    word_count = len(text.split())\n    line_count = text.count('\\n') + 1\n\n    # \ubb38\uc790 \ud0c0\uc785\ubcc4 \uac1c\uc218\n    letters = sum(1 for c in text if c.isalpha())\n    digits = sum(1 for c in text if c.isdigit())\n    spaces = sum(1 for c in text if c.isspace())\n    special = char_count - letters - digits - spaces\n\n    # \uac00\uc7a5 \uc790\uc8fc \uc0ac\uc6a9\ub41c \ub2e8\uc5b4\n    words = text.lower().split()\n    word_freq = {}\n    for word in words:\n        # \uad6c\ub450\uc810 \uc81c\uac70\n        clean_word = ''.join(c for c in word if c.isalnum())\n        if clean_word:\n            word_freq[clean_word] = word_freq.get(clean_word, 0) + 1\n\n    most_common = max(word_freq.items(), key=lambda x: x[1]) if word_freq else (\"\", 0)\n\n    # \uacb0\uacfc \ucd9c\ub825\n    print(\"=== \ud14d\uc2a4\ud2b8 \ubd84\uc11d \uacb0\uacfc ===\")\n    print(f\"\uc804\uccb4 \ubb38\uc790 \uc218: {char_count}\")\n    print(f\"\ub2e8\uc5b4 \uc218: {word_count}\")\n    print(f\"\uc904 \uc218: {line_count}\")\n    print(f\"\uc54c\ud30c\ubcb3: {letters}, \uc22b\uc790: {digits}, \uacf5\ubc31: {spaces}, \ud2b9\uc218\ubb38\uc790: {special}\")\n    print(f\"\uac00\uc7a5 \uc790\uc8fc \uc0ac\uc6a9\ub41c \ub2e8\uc5b4: '{most_common[0]}' ({most_common[1]}\ud68c)\")\n\n# \ud14c\uc2a4\ud2b8\nsample_text = \"\"\"\nPython\uc740 \ubc30\uc6b0\uae30 \uc27d\uace0 \uac15\ub825\ud55c \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc785\ub2c8\ub2e4.\nPython\uc744 \uc0ac\uc6a9\ud558\uba74 \uc6f9 \uac1c\ubc1c, \ub370\uc774\ud130 \ubd84\uc11d, AI \ub4f1 \ub2e4\uc591\ud55c \ubd84\uc57c\uc5d0\uc11c \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nPython Python Python!\n\"\"\"\n\nanalyze_text(sample_text)\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#72","title":"7.2 \uac04\ub2e8\ud55c \ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130 \uae30\ub2a5","text":"<pre><code>class SimpleTextEditor:\n    def __init__(self):\n        self.content = \"\"\n\n    def add_text(self, text):\n        \"\"\"\ud14d\uc2a4\ud2b8 \ucd94\uac00\"\"\"\n        self.content += text\n\n    def find_and_replace(self, find_text, replace_text):\n        \"\"\"\ucc3e\uae30 \ubc0f \ubc14\uafb8\uae30\"\"\"\n        count = self.content.count(find_text)\n        self.content = self.content.replace(find_text, replace_text)\n        return count\n\n    def word_count(self):\n        \"\"\"\ub2e8\uc5b4 \uac1c\uc218 \uc138\uae30\"\"\"\n        return len(self.content.split())\n\n    def get_lines(self):\n        \"\"\"\uc904\ubcc4\ub85c \ubd84\ub9ac\"\"\"\n        return self.content.split('\\n')\n\n    def format_text(self, style):\n        \"\"\"\ud14d\uc2a4\ud2b8 \ud3ec\ub9f7\ud305\"\"\"\n        if style == \"upper\":\n            self.content = self.content.upper()\n        elif style == \"lower\":\n            self.content = self.content.lower()\n        elif style == \"title\":\n            self.content = self.content.title()\n\n    def remove_extra_spaces(self):\n        \"\"\"\uc5ec\ubd84\uc758 \uacf5\ubc31 \uc81c\uac70\"\"\"\n        lines = []\n        for line in self.content.split('\\n'):\n            # \uac01 \uc904\uc758 \uc591\ucabd \uacf5\ubc31 \uc81c\uac70 \ud6c4, \uc5f0\uc18d\ub41c \uacf5\ubc31\uc744 \ud558\ub098\ub85c\n            clean_line = ' '.join(line.split())\n            lines.append(clean_line)\n        self.content = '\\n'.join(lines)\n\n    def get_statistics(self):\n        \"\"\"\ud1b5\uacc4 \uc815\ubcf4\"\"\"\n        return {\n            'characters': len(self.content),\n            'words': len(self.content.split()),\n            'lines': len(self.content.split('\\n')),\n            'paragraphs': len([p for p in self.content.split('\\n\\n') if p.strip()])\n        }\n\n    def display(self):\n        \"\"\"\ub0b4\uc6a9 \ucd9c\ub825\"\"\"\n        print(\"=== \ubb38\uc11c \ub0b4\uc6a9 ===\")\n        print(self.content)\n        print(\"\\n=== \ud1b5\uacc4 ===\")\n        stats = self.get_statistics()\n        for key, value in stats.items():\n            print(f\"{key}: {value}\")\n\n# \ud14c\uc2a4\ud2b8\neditor = SimpleTextEditor()\neditor.add_text(\"Python\uc740   \uc815\ub9d0  \uc88b\uc740   \uc5b8\uc5b4\uc785\ub2c8\ub2e4.\\n\")\neditor.add_text(\"python\uc744   \ubc30\uc6b0\uba74   \ub9ce\uc740  \uac83\uc744   \ud560   \uc218   \uc788\uc5b4\uc694!\")\n\nprint(\"\uc6d0\ubcf8:\")\neditor.display()\n\neditor.remove_extra_spaces()\nprint(\"\\n\uacf5\ubc31 \uc815\ub9ac \ud6c4:\")\neditor.display()\n\nreplaced_count = editor.find_and_replace(\"python\", \"Python\")\nprint(f\"\\n'python'\uc744 'Python'\uc73c\ub85c {replaced_count}\uac1c \uad50\uccb4\ud588\uc2b5\ub2c8\ub2e4.\")\neditor.display()\n</code></pre>"},{"location":"tutorials/beginner/chapter03_string_handling/#8","title":"8. \uc2e4\uc2b5 \uacfc\uc81c","text":""},{"location":"tutorials/beginner/chapter03_string_handling/#1","title":"\uacfc\uc81c 1: \ub2e8\uc5b4 \uac8c\uc784","text":"<p>\uc0ac\uc6a9\uc790\uac00 \uc785\ub825\ud55c \ubb38\uc7a5\uc5d0\uc11c \ud2b9\uc815 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub2e8\uc5b4\ub4e4\uc744 \ucc3e\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p> <p>\uc694\uad6c\uc0ac\ud56d: - \uc0ac\uc6a9\uc790\ub85c\ubd80\ud130 \ubb38\uc7a5 \uc785\ub825\ubc1b\uae30 - 5\uae00\uc790 \uc774\uc0c1\uc778 \ub2e8\uc5b4 \ucc3e\uae30 - \ubaa8\uc74c(a,e,i,o,u)\uc73c\ub85c \uc2dc\uc791\ud558\ub294 \ub2e8\uc5b4 \ucc3e\uae30 - \ub300\ubb38\uc790\ub85c \uc2dc\uc791\ud558\ub294 \ub2e8\uc5b4 \ucc3e\uae30 - \uac01 \uc870\uac74\ubcc4 \uacb0\uacfc\ub97c \ucd9c\ub825</p>"},{"location":"tutorials/beginner/chapter03_string_handling/#2","title":"\uacfc\uc81c 2: \uc774\ub984 \ud3ec\ub9f7\ud130","text":"<p>\ub2e4\uc591\ud55c \ud615\uc2dd\uc73c\ub85c \uc785\ub825\ub41c \uc774\ub984\uc744 \ud45c\uc900 \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p> <p>\uc694\uad6c\uc0ac\ud56d: - \uc785\ub825 \uc608\uc2dc: \"kim, min su\", \"KIM MIN SU\", \"kim_min_su\" \ub4f1 - \ucd9c\ub825 \ud615\uc2dd: \"Kim Min Su\" (\uac01 \ub2e8\uc5b4\uc758 \uccab \uae00\uc790\ub9cc \ub300\ubb38\uc790) - \ubd88\ud544\uc694\ud55c \uacf5\ubc31, \uc5b8\ub354\uc2a4\ucf54\uc5b4, \uc27c\ud45c \uc81c\uac70 - \uc5f0\uc18d\ub41c \uacf5\ubc31\uc744 \ud558\ub098\ub85c \ud1b5\ud569</p>"},{"location":"tutorials/beginner/chapter03_string_handling/#3","title":"\uacfc\uc81c 3: \uac04\ub2e8\ud55c \uc554\ud638\ud654","text":"<p>\uc2dc\uc800 \uc554\ud638(Caesar Cipher)\ub97c \uad6c\ud604\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p> <p>\uc694\uad6c\uc0ac\ud56d: - \uc54c\ud30c\ubcb3\ub9cc \uc554\ud638\ud654 (\ub300\uc18c\ubb38\uc790 \uad6c\ubd84) - \uc22b\uc790, \uacf5\ubc31, \ud2b9\uc218\ubb38\uc790\ub294 \uadf8\ub300\ub85c \uc720\uc9c0 - \uc554\ud638\ud654\uc640 \ubcf5\ud638\ud654 \uae30\ub2a5 \ubaa8\ub450 \uad6c\ud604 - \uc0ac\uc6a9\uc790\uac00 \uc774\ub3d9\ud560 \ubb38\uc790 \uc218(shift) \uc9c0\uc815 \uac00\ub2a5</p> <p>\uc608\uc2dc: - \uc785\ub825: \"Hello World!\", shift: 3 - \ucd9c\ub825: \"Khoor Zruog!\"</p>"},{"location":"tutorials/beginner/chapter03_string_handling/#9","title":"9. \ub2e4\uc74c \ucc55\ud130 \ubbf8\ub9ac\ubcf4\uae30","text":"<p>Chapter 4\uc5d0\uc11c\ub294 \ub2e4\uc74c \ub0b4\uc6a9\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4: - \uc0b0\uc220 \uc5f0\uc0b0\uc790: +, -, , /, //, %, ** - \ube44\uad50 \uc5f0\uc0b0\uc790: ==, !=, &lt;, &gt;, &lt;=, &gt;= - \ub17c\ub9ac \uc5f0\uc0b0\uc790: and, or, not - \ud560\ub2f9 \uc5f0\uc0b0\uc790: +=, -=, =, /= \ub4f1 - \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\uc640 \uacb0\ud569\uc131 - \ube44\ud2b8 \uc5f0\uc0b0\uc790 \uae30\ucd08</p>"},{"location":"tutorials/beginner/chapter03_string_handling/#10","title":"10. \ud575\uc2ec \uc815\ub9ac","text":"<p>\u2705 \ubb38\uc790\uc5f4 \uc778\ub371\uc2f1\uacfc \uc2ac\ub77c\uc774\uc2f1 - \uc778\ub371\uc2f1: <code>\ubb38\uc790\uc5f4[\uc778\ub371\uc2a4]</code> (0\ubd80\ud130 \uc2dc\uc791, \uc74c\uc218 \uac00\ub2a5) - \uc2ac\ub77c\uc774\uc2f1: <code>\ubb38\uc790\uc5f4[\uc2dc\uc791:\ub05d:\uac04\uaca9]</code> - \uc5ed\uc21c: <code>\ubb38\uc790\uc5f4[::-1]</code></p> <p>\u2705 \uc8fc\uc694 \ubb38\uc790\uc5f4 \uba54\uc11c\ub4dc - \ub300\uc18c\ubb38\uc790: <code>upper()</code>, <code>lower()</code>, <code>title()</code>, <code>capitalize()</code> - \uacf5\ubc31 \ucc98\ub9ac: <code>strip()</code>, <code>lstrip()</code>, <code>rstrip()</code> - \uac80\uc0c9: <code>find()</code>, <code>index()</code>, <code>count()</code>, <code>startswith()</code>, <code>endswith()</code> - \ubd84\ud560/\uacb0\ud569: <code>split()</code>, <code>join()</code> - \uce58\ud658: <code>replace()</code></p> <p>\u2705 \ubb38\uc790\uc5f4 \ud3ec\ub9f7\ud305 - f-string: <code>f\"Hello {name}\"</code> (\uad8c\uc7a5) - format(): <code>\"Hello {}\".format(name)</code> - % \ud3ec\ub9f7: <code>\"Hello %s\" % name</code> (\ub808\uac70\uc2dc)</p> <p>\u2705 \uc774\uc2a4\ucf00\uc774\ud504\uc640 Raw \ubb38\uc790\uc5f4 - \uc774\uc2a4\ucf00\uc774\ud504: <code>\\n</code>, <code>\\t</code>, <code>\\\"</code>, <code>\\\\</code> - Raw \ubb38\uc790\uc5f4: <code>r\"C:\\new\\text.txt\"</code> - \uc0bc\uc911 \ub530\uc634\ud45c: \uc5ec\ub7ec \uc904 \ubb38\uc790\uc5f4</p> <p>\u2705 \ubb38\uc790\uc5f4 \uac80\uc99d - \ud0c0\uc785 \ud655\uc778: <code>isdigit()</code>, <code>isalpha()</code>, <code>isalnum()</code> - \uacf5\ubc31 \ud655\uc778: <code>isspace()</code> - \uc2dd\ubcc4\uc790 \ud655\uc778: <code>isidentifier()</code></p> <p>\ud83c\udf89 \ucd95\ud558\ud569\ub2c8\ub2e4! Chapter 3\uc744 \uc644\ub8cc\ud588\uc2b5\ub2c8\ub2e4. \uc774\uc81c \ubb38\uc790\uc5f4\uc744 \uc790\uc720\uc790\uc7ac\ub85c \ub2e4\ub8f0 \uc218 \uc788\ub294 \ub2a5\ub825\uc744 \uac16\ucd94\uc5c8\uc2b5\ub2c8\ub2e4. Chapter 4\uc5d0\uc11c\ub294 \ub2e4\uc591\ud55c \uc5f0\uc0b0\uc790\ub4e4\uc744 \ud559\uc2b5\ud558\uc5ec \ub354 \ubcf5\uc7a1\ud55c \uacc4\uc0b0\uacfc \ub17c\ub9ac\ub97c \uad6c\ud604\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. </p>"},{"location":"tutorials/beginner/chapter04_operators_expressions/","title":"Chapter 4: \uc5f0\uc0b0\uc790\uc640 \ud45c\ud604\uc2dd","text":""},{"location":"tutorials/beginner/chapter04_operators_expressions/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \ub2e4\uc591\ud55c \uc0b0\uc220 \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc218\uce58 \uacc4\uc0b0\uc744 \uc218\ud589\ud55c\ub2e4 - \ube44\uad50 \uc5f0\uc0b0\uc790\ub85c \uac12\ub4e4\uc744 \ube44\uad50\ud558\uace0 \uc870\uac74\uc744 \ub9cc\ub4e0\ub2e4 - \ub17c\ub9ac \uc5f0\uc0b0\uc790\ub97c \ud65c\uc6a9\ud558\uc5ec \ubcf5\ud569 \uc870\uac74\uc744 \uad6c\uc131\ud55c\ub2e4 - \ud560\ub2f9 \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud6a8\uc728\uc801\uc73c\ub85c \uac12\uc744 \ud560\ub2f9\ud55c\ub2e4 - \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\ub97c \uc774\ud574\ud558\uace0 \uc62c\ubc14\ub978 \ud45c\ud604\uc2dd\uc744 \uc791\uc131\ud55c\ub2e4 - \ube44\ud2b8 \uc5f0\uc0b0\uc790\uc758 \uae30\ubcf8 \uac1c\ub150\uc744 \uc774\ud574\ud55c\ub2e4</p>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#1-arithmetic-operators","title":"1. \uc0b0\uc220 \uc5f0\uc0b0\uc790 (Arithmetic Operators)","text":""},{"location":"tutorials/beginner/chapter04_operators_expressions/#11","title":"1.1 \uae30\ubcf8 \uc0b0\uc220 \uc5f0\uc0b0\uc790","text":"<p>Python\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc8fc\uc694 \uc0b0\uc220 \uc5f0\uc0b0\uc790\ub4e4\uc785\ub2c8\ub2e4.</p> <pre><code># \uae30\ubcf8 \uc0b0\uc220 \uc5f0\uc0b0\na = 10\nb = 3\n\nprint(f\"\ub367\uc148: {a} + {b} = {a + b}\")        # 13\nprint(f\"\ube84\uc148: {a} - {b} = {a - b}\")        # 7\nprint(f\"\uacf1\uc148: {a} * {b} = {a * b}\")        # 30\nprint(f\"\ub098\ub217\uc148: {a} / {b} = {a / b}\")      # 3.333...\nprint(f\"\uc815\uc218 \ub098\ub217\uc148: {a} // {b} = {a // b}\")  # 3\nprint(f\"\ub098\uba38\uc9c0: {a} % {b} = {a % b}\")      # 1\nprint(f\"\uac70\ub4ed\uc81c\uacf1: {a} ** {b} = {a ** b}\")  # 1000\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#12","title":"1.2 \ub098\ub217\uc148 \uc5f0\uc0b0\uc790\uc758 \ucc28\uc774\uc810","text":"<pre><code># \uc77c\ubc18 \ub098\ub217\uc148 vs \uc815\uc218 \ub098\ub217\uc148\ndividend = 17\ndivisor = 5\n\nregular_division = dividend / divisor       # 3.4 (\uc2e4\uc218 \uacb0\uacfc)\nfloor_division = dividend // divisor        # 3 (\uc815\uc218 \uacb0\uacfc, \ub0b4\ub9bc)\nremainder = dividend % divisor              # 2 (\ub098\uba38\uc9c0)\n\nprint(f\"{dividend} \u00f7 {divisor} = {regular_division}\")\nprint(f\"{dividend} // {divisor} = {floor_division}\")\nprint(f\"{dividend} % {divisor} = {remainder}\")\n\n# \uac80\uc99d: \ub098\ub204\uc5b4\ub5a8\uc5b4\uc9c0\ub294 \uacf5\uc2dd\n# dividend = divisor * quotient + remainder\nresult = divisor * floor_division + remainder\nprint(f\"\uac80\uc99d: {divisor} * {floor_division} + {remainder} = {result}\")\n\n# \uc74c\uc218\uc5d0\uc11c\uc758 \uc815\uc218 \ub098\ub217\uc148\nprint(f\"-17 // 5 = {-17 // 5}\")   # -4 (\uc74c\uc758 \ubb34\ud55c\ub300 \ubc29\ud5a5\uc73c\ub85c \ub0b4\ub9bc)\nprint(f\"-17 % 5 = {-17 % 5}\")     # 3\nprint(f\"17 // -5 = {17 // -5}\")   # -4\nprint(f\"17 % -5 = {17 % -5}\")     # -3\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#13","title":"1.3 \uac70\ub4ed\uc81c\uacf1\uacfc \ub8e8\ud2b8 \uacc4\uc0b0","text":"<pre><code>import math\n\n# \uac70\ub4ed\uc81c\uacf1\nbase = 2\nexponent = 10\nresult = base ** exponent\nprint(f\"{base}^{exponent} = {result}\")  # 1024\n\n# \uc81c\uacf1\uadfc (math \ubaa8\ub4c8 \uc0ac\uc6a9)\nnumber = 16\nsqrt_result = math.sqrt(number)\nprint(f\"\u221a{number} = {sqrt_result}\")   # 4.0\n\n# n\uc81c\uacf1\uadfc (\uac70\ub4ed\uc81c\uacf1\uc758 \uc5ed\uc5f0\uc0b0)\n# n\uc81c\uacf1\uadfc = x^(1/n)\ncube_root = 27 ** (1/3)  # \uc138\uc81c\uacf1\uadfc\nprint(f\"\u221b27 = {cube_root}\")  # 3.0\n\n# \ubcf5\uc7a1\ud55c \uacc4\uc0b0 \uc608\uc81c\ndef quadratic_formula(a, b, c):\n    \"\"\"\uc774\ucc28\ubc29\uc815\uc2dd\uc758 \ud574\ub97c \uad6c\ud558\ub294 \ud568\uc218\"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant &lt; 0:\n        return \"\uc2e4\uadfc\uc774 \uc5c6\uc2b5\ub2c8\ub2e4\"\n    elif discriminant == 0:\n        x = -b / (2*a)\n        return f\"\uc911\uadfc: x = {x}\"\n    else:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return f\"\ub450 \uc2e4\uadfc: x1 = {x1}, x2 = {x2}\"\n\n# \uc774\ucc28\ubc29\uc815\uc2dd x\u00b2 - 5x + 6 = 0\nprint(quadratic_formula(1, -5, 6))  # \ub450 \uc2e4\uadfc: x1 = 3.0, x2 = 2.0\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#14","title":"1.4 \uc2e4\uc6a9\uc801\uc778 \uc0b0\uc220 \uc5f0\uc0b0 \uc608\uc81c","text":"<pre><code># \ubcf5\ub9ac \uacc4\uc0b0\uae30\ndef compound_interest(principal, rate, time, compound_freq):\n    \"\"\"\ubcf5\ub9ac \uc774\uc790 \uacc4\uc0b0\"\"\"\n    amount = principal * (1 + rate/compound_freq) ** (compound_freq * time)\n    interest = amount - principal\n    return amount, interest\n\n# \uc5f0 5% \uc774\uc790, 3\ub144\uac04, \uc6d4\ubcf5\ub9ac\nprincipal = 1000000  # \uc6d0\uae08 100\ub9cc\uc6d0\nrate = 0.05         # \uc5f0 5%\ntime = 3            # 3\ub144\ncompound_freq = 12  # \uc6d4\ubcf5\ub9ac\n\nfinal_amount, earned_interest = compound_interest(principal, rate, time, compound_freq)\nprint(f\"\uc6d0\uae08: {principal:,}\uc6d0\")\nprint(f\"\ucd5c\uc885 \uae08\uc561: {final_amount:,.0f}\uc6d0\")\nprint(f\"\uc774\uc790 \uc218\uc775: {earned_interest:,.0f}\uc6d0\")\n\n# BMI \uacc4\uc0b0\uae30\ndef calculate_bmi(weight, height):\n    \"\"\"BMI(\uccb4\uc9c8\ub7c9\uc9c0\uc218) \uacc4\uc0b0\"\"\"\n    bmi = weight / (height ** 2)\n\n    if bmi &lt; 18.5:\n        category = \"\uc800\uccb4\uc911\"\n    elif bmi &lt; 25:\n        category = \"\uc815\uc0c1\uccb4\uc911\"\n    elif bmi &lt; 30:\n        category = \"\uacfc\uccb4\uc911\"\n    else:\n        category = \"\ube44\ub9cc\"\n\n    return bmi, category\n\nweight = 70  # kg\nheight = 1.75  # m\nbmi, category = calculate_bmi(weight, height)\nprint(f\"BMI: {bmi:.2f} ({category})\")\n\n# \uac70\ub9ac\uc640 \uc18d\ub3c4 \uacc4\uc0b0\ndef time_to_destination(distance, speed):\n    \"\"\"\ubaa9\uc801\uc9c0\uae4c\uc9c0\uc758 \uc18c\uc694 \uc2dc\uac04 \uacc4\uc0b0\"\"\"\n    hours = distance // speed\n    minutes = (distance % speed) / speed * 60\n    return int(hours), int(minutes)\n\ndistance = 157  # km\nspeed = 80     # km/h\nhours, minutes = time_to_destination(distance, speed)\nprint(f\"{distance}km\ub97c {speed}km/h\ub85c \uc774\ub3d9 \uc2dc \uc18c\uc694\uc2dc\uac04: {hours}\uc2dc\uac04 {minutes}\ubd84\")\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#2-comparison-operators","title":"2. \ube44\uad50 \uc5f0\uc0b0\uc790 (Comparison Operators)","text":""},{"location":"tutorials/beginner/chapter04_operators_expressions/#21","title":"2.1 \uae30\ubcf8 \ube44\uad50 \uc5f0\uc0b0\uc790","text":"<pre><code># \uc22b\uc790 \ube44\uad50\na = 10\nb = 20\nc = 10\n\nprint(f\"{a} == {b}: {a == b}\")  # False (\uac19\uc74c)\nprint(f\"{a} != {b}: {a != b}\")  # True (\ub2e4\ub984)\nprint(f\"{a} &lt; {b}: {a &lt; b}\")    # True (\uc791\uc74c)\nprint(f\"{a} &lt;= {c}: {a &lt;= c}\")  # True (\uc791\uac70\ub098 \uac19\uc74c)\nprint(f\"{b} &gt; {a}: {b &gt; a}\")    # True (\ud07c)\nprint(f\"{b} &gt;= {c}: {b &gt;= c}\")  # True (\ud06c\uac70\ub098 \uac19\uc74c)\n\n# \ubb38\uc790\uc5f4 \ube44\uad50 (\uc0ac\uc804\uc21c)\nname1 = \"Alice\"\nname2 = \"Bob\"\nname3 = \"alice\"\n\nprint(f\"'{name1}' == '{name2}': {name1 == name2}\")  # False\nprint(f\"'{name1}' &lt; '{name2}': {name1 &lt; name2}\")    # True (\uc0ac\uc804\uc21c)\nprint(f\"'{name1}' == '{name3}': {name1 == name3}\")  # False (\ub300\uc18c\ubb38\uc790 \uad6c\ubd84)\nprint(f\"'{name1}'.lower() == '{name3}': {name1.lower() == name3}\")  # True\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#22-chained-comparisons","title":"2.2 \uc5f0\uc1c4 \ube44\uad50 (Chained Comparisons)","text":"<pre><code># Python\uc758 \ud2b9\ubcc4\ud55c \uae30\ub2a5: \uc5f0\uc1c4 \ube44\uad50\nx = 15\n\n# \uc218\ud559\uc801 \ud45c\ud604\uacfc \uac19\uc740 \ubc29\uc2dd\nprint(f\"10 &lt; {x} &lt; 20: {10 &lt; x &lt; 20}\")  # True\nprint(f\"0 &lt;= {x} &lt;= 10: {0 &lt;= x &lt;= 10}\")  # False\n\n# \uc5ec\ub7ec \uc870\uac74\uc744 \ud55c \ubc88\uc5d0 \uac80\uc0ac\nscore = 85\nprint(f\"0 &lt;= {score} &lt;= 100: {0 &lt;= score &lt;= 100}\")  # True (\uc720\ud6a8\ud55c \uc810\uc218)\n\n# \ub4f1\uae09 \ud310\uc815 \uc2dc\uc2a4\ud15c\ndef get_grade(score):\n    if 90 &lt;= score &lt;= 100:\n        return 'A'\n    elif 80 &lt;= score &lt; 90:\n        return 'B'\n    elif 70 &lt;= score &lt; 80:\n        return 'C'\n    elif 60 &lt;= score &lt; 70:\n        return 'D'\n    else:\n        return 'F'\n\n# \ud14c\uc2a4\ud2b8\nscores = [95, 87, 76, 63, 45]\nfor score in scores:\n    grade = get_grade(score)\n    print(f\"\uc810\uc218 {score}: {grade}\ub4f1\uae09\")\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#23","title":"2.3 \ud2b9\uc218\ud55c \ube44\uad50 \uc0c1\ud669\ub4e4","text":"<pre><code># \ubd80\ub3d9\uc18c\uc218\uc810 \ube44\uad50\uc758 \uc8fc\uc758\uc0ac\ud56d\nresult1 = 0.1 + 0.2\nresult2 = 0.3\n\nprint(f\"0.1 + 0.2 = {result1}\")\nprint(f\"0.3 = {result2}\")\nprint(f\"0.1 + 0.2 == 0.3: {result1 == result2}\")  # False!\n\n# \ud574\uacb0 \ubc29\ubc95: \uadfc\uc0ac \ube44\uad50\ndef almost_equal(a, b, tolerance=1e-9):\n    return abs(a - b) &lt; tolerance\n\nprint(f\"\uadfc\uc0ac \ube44\uad50: {almost_equal(result1, result2)}\")  # True\n\n# None\uacfc\uc758 \ube44\uad50\nvalue = None\nprint(f\"value is None: {value is None}\")      # True (\uad8c\uc7a5)\nprint(f\"value == None: {value == None}\")      # True (\ube44\uad8c\uc7a5)\n\n# \ub9ac\uc2a4\ud2b8 \ube44\uad50\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]\nlist3 = list1\n\nprint(f\"list1 == list2: {list1 == list2}\")    # True (\ub0b4\uc6a9 \ube44\uad50)\nprint(f\"list1 is list2: {list1 is list2}\")    # False (\uac1d\uccb4 \ube44\uad50)\nprint(f\"list1 is list3: {list1 is list3}\")    # True (\uac19\uc740 \uac1d\uccb4)\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#24","title":"2.4 \ube44\uad50 \uc5f0\uc0b0\uc790 \ud65c\uc6a9 \uc608\uc81c","text":"<pre><code># \ub098\uc774 \uac80\uc99d \uc2dc\uc2a4\ud15c\ndef validate_age(age):\n    \"\"\"\ub098\uc774 \uc720\ud6a8\uc131 \uac80\uc0ac\"\"\"\n    if not isinstance(age, (int, float)):\n        return False, \"\ub098\uc774\ub294 \uc22b\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4\"\n\n    if age &lt; 0:\n        return False, \"\ub098\uc774\ub294 \uc74c\uc218\uc77c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\"\n    elif age &gt; 150:\n        return False, \"\ub098\uc774\uac00 \ub108\ubb34 \ud07d\ub2c8\ub2e4\"\n    else:\n        return True, \"\uc720\ud6a8\ud55c \ub098\uc774\uc785\ub2c8\ub2e4\"\n\n# \ud14c\uc2a4\ud2b8\nages = [25, -5, 200, \"30\", 0, 100]\nfor age in ages:\n    is_valid, message = validate_age(age)\n    print(f\"\ub098\uc774 {age}: {message}\")\n\n# \ube44\ubc00\ubc88\ud638 \uac15\ub3c4 \uac80\uc0ac\ndef check_password_strength(password):\n    \"\"\"\ube44\ubc00\ubc88\ud638 \uac15\ub3c4 \uac80\uc0ac\"\"\"\n    score = 0\n    feedback = []\n\n    # \uae38\uc774 \uac80\uc0ac\n    if len(password) &gt;= 8:\n        score += 1\n    else:\n        feedback.append(\"8\uc790 \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4\")\n\n    # \ub300\ubb38\uc790 \ud3ec\ud568\n    if any(c.isupper() for c in password):\n        score += 1\n    else:\n        feedback.append(\"\ub300\ubb38\uc790\ub97c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4\")\n\n    # \uc18c\ubb38\uc790 \ud3ec\ud568\n    if any(c.islower() for c in password):\n        score += 1\n    else:\n        feedback.append(\"\uc18c\ubb38\uc790\ub97c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4\")\n\n    # \uc22b\uc790 \ud3ec\ud568\n    if any(c.isdigit() for c in password):\n        score += 1\n    else:\n        feedback.append(\"\uc22b\uc790\ub97c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4\")\n\n    # \ud2b9\uc218\ubb38\uc790 \ud3ec\ud568\n    special_chars = \"!@#$%^&amp;*()_+-=[]{}|;:,.&lt;&gt;?\"\n    if any(c in special_chars for c in password):\n        score += 1\n    else:\n        feedback.append(\"\ud2b9\uc218\ubb38\uc790\ub97c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4\")\n\n    # \uac15\ub3c4 \ud310\uc815\n    if score == 5:\n        strength = \"\ub9e4\uc6b0 \uac15\ud568\"\n    elif score &gt;= 4:\n        strength = \"\uac15\ud568\"\n    elif score &gt;= 3:\n        strength = \"\ubcf4\ud1b5\"\n    elif score &gt;= 2:\n        strength = \"\uc57d\ud568\"\n    else:\n        strength = \"\ub9e4\uc6b0 \uc57d\ud568\"\n\n    return score, strength, feedback\n\n# \ud14c\uc2a4\ud2b8\npasswords = [\"password\", \"Password123\", \"MyP@ssw0rd!\", \"123\", \"Aa1!\"]\nfor pwd in passwords:\n    score, strength, feedback = check_password_strength(pwd)\n    print(f\"'{pwd}': {strength} ({score}/5)\")\n    if feedback:\n        print(f\"  \uac1c\uc120\uc0ac\ud56d: {', '.join(feedback)}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#3-logical-operators","title":"3. \ub17c\ub9ac \uc5f0\uc0b0\uc790 (Logical Operators)","text":""},{"location":"tutorials/beginner/chapter04_operators_expressions/#31","title":"3.1 \uae30\ubcf8 \ub17c\ub9ac \uc5f0\uc0b0\uc790","text":"<pre><code># \ub17c\ub9ac \uc5f0\uc0b0\uc790: and, or, not\nx = True\ny = False\n\nprint(f\"x and y: {x and y}\")    # False\nprint(f\"x or y: {x or y}\")      # True\nprint(f\"not x: {not x}\")        # False\nprint(f\"not y: {not y}\")        # True\n\n# \uc2e4\uc81c \uc870\uac74\uc5d0\uc11c\uc758 \uc0ac\uc6a9\nage = 25\nhas_license = True\nhas_car = False\n\n# \uc6b4\uc804 \uac00\ub2a5 \uc870\uac74\ncan_drive = age &gt;= 18 and has_license\nprint(f\"\uc6b4\uc804 \uac00\ub2a5: {can_drive}\")  # True\n\n# \uce74\ud480 \uac00\ub2a5 \uc870\uac74\ncan_carpool = can_drive and has_car\nprint(f\"\uce74\ud480 \uac00\ub2a5: {can_carpool}\")  # False\n\n# \ub300\uc911\uad50\ud1b5 \uc774\uc6a9 \uc870\uac74\nuse_public_transport = not has_car or not has_license\nprint(f\"\ub300\uc911\uad50\ud1b5 \uc774\uc6a9: {use_public_transport}\")  # True\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#32-short-circuit-evaluation","title":"3.2 \ub17c\ub9ac \uc5f0\uc0b0\uc790\uc758 \ub2e8\ucd95 \ud3c9\uac00 (Short-circuit Evaluation)","text":"<pre><code># and \uc5f0\uc0b0\uc758 \ub2e8\ucd95 \ud3c9\uac00\ndef expensive_function():\n    print(\"\ubcf5\uc7a1\ud55c \uacc4\uc0b0 \uc2e4\ud589 \uc911...\")\n    return True\n\ncondition1 = False\ncondition2 = expensive_function()\n\n# False and anything\uc740 \ud56d\uc0c1 False\uc774\ubbc0\ub85c \n# expensive_function()\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc74c\nresult = condition1 and expensive_function()  \nprint(f\"\uacb0\uacfc: {result}\")  # \"\ubcf5\uc7a1\ud55c \uacc4\uc0b0 \uc2e4\ud589 \uc911...\" \ucd9c\ub825 \uc5c6\uc74c\n\n# or \uc5f0\uc0b0\uc758 \ub2e8\ucd95 \ud3c9\uac00\ncondition1 = True\n# True or anything\uc740 \ud56d\uc0c1 True\uc774\ubbc0\ub85c\n# expensive_function()\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc74c\nresult = condition1 or expensive_function()\nprint(f\"\uacb0\uacfc: {result}\")  # \"\ubcf5\uc7a1\ud55c \uacc4\uc0b0 \uc2e4\ud589 \uc911...\" \ucd9c\ub825 \uc5c6\uc74c\n\n# \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c: \uc548\uc804\ud55c \ub098\ub217\uc148\ndef safe_divide(a, b):\n    # b\uac00 0\uc774 \uc544\ub2d0 \ub54c\ub9cc \ub098\ub217\uc148 \uc2e4\ud589\n    if b != 0 and a / b &gt; 10:\n        return \"\ud070 \uc218\"\n    elif b != 0:\n        return a / b\n    else:\n        return \"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc74c\"\n\nprint(safe_divide(20, 2))  # 10.0\nprint(safe_divide(100, 5))  # \ud070 \uc218\nprint(safe_divide(10, 0))   # 0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc74c\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#33","title":"3.3 \ubcf5\ud569 \ub17c\ub9ac \ud45c\ud604\uc2dd","text":"<pre><code># \ud559\uc810 \uacc4\uc0b0 \uc2dc\uc2a4\ud15c\ndef calculate_grade(midterm, final, attendance):\n    \"\"\"\n    \uc911\uac04\uace0\uc0ac, \uae30\ub9d0\uace0\uc0ac, \ucd9c\uc11d\ub960\uc744 \uae30\ubc18\uc73c\ub85c \ud559\uc810 \uacc4\uc0b0\n    \uc870\uac74:\n    - A: \ub450 \uc2dc\ud5d8 \ubaa8\ub450 90\uc810 \uc774\uc0c1\uc774\uace0 \ucd9c\uc11d\ub960 95% \uc774\uc0c1\n    - B: \ub450 \uc2dc\ud5d8 \ud3c9\uade0 80\uc810 \uc774\uc0c1\uc774\uace0 \ucd9c\uc11d\ub960 90% \uc774\uc0c1\n    - C: \ub450 \uc2dc\ud5d8 \ud3c9\uade0 70\uc810 \uc774\uc0c1\uc774\uace0 \ucd9c\uc11d\ub960 80% \uc774\uc0c1\n    - D: \ub450 \uc2dc\ud5d8 \ud3c9\uade0 60\uc810 \uc774\uc0c1\uc774\uace0 \ucd9c\uc11d\ub960 70% \uc774\uc0c1\n    - F: \uadf8 \uc678\n    \"\"\"\n    average = (midterm + final) / 2\n\n    if midterm &gt;= 90 and final &gt;= 90 and attendance &gt;= 95:\n        return 'A'\n    elif average &gt;= 80 and attendance &gt;= 90:\n        return 'B'\n    elif average &gt;= 70 and attendance &gt;= 80:\n        return 'C'\n    elif average &gt;= 60 and attendance &gt;= 70:\n        return 'D'\n    else:\n        return 'F'\n\n# \ud559\uc0dd\ub4e4 \uc131\uc801 \ucc98\ub9ac\nstudents = [\n    (\"\uae40\ucca0\uc218\", 95, 92, 98),\n    (\"\uc774\uc601\ud76c\", 85, 88, 92),\n    (\"\ubc15\ubbfc\uc218\", 75, 70, 85),\n    (\"\ucd5c\uc18c\uc601\", 65, 68, 75),\n    (\"\uc815\ub300\ud55c\", 55, 60, 65)\n]\n\nprint(\"\ud559\uc810 \uacb0\uacfc:\")\nfor name, midterm, final, attendance in students:\n    grade = calculate_grade(midterm, final, attendance)\n    average = (midterm + final) / 2\n    print(f\"{name}: \ud3c9\uade0 {average:.1f}\uc810, \ucd9c\uc11d\ub960 {attendance}% \u2192 {grade}\ud559\uc810\")\n\n# \ud68c\uc6d0 \ub4f1\uae09 \uc2dc\uc2a4\ud15c\ndef determine_membership_level(purchases, years, amount_spent):\n    \"\"\"\n    \uad6c\ub9e4 \ud69f\uc218, \ud68c\uc6d0 \uae30\uac04, \ucd1d \uad6c\ub9e4 \uae08\uc561\uc5d0 \ub530\ub978 \ub4f1\uae09 \uacb0\uc815\n    \"\"\"\n    # VIP: 3\ub144 \uc774\uc0c1 &amp; (\uad6c\ub9e4 50\ud68c \uc774\uc0c1 or 100\ub9cc\uc6d0 \uc774\uc0c1)\n    if years &gt;= 3 and (purchases &gt;= 50 or amount_spent &gt;= 1000000):\n        return \"VIP\"\n    # Gold: 2\ub144 \uc774\uc0c1 &amp; (\uad6c\ub9e4 30\ud68c \uc774\uc0c1 or 50\ub9cc\uc6d0 \uc774\uc0c1)\n    elif years &gt;= 2 and (purchases &gt;= 30 or amount_spent &gt;= 500000):\n        return \"Gold\"\n    # Silver: 1\ub144 \uc774\uc0c1 &amp; (\uad6c\ub9e4 10\ud68c \uc774\uc0c1 or 20\ub9cc\uc6d0 \uc774\uc0c1)\n    elif years &gt;= 1 and (purchases &gt;= 10 or amount_spent &gt;= 200000):\n        return \"Silver\"\n    else:\n        return \"Bronze\"\n\n# \ud14c\uc2a4\ud2b8\nmembers = [\n    (\"\uace0\uac1dA\", 60, 4, 1200000),\n    (\"\uace0\uac1dB\", 35, 3, 800000),\n    (\"\uace0\uac1dC\", 25, 2, 600000),\n    (\"\uace0\uac1dD\", 15, 1, 300000),\n    (\"\uace0\uac1dE\", 5, 0.5, 100000)\n]\n\nprint(\"\\n\ud68c\uc6d0 \ub4f1\uae09:\")\nfor name, purchases, years, amount in members:\n    level = determine_membership_level(purchases, years, amount)\n    print(f\"{name}: \uad6c\ub9e4 {purchases}\ud68c, {years}\ub144, {amount:,}\uc6d0 \u2192 {level}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#34-de-morgans-laws","title":"3.4 \ub4dc\ubaa8\ub974\uac04 \ubc95\uce59 (De Morgan's Laws)","text":"<pre><code># \ub4dc\ubaa8\ub974\uac04 \ubc95\uce59: not (A and B) == (not A) or (not B)\n#              not (A or B) == (not A) and (not B)\n\nA = True\nB = False\n\n# \ubc95\uce59 1: not (A and B) == (not A) or (not B)\nleft_side = not (A and B)\nright_side = (not A) or (not B)\nprint(f\"not ({A} and {B}) = {left_side}\")\nprint(f\"(not {A}) or (not {B}) = {right_side}\")\nprint(f\"\ub450 \uacb0\uacfc\uac00 \uac19\uc740\uac00? {left_side == right_side}\")\n\n# \ubc95\uce59 2: not (A or B) == (not A) and (not B)\nleft_side = not (A or B)\nright_side = (not A) and (not B)\nprint(f\"\\nnot ({A} or {B}) = {left_side}\")\nprint(f\"(not {A}) and (not {B}) = {right_side}\")\nprint(f\"\ub450 \uacb0\uacfc\uac00 \uac19\uc740\uac00? {left_side == right_side}\")\n\n# \uc2e4\uc6a9\uc801\uc778 \uc608: \uc811\uadfc \uad8c\ud55c \uc2dc\uc2a4\ud15c\ndef check_access_original(is_admin, is_member, is_banned):\n    \"\"\"\uc6d0\ub798 \uc870\uac74: \uad00\ub9ac\uc790\uc774\uac70\ub098 \ud68c\uc6d0\uc774\uba74\uc11c \ucc28\ub2e8\ub418\uc9c0 \uc54a\uc740 \uacbd\uc6b0\"\"\"\n    return (is_admin or is_member) and not is_banned\n\ndef check_access_demorgan(is_admin, is_member, is_banned):\n    \"\"\"\ub4dc\ubaa8\ub974\uac04 \ubc95\uce59 \uc801\uc6a9: \ucc28\ub2e8\ub418\uc9c0 \uc54a\uc558\uace0 (\uad00\ub9ac\uc790\uc774\uac70\ub098 \ud68c\uc6d0)\"\"\"\n    # not banned and (admin or member)\n    return not is_banned and (is_admin or is_member)\n\n# \ud14c\uc2a4\ud2b8\ntest_cases = [\n    (True, True, False),   # \uad00\ub9ac\uc790, \ud68c\uc6d0, \ucc28\ub2e8\uc548\ub428\n    (False, True, False),  # \uc77c\ubc18\ud68c\uc6d0, \ucc28\ub2e8\uc548\ub428\n    (True, False, True),   # \uad00\ub9ac\uc790, \ucc28\ub2e8\ub428\n    (False, False, False)  # \ube44\ud68c\uc6d0, \ucc28\ub2e8\uc548\ub428\n]\n\nfor is_admin, is_member, is_banned in test_cases:\n    result1 = check_access_original(is_admin, is_member, is_banned)\n    result2 = check_access_demorgan(is_admin, is_member, is_banned)\n    print(f\"\uad00\ub9ac\uc790: {is_admin}, \ud68c\uc6d0: {is_member}, \ucc28\ub2e8: {is_banned}\")\n    print(f\"  \uc811\uadfc \uac00\ub2a5: {result1} (\uacb0\uacfc \uc77c\uce58: {result1 == result2})\")\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#4-assignment-operators","title":"4. \ud560\ub2f9 \uc5f0\uc0b0\uc790 (Assignment Operators)","text":""},{"location":"tutorials/beginner/chapter04_operators_expressions/#41","title":"4.1 \uae30\ubcf8 \ud560\ub2f9\uacfc \ubcf5\ud569 \ud560\ub2f9 \uc5f0\uc0b0\uc790","text":"<pre><code># \uae30\ubcf8 \ud560\ub2f9\nx = 10\nprint(f\"x = {x}\")\n\n# \ubcf5\ud569 \ud560\ub2f9 \uc5f0\uc0b0\uc790\ub4e4\nx += 5   # x = x + 5\nprint(f\"x += 5: {x}\")   # 15\n\nx -= 3   # x = x - 3\nprint(f\"x -= 3: {x}\")   # 12\n\nx *= 2   # x = x * 2\nprint(f\"x *= 2: {x}\")   # 24\n\nx /= 4   # x = x / 4\nprint(f\"x /= 4: {x}\")   # 6.0\n\nx //= 2  # x = x // 2\nprint(f\"x //= 2: {x}\")  # 3.0\n\nx %= 2   # x = x % 2\nprint(f\"x %= 2: {x}\")   # 1.0\n\nx **= 3  # x = x ** 3\nprint(f\"x **= 3: {x}\")  # 1.0\n\n# \ubb38\uc790\uc5f4\uc5d0\uc11c\uc758 \ubcf5\ud569 \ud560\ub2f9\nmessage = \"Hello\"\nmessage += \" World\"\nprint(f\"\ubb38\uc790\uc5f4 \ub367\uc148: {message}\")  # Hello World\n\nmessage *= 2\nprint(f\"\ubb38\uc790\uc5f4 \uacf1\uc148: {message}\")  # Hello WorldHello World\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#42","title":"4.2 \ub9ac\uc2a4\ud2b8\uc640 \ubcf5\ud569 \ud560\ub2f9","text":"<pre><code># \ub9ac\uc2a4\ud2b8\uc5d0\uc11c\uc758 \ubcf5\ud569 \ud560\ub2f9\nnumbers = [1, 2, 3]\nprint(f\"\uc6d0\ubcf8 \ub9ac\uc2a4\ud2b8: {numbers}\")\n\nnumbers += [4, 5]  # extend\uc640 \uac19\uc740 \ud6a8\uacfc\nprint(f\"numbers += [4, 5]: {numbers}\")  # [1, 2, 3, 4, 5]\n\nnumbers *= 2  # \ub9ac\uc2a4\ud2b8 \ubc18\ubcf5\nprint(f\"numbers *= 2: {numbers}\")  # [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n\n# \uc8fc\uc758: += \uc640 append\uc758 \ucc28\uc774\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]\n\nlist1 += [4, 5]      # [1, 2, 3, 4, 5]\nlist2.append([4, 5]) # [1, 2, 3, [4, 5]]\n\nprint(f\"list1 += [4, 5]: {list1}\")\nprint(f\"list2.append([4, 5]): {list2}\")\n\n# \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c: \uc810\uc218 \ub204\uc801 \uacc4\uc0b0\uae30\nclass ScoreTracker:\n    def __init__(self):\n        self.total_score = 0\n        self.game_count = 0\n        self.scores = []\n\n    def add_score(self, score):\n        self.total_score += score\n        self.game_count += 1\n        self.scores += [score]  # \ub610\ub294 self.scores.append(score)\n\n    def get_average(self):\n        if self.game_count == 0:\n            return 0\n        return self.total_score / self.game_count\n\n    def apply_bonus(self, multiplier):\n        self.total_score *= multiplier\n        # \uac01 \uc810\uc218\uc5d0\ub3c4 \ubcf4\ub108\uc2a4 \uc801\uc6a9\n        self.scores = [score * multiplier for score in self.scores]\n\n# \uc0ac\uc6a9 \uc608\uc81c\ntracker = ScoreTracker()\ngame_scores = [85, 92, 78, 96, 88]\n\nfor i, score in enumerate(game_scores, 1):\n    tracker.add_score(score)\n    print(f\"\uac8c\uc784 {i}: {score}\uc810, \ub204\uc801 \ud3c9\uade0: {tracker.get_average():.1f}\uc810\")\n\nprint(f\"\\n\ubcf4\ub108\uc2a4 \uc801\uc6a9 \uc804 \ucd1d\uc810: {tracker.total_score}\")\ntracker.apply_bonus(1.1)  # 10% \ubcf4\ub108\uc2a4\nprint(f\"\ubcf4\ub108\uc2a4 \uc801\uc6a9 \ud6c4 \ucd1d\uc810: {tracker.total_score:.1f}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#43-walrus-operator-python-38","title":"4.3 \uc6d4\ub9ac\uc2a4 \uc5f0\uc0b0\uc790 (Walrus Operator) - Python 3.8+","text":"<pre><code># := \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud55c \ud560\ub2f9\uacfc \ub3d9\uc2dc\uc5d0 \uc870\uac74 \uac80\uc0ac\n# Python 3.8 \uc774\uc0c1\uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\n\n# \uae30\uc874 \ubc29\uc2dd\ndef process_data_old():\n    data = input(\"\ub370\uc774\ud130\ub97c \uc785\ub825\ud558\uc138\uc694 (\uc885\ub8cc\ud558\ub824\uba74 'quit'): \")\n    while data != 'quit':\n        print(f\"\ucc98\ub9ac \uc911: {data}\")\n        data = input(\"\ub370\uc774\ud130\ub97c \uc785\ub825\ud558\uc138\uc694 (\uc885\ub8cc\ud558\ub824\uba74 'quit'): \")\n\n# \uc6d4\ub9ac\uc2a4 \uc5f0\uc0b0\uc790 \uc0ac\uc6a9\ndef process_data_new():\n    while (data := input(\"\ub370\uc774\ud130\ub97c \uc785\ub825\ud558\uc138\uc694 (\uc885\ub8cc\ud558\ub824\uba74 'quit'): \")) != 'quit':\n        print(f\"\ucc98\ub9ac \uc911: {data}\")\n\n# \uc870\uac74\ubb38\uc5d0\uc11c \ud65c\uc6a9\nnumbers = [1, 4, 9, 16, 25, 36]\n\n# \uae30\uc874 \ubc29\uc2dd\nprint(\"\uc81c\uacf1\uadfc\uc774 \uc815\uc218\uc778 \uc218\ub4e4:\")\nimport math\nfor num in numbers:\n    sqrt_val = math.sqrt(num)\n    if sqrt_val == int(sqrt_val):\n        print(f\"{num}\uc758 \uc81c\uacf1\uadfc: {int(sqrt_val)}\")\n\n# \uc6d4\ub9ac\uc2a4 \uc5f0\uc0b0\uc790 \uc0ac\uc6a9\nprint(\"\\n\uc6d4\ub9ac\uc2a4 \uc5f0\uc0b0\uc790 \uc0ac\uc6a9:\")\nfor num in numbers:\n    if (sqrt_val := math.sqrt(num)) == int(sqrt_val):\n        print(f\"{num}\uc758 \uc81c\uacf1\uadfc: {int(sqrt_val)}\")\n\n# \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\uc5d0\uc11c \ud65c\uc6a9\n# \ud640\uc218\uc758 \uc81c\uacf1\ub9cc \ud544\ud130\ub9c1\noriginal_numbers = range(1, 11)\nodd_squares = [square for n in original_numbers \n               if (square := n**2) % 2 == 1]\nprint(f\"\ud640\uc218 \uc81c\uacf1\ub4e4: {odd_squares}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#44","title":"4.4 \ud560\ub2f9 \uc5f0\uc0b0\uc790 \ud65c\uc6a9 \ud328\ud134","text":"<pre><code># \uce74\uc6b4\ud130 \ud328\ud134\ndef count_characters(text):\n    \"\"\"\ubb38\uc790\ubcc4 \uac1c\uc218 \uc138\uae30\"\"\"\n    char_count = {}\n    for char in text.lower():\n        if char.isalpha():\n            # \ub515\uc154\ub108\ub9ac\uc758 get \uba54\uc11c\ub4dc\uc640 \ubcf5\ud569 \ud560\ub2f9\n            char_count[char] = char_count.get(char, 0)\n            char_count[char] += 1\n    return char_count\n\ntext = \"Hello World Programming\"\nresult = count_characters(text)\nprint(\"\ubb38\uc790 \uac1c\uc218:\")\nfor char, count in sorted(result.items()):\n    print(f\"'{char}': {count}\")\n\n# \ub204\uc801 \uacc4\uc0b0 \ud328\ud134\ndef calculate_factorial(n):\n    \"\"\"\ud329\ud1a0\ub9ac\uc5bc \uacc4\uc0b0 (\ubc18\ubcf5\ubb38 \uc0ac\uc6a9)\"\"\"\n    if n &lt; 0:\n        return None\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n# \ud14c\uc2a4\ud2b8\nfor i in range(6):\n    factorial = calculate_factorial(i)\n    print(f\"{i}! = {factorial}\")\n\n# \uc9c4\ud589\ub960 \ud45c\uc2dc \ud328\ud134\ndef process_with_progress(items):\n    \"\"\"\uc9c4\ud589\ub960\uc744 \ud45c\uc2dc\ud558\uba70 \uc791\uc5c5 \ucc98\ub9ac\"\"\"\n    total = len(items)\n    processed = 0\n\n    for item in items:\n        # \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n        import time\n        time.sleep(0.1)\n\n        processed += 1\n        progress = (processed / total) * 100\n\n        # \uc9c4\ud589\ub960 \ud45c\uc2dc (\uac04\ub2e8\ud55c \uc9c4\ud589 \ubc14)\n        bar_length = 20\n        filled = int(bar_length * processed / total)\n        bar = '\u2588' * filled + '\u2591' * (bar_length - filled)\n\n        print(f\"\\r[{bar}] {progress:.1f}% ({processed}/{total})\", end='')\n\n    print()  # \uc904\ubc14\uafc8\n\n# \ud14c\uc2a4\ud2b8 (\uc2e4\uc81c \uc2e4\ud589\uc2dc \uc8fc\uc11d \ud574\uc81c)\n# items = ['\uc791\uc5c51', '\uc791\uc5c52', '\uc791\uc5c53', '\uc791\uc5c54', '\uc791\uc5c55']\n# process_with_progress(items)\n\n# \uc870\uac74\ubd80 \ud560\ub2f9 \ud328\ud134\ndef get_user_config(user_preferences, defaults):\n    \"\"\"\uc0ac\uc6a9\uc790 \uc124\uc815\uacfc \uae30\ubcf8\uac12\uc744 \ud569\uce5c \uc124\uc815 \uc0dd\uc131\"\"\"\n    config = defaults.copy()\n\n    # \uc0ac\uc6a9\uc790\uac00 \uc124\uc815\ud55c \uac12\uc774 \uc788\uc73c\uba74 \ub36e\uc5b4\uc4f0\uae30\n    for key, value in user_preferences.items():\n        if value is not None:  # None\uc774 \uc544\ub2cc \uac12\ub9cc \uc801\uc6a9\n            config[key] = value\n\n    return config\n\n# \uae30\ubcf8 \uc124\uc815\ndefault_settings = {\n    'theme': 'light',\n    'font_size': 12,\n    'auto_save': True,\n    'language': 'ko'\n}\n\n# \uc0ac\uc6a9\uc790 \uc124\uc815\nuser_settings = {\n    'theme': 'dark',\n    'font_size': None,  # \uae30\ubcf8\uac12 \uc0ac\uc6a9\n    'notification': True  # \uc0c8\ub85c\uc6b4 \uc124\uc815\n}\n\nfinal_config = get_user_config(user_settings, default_settings)\nprint(\"\ucd5c\uc885 \uc124\uc815:\")\nfor key, value in final_config.items():\n    print(f\"  {key}: {value}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#5","title":"5. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\uc640 \uacb0\ud569\uc131","text":""},{"location":"tutorials/beginner/chapter04_operators_expressions/#51","title":"5.1 \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \ud45c","text":"<pre><code># \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 (\ub192\uc740 \uc21c\uc11c\ub300\ub85c)\n# 1. () - \uad04\ud638\n# 2. ** - \uac70\ub4ed\uc81c\uacf1 (\uc6b0\uacb0\ud569\uc131)\n# 3. +x, -x, ~x - \ub2e8\ud56d \uc5f0\uc0b0\uc790\n# 4. *, /, //, % - \uacf1\uc148, \ub098\ub217\uc148 \uacc4\uc5f4\n# 5. +, - - \ub367\uc148, \ube84\uc148\n# 6. ==, !=, &lt;, &lt;=, &gt;, &gt;=, is, is not, in, not in - \ube44\uad50 \uc5f0\uc0b0\uc790\n# 7. not - \ub17c\ub9ac NOT\n# 8. and - \ub17c\ub9ac AND  \n# 9. or - \ub17c\ub9ac OR\n\n# \uc608\uc81c\ub85c \uc6b0\uc120\uc21c\uc704 \ud655\uc778\nresult1 = 2 + 3 * 4      # 14 (\uacf1\uc148\uc774 \ub367\uc148\ubcf4\ub2e4 \uc6b0\uc120)\nresult2 = (2 + 3) * 4    # 20 (\uad04\ud638\uac00 \ucd5c\uc6b0\uc120)\nresult3 = 2 ** 3 ** 2    # 512 (\uac70\ub4ed\uc81c\uacf1\uc740 \uc6b0\uacb0\ud569: 2^(3^2))\nresult4 = (2 ** 3) ** 2  # 64\n\nprint(f\"2 + 3 * 4 = {result1}\")\nprint(f\"(2 + 3) * 4 = {result2}\")\nprint(f\"2 ** 3 ** 2 = {result3}\")\nprint(f\"(2 ** 3) ** 2 = {result4}\")\n\n# \ubcf5\uc7a1\ud55c \ud45c\ud604\uc2dd\nx = 10\ny = 5\nz = 2\n\ncomplex_result = x + y * z ** 2 - 3\n# \uacc4\uc0b0 \uc21c\uc11c: z ** 2 (4) \u2192 y * 4 (20) \u2192 x + 20 (30) \u2192 30 - 3 (27)\nprint(f\"x + y * z ** 2 - 3 = {complex_result}\")\n\n# \ub17c\ub9ac \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\na = True\nb = False\nc = True\n\nresult = a or b and c  # and\uac00 or\ubcf4\ub2e4 \uc6b0\uc120: a or (b and c)\nprint(f\"True or False and True = {result}\")  # True\n\nresult = (a or b) and c  # \uad04\ud638\ub85c \uc21c\uc11c \ubcc0\uacbd\nprint(f\"(True or False) and True = {result}\")  # True\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#52","title":"5.2 \ud5f7\uac08\ub9ac\uae30 \uc26c\uc6b4 \uc6b0\uc120\uc21c\uc704 \uc608\uc81c","text":"<pre><code># \ube44\uad50 \uc5f0\uc0b0\uc790\uc640 \ub17c\ub9ac \uc5f0\uc0b0\uc790\nage = 25\nhas_license = True\n\n# \uc798\ubabb\ub41c \ud574\uc11d\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud55c \uad04\ud638 \uc0ac\uc6a9\ncan_drive = (age &gt;= 18) and has_license  # \uba85\ud655\ud568\ncan_drive_unclear = age &gt;= 18 and has_license  # \uc758\ubbf8\ub294 \uac19\uc9c0\ub9cc \ub35c \uba85\ud655\n\nprint(f\"\uc6b4\uc804 \uac00\ub2a5 (\uba85\ud655): {can_drive}\")\nprint(f\"\uc6b4\uc804 \uac00\ub2a5 (\ubaa8\ud638): {can_drive_unclear}\")\n\n# \ubb38\uc790\uc5f4 \uc5f0\uc0b0\uacfc \ube44\uad50\ntext = \"Hello\"\nresult1 = text + \" World\" == \"Hello World\"  # True (+ \ud6c4 ==)\nresult2 = (text + \" World\") == \"Hello World\"  # \uba85\ud655\ud55c \ud45c\ud604\n\nprint(f\"\ubb38\uc790\uc5f4 \ube44\uad50 \uacb0\uacfc: {result1}\")\n\n# \ubcf5\uc7a1\ud55c \uc870\uac74\uc2dd - \uac00\ub3c5\uc131\uc744 \uc704\ud55c \uad04\ud638 \uc0ac\uc6a9\nscore = 85\nattendance = 90\nhomework = 80\n\n# \ubcf5\uc7a1\ud55c \uc870\uac74\npassing_grade = score &gt;= 70 and attendance &gt;= 80 and homework &gt;= 75\n# \ub354 \uba85\ud655\ud55c \ud45c\ud604\npassing_grade_clear = (score &gt;= 70) and (attendance &gt;= 80) and (homework &gt;= 75)\n\nprint(f\"\ud569\uaca9 \uc5ec\ubd80: {passing_grade}\")\n\n# \uc2e4\uc6a9\uc801\uc778 \uc608: \ud560\uc778 \uc870\uac74 \uacc4\uc0b0\ndef calculate_discount(price, is_member, quantity, is_weekend):\n    \"\"\"\n    \ud560\uc778\uc728 \uacc4\uc0b0\n    - \ud68c\uc6d0: 10% \ud560\uc778\n    - \ub300\ub7c9 \uad6c\ub9e4 (10\uac1c \uc774\uc0c1): 5% \ucd94\uac00 \ud560\uc778  \n    - \uc8fc\ub9d0: 3% \ucd94\uac00 \ud560\uc778\n    \"\"\"\n    discount = 0\n\n    # \uae30\ubcf8 \ud68c\uc6d0 \ud560\uc778\n    if is_member:\n        discount += 0.10\n\n    # \ub300\ub7c9 \uad6c\ub9e4 \ud560\uc778\n    if quantity &gt;= 10:\n        discount += 0.05\n\n    # \uc8fc\ub9d0 \ud560\uc778\n    if is_weekend:\n        discount += 0.03\n\n    # \ucd5c\ub300 \ud560\uc778\uc728 \uc81c\ud55c (20%)\n    discount = min(discount, 0.20)\n\n    final_price = price * (1 - discount)\n    return final_price, discount * 100\n\n# \ud14c\uc2a4\ud2b8\ntest_cases = [\n    (100, True, 15, True),   # \ud68c\uc6d0, \ub300\ub7c9, \uc8fc\ub9d0\n    (100, False, 5, False),  # \ube44\ud68c\uc6d0, \uc18c\ub7c9, \ud3c9\uc77c\n    (100, True, 8, False),   # \ud68c\uc6d0, \uc18c\ub7c9, \ud3c9\uc77c\n    (100, False, 12, True)   # \ube44\ud68c\uc6d0, \ub300\ub7c9, \uc8fc\ub9d0\n]\n\nfor price, is_member, quantity, is_weekend in test_cases:\n    final_price, discount = calculate_discount(price, is_member, quantity, is_weekend)\n    print(f\"\uac00\uaca9: {price}\uc6d0, \ud68c\uc6d0: {is_member}, \uc218\ub7c9: {quantity}, \uc8fc\ub9d0: {is_weekend}\")\n    print(f\"  \u2192 \ud560\uc778\uc728: {discount}%, \ucd5c\uc885\uac00\uaca9: {final_price:.0f}\uc6d0\\n\")\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#53-associativity","title":"5.3 \uc5f0\uc0b0\uc790 \uacb0\ud569\uc131 (Associativity)","text":"<pre><code># \uc88c\uacb0\ud569\uc131 (Left-to-right)\nresult = 100 - 50 - 20  # (100 - 50) - 20 = 30\nprint(f\"100 - 50 - 20 = {result}\")\n\nresult = 100 / 5 / 2    # (100 / 5) / 2 = 10.0\nprint(f\"100 / 5 / 2 = {result}\")\n\n# \uc6b0\uacb0\ud569\uc131 (Right-to-left) - \uac70\ub4ed\uc81c\uacf1\ub9cc \ud574\ub2f9\nresult = 2 ** 3 ** 2    # 2 ** (3 ** 2) = 2 ** 9 = 512\nprint(f\"2 ** 3 ** 2 = {result}\")\n\n# \ud560\ub2f9 \uc5f0\uc0b0\uc790\ub3c4 \uc6b0\uacb0\ud569\uc131\nx = y = z = 10  # z = 10, y = z, x = y \uc21c\uc11c\ub85c \uc2e4\ud589\nprint(f\"x = y = z = 10: x={x}, y={y}, z={z}\")\n\n# \uc5f0\uc1c4 \ud560\ub2f9\uc5d0\uc11c \uc8fc\uc758\ud560 \uc810\na = b = [1, 2, 3]  # \uac19\uc740 \ub9ac\uc2a4\ud2b8\ub97c \ucc38\uc870\na.append(4)\nprint(f\"a = {a}\")  # [1, 2, 3, 4]\nprint(f\"b = {b}\")  # [1, 2, 3, 4] - \uac19\uc774 \ubcc0\uacbd\ub428!\n\n# \uc62c\ubc14\ub978 \ubc29\ubc95\nc = [1, 2, 3]\nd = [1, 2, 3]  # \ubcc4\ub3c4\uc758 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\nc.append(4)\nprint(f\"c = {c}\")  # [1, 2, 3, 4]\nprint(f\"d = {d}\")  # [1, 2, 3] - \ub3c5\ub9bd\uc801\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#6-bitwise-operators","title":"6. \ube44\ud2b8 \uc5f0\uc0b0\uc790 (Bitwise Operators)","text":""},{"location":"tutorials/beginner/chapter04_operators_expressions/#61","title":"6.1 \uae30\ubcf8 \ube44\ud2b8 \uc5f0\uc0b0\uc790","text":"<pre><code># \ube44\ud2b8 \uc5f0\uc0b0\uc790 \uc18c\uac1c\na = 12  # \uc774\uc9c4\uc218: 1100\nb = 10  # \uc774\uc9c4\uc218: 1010\n\nprint(f\"a = {a} (\uc774\uc9c4\uc218: {bin(a)})\")\nprint(f\"b = {b} (\uc774\uc9c4\uc218: {bin(b)})\")\n\n# AND \uc5f0\uc0b0 (&amp;)\nresult = a &amp; b  # 1100 &amp; 1010 = 1000 (8)\nprint(f\"a &amp; b = {result} (\uc774\uc9c4\uc218: {bin(result)})\")\n\n# OR \uc5f0\uc0b0 (|)  \nresult = a | b  # 1100 | 1010 = 1110 (14)\nprint(f\"a | b = {result} (\uc774\uc9c4\uc218: {bin(result)})\")\n\n# XOR \uc5f0\uc0b0 (^)\nresult = a ^ b  # 1100 ^ 1010 = 0110 (6)\nprint(f\"a ^ b = {result} (\uc774\uc9c4\uc218: {bin(result)})\")\n\n# NOT \uc5f0\uc0b0 (~) - \ubcf4\uc218\nresult = ~a     # ~1100 = ...11110011 (\uc74c\uc218\ub85c \ud45c\ud604)\nprint(f\"~a = {result}\")\n\n# \uc67c\ucabd \uc2dc\ud504\ud2b8 (&lt;&lt;)\nresult = a &lt;&lt; 2  # 1100 \u2192 110000 (48)\nprint(f\"a &lt;&lt; 2 = {result} (\uc774\uc9c4\uc218: {bin(result)})\")\n\n# \uc624\ub978\ucabd \uc2dc\ud504\ud2b8 (&gt;&gt;)\nresult = a &gt;&gt; 2  # 1100 \u2192 11 (3)\nprint(f\"a &gt;&gt; 2 = {result} (\uc774\uc9c4\uc218: {bin(result)})\")\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#62","title":"6.2 \ube44\ud2b8 \uc5f0\uc0b0\uc790\uc758 \uc2e4\uc6a9\uc801 \ud65c\uc6a9","text":"<pre><code># \uad8c\ud55c \uc2dc\uc2a4\ud15c (\ube44\ud2b8 \ud50c\ub798\uadf8)\n# \uac01 \uad8c\ud55c\uc744 \ube44\ud2b8\ub85c \ud45c\ud604\nREAD_PERMISSION = 1    # 001\nWRITE_PERMISSION = 2   # 010  \nEXECUTE_PERMISSION = 4 # 100\n\ndef has_permission(user_permissions, required_permission):\n    \"\"\"\uc0ac\uc6a9\uc790\uac00 \ud2b9\uc815 \uad8c\ud55c\uc744 \uac00\uc9c0\uace0 \uc788\ub294\uc9c0 \ud655\uc778\"\"\"\n    return (user_permissions &amp; required_permission) != 0\n\ndef add_permission(user_permissions, new_permission):\n    \"\"\"\uad8c\ud55c \ucd94\uac00\"\"\"\n    return user_permissions | new_permission\n\ndef remove_permission(user_permissions, permission_to_remove):\n    \"\"\"\uad8c\ud55c \uc81c\uac70\"\"\"\n    return user_permissions &amp; ~permission_to_remove\n\n# \uc0ac\uc6a9\uc790 \uad8c\ud55c \uc124\uc815\nuser_kim = READ_PERMISSION | WRITE_PERMISSION  # \uc77d\uae30 + \uc4f0\uae30 (3)\nuser_lee = READ_PERMISSION | EXECUTE_PERMISSION  # \uc77d\uae30 + \uc2e4\ud589 (5)\n\nprint(f\"\uae40\uc528 \uad8c\ud55c: {user_kim} (\uc774\uc9c4\uc218: {bin(user_kim)})\")\nprint(f\"\uc774\uc528 \uad8c\ud55c: {user_lee} (\uc774\uc9c4\uc218: {bin(user_lee)})\")\n\n# \uad8c\ud55c \ud655\uc778\nprint(f\"\uae40\uc528 \uc77d\uae30 \uad8c\ud55c: {has_permission(user_kim, READ_PERMISSION)}\")\nprint(f\"\uae40\uc528 \uc2e4\ud589 \uad8c\ud55c: {has_permission(user_kim, EXECUTE_PERMISSION)}\")\n\n# \uad8c\ud55c \ucd94\uac00/\uc81c\uac70\nuser_kim = add_permission(user_kim, EXECUTE_PERMISSION)\nprint(f\"\uae40\uc528 \uc2e4\ud589 \uad8c\ud55c \ucd94\uac00 \ud6c4: {user_kim} (\uc774\uc9c4\uc218: {bin(user_kim)})\")\n\nuser_kim = remove_permission(user_kim, WRITE_PERMISSION)\nprint(f\"\uae40\uc528 \uc4f0\uae30 \uad8c\ud55c \uc81c\uac70 \ud6c4: {user_kim} (\uc774\uc9c4\uc218: {bin(user_kim)})\")\n\n# \ube60\ub978 \uc218\ud559 \uc5f0\uc0b0\ndef multiply_by_power_of_2(number, power):\n    \"\"\"2\uc758 \uac70\ub4ed\uc81c\uacf1\uc73c\ub85c \uacf1\ud558\uae30 (\uc67c\ucabd \uc2dc\ud504\ud2b8 \ud65c\uc6a9)\"\"\"\n    return number &lt;&lt; power\n\ndef divide_by_power_of_2(number, power):\n    \"\"\"2\uc758 \uac70\ub4ed\uc81c\uacf1\uc73c\ub85c \ub098\ub204\uae30 (\uc624\ub978\ucabd \uc2dc\ud504\ud2b8 \ud65c\uc6a9)\"\"\"\n    return number &gt;&gt; power\n\ndef is_even(number):\n    \"\"\"\uc9dd\uc218 \ud310\ubcc4 (\ube44\ud2b8 AND \ud65c\uc6a9)\"\"\"\n    return (number &amp; 1) == 0\n\ndef is_power_of_2(number):\n    \"\"\"2\uc758 \uac70\ub4ed\uc81c\uacf1\uc778\uc9c0 \ud655\uc778\"\"\"\n    return number &gt; 0 and (number &amp; (number - 1)) == 0\n\n# \ud14c\uc2a4\ud2b8\nprint(f\"\\n\uc218\ud559 \uc5f0\uc0b0 \uc608\uc81c:\")\nprint(f\"5 * 8 = 5 &lt;&lt; 3 = {multiply_by_power_of_2(5, 3)}\")\nprint(f\"32 / 4 = 32 &gt;&gt; 2 = {divide_by_power_of_2(32, 2)}\")\n\nnumbers = [1, 2, 3, 4, 8, 15, 16, 32]\nfor num in numbers:\n    even = \"\uc9dd\uc218\" if is_even(num) else \"\ud640\uc218\"\n    power_of_2 = \"2\uc758 \uac70\ub4ed\uc81c\uacf1\" if is_power_of_2(num) else \"\uc77c\ubc18 \uc218\"\n    print(f\"{num}: {even}, {power_of_2}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#63","title":"6.3 \ube44\ud2b8 \ub9c8\uc2a4\ud06c \ud65c\uc6a9","text":"<pre><code># \uc0c9\uc0c1 \ud45c\ud604 (RGB - 24\ube44\ud2b8)\ndef create_color(red, green, blue):\n    \"\"\"RGB \uac12\uc73c\ub85c 24\ube44\ud2b8 \uc0c9\uc0c1 \uc0dd\uc131\"\"\"\n    # \uac01 \uc0c9\uc0c1\uc740 0-255 \ubc94\uc704 (8\ube44\ud2b8)\n    return (red &lt;&lt; 16) | (green &lt;&lt; 8) | blue\n\ndef extract_rgb(color):\n    \"\"\"24\ube44\ud2b8 \uc0c9\uc0c1\uc5d0\uc11c RGB \uac12 \ucd94\ucd9c\"\"\"\n    red = (color &gt;&gt; 16) &amp; 0xFF    # \uc0c1\uc704 8\ube44\ud2b8\n    green = (color &gt;&gt; 8) &amp; 0xFF   # \uc911\uac04 8\ube44\ud2b8  \n    blue = color &amp; 0xFF           # \ud558\uc704 8\ube44\ud2b8\n    return red, green, blue\n\n# \uc0c9\uc0c1 \uc0dd\uc131 \ubc0f \ucd94\ucd9c\nwhite = create_color(255, 255, 255)\nred = create_color(255, 0, 0)\nblue = create_color(0, 0, 255)\n\nprint(f\"\ud770\uc0c9: {white} (16\uc9c4\uc218: {hex(white)})\")\nprint(f\"\ube68\uac04\uc0c9: {red} (16\uc9c4\uc218: {hex(red)})\")\nprint(f\"\ud30c\ub780\uc0c9: {blue} (16\uc9c4\uc218: {hex(blue)})\")\n\n# RGB \uac12 \ucd94\ucd9c\nr, g, b = extract_rgb(white)\nprint(f\"\ud770\uc0c9 RGB: ({r}, {g}, {b})\")\n\n# \uc0c1\ud0dc \ud50c\ub798\uadf8 \uc2dc\uc2a4\ud15c\nclass TaskStatus:\n    PENDING = 1      # \ub300\uae30\uc911\n    RUNNING = 2      # \uc2e4\ud589\uc911\n    COMPLETED = 4    # \uc644\ub8cc\n    FAILED = 8       # \uc2e4\ud328\n    CANCELLED = 16   # \ucde8\uc18c\ub428\n\ndef get_status_name(status):\n    \"\"\"\uc0c1\ud0dc \ucf54\ub4dc\ub97c \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\"\"\"\n    status_names = {\n        TaskStatus.PENDING: \"\ub300\uae30\uc911\",\n        TaskStatus.RUNNING: \"\uc2e4\ud589\uc911\", \n        TaskStatus.COMPLETED: \"\uc644\ub8cc\",\n        TaskStatus.FAILED: \"\uc2e4\ud328\",\n        TaskStatus.CANCELLED: \"\ucde8\uc18c\ub428\"\n    }\n    return status_names.get(status, \"\uc54c \uc218 \uc5c6\uc74c\")\n\n# \ubcf5\ud569 \uc0c1\ud0dc (\uc5ec\ub7ec \uc791\uc5c5\uc758 \uc0c1\ud0dc\ub97c \ud558\ub098\uc758 \uac12\uc73c\ub85c)\ndef combine_statuses(status_list):\n    \"\"\"\uc5ec\ub7ec \uc0c1\ud0dc\ub97c \ud558\ub098\ub85c \uacb0\ud569\"\"\"\n    combined = 0\n    for status in status_list:\n        combined |= status\n    return combined\n\ndef has_any_status(combined_status, check_status):\n    \"\"\"\ud2b9\uc815 \uc0c1\ud0dc\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\"\"\"\n    return (combined_status &amp; check_status) != 0\n\n# \uc608\uc81c: \ubc30\uce58 \uc791\uc5c5 \uc2dc\uc2a4\ud15c\nbatch_jobs = [\n    TaskStatus.COMPLETED,\n    TaskStatus.RUNNING,\n    TaskStatus.PENDING,\n    TaskStatus.FAILED\n]\n\ncombined = combine_statuses(batch_jobs)\nprint(f\"\\n\ubc30\uce58 \uc791\uc5c5 \uc0c1\ud0dc:\")\nprint(f\"\uacb0\ud569\ub41c \uc0c1\ud0dc \uac12: {combined} (\uc774\uc9c4\uc218: {bin(combined)})\")\n\n# \uac01 \uc0c1\ud0dc \ud655\uc778\nfor status in [TaskStatus.PENDING, TaskStatus.RUNNING, TaskStatus.COMPLETED, TaskStatus.FAILED]:\n    has_status = has_any_status(combined, status)\n    status_name = get_status_name(status)\n    print(f\"{status_name} \uc791\uc5c5 \uc874\uc7ac: {has_status}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#7","title":"7. \uc2e4\uc2b5 \uc608\uc81c","text":""},{"location":"tutorials/beginner/chapter04_operators_expressions/#71","title":"7.1 \uacc4\uc0b0\uae30 \ud504\ub85c\uadf8\ub7a8","text":"<pre><code>class SimpleCalculator:\n    \"\"\"\uac04\ub2e8\ud55c \uacc4\uc0b0\uae30 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        self.history = []\n\n    def add(self, a, b):\n        result = a + b\n        self._save_history('add', a, b, result)\n        return result\n\n    def subtract(self, a, b):\n        result = a - b\n        self._save_history('subtract', a, b, result)\n        return result\n\n    def multiply(self, a, b):\n        result = a * b\n        self._save_history('multiply', a, b, result)\n        return result\n\n    def divide(self, a, b):\n        if b == 0:\n            raise ValueError(\"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n        result = a / b\n        self._save_history('divide', a, b, result)\n        return result\n\n    def power(self, a, b):\n        result = a ** b\n        self._save_history('power', a, b, result)\n        return result\n\n    def modulo(self, a, b):\n        if b == 0:\n            raise ValueError(\"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n        result = a % b\n        self._save_history('modulo', a, b, result)\n        return result\n\n    def _save_history(self, operation, a, b, result):\n        \"\"\"\uacc4\uc0b0 \uc774\ub825 \uc800\uc7a5\"\"\"\n        operation_symbols = {\n            'add': '+',\n            'subtract': '-',\n            'multiply': '*',\n            'divide': '/',\n            'power': '**',\n            'modulo': '%'\n        }\n        symbol = operation_symbols[operation]\n        self.history.append(f\"{a} {symbol} {b} = {result}\")\n\n    def show_history(self):\n        \"\"\"\uacc4\uc0b0 \uc774\ub825 \ucd9c\ub825\"\"\"\n        if not self.history:\n            print(\"\uacc4\uc0b0 \uc774\ub825\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n        else:\n            print(\"=== \uacc4\uc0b0 \uc774\ub825 ===\")\n            for i, record in enumerate(self.history, 1):\n                print(f\"{i}. {record}\")\n\n    def clear_history(self):\n        \"\"\"\uc774\ub825 \uc9c0\uc6b0\uae30\"\"\"\n        self.history.clear()\n        print(\"\uacc4\uc0b0 \uc774\ub825\uc774 \uc9c0\uc6cc\uc84c\uc2b5\ub2c8\ub2e4.\")\n\n# \uacc4\uc0b0\uae30 \ud14c\uc2a4\ud2b8\ncalc = SimpleCalculator()\n\n# \ub2e4\uc591\ud55c \uacc4\uc0b0 \uc218\ud589\nprint(\"\uacc4\uc0b0\uae30 \ud14c\uc2a4\ud2b8:\")\nprint(f\"10 + 5 = {calc.add(10, 5)}\")\nprint(f\"10 - 3 = {calc.subtract(10, 3)}\")\nprint(f\"4 * 7 = {calc.multiply(4, 7)}\")\nprint(f\"15 / 3 = {calc.divide(15, 3)}\")\nprint(f\"2 ** 8 = {calc.power(2, 8)}\")\nprint(f\"17 % 5 = {calc.modulo(17, 5)}\")\n\n# \uc774\ub825 \ud655\uc778\ncalc.show_history()\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#72","title":"7.2 \uc810\uc218 \ub4f1\uae09 \uc2dc\uc2a4\ud15c","text":"<pre><code>def comprehensive_grading_system():\n    \"\"\"\uc885\ud569\uc801\uc778 \uc810\uc218 \ub4f1\uae09 \uc2dc\uc2a4\ud15c\"\"\"\n\n    def calculate_weighted_score(scores, weights):\n        \"\"\"\uac00\uc911 \ud3c9\uade0 \uacc4\uc0b0\"\"\"\n        if len(scores) != len(weights):\n            raise ValueError(\"\uc810\uc218\uc640 \uac00\uc911\uce58 \uac1c\uc218\uac00 \uc77c\uce58\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\")\n\n        total_weighted = sum(score * weight for score, weight in zip(scores, weights))\n        total_weights = sum(weights)\n        return total_weighted / total_weights if total_weights &gt; 0 else 0\n\n    def get_letter_grade(score):\n        \"\"\"\uc22b\uc790 \uc810\uc218\ub97c \ubb38\uc790 \ub4f1\uae09\uc73c\ub85c \ubcc0\ud658\"\"\"\n        if score &gt;= 97:\n            return 'A+'\n        elif score &gt;= 93:\n            return 'A'\n        elif score &gt;= 90:\n            return 'A-'\n        elif score &gt;= 87:\n            return 'B+'\n        elif score &gt;= 83:\n            return 'B'\n        elif score &gt;= 80:\n            return 'B-'\n        elif score &gt;= 77:\n            return 'C+'\n        elif score &gt;= 73:\n            return 'C'\n        elif score &gt;= 70:\n            return 'C-'\n        elif score &gt;= 67:\n            return 'D+'\n        elif score &gt;= 63:\n            return 'D'\n        elif score &gt;= 60:\n            return 'D-'\n        else:\n            return 'F'\n\n    def calculate_gpa(letter_grade):\n        \"\"\"\ubb38\uc790 \ub4f1\uae09\uc744 GPA\ub85c \ubcc0\ud658\"\"\"\n        gpa_table = {\n            'A+': 4.5, 'A': 4.0, 'A-': 3.7,\n            'B+': 3.3, 'B': 3.0, 'B-': 2.7,\n            'C+': 2.3, 'C': 2.0, 'C-': 1.7,\n            'D+': 1.3, 'D': 1.0, 'D-': 0.7,\n            'F': 0.0\n        }\n        return gpa_table.get(letter_grade, 0.0)\n\n    def check_graduation_requirements(gpa, credits, major_credits):\n        \"\"\"\uc878\uc5c5 \uc694\uac74 \ud655\uc778\"\"\"\n        requirements = {\n            'min_gpa': 2.0,\n            'min_total_credits': 130,\n            'min_major_credits': 60\n        }\n\n        results = {}\n        results['gpa_met'] = gpa &gt;= requirements['min_gpa']\n        results['credits_met'] = credits &gt;= requirements['min_total_credits']\n        results['major_credits_met'] = major_credits &gt;= requirements['min_major_credits']\n        results['can_graduate'] = all(results.values())\n\n        return results, requirements\n\n    # \ud559\uc0dd \ub370\uc774\ud130\n    students = [\n        {\n            'name': '\uae40\ubbfc\uc218',\n            'scores': [85, 92, 78, 88],\n            'weights': [0.3, 0.3, 0.2, 0.2],  # \uc911\uac04, \uae30\ub9d0, \uacfc\uc81c, \ucd9c\uc11d\n            'credits': 135,\n            'major_credits': 65\n        },\n        {\n            'name': '\uc774\uc601\ud76c', \n            'scores': [95, 88, 92, 96],\n            'weights': [0.3, 0.3, 0.2, 0.2],\n            'credits': 128,\n            'major_credits': 58\n        },\n        {\n            'name': '\ubc15\ucca0\uc218',\n            'scores': [75, 72, 80, 85],\n            'weights': [0.3, 0.3, 0.2, 0.2],\n            'credits': 140,\n            'major_credits': 70\n        }\n    ]\n\n    print(\"=== \uc885\ud569 \uc131\uc801 \uad00\ub9ac \uc2dc\uc2a4\ud15c ===\\n\")\n\n    for student in students:\n        name = student['name']\n        scores = student['scores']\n        weights = student['weights']\n        credits = student['credits']\n        major_credits = student['major_credits']\n\n        # \uac00\uc911 \ud3c9\uade0 \uacc4\uc0b0\n        weighted_score = calculate_weighted_score(scores, weights)\n        letter_grade = get_letter_grade(weighted_score)\n        gpa = calculate_gpa(letter_grade)\n\n        # \uc878\uc5c5 \uc694\uac74 \ud655\uc778\n        grad_results, requirements = check_graduation_requirements(\n            gpa, credits, major_credits\n        )\n\n        print(f\"\ud559\uc0dd: {name}\")\n        print(f\"  \uc810\uc218 \ub0b4\uc5ed: {scores}\")\n        print(f\"  \uac00\uc911\uce58: {weights}\")\n        print(f\"  \uac00\uc911 \ud3c9\uade0: {weighted_score:.2f}\uc810\")\n        print(f\"  \ubb38\uc790 \ub4f1\uae09: {letter_grade}\")\n        print(f\"  \ud3c9\uc810(GPA): {gpa:.2f}\")\n        print(f\"  \ucd1d \ud559\uc810: {credits} (\ud544\uc694: {requirements['min_total_credits']})\")\n        print(f\"  \uc804\uacf5 \ud559\uc810: {major_credits} (\ud544\uc694: {requirements['min_major_credits']})\")\n        print(f\"  \uc878\uc5c5 \uac00\ub2a5: {'\u2713' if grad_results['can_graduate'] else '\u2717'}\")\n\n        if not grad_results['can_graduate']:\n            print(\"  \ubbf8\ucda9\uc871 \uc694\uac74:\")\n            if not grad_results['gpa_met']:\n                print(f\"    - GPA \ubd80\uc871 (\ud604\uc7ac: {gpa:.2f}, \ud544\uc694: {requirements['min_gpa']})\")\n            if not grad_results['credits_met']:\n                shortage = requirements['min_total_credits'] - credits\n                print(f\"    - \ucd1d \ud559\uc810 \ubd80\uc871 ({shortage}\ud559\uc810 \ucd94\uac00 \ud544\uc694)\")\n            if not grad_results['major_credits_met']:\n                shortage = requirements['min_major_credits'] - major_credits\n                print(f\"    - \uc804\uacf5 \ud559\uc810 \ubd80\uc871 ({shortage}\ud559\uc810 \ucd94\uac00 \ud544\uc694)\")\n        print()\n\n# \uc2e4\ud589\ncomprehensive_grading_system()\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#73","title":"7.3 \uc2dc\uac04 \uacc4\uc0b0\uae30","text":"<pre><code>class TimeCalculator:\n    \"\"\"\uc2dc\uac04 \uacc4\uc0b0\uc744 \uc704\ud55c \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, hours=0, minutes=0, seconds=0):\n        self.total_seconds = hours * 3600 + minutes * 60 + seconds\n\n    def __str__(self):\n        hours = self.total_seconds // 3600\n        minutes = (self.total_seconds % 3600) // 60\n        seconds = self.total_seconds % 60\n        return f\"{hours:02d}:{minutes:02d}:{seconds:02d}\"\n\n    def __add__(self, other):\n        \"\"\"\uc2dc\uac04 \ub354\ud558\uae30\"\"\"\n        if isinstance(other, TimeCalculator):\n            result = TimeCalculator()\n            result.total_seconds = self.total_seconds + other.total_seconds\n            return result\n        return NotImplemented\n\n    def __sub__(self, other):\n        \"\"\"\uc2dc\uac04 \ube7c\uae30\"\"\"\n        if isinstance(other, TimeCalculator):\n            result = TimeCalculator()\n            result.total_seconds = max(0, self.total_seconds - other.total_seconds)\n            return result\n        return NotImplemented\n\n    def __mul__(self, factor):\n        \"\"\"\uc2dc\uac04\uc5d0 \ubc30\uc218 \uacf1\ud558\uae30\"\"\"\n        if isinstance(factor, (int, float)):\n            result = TimeCalculator()\n            result.total_seconds = int(self.total_seconds * factor)\n            return result\n        return NotImplemented\n\n    def __lt__(self, other):\n        if isinstance(other, TimeCalculator):\n            return self.total_seconds &lt; other.total_seconds\n        return NotImplemented\n\n    def __le__(self, other):\n        if isinstance(other, TimeCalculator):\n            return self.total_seconds &lt;= other.total_seconds\n        return NotImplemented\n\n    def __gt__(self, other):\n        if isinstance(other, TimeCalculator):\n            return self.total_seconds &gt; other.total_seconds\n        return NotImplemented\n\n    def __ge__(self, other):\n        if isinstance(other, TimeCalculator):\n            return self.total_seconds &gt;= other.total_seconds\n        return NotImplemented\n\n    def __eq__(self, other):\n        if isinstance(other, TimeCalculator):\n            return self.total_seconds == other.total_seconds\n        return NotImplemented\n\n    def to_minutes(self):\n        \"\"\"\ucd1d \ubd84\uc73c\ub85c \ubcc0\ud658\"\"\"\n        return self.total_seconds / 60\n\n    def to_hours(self):\n        \"\"\"\ucd1d \uc2dc\uac04\uc73c\ub85c \ubcc0\ud658\"\"\"\n        return self.total_seconds / 3600\n\n# \uadfc\ubb34\uc2dc\uac04 \uacc4\uc0b0 \uc2dc\uc2a4\ud15c\ndef work_time_calculator():\n    \"\"\"\uadfc\ubb34\uc2dc\uac04 \uacc4\uc0b0 \uc2dc\uc2a4\ud15c\"\"\"\n\n    # \uc77c\uc77c \uadfc\ubb34 \uc2dc\uac04\n    daily_hours = [\n        TimeCalculator(8, 30, 0),   # \uc6d4\uc694\uc77c\n        TimeCalculator(7, 45, 0),   # \ud654\uc694\uc77c\n        TimeCalculator(9, 15, 0),   # \uc218\uc694\uc77c\n        TimeCalculator(8, 0, 0),    # \ubaa9\uc694\uc77c\n        TimeCalculator(6, 30, 0)    # \uae08\uc694\uc77c\n    ]\n\n    days = ['\uc6d4', '\ud654', '\uc218', '\ubaa9', '\uae08']\n\n    print(\"=== \uc8fc\uac04 \uadfc\ubb34\uc2dc\uac04 \uacc4\uc0b0 ===\")\n\n    # \uc77c\uc77c \uadfc\ubb34\uc2dc\uac04 \ucd9c\ub825\n    total_time = TimeCalculator()\n    for day, hours in zip(days, daily_hours):\n        print(f\"{day}\uc694\uc77c: {hours}\")\n        total_time += hours\n\n    print(f\"\\n\ucd1d \uadfc\ubb34\uc2dc\uac04: {total_time}\")\n    print(f\"\ud3c9\uade0 \uc77c\uc77c \uadfc\ubb34\uc2dc\uac04: {total_time * (1/5)}\")\n\n    # \ucd08\uacfc\uadfc\ubb34 \uacc4\uc0b0 (\uc77c 8\uc2dc\uac04 \uae30\uc900)\n    standard_daily = TimeCalculator(8, 0, 0)\n    standard_weekly = standard_daily * 5\n\n    if total_time &gt; standard_weekly:\n        overtime = total_time - standard_weekly\n        print(f\"\uc8fc\uac04 \ucd08\uacfc\uadfc\ubb34: {overtime}\")\n    else:\n        shortage = standard_weekly - total_time\n        print(f\"\uc8fc\uac04 \ubd80\uc871\uadfc\ubb34: {shortage}\")\n\n    # \ud734\uac8c\uc2dc\uac04 \uacc4\uc0b0 (\uc77c 1\uc2dc\uac04\uc529)\n    break_time = TimeCalculator(1, 0, 0) * 5\n    actual_work_time = total_time - break_time\n\n    print(f\"\ud734\uac8c\uc2dc\uac04 \uc81c\uc678 \uc2e4\uadfc\ubb34\uc2dc\uac04: {actual_work_time}\")\n\n    # \uc2dc\uae09 \uacc4\uc0b0\n    hourly_wage = 15000  # \uc2dc\uae09 15,000\uc6d0\n    total_pay = int(actual_work_time.to_hours() * hourly_wage)\n\n    print(f\"\uc8fc\uae09 (\uc2dc\uae09 {hourly_wage:,}\uc6d0): {total_pay:,}\uc6d0\")\n\n# \uc2e4\ud589\nwork_time_calculator()\n</code></pre>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#8","title":"8. \uc2e4\uc2b5 \uacfc\uc81c","text":""},{"location":"tutorials/beginner/chapter04_operators_expressions/#1","title":"\uacfc\uc81c 1: \ud559\uc810 \uacc4\uc0b0\uae30","text":"<p>\ub2e4\uc74c \uc694\uad6c\uc0ac\ud56d\uc744 \ub9cc\uc871\ud558\ub294 \ud559\uc810 \uacc4\uc0b0\uae30\ub97c \uc791\uc131\ud558\uc138\uc694.</p> <p>\uc694\uad6c\uc0ac\ud56d: - \uc5ec\ub7ec \uacfc\ubaa9\uc758 \uc810\uc218\uc640 \ud559\uc810\uc744 \uc785\ub825\ubc1b\uae30 - \ud3c9\uc810 \ud3c9\uade0(GPA) \uacc4\uc0b0 (4.5 \ub9cc\uc810) - \ucd1d \uc774\uc218 \ud559\uc810 \uacc4\uc0b0 - \uc131\uc801 \ud1b5\uacc4 (\ucd5c\uace0\uc810, \ucd5c\uc800\uc810, \ud3c9\uade0) \uc81c\uacf5</p>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#2","title":"\uacfc\uc81c 2: \ub2e8\uc704 \ubcc0\ud658\uae30","text":"<p>\uae38\uc774, \ubb34\uac8c, \uc628\ub3c4 \ub4f1\uc744 \ub2e4\uc591\ud55c \ub2e8\uc704\ub85c \ubcc0\ud658\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p> <p>\uc694\uad6c\uc0ac\ud56d: - \uae38\uc774: mm, cm, m, km, inch, feet, yard, mile - \ubb34\uac8c: mg, g, kg, ton, oz, lb - \uc628\ub3c4: \uc12d\uc528, \ud654\uc528, \ucf08\ube48 - \uc0ac\uc6a9\uc790 \uce5c\ud654\uc801\uc778 \uba54\ub274 \uc2dc\uc2a4\ud15c</p>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#3","title":"\uacfc\uc81c 3: \ube44\ud2b8 \ud50c\ub798\uadf8 \uad8c\ud55c \uc2dc\uc2a4\ud15c","text":"<p>\ube44\ud2b8 \uc5f0\uc0b0\uc790\ub97c \ud65c\uc6a9\ud55c \uc0ac\uc6a9\uc790 \uad8c\ud55c \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc744 \uc791\uc131\ud558\uc138\uc694.</p> <p>\uc694\uad6c\uc0ac\ud56d: - \uc77d\uae30, \uc4f0\uae30, \uc2e4\ud589, \uc0ad\uc81c, \uad00\ub9ac\uc790 \uad8c\ud55c \uc815\uc758 - \uad8c\ud55c \ucd94\uac00/\uc81c\uac70 \uae30\ub2a5 - \uad8c\ud55c \ud655\uc778 \uae30\ub2a5 - \uc0ac\uc6a9\uc790\ubcc4 \uad8c\ud55c \uad00\ub9ac</p> <p>\uc608\uc2dc: <pre><code>\uc0ac\uc6a9\uc790 \uad8c\ud55c: \uc77d\uae30 + \uc4f0\uae30\n\uad8c\ud55c \ud655\uc778: \uc77d\uae30 \uad8c\ud55c \uc788\uc74c \u2713\n\uad8c\ud55c \ucd94\uac00: \uc2e4\ud589 \uad8c\ud55c \ucd94\uac00\ub428\n\ucd5c\uc885 \uad8c\ud55c: \uc77d\uae30 + \uc4f0\uae30 + \uc2e4\ud589\n</code></pre></p>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#9","title":"9. \ub2e4\uc74c \ucc55\ud130 \ubbf8\ub9ac\ubcf4\uae30","text":"<p>Chapter 5\uc5d0\uc11c\ub294 \ub2e4\uc74c \ub0b4\uc6a9\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4: - \uc785\ub825 \ud568\uc218: <code>input()</code>, \uc785\ub825 \uac80\uc99d, \ud0c0\uc785 \ubcc0\ud658 - \ucd9c\ub825 \ud568\uc218: <code>print()</code> \uace0\uae09 \ud65c\uc6a9, \ucd9c\ub825 \ud615\uc2dd \uc9c0\uc815 - \ud30c\uc77c \uc785\ucd9c\ub825: \ud14d\uc2a4\ud2b8 \ud30c\uc77c \uc77d\uae30/\uc4f0\uae30 \uae30\ucd08 - \ud3ec\ub9f7\ud305: \ub2e4\uc591\ud55c \ucd9c\ub825 \ud615\uc2dd\uacfc \uc815\ub82c - \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4: \uac04\ub2e8\ud55c \ub300\ud654\ud615 \ud504\ub85c\uadf8\ub7a8 \uc81c\uc791</p>"},{"location":"tutorials/beginner/chapter04_operators_expressions/#10","title":"10. \ud575\uc2ec \uc815\ub9ac","text":"<p>\u2705 \uc0b0\uc220 \uc5f0\uc0b0\uc790 - \uae30\ubcf8: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code> - \ub098\ub217\uc148: <code>/</code> (\uc2e4\uc218), <code>//</code> (\uc815\uc218), <code>%</code> (\ub098\uba38\uc9c0) - \uac70\ub4ed\uc81c\uacf1: <code>**</code> (\uc6b0\uacb0\ud569\uc131)</p> <p>\u2705 \ube44\uad50 \uc5f0\uc0b0\uc790 - <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code> - \uc5f0\uc1c4 \ube44\uad50: <code>10 &lt; x &lt; 20</code> - \uac1d\uccb4 \ube44\uad50: <code>is</code>, <code>is not</code></p> <p>\u2705 \ub17c\ub9ac \uc5f0\uc0b0\uc790 - <code>and</code>, <code>or</code>, <code>not</code> - \ub2e8\ucd95 \ud3c9\uac00 (Short-circuit evaluation) - \ub4dc\ubaa8\ub974\uac04 \ubc95\uce59 \ud65c\uc6a9</p> <p>\u2705 \ud560\ub2f9 \uc5f0\uc0b0\uc790 - \ubcf5\ud569 \ud560\ub2f9: <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>//=</code>, <code>%=</code>, <code>**=</code> - \uc6d4\ub9ac\uc2a4 \uc5f0\uc0b0\uc790: <code>:=</code> (Python 3.8+)</p> <p>\u2705 \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 - \uad04\ud638 \u2192 \uac70\ub4ed\uc81c\uacf1 \u2192 \uacf1\uc148/\ub098\ub217\uc148 \u2192 \ub367\uc148/\ube84\uc148 \u2192 \ube44\uad50 \u2192 \ub17c\ub9ac - \uba85\ud655\uc131\uc744 \uc704\ud55c \uad04\ud638 \uc0ac\uc6a9 \uad8c\uc7a5</p> <p>\u2705 \ube44\ud2b8 \uc5f0\uc0b0\uc790 - <code>&amp;</code> (AND), <code>|</code> (OR), <code>^</code> (XOR), <code>~</code> (NOT) - <code>&lt;&lt;</code> (\uc67c\ucabd \uc2dc\ud504\ud2b8), <code>&gt;&gt;</code> (\uc624\ub978\ucabd \uc2dc\ud504\ud2b8) - \uad8c\ud55c \uc2dc\uc2a4\ud15c, \ud50c\ub798\uadf8 \uad00\ub9ac\uc5d0 \ud65c\uc6a9</p> <p>\ud83c\udf89 \ucd95\ud558\ud569\ub2c8\ub2e4! Chapter 4\ub97c \uc644\ub8cc\ud588\uc2b5\ub2c8\ub2e4. \uc774\uc81c Python\uc758 \ub2e4\uc591\ud55c \uc5f0\uc0b0\uc790\ub4e4\uc744 \ud65c\uc6a9\ud558\uc5ec \ubcf5\uc7a1\ud55c \uacc4\uc0b0\uacfc \ub17c\ub9ac \ucc98\ub9ac\ub97c \ud560 \uc218 \uc788\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. Chapter 5\uc5d0\uc11c\ub294 \uc0ac\uc6a9\uc790\uc640\uc758 \uc0c1\ud638\uc791\uc6a9\uc744 \uc704\ud55c \uc785\ub825\uacfc \ucd9c\ub825\uc744 \ud559\uc2b5\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.  </p>"},{"location":"tutorials/beginner/chapter05_input_output/","title":"Chapter 5: \uc785\ub825\uacfc \ucd9c\ub825 (Input and Output)","text":""},{"location":"tutorials/beginner/chapter05_input_output/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - <code>print()</code> \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc591\ud55c \ud615\ud0dc\ub85c \ucd9c\ub825\ud558\uae30 - <code>input()</code> \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uc6a9\uc790\ub85c\ubd80\ud130 \uc785\ub825\ubc1b\uae30 - \uc785\ub825\ubc1b\uc740 \ub370\uc774\ud130\uc758 \ud0c0\uc785\uc744 \uc801\uc808\ud788 \ubcc0\ud658\ud558\uae30 - \ucd9c\ub825 \ud3ec\ub9f7\ud305\uc744 \ud1b5\ud574 \uac00\ub3c5\uc131 \ub192\uc740 \ucd9c\ub825 \ub9cc\ub4e4\uae30 - \uac04\ub2e8\ud55c \ub300\ud654\ud615 \ud504\ub85c\uadf8\ub7a8 \uc791\uc131\ud558\uae30</p>"},{"location":"tutorials/beginner/chapter05_input_output/#1-print","title":"1. \ucd9c\ub825\ud558\uae30 - print() \ud568\uc218","text":""},{"location":"tutorials/beginner/chapter05_input_output/#11","title":"1.1 \uae30\ubcf8 \ucd9c\ub825","text":"<p><code>print()</code> \ud568\uc218\ub294 \ud30c\uc774\uc36c\uc5d0\uc11c \ud654\uba74\uc5d0 \ud14d\uc2a4\ud2b8\ub97c \ucd9c\ub825\ud558\ub294 \uac00\uc7a5 \uae30\ubcf8\uc801\uc778 \ud568\uc218\uc785\ub2c8\ub2e4.</p> <pre><code># \uae30\ubcf8 \ucd9c\ub825\nprint(\"Hello, World!\")\nprint('\uc548\ub155\ud558\uc138\uc694!')\n\n# \uc22b\uc790 \ucd9c\ub825\nprint(42)\nprint(3.14159)\n\n# \ubcc0\uc218 \ucd9c\ub825\nname = \"Alice\"\nage = 25\nprint(name)\nprint(age)\n</code></pre> <p>\uc2e4\ud589 \uacb0\uacfc: <pre><code>Hello, World!\n\uc548\ub155\ud558\uc138\uc694!\n42\n3.14159\nAlice\n25\n</code></pre></p>"},{"location":"tutorials/beginner/chapter05_input_output/#12","title":"1.2 \uc5ec\ub7ec \uac12\uc744 \ud55c \ubc88\uc5d0 \ucd9c\ub825\ud558\uae30","text":"<p><code>print()</code> \ud568\uc218\ub294 \uc5ec\ub7ec \uac1c\uc758 \uac12\uc744 \ucf64\ub9c8\ub85c \uad6c\ubd84\ud558\uc5ec \ud55c \ubc88\uc5d0 \ucd9c\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>name = \"Bob\"\nage = 30\ncity = \"Seoul\"\n\n# \uc5ec\ub7ec \uac12\uc744 \ud55c \ubc88\uc5d0 \ucd9c\ub825\nprint(\"Name:\", name, \"Age:\", age, \"City:\", city)\nprint(1, 2, 3, 4, 5)\n\n# \uc11c\ub85c \ub2e4\ub978 \ud0c0\uc785\uc758 \uac12\ub4e4\nprint(\"The answer is\", 42, \"and the value is\", 3.14)\n</code></pre> <p>\uc2e4\ud589 \uacb0\uacfc: <pre><code>Name: Bob Age: 30 City: Seoul\n1 2 3 4 5\nThe answer is 42 and the value is 3.14\n</code></pre></p>"},{"location":"tutorials/beginner/chapter05_input_output/#13-print","title":"1.3 print() \ud568\uc218\uc758 \ub9e4\uac1c\ubcc0\uc218","text":""},{"location":"tutorials/beginner/chapter05_input_output/#sep","title":"sep \ub9e4\uac1c\ubcc0\uc218 (\uad6c\ubd84\uc790)","text":"<p>\uae30\ubcf8\uc801\uc73c\ub85c <code>print()</code> \ud568\uc218\ub294 \uac12\ub4e4 \uc0ac\uc774\uc5d0 \uacf5\ubc31\uc744 \ub123\uc2b5\ub2c8\ub2e4. <code>sep</code> \ub9e4\uac1c\ubcc0\uc218\ub85c \uc774\ub97c \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>print(\"apple\", \"banana\", \"cherry\")  # \uae30\ubcf8 (\uacf5\ubc31)\nprint(\"apple\", \"banana\", \"cherry\", sep=\", \")  # \ucf64\ub9c8\uc640 \uacf5\ubc31\nprint(\"apple\", \"banana\", \"cherry\", sep=\"-\")   # \ud558\uc774\ud508\nprint(\"apple\", \"banana\", \"cherry\", sep=\"\")    # \uad6c\ubd84\uc790 \uc5c6\uc74c\nprint(2023, 12, 25, sep=\"/\")  # \ub0a0\uc9dc \ud615\uc2dd\n</code></pre> <p>\uc2e4\ud589 \uacb0\uacfc: <pre><code>apple banana cherry\napple, banana, cherry\napple-banana-cherry\napplebananacherry\n2023/12/25\n</code></pre></p>"},{"location":"tutorials/beginner/chapter05_input_output/#end","title":"end \ub9e4\uac1c\ubcc0\uc218 (\ub05d \ubb38\uc790)","text":"<p>\uae30\ubcf8\uc801\uc73c\ub85c <code>print()</code> \ud568\uc218\ub294 \ucd9c\ub825 \ud6c4 \uc904\ubc14\uafc8\uc744 \ud569\ub2c8\ub2e4. <code>end</code> \ub9e4\uac1c\ubcc0\uc218\ub85c \uc774\ub97c \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>print(\"Hello\", end=\" \")\nprint(\"World\", end=\"!\")\nprint()  # \uc904\ubc14\uafc8\n\nprint(\"Loading\", end=\"\")\nprint(\".\", end=\"\")\nprint(\".\", end=\"\")\nprint(\".\", end=\"\")\nprint(\" Done!\")\n</code></pre> <p>\uc2e4\ud589 \uacb0\uacfc: <pre><code>Hello World!\nLoading... Done!\n</code></pre></p>"},{"location":"tutorials/beginner/chapter05_input_output/#14","title":"1.4 \ud2b9\uc218 \ubb38\uc790","text":"<p>\ubb38\uc790\uc5f4\uc5d0\uc11c \ud2b9\uc218\ud55c \uc758\ubbf8\ub97c \uac00\uc9c0\ub294 \ubb38\uc790\ub4e4\uc744 \ucd9c\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code># \uc904\ubc14\uafc8\nprint(\"First line\\nSecond line\\nThird line\")\n\n# \ud0ed\nprint(\"Name:\\tJohn\\nAge:\\t25\\nCity:\\tTokyo\")\n\n# \ub530\uc634\ud45c\nprint(\"He said, \\\"Hello, World!\\\"\")\nprint('She replied, \\'Hi there!\\'')\n\n# \ubc31\uc2ac\ub798\uc2dc\nprint(\"File path: C:\\\\Users\\\\Documents\")\n\n# \uce90\ub9ac\uc9c0 \ub9ac\ud134 (\uac19\uc740 \uc904\uc5d0\uc11c \ucc98\uc74c\uc73c\ub85c \ub3cc\uc544\uac10)\nprint(\"Hello World\", end=\"\")\nprint(\"\\rHi\", end=\"\")\nprint()\n</code></pre> <p>\uc2e4\ud589 \uacb0\uacfc: <pre><code>First line\nSecond line\nThird line\nName:   John\nAge:    25\nCity:   Tokyo\nHe said, \"Hello, World!\"\nShe replied, 'Hi there!'\nFile path: C:\\Users\\Documents\nHi\n</code></pre></p>"},{"location":"tutorials/beginner/chapter05_input_output/#2-input","title":"2. \uc785\ub825\ubc1b\uae30 - input() \ud568\uc218","text":""},{"location":"tutorials/beginner/chapter05_input_output/#21","title":"2.1 \uae30\ubcf8 \uc785\ub825","text":"<p><code>input()</code> \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 \uc0ac\uc6a9\uc790\ub85c\ubd80\ud130 \ud14d\uc2a4\ud2b8\ub97c \uc785\ub825\ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code># \uae30\ubcf8 \uc785\ub825\nname = input(\"What's your name? \")\nprint(\"Hello,\", name)\n\n# \uba54\uc2dc\uc9c0 \uc5c6\uc774 \uc785\ub825\ubc1b\uae30\nage = input()\nprint(\"You entered:\", age)\n</code></pre> <p>\uc2e4\ud589 \uc608\uc2dc: <pre><code>What's your name? Alice\nHello, Alice\n30\nYou entered: 30\n</code></pre></p>"},{"location":"tutorials/beginner/chapter05_input_output/#22-input","title":"2.2 input() \ud568\uc218\uc758 \ud2b9\uc9d5","text":"<p>\uc911\uc694: <code>input()</code> \ud568\uc218\ub294 \ud56d\uc0c1 \ubb38\uc790\uc5f4(string)\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4!</p> <pre><code># \uc0ac\uc6a9\uc790\uac00 \uc22b\uc790\ub97c \uc785\ub825\ud574\ub3c4 \ubb38\uc790\uc5f4\ub85c \ubc1b\uc544\uc9d1\ub2c8\ub2e4\nuser_input = input(\"Enter a number: \")\nprint(\"You entered:\", user_input)\nprint(\"Type of input:\", type(user_input))\n\n# \ubb38\uc790\uc5f4\uc774\ubbc0\ub85c \uc218\ud559\uc801 \uacc4\uc0b0\uc774 \ubd88\uac00\ub2a5\n# number = user_input + 10  # \uc624\ub958 \ubc1c\uc0dd!\n</code></pre> <p>\uc2e4\ud589 \uc608\uc2dc: <pre><code>Enter a number: 25\nYou entered: 25\nType of input: &lt;class 'str'&gt;\n</code></pre></p>"},{"location":"tutorials/beginner/chapter05_input_output/#23","title":"2.3 \uc785\ub825 \ub370\uc774\ud130 \ud0c0\uc785 \ubcc0\ud658","text":"<p>\uc0ac\uc6a9\uc790\ub85c\ubd80\ud130 \ubc1b\uc740 \uc785\ub825\uc744 \uc6d0\ud558\ub294 \ub370\uc774\ud130 \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/beginner/chapter05_input_output/#_2","title":"\uc815\uc218\ub85c \ubcc0\ud658","text":"<pre><code># \uc815\uc218 \uc785\ub825\ubc1b\uae30\nage_str = input(\"Enter your age: \")\nage = int(age_str)  # \ubb38\uc790\uc5f4\uc744 \uc815\uc218\ub85c \ubcc0\ud658\n\nprint(\"Your age is:\", age)\nprint(\"Next year you will be:\", age + 1)\n\n# \ud55c \uc904\ub85c \uc904\uc5ec\uc11c \uc4f0\uae30\nage = int(input(\"Enter your age: \"))\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#_3","title":"\uc2e4\uc218\ub85c \ubcc0\ud658","text":"<pre><code># \uc2e4\uc218 \uc785\ub825\ubc1b\uae30\nheight = float(input(\"Enter your height (cm): \"))\nprint(\"Your height is:\", height, \"cm\")\nprint(\"Your height in meters:\", height / 100, \"m\")\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#_4","title":"\ubd88\ub9b0\uc73c\ub85c \ubcc0\ud658","text":"<pre><code># \ubd88\ub9b0 \uc785\ub825 \ucc98\ub9ac (\uc8fc\uc758: \uc9c1\uc811 bool() \uc0ac\uc6a9\uc740 \ube44\ucd94\ucc9c)\nanswer = input(\"Do you like Python? (yes/no): \")\nlikes_python = answer.lower() == \"yes\"\nprint(\"Likes Python:\", likes_python)\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#24","title":"2.4 \ud0c0\uc785 \ubcc0\ud658 \uc2dc \uc8fc\uc758\uc0ac\ud56d","text":"<p>\uc798\ubabb\ub41c \uc785\ub825\uc774 \ub4e4\uc5b4\uc654\uc744 \ub54c \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code># \uc8fc\uc758: \uc22b\uc790\uac00 \uc544\ub2cc \ubb38\uc790\uc5f4\uc744 int()\ub85c \ubcc0\ud658\ud558\ub824 \ud558\uba74 \uc624\ub958 \ubc1c\uc0dd\ntry:\n    number = int(input(\"Enter a number: \"))\n    print(\"Number:\", number)\nexcept ValueError:\n    print(\"That's not a valid number!\")\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#3","title":"3. \ucd9c\ub825 \ud3ec\ub9f7\ud305","text":""},{"location":"tutorials/beginner/chapter05_input_output/#31","title":"3.1 \ubb38\uc790\uc5f4 \uc5f0\uacb0","text":"<pre><code>name = \"Charlie\"\nage = 28\n\n# \ubb38\uc790\uc5f4 \uc5f0\uacb0\nmessage = \"My name is \" + name + \" and I am \" + str(age) + \" years old.\"\nprint(message)\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#32-f-string","title":"3.2 f-string (\ucd94\ucc9c \ubc29\ubc95)","text":"<p>Python 3.6 \uc774\uc0c1\uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uac00\uc7a5 \ud604\ub300\uc801\uc774\uace0 \uc77d\uae30 \uc26c\uc6b4 \ubc29\ubc95\uc785\ub2c8\ub2e4.</p> <pre><code>name = \"Diana\"\nage = 22\nheight = 165.5\n\n# f-string \uc0ac\uc6a9\nprint(f\"Name: {name}\")\nprint(f\"Age: {age}\")\nprint(f\"Height: {height} cm\")\n\n# \ud45c\ud604\uc2dd\ub3c4 \uc0ac\uc6a9 \uac00\ub2a5\nprint(f\"Next year, {name} will be {age + 1} years old.\")\nprint(f\"Height in meters: {height / 100:.2f} m\")\n</code></pre> <p>\uc2e4\ud589 \uacb0\uacfc: <pre><code>Name: Diana\nAge: 22\nHeight: 165.5 cm\nNext year, Diana will be 23 years old.\nHeight in meters: 1.65 m\n</code></pre></p>"},{"location":"tutorials/beginner/chapter05_input_output/#33-format","title":"3.3 format() \uba54\uc11c\ub4dc","text":"<pre><code>name = \"Eve\"\nage = 35\nsalary = 50000\n\n# format() \uba54\uc11c\ub4dc \uc0ac\uc6a9\nprint(\"Name: {}, Age: {}, Salary: ${:,}\".format(name, age, salary))\n\n# \uc778\ub371\uc2a4 \uc9c0\uc815\nprint(\"Age: {1}, Name: {0}\".format(name, age))\n\n# \ud0a4\uc6cc\ub4dc \uc778\uc218\nprint(\"Name: {n}, Age: {a}\".format(n=name, a=age))\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#34","title":"3.4 % \ud3ec\ub9f7\ud305 (\uad6c\uc2dd \ubc29\ubc95)","text":"<pre><code>name = \"Frank\"\nage = 40\n\n# % \ud3ec\ub9f7\ud305\nprint(\"Name: %s, Age: %d\" % (name, age))\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#4","title":"4. \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c\ub4e4","text":""},{"location":"tutorials/beginner/chapter05_input_output/#41","title":"4.1 \uac04\ub2e8\ud55c \uacc4\uc0b0\uae30","text":"<pre><code>print(\"=== Simple Calculator ===\")\nnum1 = float(input(\"Enter first number: \"))\noperator = input(\"Enter operator (+, -, *, /): \")\nnum2 = float(input(\"Enter second number: \"))\n\nif operator == \"+\":\n    result = num1 + num2\nelif operator == \"-\":\n    result = num1 - num2\nelif operator == \"*\":\n    result = num1 * num2\nelif operator == \"/\":\n    if num2 != 0:\n        result = num1 / num2\n    else:\n        result = \"Error: Division by zero!\"\nelse:\n    result = \"Error: Invalid operator!\"\n\nprint(f\"Result: {num1} {operator} {num2} = {result}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#42","title":"4.2 \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc218\uc9d1","text":"<pre><code>print(\"=== User Registration ===\")\n\n# \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc785\ub825\ubc1b\uae30\nfirst_name = input(\"First name: \")\nlast_name = input(\"Last name: \")\nage = int(input(\"Age: \"))\nemail = input(\"Email: \")\ncity = input(\"City: \")\n\n# \uc815\ubcf4 \ucd9c\ub825\nprint(\"\\n=== User Information ===\")\nprint(f\"Full Name: {first_name} {last_name}\")\nprint(f\"Age: {age}\")\nprint(f\"Email: {email}\")\nprint(f\"City: {city}\")\n\n# \ucd94\uac00 \uacc4\uc0b0\nbirth_year = 2024 - age\nprint(f\"Approximate birth year: {birth_year}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#43","title":"4.3 \uc628\ub3c4 \ubcc0\ud658\uae30","text":"<pre><code>print(\"=== Temperature Converter ===\")\nprint(\"1. Celsius to Fahrenheit\")\nprint(\"2. Fahrenheit to Celsius\")\n\nchoice = input(\"Choose conversion (1 or 2): \")\n\nif choice == \"1\":\n    celsius = float(input(\"Enter temperature in Celsius: \"))\n    fahrenheit = (celsius * 9/5) + 32\n    print(f\"{celsius}\u00b0C = {fahrenheit:.1f}\u00b0F\")\nelif choice == \"2\":\n    fahrenheit = float(input(\"Enter temperature in Fahrenheit: \"))\n    celsius = (fahrenheit - 32) * 5/9\n    print(f\"{fahrenheit}\u00b0F = {celsius:.1f}\u00b0C\")\nelse:\n    print(\"Invalid choice!\")\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#44","title":"4.4 \uc1fc\ud551 \ubaa9\ub85d \ub9cc\ub4e4\uae30","text":"<pre><code>print(\"=== Shopping List Creator ===\")\n\nitem1 = input(\"Enter first item: \")\nitem2 = input(\"Enter second item: \")\nitem3 = input(\"Enter third item: \")\n\nprint(\"\\n=== Your Shopping List ===\")\nprint(f\"1. {item1}\")\nprint(f\"2. {item2}\")\nprint(f\"3. {item3}\")\n\nprint(\"\\nFormatted for printing:\")\nprint(\"-\" * 25)\nprint(\"|     Shopping List     |\")\nprint(\"-\" * 25)\nprint(f\"| 1. {item1:&lt;16} |\")\nprint(f\"| 2. {item2:&lt;16} |\")\nprint(f\"| 3. {item3:&lt;16} |\")\nprint(\"-\" * 25)\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#5","title":"5. \ud301\uacfc \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"tutorials/beginner/chapter05_input_output/#51","title":"5.1 \uc0ac\uc6a9\uc790 \uce5c\ud654\uc801\uc778 \ud504\ub85c\uadf8\ub7a8 \ub9cc\ub4e4\uae30","text":"<pre><code># \uc88b\uc740 \uc608: \uba85\ud655\ud55c \uc548\ub0b4 \uba54\uc2dc\uc9c0\nname = input(\"Please enter your full name: \")\nage = int(input(\"Please enter your age (numbers only): \"))\n\n# \uc785\ub825 \ud655\uc778\nprint(f\"\\nYou entered: {name}, age {age}\")\nconfirm = input(\"Is this correct? (yes/no): \")\n\nif confirm.lower() == \"yes\":\n    print(\"Information saved!\")\nelse:\n    print(\"Please restart and enter your information again.\")\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#52","title":"5.2 \uc785\ub825 \uac80\uc99d","text":"<pre><code># \ub098\uc774 \uc785\ub825 \uac80\uc99d\nwhile True:\n    try:\n        age = int(input(\"Enter your age: \"))\n        if age &lt; 0:\n            print(\"Age cannot be negative!\")\n        elif age &gt; 150:\n            print(\"Age seems too high!\")\n        else:\n            break\n    except ValueError:\n        print(\"Please enter a valid number!\")\n\nprint(f\"Your age is: {age}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#53","title":"5.3 \uc5ec\ub7ec \uc904 \uc785\ub825\ubc1b\uae30","text":"<pre><code>print(\"Tell me about yourself (press Enter twice to finish):\")\nlines = []\nwhile True:\n    line = input()\n    if line == \"\":\n        break\n    lines.append(line)\n\nprint(\"\\nWhat you wrote:\")\nfor line in lines:\n    print(f\"  {line}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#6","title":"6. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/beginner/chapter05_input_output/#1","title":"\uc5f0\uc2b5 1: \uac1c\uc778 \uc815\ubcf4 \uce74\ub4dc","text":"<p>\uc0ac\uc6a9\uc790\ub85c\ubd80\ud130 \uc774\ub984, \ub098\uc774, \ucde8\ubbf8\ub97c \uc785\ub825\ubc1b\uc544 \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \ucd9c\ub825\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p> <pre><code>==============================\n        Personal Card\n==============================\nName: John Doe\nAge: 25 years old\nHobby: Reading\n==============================\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#2-bmi","title":"\uc5f0\uc2b5 2: BMI \uacc4\uc0b0\uae30","text":"<p>\uc0ac\uc6a9\uc790\ub85c\ubd80\ud130 \ud0a4(cm)\uc640 \ubab8\ubb34\uac8c(kg)\ub97c \uc785\ub825\ubc1b\uc544 BMI\ub97c \uacc4\uc0b0\ud558\uace0 \uacb0\uacfc\ub97c \ucd9c\ub825\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694. - BMI = \ubab8\ubb34\uac8c(kg) / (\ud0a4(m))\u00b2 - \uacb0\uacfc\ub294 \uc18c\uc218\uc810 \ub458\uc9f8 \uc790\ub9ac\uae4c\uc9c0 \ud45c\uc2dc</p>"},{"location":"tutorials/beginner/chapter05_input_output/#3_1","title":"\uc5f0\uc2b5 3: \uc601\uc218\uc99d \ub9cc\ub4e4\uae30","text":"<p>\uc0ac\uc6a9\uc790\ub85c\ubd80\ud130 \uc0c1\ud488\uba85\uacfc \uac00\uaca9\uc744 3\uac1c \uc785\ub825\ubc1b\uc544 \ub2e4\uc74c\uacfc \uac19\uc740 \uc601\uc218\uc99d\uc744 \ucd9c\ub825\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p> <pre><code>========== RECEIPT ==========\nItem 1: Apple        $2.50\nItem 2: Bread        $3.00\nItem 3: Milk         $4.50\n-----------------------------\nTotal:              $10.00\n=============================\n</code></pre>"},{"location":"tutorials/beginner/chapter05_input_output/#_5","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>print() \ud568\uc218: \uae30\ubcf8 \ucd9c\ub825, \uc5ec\ub7ec \uac12 \ucd9c\ub825, sep\uacfc end \ub9e4\uac1c\ubcc0\uc218</li> <li>input() \ud568\uc218: \uc0ac\uc6a9\uc790 \uc785\ub825\ubc1b\uae30, \ud56d\uc0c1 \ubb38\uc790\uc5f4 \ubc18\ud658</li> <li>\ud0c0\uc785 \ubcc0\ud658: int(), float(), str() \ud568\uc218 \uc0ac\uc6a9</li> <li>\ucd9c\ub825 \ud3ec\ub9f7\ud305: f-string, format() \uba54\uc11c\ub4dc, % \ud3ec\ub9f7\ud305</li> <li>\uc2e4\uc6a9\uc801 \uc608\uc81c: \uacc4\uc0b0\uae30, \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc218\uc9d1, \uc628\ub3c4 \ubcc0\ud658\uae30 \ub4f1</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \uc870\uac74\ubb38(if\ubb38)\uc744 \ud559\uc2b5\ud558\uc5ec \ud504\ub85c\uadf8\ub7a8\uc774 \uc0c1\ud669\uc5d0 \ub530\ub77c \ub2e4\ub978 \ub3d9\uc791\uc744 \ud558\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/beginner/chapter05_input_output/#_6","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li><code>input()</code>\uc740 \ud56d\uc0c1 \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud558\ubbc0\ub85c \ud544\uc694\uc2dc \ud0c0\uc785 \ubcc0\ud658\uc774 \ud544\uc218</li> <li>f-string\uc744 \uc0ac\uc6a9\ud558\uba74 \uac00\ub3c5\uc131 \ub192\uc740 \ucd9c\ub825 \ud3ec\ub9f7\ud305 \uac00\ub2a5</li> <li>\uc0ac\uc6a9\uc790 \uce5c\ud654\uc801\uc778 \ud504\ub85c\uadf8\ub7a8\uc744 \uc704\ud574 \uba85\ud655\ud55c \uc548\ub0b4 \uba54\uc2dc\uc9c0 \uc81c\uacf5</li> <li>\uc798\ubabb\ub41c \uc785\ub825\uc5d0 \ub300\ud55c \ucc98\ub9ac \ubc29\ubc95 \uace0\ub824</li> </ul>"},{"location":"tutorials/beginner/chapter06_conditional_statements/","title":"Chapter 6: \uc870\uac74\ubb38 (Conditional Statements)","text":""},{"location":"tutorials/beginner/chapter06_conditional_statements/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - if, elif, else\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc870\uac74\ubd80 \uc2e4\ud589 \uad6c\ud604\ud558\uae30 - \ub2e4\uc591\ud55c \uc870\uac74 \ud45c\ud604\uc2dd \uc791\uc131\ud558\uae30 - \uc911\ucca9 \uc870\uac74\ubb38\uc744 \ud65c\uc6a9\ud558\uc5ec \ubcf5\uc7a1\ud55c \ub85c\uc9c1 \uad6c\ud604\ud558\uae30 - \ub17c\ub9ac \uc5f0\uc0b0\uc790\ub97c \uc870\uac74\ubb38\uacfc \ud568\uaed8 \uc0ac\uc6a9\ud558\uae30 - \uc2e4\uc6a9\uc801\uc778 \uc870\uac74\ubb38 \uae30\ubc18 \ud504\ub85c\uadf8\ub7a8 \uc791\uc131\ud558\uae30</p>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#1","title":"1. \uc870\uac74\ubb38\uc758 \uae30\ubcf8 \uac1c\ub150","text":""},{"location":"tutorials/beginner/chapter06_conditional_statements/#11","title":"1.1 \uc870\uac74\ubb38\uc774\ub780?","text":"<p>\uc870\uac74\ubb38\uc740 \ud2b9\uc815 \uc870\uac74\uc774 \ucc38(True) \ub610\ub294 \uac70\uc9d3(False)\uc778\uc9c0\uc5d0 \ub530\ub77c \ud504\ub85c\uadf8\ub7a8\uc758 \uc2e4\ud589 \ud750\ub984\uc744 \uc81c\uc5b4\ud558\ub294 \uad6c\ubb38\uc785\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc774 \uc0c1\ud669\uc5d0 \ub530\ub77c \ub2e4\ub978 \ub3d9\uc791\uc744 \ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ud575\uc2ec \uc694\uc18c\uc785\ub2c8\ub2e4.</p> <pre><code># \uac04\ub2e8\ud55c \uc608\uc2dc\nage = 18\n\nif age &gt;= 18:\n    print(\"\uc131\uc778\uc785\ub2c8\ub2e4.\")\nelse:\n    print(\"\ubbf8\uc131\ub144\uc790\uc785\ub2c8\ub2e4.\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#12","title":"1.2 \uc870\uac74\ubb38\uc758 \uad6c\uc870","text":"<p>Python\uc758 \uc870\uac74\ubb38\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uad6c\uc870\ub97c \uac00\uc9d1\ub2c8\ub2e4:</p> <pre><code>if \uc870\uac74\uc2dd:\n    # \uc870\uac74\uc774 \ucc38\uc77c \ub54c \uc2e4\ud589\ud560 \ucf54\ub4dc\n    \uc2e4\ud589\ubb381\n    \uc2e4\ud589\ubb382\nelif \ub2e4\ub978_\uc870\uac74\uc2dd:  # \uc120\ud0dd\uc0ac\ud56d\n    # \ub2e4\ub978 \uc870\uac74\uc774 \ucc38\uc77c \ub54c \uc2e4\ud589\ud560 \ucf54\ub4dc\n    \uc2e4\ud589\ubb383\nelse:  # \uc120\ud0dd\uc0ac\ud56d\n    # \ubaa8\ub4e0 \uc870\uac74\uc774 \uac70\uc9d3\uc77c \ub54c \uc2e4\ud589\ud560 \ucf54\ub4dc\n    \uc2e4\ud589\ubb384\n</code></pre> <p>\uc911\uc694\ud55c \ubb38\ubc95 \uc694\uc18c: - <code>if</code>, <code>elif</code>, <code>else</code> \ub4a4\uc5d0\ub294 \ubc18\ub4dc\uc2dc \ucf5c\ub860(<code>:</code>)\uc774 \uc640\uc57c \ud569\ub2c8\ub2e4 - \uc870\uac74\ubb38 \uc548\uc758 \ucf54\ub4dc\ub294 \ub4e4\uc5ec\uc4f0\uae30(indentation)\ub85c \uad6c\ubd84\ud569\ub2c8\ub2e4 (\ubcf4\ud1b5 4\uce78 \uacf5\ubc31) - \ub4e4\uc5ec\uc4f0\uae30\uac00 \uac19\uc740 \ucf54\ub4dc\ub4e4\uc740 \uac19\uc740 \ube14\ub85d\uc73c\ub85c \ucde8\uae09\ub429\ub2c8\ub2e4</p>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#2-if","title":"2. \uae30\ubcf8 if\ubb38","text":""},{"location":"tutorials/beginner/chapter06_conditional_statements/#21-if","title":"2.1 \ub2e8\uc21c if\ubb38","text":"<pre><code># \uae30\ubcf8 if\ubb38\nscore = 85\n\nif score &gt;= 80:\n    print(\"\ud569\uaca9\uc785\ub2c8\ub2e4!\")\n    print(\"\ucd95\ud558\ud569\ub2c8\ub2e4.\")\n\nprint(\"\uc810\uc218 \ud655\uc778\uc774 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n</code></pre> <p>\uc2e4\ud589 \uacb0\uacfc: <pre><code>\ud569\uaca9\uc785\ub2c8\ub2e4!\n\ucd95\ud558\ud569\ub2c8\ub2e4.\n\uc810\uc218 \ud655\uc778\uc774 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n</code></pre></p>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#22-if-else","title":"2.2 if-else\ubb38","text":"<pre><code># if-else \uad6c\uc870\ntemperature = 25\n\nif temperature &gt; 30:\n    print(\"\ub354\uc6b4 \ub0a0\uc528\uc785\ub2c8\ub2e4. \uc5d0\uc5b4\ucee8\uc744 \ucf1c\uc138\uc694.\")\nelse:\n    print(\"\uc801\ub2f9\ud55c \ub0a0\uc528\uc785\ub2c8\ub2e4.\")\n\nprint(f\"\ud604\uc7ac \uc628\ub3c4: {temperature}\ub3c4\")\n</code></pre> <p>\uc2e4\ud589 \uacb0\uacfc: <pre><code>\uc801\ub2f9\ud55c \ub0a0\uc528\uc785\ub2c8\ub2e4.\n\ud604\uc7ac \uc628\ub3c4: 25\ub3c4\n</code></pre></p>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#23","title":"2.3 \ub2e4\uc591\ud55c \uc870\uac74 \ud45c\ud604\uc2dd","text":"<pre><code># \uc22b\uc790 \ube44\uad50\nnum = 10\nif num &gt; 0:\n    print(\"\uc591\uc218\uc785\ub2c8\ub2e4.\")\n\n# \ubb38\uc790\uc5f4 \ube44\uad50\nname = \"Alice\"\nif name == \"Alice\":\n    print(\"\uc548\ub155\ud558\uc138\uc694, Alice\ub2d8!\")\n\n# \ubb38\uc790\uc5f4 \ud3ec\ud568 \ud655\uc778\ntext = \"Python Programming\"\nif \"Python\" in text:\n    print(\"Python\uc5d0 \uad00\ud55c \ub0b4\uc6a9\uc785\ub2c8\ub2e4.\")\n\n# \ub9ac\uc2a4\ud2b8 \uae38\uc774 \ud655\uc778\nitems = [1, 2, 3, 4, 5]\nif len(items) &gt; 3:\n    print(\"\uc544\uc774\ud15c\uc774 \ub9ce\uc2b5\ub2c8\ub2e4.\")\n\n# \ubd88\ub9b0 \uac12 \ud655\uc778\nis_student = True\nif is_student:\n    print(\"\ud559\uc0dd\uc785\ub2c8\ub2e4.\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#3-elif","title":"3. elif\ubb38 (\ub2e4\uc911 \uc870\uac74)","text":""},{"location":"tutorials/beginner/chapter06_conditional_statements/#31-elif","title":"3.1 \uae30\ubcf8 elif \uc0ac\uc6a9\ubc95","text":"<p><code>elif</code>\ub294 \"else if\"\uc758 \uc904\uc784\ub9d0\ub85c, \uc5ec\ub7ec \uc870\uac74\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \ud655\uc778\ud560 \ub54c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.</p> <pre><code>score = 78\n\nif score &gt;= 90:\n    grade = \"A\"\nelif score &gt;= 80:\n    grade = \"B\"\nelif score &gt;= 70:\n    grade = \"C\"\nelif score &gt;= 60:\n    grade = \"D\"\nelse:\n    grade = \"F\"\n\nprint(f\"\uc810\uc218: {score}, \ub4f1\uae09: {grade}\")\n</code></pre> <p>\uc2e4\ud589 \uacb0\uacfc: <pre><code>\uc810\uc218: 78, \ub4f1\uae09: C\n</code></pre></p>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#32-elif","title":"3.2 \uc2e4\uc6a9\uc801\uc778 elif \uc608\uc81c","text":"<pre><code># \uacc4\uc808 \ud310\ubcc4\uae30\nmonth = 7\n\nif month in [12, 1, 2]:\n    season = \"\uaca8\uc6b8\"\nelif month in [3, 4, 5]:\n    season = \"\ubd04\"\nelif month in [6, 7, 8]:\n    season = \"\uc5ec\ub984\"\nelif month in [9, 10, 11]:\n    season = \"\uac00\uc744\"\nelse:\n    season = \"\uc798\ubabb\ub41c \uc6d4\"\n\nprint(f\"{month}\uc6d4\uc740 {season}\uc785\ub2c8\ub2e4.\")\n</code></pre> <p>\uc2e4\ud589 \uacb0\uacfc: <pre><code>7\uc6d4\uc740 \uc5ec\ub984\uc785\ub2c8\ub2e4.\n</code></pre></p>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#33","title":"3.3 \uc0ac\uc6a9\uc790 \uc785\ub825\uacfc \uc870\uac74\ubb38","text":"<pre><code># \uac04\ub2e8\ud55c \uba54\ub274 \uc2dc\uc2a4\ud15c\nprint(\"=== \uc74c\ub8cc \uc8fc\ubb38 \uc2dc\uc2a4\ud15c ===\")\nprint(\"1. \ucee4\ud53c - 3000\uc6d0\")\nprint(\"2. \ucc28 - 2500\uc6d0\")\nprint(\"3. \uc8fc\uc2a4 - 4000\uc6d0\")\n\nchoice = input(\"\uba54\ub274\ub97c \uc120\ud0dd\ud558\uc138\uc694 (1-3): \")\n\nif choice == \"1\":\n    print(\"\ucee4\ud53c\ub97c \uc8fc\ubb38\ud558\uc168\uc2b5\ub2c8\ub2e4. 3000\uc6d0\uc785\ub2c8\ub2e4.\")\nelif choice == \"2\":\n    print(\"\ucc28\ub97c \uc8fc\ubb38\ud558\uc168\uc2b5\ub2c8\ub2e4. 2500\uc6d0\uc785\ub2c8\ub2e4.\")\nelif choice == \"3\":\n    print(\"\uc8fc\uc2a4\ub97c \uc8fc\ubb38\ud558\uc168\uc2b5\ub2c8\ub2e4. 4000\uc6d0\uc785\ub2c8\ub2e4.\")\nelse:\n    print(\"\uc798\ubabb\ub41c \uc120\ud0dd\uc785\ub2c8\ub2e4.\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#4-nested-conditionals","title":"4. \uc911\ucca9 \uc870\uac74\ubb38 (Nested Conditionals)","text":""},{"location":"tutorials/beginner/chapter06_conditional_statements/#41","title":"4.1 \uae30\ubcf8 \uc911\ucca9 \uad6c\uc870","text":"<p>\uc870\uac74\ubb38 \uc548\uc5d0 \ub610 \ub2e4\ub978 \uc870\uac74\ubb38\uc744 \ub123\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>age = 25\nhas_license = True\n\nif age &gt;= 18:\n    print(\"\uc131\uc778\uc785\ub2c8\ub2e4.\")\n    if has_license:\n        print(\"\uc6b4\uc804\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\")\n    else:\n        print(\"\uc6b4\uc804\uba74\ud5c8\ub97c \ucde8\ub4dd\ud558\uc138\uc694.\")\nelse:\n    print(\"\ubbf8\uc131\ub144\uc790\ub294 \uc6b4\uc804\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n</code></pre> <p>\uc2e4\ud589 \uacb0\uacfc: <pre><code>\uc131\uc778\uc785\ub2c8\ub2e4.\n\uc6b4\uc804\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n</code></pre></p>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#42","title":"4.2 \ubcf5\uc7a1\ud55c \uc911\ucca9 \uc608\uc81c","text":"<pre><code># \ud559\uc0dd \uc131\uc801 \ubc0f \ucd9c\uc11d \uad00\ub9ac \uc2dc\uc2a4\ud15c\nscore = 85\nattendance = 90  # \ucd9c\uc11d\ub960 (%)\n\nprint(\"=== \uc131\uc801 \ud3c9\uac00 \uc2dc\uc2a4\ud15c ===\")\n\nif score &gt;= 60:  # \ud569\uaca9 \uae30\uc900\uc810\n    print(\"\uae30\ubcf8 \ud569\uaca9 \uc870\uac74\uc744 \ub9cc\uc871\ud569\ub2c8\ub2e4.\")\n\n    if attendance &gt;= 80:\n        print(\"\ucd9c\uc11d\ub960\ub3c4 \uc591\ud638\ud569\ub2c8\ub2e4.\")\n\n        if score &gt;= 90:\n            print(\"\ucd5c\uc885 \ud3c9\uac00: \uc6b0\uc218\")\n        elif score &gt;= 80:\n            print(\"\ucd5c\uc885 \ud3c9\uac00: \uc591\ud638\")\n        else:\n            print(\"\ucd5c\uc885 \ud3c9\uac00: \ubcf4\ud1b5\")\n    else:\n        print(\"\ucd9c\uc11d\ub960\uc774 \ubd80\uc871\ud569\ub2c8\ub2e4. (80% \ubbf8\ub9cc)\")\n        print(\"\ucd5c\uc885 \ud3c9\uac00: \uc7ac\uc218\uac15 \uad8c\uc7a5\")\nelse:\n    print(\"\uae30\ubcf8 \ud569\uaca9 \uc870\uac74\uc744 \ub9cc\uc871\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\")\n    print(\"\ucd5c\uc885 \ud3c9\uac00: \ubd88\ud569\uaca9\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#43","title":"4.3 \uc911\ucca9 \uc870\uac74\ubb38 \uc8fc\uc758\uc0ac\ud56d","text":"<pre><code># \uc88b\uc9c0 \uc54a\uc740 \uc608 - \ub108\ubb34 \uae4a\uc740 \uc911\ucca9\nnumber = 15\n\nif number &gt; 0:\n    if number &lt; 100:\n        if number % 2 == 0:\n            if number % 10 == 0:\n                print(\"10\uc758 \ubc30\uc218\uc778 \uc9dd\uc218\")\n            else:\n                print(\"\uc9dd\uc218\")\n        else:\n            print(\"\ud640\uc218\")\n    else:\n        print(\"100 \uc774\uc0c1\")\nelse:\n    print(\"\uc74c\uc218 \ub610\ub294 0\")\n\n# \ub354 \ub098\uc740 \ubc29\ubc95 - \ub17c\ub9ac \uc5f0\uc0b0\uc790 \ud65c\uc6a9\nnumber = 15\n\nif number &lt;= 0:\n    print(\"\uc74c\uc218 \ub610\ub294 0\")\nelif number &gt;= 100:\n    print(\"100 \uc774\uc0c1\")\nelif number % 2 == 0 and number % 10 == 0:\n    print(\"10\uc758 \ubc30\uc218\uc778 \uc9dd\uc218\")\nelif number % 2 == 0:\n    print(\"\uc9dd\uc218\")\nelse:\n    print(\"\ud640\uc218\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#5","title":"5. \ub17c\ub9ac \uc5f0\uc0b0\uc790\uc640 \uc870\uac74\ubb38","text":""},{"location":"tutorials/beginner/chapter06_conditional_statements/#51-and","title":"5.1 and \uc5f0\uc0b0\uc790","text":"<p>\ubaa8\ub4e0 \uc870\uac74\uc774 \ucc38\uc774\uc5b4\uc57c \uc804\uccb4\uac00 \ucc38\uc774 \ub429\ub2c8\ub2e4.</p> <pre><code>age = 25\nincome = 30000000  # \uc5f0\ubd09 3000\ub9cc\uc6d0\ncredit_score = 750\n\n# \ub300\ucd9c \uc2b9\uc778 \uc870\uac74\nif age &gt;= 20 and income &gt;= 25000000 and credit_score &gt;= 700:\n    print(\"\ub300\ucd9c\uc774 \uc2b9\uc778\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\nelse:\n    print(\"\ub300\ucd9c \uc870\uac74\uc744 \ub9cc\uc871\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\")\n\n# \uac01 \uc870\uac74 \uc138\ubd80 \ud655\uc778\nif age &lt; 20:\n    print(\"- \ub098\uc774 \uc870\uac74 \ubbf8\ub2ec (20\uc138 \uc774\uc0c1 \ud544\uc694)\")\nif income &lt; 25000000:\n    print(\"- \uc18c\ub4dd \uc870\uac74 \ubbf8\ub2ec (\uc5f0 2500\ub9cc\uc6d0 \uc774\uc0c1 \ud544\uc694)\")\nif credit_score &lt; 700:\n    print(\"- \uc2e0\uc6a9\uc810\uc218 \ubbf8\ub2ec (700\uc810 \uc774\uc0c1 \ud544\uc694)\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#52-or","title":"5.2 or \uc5f0\uc0b0\uc790","text":"<p>\uc870\uac74 \uc911 \ud558\ub098\ub9cc \ucc38\uc774\uba74 \uc804\uccb4\uac00 \ucc38\uc774 \ub429\ub2c8\ub2e4.</p> <pre><code>weather = \"rainy\"\ntemperature = 5\n\n# \uc678\ucd9c\ud558\uc9c0 \uc54a\uc744 \uc870\uac74\nif weather == \"rainy\" or weather == \"snowy\" or temperature &lt; 0:\n    print(\"\uc9d1\uc5d0 \uc788\ub294 \uac83\uc774 \uc88b\uaca0\uc2b5\ub2c8\ub2e4.\")\n    if weather == \"rainy\":\n        print(\"\ube44\uac00 \uc640\uc11c\")\n    elif weather == \"snowy\":\n        print(\"\ub208\uc774 \uc640\uc11c\")\n    elif temperature &lt; 0:\n        print(\"\ub108\ubb34 \ucd94\uc6cc\uc11c\")\nelse:\n    print(\"\uc678\ucd9c\ud558\uae30 \uc88b\uc740 \ub0a0\uc528\uc785\ub2c8\ub2e4.\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#53-not","title":"5.3 not \uc5f0\uc0b0\uc790","text":"<p>\uc870\uac74\uc758 \ucc38/\uac70\uc9d3\uc744 \ubc18\ub300\ub85c \ub9cc\ub4ed\ub2c8\ub2e4.</p> <pre><code>is_weekend = False\nis_holiday = False\n\nif not is_weekend and not is_holiday:\n    print(\"\ud3c9\uc77c\uc785\ub2c8\ub2e4. \uc5c5\ubb34 \uc2dc\uac04\uc785\ub2c8\ub2e4.\")\nelse:\n    print(\"\uc26c\ub294 \ub0a0\uc785\ub2c8\ub2e4.\")\n\n# \ub354 \uac04\ub2e8\ud55c \ud45c\ud604\nif not (is_weekend or is_holiday):\n    print(\"\ud3c9\uc77c\uc785\ub2c8\ub2e4. \uc5c5\ubb34 \uc2dc\uac04\uc785\ub2c8\ub2e4.\")\nelse:\n    print(\"\uc26c\ub294 \ub0a0\uc785\ub2c8\ub2e4.\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#54","title":"5.4 \ubcf5\ud569 \ub17c\ub9ac \uc870\uac74","text":"<pre><code># \ud68c\uc6d0 \ub4f1\uae09 \uc2dc\uc2a4\ud15c\npurchase_amount = 50000\nmembership_years = 3\nis_premium_member = True\n\n# VIP \ud68c\uc6d0 \uc870\uac74\nif (purchase_amount &gt;= 100000 or membership_years &gt;= 5) and is_premium_member:\n    discount_rate = 0.2  # 20% \ud560\uc778\n    print(\"VIP \ud68c\uc6d0\uc785\ub2c8\ub2e4. 20% \ud560\uc778\uc774 \uc801\uc6a9\ub429\ub2c8\ub2e4.\")\nelif purchase_amount &gt;= 30000 or membership_years &gt;= 2:\n    discount_rate = 0.1  # 10% \ud560\uc778\n    print(\"\uc6b0\uc218 \ud68c\uc6d0\uc785\ub2c8\ub2e4. 10% \ud560\uc778\uc774 \uc801\uc6a9\ub429\ub2c8\ub2e4.\")\nelse:\n    discount_rate = 0.05  # 5% \ud560\uc778\n    print(\"\uc77c\ubc18 \ud68c\uc6d0\uc785\ub2c8\ub2e4. 5% \ud560\uc778\uc774 \uc801\uc6a9\ub429\ub2c8\ub2e4.\")\n\nfinal_price = purchase_amount * (1 - discount_rate)\nprint(f\"\ucd5c\uc885 \uacb0\uc81c \uae08\uc561: {final_price:,.0f}\uc6d0\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#6","title":"6. \uc870\uac74\ubb38\uc758 \ud65c\uc6a9 \ud328\ud134","text":""},{"location":"tutorials/beginner/chapter06_conditional_statements/#61","title":"6.1 \ubc94\uc704 \ud655\uc778","text":"<pre><code># \uc628\ub3c4\uc5d0 \ub530\ub978 \uc637\ucc28\ub9bc \ucd94\ucc9c\ntemperature = 22\n\nif temperature &gt;= 30:\n    clothing = \"\ubc18\ud314, \ubc18\ubc14\uc9c0\"\nelif temperature &gt;= 25:\n    clothing = \"\ubc18\ud314, \uae34\ubc14\uc9c0\"\nelif temperature &gt;= 20:\n    clothing = \"\uae34\ud314, \uae34\ubc14\uc9c0\"\nelif temperature &gt;= 15:\n    clothing = \"\uc587\uc740 \uac89\uc637\"\nelif temperature &gt;= 10:\n    clothing = \"\ub450\uaebc\uc6b4 \uac89\uc637\"\nelif temperature &gt;= 0:\n    clothing = \"\ucf54\ud2b8, \ubaa9\ub3c4\ub9ac\"\nelse:\n    clothing = \"\ud328\ub529, \ubaa8\uc790, \uc7a5\uac11\"\n\nprint(f\"\uc628\ub3c4: {temperature}\ub3c4\")\nprint(f\"\ucd94\ucc9c \uc637\ucc28\ub9bc: {clothing}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#62","title":"6.2 \ud0c0\uc785 \ud655\uc778","text":"<pre><code>def analyze_input(value):\n    \"\"\"\uc785\ub825\uac12\uc758 \ud0c0\uc785\uc744 \ubd84\uc11d\ud558\ub294 \ud568\uc218\"\"\"\n\n    if isinstance(value, str):\n        if value.isdigit():\n            print(f\"'{value}'\ub294 \uc22b\uc790\ub85c \uad6c\uc131\ub41c \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4.\")\n        elif value.isalpha():\n            print(f\"'{value}'\ub294 \uc54c\ud30c\ubcb3\uc73c\ub85c \uad6c\uc131\ub41c \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4.\")\n        else:\n            print(f\"'{value}'\ub294 \ud63c\ud569\ub41c \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4.\")\n    elif isinstance(value, int):\n        if value &gt; 0:\n            print(f\"{value}\ub294 \uc591\uc758 \uc815\uc218\uc785\ub2c8\ub2e4.\")\n        elif value &lt; 0:\n            print(f\"{value}\ub294 \uc74c\uc758 \uc815\uc218\uc785\ub2c8\ub2e4.\")\n        else:\n            print(f\"{value}\ub294 0\uc785\ub2c8\ub2e4.\")\n    elif isinstance(value, float):\n        print(f\"{value}\ub294 \uc2e4\uc218\uc785\ub2c8\ub2e4.\")\n    elif isinstance(value, bool):\n        print(f\"{value}\ub294 \ubd88\ub9b0\uac12\uc785\ub2c8\ub2e4.\")\n    else:\n        print(f\"{value}\ub294 \uc54c \uc218 \uc5c6\ub294 \ud0c0\uc785\uc785\ub2c8\ub2e4.\")\n\n# \ud14c\uc2a4\ud2b8\ntest_values = [\"123\", \"hello\", \"abc123\", 42, -5, 0, 3.14, True]\nfor val in test_values:\n    analyze_input(val)\n    print()\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#63","title":"6.3 \uc720\ud6a8\uc131 \uac80\uc0ac","text":"<pre><code>def validate_password(password):\n    \"\"\"\ube44\ubc00\ubc88\ud638 \uc720\ud6a8\uc131 \uac80\uc0ac\"\"\"\n\n    errors = []\n\n    # \uae38\uc774 \ud655\uc778\n    if len(password) &lt; 8:\n        errors.append(\"\ube44\ubc00\ubc88\ud638\ub294 \ucd5c\uc18c 8\uc790 \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4.\")\n\n    # \ub300\ubb38\uc790 \ud3ec\ud568 \ud655\uc778\n    if not any(c.isupper() for c in password):\n        errors.append(\"\ub300\ubb38\uc790\ub97c \ucd5c\uc18c 1\uac1c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.\")\n\n    # \uc18c\ubb38\uc790 \ud3ec\ud568 \ud655\uc778\n    if not any(c.islower() for c in password):\n        errors.append(\"\uc18c\ubb38\uc790\ub97c \ucd5c\uc18c 1\uac1c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.\")\n\n    # \uc22b\uc790 \ud3ec\ud568 \ud655\uc778\n    if not any(c.isdigit() for c in password):\n        errors.append(\"\uc22b\uc790\ub97c \ucd5c\uc18c 1\uac1c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.\")\n\n    # \ud2b9\uc218\ubb38\uc790 \ud3ec\ud568 \ud655\uc778\n    special_chars = \"!@#$%^&amp;*()_+-=[]{}|;:,.&lt;&gt;?\"\n    if not any(c in special_chars for c in password):\n        errors.append(\"\ud2b9\uc218\ubb38\uc790\ub97c \ucd5c\uc18c 1\uac1c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.\")\n\n    # \uacb0\uacfc \ubc18\ud658\n    if errors:\n        print(\"\ube44\ubc00\ubc88\ud638\uac00 \uc694\uad6c\uc0ac\ud56d\uc744 \ub9cc\uc871\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4:\")\n        for error in errors:\n            print(f\"- {error}\")\n        return False\n    else:\n        print(\"\uc720\ud6a8\ud55c \ube44\ubc00\ubc88\ud638\uc785\ub2c8\ub2e4.\")\n        return True\n\n# \ud14c\uc2a4\ud2b8\ntest_passwords = [\"123\", \"password\", \"Password123\", \"Password123!\"]\nfor pwd in test_passwords:\n    print(f\"\ube44\ubc00\ubc88\ud638: '{pwd}'\")\n    validate_password(pwd)\n    print()\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#7-ternary-operator","title":"7. \uc0bc\ud56d \uc5f0\uc0b0\uc790 (Ternary Operator)","text":""},{"location":"tutorials/beginner/chapter06_conditional_statements/#71","title":"7.1 \uae30\ubcf8 \ubb38\ubc95","text":"<p>\uac04\ub2e8\ud55c \uc870\uac74\ubb38\uc740 \ud55c \uc904\ub85c \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code># \uc77c\ubc18\uc801\uc778 if-else\nage = 20\nif age &gt;= 18:\n    status = \"\uc131\uc778\"\nelse:\n    status = \"\ubbf8\uc131\ub144\uc790\"\n\n# \uc0bc\ud56d \uc5f0\uc0b0\uc790\ub85c \ub3d9\uc77c\ud55c \ud45c\ud604\nage = 20\nstatus = \"\uc131\uc778\" if age &gt;= 18 else \"\ubbf8\uc131\ub144\uc790\"\nprint(status)\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#72","title":"7.2 \uc0bc\ud56d \uc5f0\uc0b0\uc790 \ud65c\uc6a9 \uc608\uc81c","text":"<pre><code># \uc808\ub313\uac12 \uacc4\uc0b0\nnumber = -5\nabs_value = number if number &gt;= 0 else -number\nprint(f\"{number}\uc758 \uc808\ub313\uac12: {abs_value}\")\n\n# \ucd5c\ub313\uac12/\ucd5c\uc19f\uac12\na, b = 10, 20\nmax_value = a if a &gt; b else b\nmin_value = a if a &lt; b else b\nprint(f\"\ucd5c\ub313\uac12: {max_value}, \ucd5c\uc19f\uac12: {min_value}\")\n\n# \ubb38\uc790\uc5f4 \ucc98\ub9ac\nname = \"\"\ndisplay_name = name if name else \"\uc775\uba85\"\nprint(f\"\uc0ac\uc6a9\uc790: {display_name}\")\n\n# \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \ud65c\uc6a9\nnumbers = [1, -2, 3, -4, 5]\npositive_numbers = [n if n &gt; 0 else 0 for n in numbers]\nprint(f\"\uc591\uc218\ub9cc: {positive_numbers}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#73","title":"7.3 \uc0bc\ud56d \uc5f0\uc0b0\uc790 \uc8fc\uc758\uc0ac\ud56d","text":"<pre><code># \uac00\ub3c5\uc131\uc774 \ub5a8\uc5b4\uc9c0\ub294 \uc608 (\uad8c\uc7a5\ud558\uc9c0 \uc54a\uc74c)\nscore = 85\nresult = \"A\" if score &gt;= 90 else \"B\" if score &gt;= 80 else \"C\" if score &gt;= 70 else \"F\"\n\n# \ub354 \uba85\ud655\ud55c \ubc29\ubc95\nif score &gt;= 90:\n    result = \"A\"\nelif score &gt;= 80:\n    result = \"B\"\nelif score &gt;= 70:\n    result = \"C\"\nelse:\n    result = \"F\"\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#8","title":"8. \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c\ub4e4","text":""},{"location":"tutorials/beginner/chapter06_conditional_statements/#81","title":"8.1 \uc22b\uc790 \ub9de\ucd94\uae30 \uac8c\uc784","text":"<pre><code>import random\n\nprint(\"=== \uc22b\uc790 \ub9de\ucd94\uae30 \uac8c\uc784 ===\")\nsecret_number = random.randint(1, 100)\nmax_attempts = 7\nattempts = 0\n\nprint(f\"1\ubd80\ud130 100 \uc0ac\uc774\uc758 \uc22b\uc790\ub97c \ub9de\ucdb0\ubcf4\uc138\uc694! ({max_attempts}\ubc88\uc758 \uae30\ud68c)\")\n\nwhile attempts &lt; max_attempts:\n    try:\n        guess = int(input(f\"\uc2dc\ub3c4 {attempts + 1}: \uc22b\uc790\ub97c \uc785\ub825\ud558\uc138\uc694: \"))\n        attempts += 1\n\n        if guess == secret_number:\n            print(f\"\uc815\ub2f5\uc785\ub2c8\ub2e4! {attempts}\ubc88 \ub9cc\uc5d0 \ub9de\ucdc4\uc2b5\ub2c8\ub2e4.\")\n            break\n        elif guess &lt; secret_number:\n            print(\"\ub354 \ud070 \uc22b\uc790\uc785\ub2c8\ub2e4.\")\n        else:\n            print(\"\ub354 \uc791\uc740 \uc22b\uc790\uc785\ub2c8\ub2e4.\")\n\n        remaining = max_attempts - attempts\n        if remaining &gt; 0:\n            print(f\"\ub0a8\uc740 \uae30\ud68c: {remaining}\ubc88\")\n        else:\n            print(f\"\uac8c\uc784 \uc624\ubc84! \uc815\ub2f5\uc740 {secret_number}\uc600\uc2b5\ub2c8\ub2e4.\")\n\n    except ValueError:\n        print(\"\uc22b\uc790\ub9cc \uc785\ub825\ud574\uc8fc\uc138\uc694.\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#82-atm","title":"8.2 \uac04\ub2e8\ud55c ATM \uc2dc\uc2a4\ud15c","text":"<pre><code># \uac04\ub2e8\ud55c ATM \uc2dc\ubbac\ub808\uc774\uc158\nbalance = 50000  # \ucd08\uae30 \uc794\uc561\npin = \"1234\"\n\nprint(\"=== ATM \uc2dc\uc2a4\ud15c ===\")\nentered_pin = input(\"PIN\uc744 \uc785\ub825\ud558\uc138\uc694: \")\n\nif entered_pin != pin:\n    print(\"PIN\uc774 \ud2c0\ub838\uc2b5\ub2c8\ub2e4. \uc811\uadfc\uc774 \uac70\ubd80\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\nelse:\n    print(\"PIN\uc774 \ud655\uc778\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n\n    while True:\n        print(\"\\n=== \uba54\ub274 ===\")\n        print(\"1. \uc794\uc561 \uc870\ud68c\")\n        print(\"2. \uc785\uae08\")\n        print(\"3. \ucd9c\uae08\")\n        print(\"4. \uc885\ub8cc\")\n\n        choice = input(\"\uc120\ud0dd\ud558\uc138\uc694 (1-4): \")\n\n        if choice == \"1\":\n            print(f\"\ud604\uc7ac \uc794\uc561: {balance:,}\uc6d0\")\n\n        elif choice == \"2\":\n            try:\n                amount = int(input(\"\uc785\uae08\ud560 \uae08\uc561\uc744 \uc785\ub825\ud558\uc138\uc694: \"))\n                if amount &gt; 0:\n                    balance += amount\n                    print(f\"{amount:,}\uc6d0\uc774 \uc785\uae08\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n                    print(f\"\ud604\uc7ac \uc794\uc561: {balance:,}\uc6d0\")\n                else:\n                    print(\"\uc591\uc218\ub9cc \uc785\ub825\ud574\uc8fc\uc138\uc694.\")\n            except ValueError:\n                print(\"\uc62c\ubc14\ub978 \uc22b\uc790\ub97c \uc785\ub825\ud574\uc8fc\uc138\uc694.\")\n\n        elif choice == \"3\":\n            try:\n                amount = int(input(\"\ucd9c\uae08\ud560 \uae08\uc561\uc744 \uc785\ub825\ud558\uc138\uc694: \"))\n                if amount &lt;= 0:\n                    print(\"\uc591\uc218\ub9cc \uc785\ub825\ud574\uc8fc\uc138\uc694.\")\n                elif amount &gt; balance:\n                    print(\"\uc794\uc561\uc774 \ubd80\uc871\ud569\ub2c8\ub2e4.\")\n                    print(f\"\ud604\uc7ac \uc794\uc561: {balance:,}\uc6d0\")\n                else:\n                    balance -= amount\n                    print(f\"{amount:,}\uc6d0\uc774 \ucd9c\uae08\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n                    print(f\"\ud604\uc7ac \uc794\uc561: {balance:,}\uc6d0\")\n            except ValueError:\n                print(\"\uc62c\ubc14\ub978 \uc22b\uc790\ub97c \uc785\ub825\ud574\uc8fc\uc138\uc694.\")\n\n        elif choice == \"4\":\n            print(\"\uc774\uc6a9\ud574 \uc8fc\uc154\uc11c \uac10\uc0ac\ud569\ub2c8\ub2e4.\")\n            break\n\n        else:\n            print(\"\uc62c\ubc14\ub978 \uba54\ub274\ub97c \uc120\ud0dd\ud574\uc8fc\uc138\uc694.\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#83","title":"8.3 \ud559\uc810 \uacc4\uc0b0\uae30","text":"<pre><code>def calculate_grade(scores):\n    \"\"\"\uc810\uc218 \ub9ac\uc2a4\ud2b8\ub97c \ubc1b\uc544 \ud559\uc810\uc744 \uacc4\uc0b0\ud558\ub294 \ud568\uc218\"\"\"\n\n    if not scores:\n        return \"\uc810\uc218\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\"\n\n    # \ud3c9\uade0 \uacc4\uc0b0\n    average = sum(scores) / len(scores)\n\n    # \ud559\uc810 \uacb0\uc815\n    if average &gt;= 95:\n        grade = \"A+\"\n    elif average &gt;= 90:\n        grade = \"A\"\n    elif average &gt;= 85:\n        grade = \"B+\"\n    elif average &gt;= 80:\n        grade = \"B\"\n    elif average &gt;= 75:\n        grade = \"C+\"\n    elif average &gt;= 70:\n        grade = \"C\"\n    elif average &gt;= 65:\n        grade = \"D+\"\n    elif average &gt;= 60:\n        grade = \"D\"\n    else:\n        grade = \"F\"\n\n    return average, grade\n\n# \uba54\uc778 \ud504\ub85c\uadf8\ub7a8\nprint(\"=== \ud559\uc810 \uacc4\uc0b0\uae30 ===\")\nscores = []\n\nwhile True:\n    try:\n        score = input(\"\uc810\uc218\ub97c \uc785\ub825\ud558\uc138\uc694 (\uc644\ub8cc\ud558\ub824\uba74 'q' \uc785\ub825): \")\n\n        if score.lower() == 'q':\n            break\n\n        score = float(score)\n\n        if 0 &lt;= score &lt;= 100:\n            scores.append(score)\n            print(f\"\uc810\uc218 {score}\uc774(\uac00) \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n        else:\n            print(\"\uc810\uc218\ub294 0\uacfc 100 \uc0ac\uc774\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n\n    except ValueError:\n        print(\"\uc62c\ubc14\ub978 \uc22b\uc790\ub97c \uc785\ub825\ud574\uc8fc\uc138\uc694.\")\n\nif scores:\n    average, grade = calculate_grade(scores)\n    print(f\"\\n=== \uacb0\uacfc ===\")\n    print(f\"\uc785\ub825\ub41c \uc810\uc218: {scores}\")\n    print(f\"\ud3c9\uade0 \uc810\uc218: {average:.2f}\")\n    print(f\"\ud559\uc810: {grade}\")\nelse:\n    print(\"\uc785\ub825\ub41c \uc810\uc218\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n</code></pre>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#9","title":"9. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/beginner/chapter06_conditional_statements/#1_1","title":"\uc5f0\uc2b5 1: \uc724\ub144 \ud310\ubcc4\uae30","text":"<p>\uc0ac\uc6a9\uc790\ub85c\ubd80\ud130 \uc5f0\ub3c4\ub97c \uc785\ub825\ubc1b\uc544 \uc724\ub144\uc778\uc9c0 \ud310\ubcc4\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694. - \uc724\ub144 \uc870\uac74: 4\uc758 \ubc30\uc218\uc774\uba74\uc11c 100\uc758 \ubc30\uc218\uac00 \uc544\ub2c8\uac70\ub098, 400\uc758 \ubc30\uc218</p>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#2","title":"\uc5f0\uc2b5 2: \uc8fc\ucc28 \uc694\uae08 \uacc4\uc0b0\uae30","text":"<p>\uc8fc\ucc28 \uc2dc\uac04\uc744 \uc785\ub825\ubc1b\uc544 \uc694\uae08\uc744 \uacc4\uc0b0\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694. - \uae30\ubcf8 \uc694\uae08: 30\ubd84\uae4c\uc9c0 1000\uc6d0 - \ucd94\uac00 \uc694\uae08: 10\ubd84\ub2f9 500\uc6d0 - \ucd5c\ub300 \uc694\uae08: 10000\uc6d0</p>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#3","title":"\uc5f0\uc2b5 3: \uac04\ub2e8\ud55c \uc1fc\ud551\ubab0 \ud560\uc778 \uc2dc\uc2a4\ud15c","text":"<p>\uad6c\ub9e4 \uae08\uc561\uacfc \ud68c\uc6d0 \ub4f1\uae09\uc744 \uc785\ub825\ubc1b\uc544 \ucd5c\uc885 \uacb0\uc81c \uae08\uc561\uc744 \uacc4\uc0b0\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694. - \uc77c\ubc18 \ud68c\uc6d0: 3\ub9cc\uc6d0 \uc774\uc0c1 5% \ud560\uc778 - VIP \ud68c\uc6d0: 2\ub9cc\uc6d0 \uc774\uc0c1 10% \ud560\uc778, 5\ub9cc\uc6d0 \uc774\uc0c1 15% \ud560\uc778 - VVIP \ud68c\uc6d0: 1\ub9cc\uc6d0 \uc774\uc0c1 15% \ud560\uc778, 5\ub9cc\uc6d0 \uc774\uc0c1 20% \ud560\uc778</p>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>if\ubb38 \uae30\ubcf8 \uad6c\uc870: if, elif, else\uc758 \uc0ac\uc6a9\ubc95</li> <li>\uc870\uac74 \ud45c\ud604\uc2dd: \ub2e4\uc591\ud55c \ube44\uad50 \ubc0f \ub17c\ub9ac \uc5f0\uc0b0\uc790 \ud65c\uc6a9</li> <li>\uc911\ucca9 \uc870\uac74\ubb38: \ubcf5\uc7a1\ud55c \ub85c\uc9c1\uc744 \uc704\ud55c \uc870\uac74\ubb38 \uc911\ucca9</li> <li>\ub17c\ub9ac \uc5f0\uc0b0\uc790: and, or, not\uc744 \ud65c\uc6a9\ud55c \ubcf5\ud569 \uc870\uac74</li> <li>\uc2e4\uc6a9\uc801 \ud328\ud134: \ubc94\uc704 \ud655\uc778, \ud0c0\uc785 \ud655\uc778, \uc720\ud6a8\uc131 \uac80\uc0ac</li> <li>\uc0bc\ud56d \uc5f0\uc0b0\uc790: \uac04\ub2e8\ud55c \uc870\uac74\ubd80 \ud560\ub2f9</li> <li>\uc2e4\uc81c \uc751\uc6a9: \uac8c\uc784, ATM, \ud559\uc810 \uacc4\uc0b0\uae30 \ub4f1</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \ubc18\ubcf5\ubb38(for, while)\uc744 \ud559\uc2b5\ud558\uc5ec \ubc18\ubcf5\uc801\uc778 \uc791\uc5c5\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/beginner/chapter06_conditional_statements/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\uc870\uac74\ubb38\uc740 \ud504\ub85c\uadf8\ub7a8\uc758 \ud750\ub984\uc744 \uc81c\uc5b4\ud558\ub294 \ud575\uc2ec \uc694\uc18c</li> <li>\ub4e4\uc5ec\uc4f0\uae30\uac00 \ub9e4\uc6b0 \uc911\uc694\ud558\uba70, \uc77c\uad00\uc131 \uc788\uac8c \uc0ac\uc6a9\ud574\uc57c \ud568</li> <li>\ubcf5\uc7a1\ud55c \uc870\uac74\uc740 \ub17c\ub9ac \uc5f0\uc0b0\uc790\ub85c \uac04\ub2e8\ud788 \ud45c\ud604 \uac00\ub2a5</li> <li>\uc911\ucca9\uc774 \ub108\ubb34 \uae4a\uc5b4\uc9c0\uba74 \ucf54\ub4dc \uac00\ub3c5\uc131\uc774 \ub5a8\uc5b4\uc9d0</li> <li>\uc870\uac74\uc758 \uc21c\uc11c\uac00 \uacb0\uacfc\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce60 \uc218 \uc788\uc74c </li> </ul>"},{"location":"tutorials/beginner/chapter07_loops/","title":"Chapter 7: \ubc18\ubcf5\ubb38 (Loops)","text":""},{"location":"tutorials/beginner/chapter07_loops/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - for\ubb38\uacfc while\ubb38\uc758 \uae30\ubcf8 \ubb38\ubc95\uacfc \ucc28\uc774\uc810 \uc774\ud574\ud558\uae30 - range() \ud568\uc218\ub97c \ud65c\uc6a9\ud55c \ub2e4\uc591\ud55c \ubc18\ubcf5 \ud328\ud134 \uad6c\ud604\ud558\uae30 - \uc911\ucca9 \ubc18\ubcf5\ubb38\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubcf5\uc7a1\ud55c \ud328\ud134 \ucc98\ub9ac\ud558\uae30 - break, continue\ub97c \uc0ac\uc6a9\ud55c \ubc18\ubcf5\ubb38 \uc81c\uc5b4\ud558\uae30 - \ub9ac\uc2a4\ud2b8, \ubb38\uc790\uc5f4 \ub4f1 \ub2e4\uc591\ud55c iterable \uac1d\uccb4 \uc21c\ud68c\ud558\uae30 - \uc2e4\uc6a9\uc801\uc778 \ubc18\ubcf5\ubb38 \uae30\ubc18 \ud504\ub85c\uadf8\ub7a8 \uc791\uc131\ud558\uae30</p>"},{"location":"tutorials/beginner/chapter07_loops/#1","title":"1. \ubc18\ubcf5\ubb38\uc758 \uae30\ubcf8 \uac1c\ub150","text":""},{"location":"tutorials/beginner/chapter07_loops/#11","title":"1.1 \ubc18\ubcf5\ubb38\uc774\ub780?","text":"<p>\ubc18\ubcf5\ubb38\uc740 \ud2b9\uc815 \ucf54\ub4dc \ube14\ub85d\uc744 \uc5ec\ub7ec \ubc88 \uc2e4\ud589\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \uc81c\uc5b4 \uad6c\uc870\uc785\ub2c8\ub2e4. \uac19\uc740 \uc791\uc5c5\uc744 \ubc18\ubcf5\ud574\uc57c \ud560 \ub54c \ucf54\ub4dc\ub97c \uc911\ubcf5\ud574\uc11c \uc4f0\uc9c0 \uc54a\uace0 \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code># \ubc18\ubcf5\ubb38 \uc5c6\uc774 (\ube44\ud6a8\uc728\uc801)\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\n\n# \ubc18\ubcf5\ubb38 \uc0ac\uc6a9 (\ud6a8\uc728\uc801)\nfor i in range(5):\n    print(\"Hello World!\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#12-python","title":"1.2 Python\uc758 \ubc18\ubcf5\ubb38 \uc885\ub958","text":"<p>Python\uc5d0\uc11c\ub294 \ub450 \uac00\uc9c0 \uc8fc\uc694 \ubc18\ubcf5\ubb38\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4:</p> <ol> <li>for\ubb38: \uc815\ud574\uc9c4 \ud69f\uc218\ub098 \ud2b9\uc815 \uceec\ub809\uc158\uc758 \uc694\uc18c\ub4e4\uc744 \uc21c\ud68c\ud560 \ub54c \uc0ac\uc6a9</li> <li>while\ubb38: \uc870\uac74\uc774 \ucc38\uc778 \ub3d9\uc548 \uacc4\uc18d \ubc18\ubcf5\ud560 \ub54c \uc0ac\uc6a9</li> </ol>"},{"location":"tutorials/beginner/chapter07_loops/#2-for-for-loop","title":"2. for\ubb38 (For Loop)","text":""},{"location":"tutorials/beginner/chapter07_loops/#21-for","title":"2.1 \uae30\ubcf8 for\ubb38 \ubb38\ubc95","text":"<pre><code>for \ubcc0\uc218 in \ubc18\ubcf5\uac00\ub2a5\ud55c_\uac1d\uccb4:\n    \uc2e4\ud589\ud560_\ucf54\ub4dc\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#22-range-for","title":"2.2 range() \ud568\uc218\uc640 for\ubb38","text":"<p><code>range()</code> \ud568\uc218\ub294 \uc22b\uc790 \uc2dc\ud000\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \ud568\uc218\ub85c, for\ubb38\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</p> <pre><code># range(stop): 0\ubd80\ud130 stop-1\uae4c\uc9c0\nfor i in range(5):\n    print(f\"\uc22b\uc790: {i}\")\n# \ucd9c\ub825: 0, 1, 2, 3, 4\n\n# range(start, stop): start\ubd80\ud130 stop-1\uae4c\uc9c0\nfor i in range(2, 8):\n    print(f\"\uc22b\uc790: {i}\")\n# \ucd9c\ub825: 2, 3, 4, 5, 6, 7\n\n# range(start, stop, step): start\ubd80\ud130 stop-1\uae4c\uc9c0 step \uac04\uaca9\uc73c\ub85c\nfor i in range(0, 10, 2):\n    print(f\"\uc9dd\uc218: {i}\")\n# \ucd9c\ub825: 0, 2, 4, 6, 8\n\n# \uc5ed\ubc29\ud5a5 (\uac10\uc18c)\nfor i in range(10, 0, -1):\n    print(f\"\uce74\uc6b4\ud2b8\ub2e4\uc6b4: {i}\")\n# \ucd9c\ub825: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#23-for","title":"2.3 \ub9ac\uc2a4\ud2b8\uc640 for\ubb38","text":"<pre><code># \ub9ac\uc2a4\ud2b8 \uc694\uc18c \uc21c\ud68c\nfruits = [\"\uc0ac\uacfc\", \"\ubc14\ub098\ub098\", \"\uc624\ub80c\uc9c0\", \"\ud3ec\ub3c4\"]\n\nfor fruit in fruits:\n    print(f\"\uacfc\uc77c: {fruit}\")\n\n# \uc778\ub371\uc2a4\uc640 \ud568\uaed8 \uc21c\ud68c (enumerate \uc0ac\uc6a9)\nfor index, fruit in enumerate(fruits):\n    print(f\"{index + 1}\ubc88\uc9f8 \uacfc\uc77c: {fruit}\")\n\n# \uc778\ub371\uc2a4\ub9cc \ud544\uc694\ud55c \uacbd\uc6b0\nfor i in range(len(fruits)):\n    print(f\"{i}\ubc88 \uc778\ub371\uc2a4\uc758 \uacfc\uc77c: {fruits[i]}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#24-for","title":"2.4 \ubb38\uc790\uc5f4\uacfc for\ubb38","text":"<pre><code># \ubb38\uc790\uc5f4\uc758 \uac01 \ubb38\uc790 \uc21c\ud68c\nword = \"Python\"\nfor char in word:\n    print(f\"\uae00\uc790: {char}\")\n\n# \ubb38\uc790\uc758 \uc704\uce58\uc640 \ud568\uaed8 \ucd9c\ub825\nfor i, char in enumerate(word):\n    print(f\"\uc704\uce58 {i}: {char}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#25-for","title":"2.5 \ub515\uc154\ub108\ub9ac\uc640 for\ubb38","text":"<pre><code>student_scores = {\n    \"\uae40\ucca0\uc218\": 85,\n    \"\uc774\uc601\ud76c\": 92,\n    \"\ubc15\ubbfc\uc218\": 78,\n    \"\ucd5c\uc9c0\uc601\": 96\n}\n\n# \ud0a4\ub9cc \uc21c\ud68c\nfor name in student_scores:\n    print(f\"\ud559\uc0dd: {name}\")\n\n# \ud0a4\uc640 \uac12 \ud568\uaed8 \uc21c\ud68c\nfor name, score in student_scores.items():\n    print(f\"{name}: {score}\uc810\")\n\n# \uac12\ub9cc \uc21c\ud68c\nfor score in student_scores.values():\n    print(f\"\uc810\uc218: {score}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#3-while-while-loop","title":"3. while\ubb38 (While Loop)","text":""},{"location":"tutorials/beginner/chapter07_loops/#31-while","title":"3.1 \uae30\ubcf8 while\ubb38 \ubb38\ubc95","text":"<pre><code>while \uc870\uac74\uc2dd:\n    \uc2e4\ud589\ud560_\ucf54\ub4dc\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#32-while","title":"3.2 \uae30\ubcf8 while\ubb38 \uc608\uc81c","text":"<pre><code># 1\ubd80\ud130 5\uae4c\uc9c0 \ucd9c\ub825\ncount = 1\nwhile count &lt;= 5:\n    print(f\"\uce74\uc6b4\ud2b8: {count}\")\n    count += 1  # \ubc18\ub4dc\uc2dc \uc870\uac74\uc744 \ubcc0\uacbd\ud558\ub294 \ucf54\ub4dc\uac00 \uc788\uc5b4\uc57c \ud568\n\n# \uc0ac\uc6a9\uc790 \uc785\ub825\uc774 'quit'\uc77c \ub54c\uae4c\uc9c0 \ubc18\ubcf5\nwhile True:\n    user_input = input(\"\uba85\ub839\uc744 \uc785\ub825\ud558\uc138\uc694 ('quit'\ub85c \uc885\ub8cc): \")\n    if user_input == 'quit':\n        break\n    print(f\"\uc785\ub825\ubc1b\uc740 \uba85\ub839: {user_input}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#33-while","title":"3.3 while\ubb38 \uc8fc\uc758\uc0ac\ud56d","text":"<pre><code># \ubb34\ud55c \ub8e8\ud504 \uc8fc\uc758! (\uc798\ubabb\ub41c \uc608)\n\"\"\"\ncount = 1\nwhile count &lt;= 5:\n    print(count)\n    # count += 1\uc774 \uc5c6\uc5b4\uc11c \ubb34\ud55c \ub8e8\ud504!\n\"\"\"\n\n# \uc62c\ubc14\ub978 \uc608\ncount = 1\nwhile count &lt;= 5:\n    print(count)\n    count += 1  # \uc870\uac74\uc744 \ubcc0\uacbd\ud558\ub294 \ucf54\ub4dc \ud544\uc218!\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#34-while","title":"3.4 while\ubb38 \ud65c\uc6a9 \uc608\uc81c","text":"<pre><code># \uc22b\uc790 \ub9de\ucd94\uae30 \uac8c\uc784\nimport random\n\nsecret_number = random.randint(1, 100)\nattempts = 0\nmax_attempts = 7\n\nprint(\"1\ubd80\ud130 100 \uc0ac\uc774\uc758 \uc22b\uc790\ub97c \ub9de\ucdb0\ubcf4\uc138\uc694!\")\n\nwhile attempts &lt; max_attempts:\n    try:\n        guess = int(input(f\"\uc2dc\ub3c4 {attempts + 1}/{max_attempts}: \"))\n        attempts += 1\n\n        if guess == secret_number:\n            print(f\"\uc815\ub2f5\uc785\ub2c8\ub2e4! {attempts}\ubc88 \ub9cc\uc5d0 \ub9de\ucdc4\uc2b5\ub2c8\ub2e4.\")\n            break\n        elif guess &lt; secret_number:\n            print(\"\ub354 \ud070 \uc22b\uc790\uc785\ub2c8\ub2e4.\")\n        else:\n            print(\"\ub354 \uc791\uc740 \uc22b\uc790\uc785\ub2c8\ub2e4.\")\n\n        if attempts == max_attempts:\n            print(f\"\uac8c\uc784 \uc624\ubc84! \uc815\ub2f5\uc740 {secret_number}\uc600\uc2b5\ub2c8\ub2e4.\")\n\n    except ValueError:\n        print(\"\uc22b\uc790\ub9cc \uc785\ub825\ud574\uc8fc\uc138\uc694.\")\n        attempts -= 1  # \uc798\ubabb\ub41c \uc785\ub825\uc740 \uc2dc\ub3c4 \ud69f\uc218\uc5d0 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc74c\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#4-break-continue","title":"4. \ubc18\ubcf5\ubb38 \uc81c\uc5b4: break\uc640 continue","text":""},{"location":"tutorials/beginner/chapter07_loops/#41-break","title":"4.1 break\ubb38","text":"<p><code>break</code>\ub294 \ubc18\ubcf5\ubb38\uc744 \uc989\uc2dc \uc885\ub8cc\ud558\uace0 \ube60\uc838\ub098\uac11\ub2c8\ub2e4.</p> <pre><code># for\ubb38\uc5d0\uc11c break\nfor i in range(10):\n    if i == 5:\n        break\n    print(i)\n# \ucd9c\ub825: 0, 1, 2, 3, 4\n\n# while\ubb38\uc5d0\uc11c break\ncount = 0\nwhile True:\n    print(f\"\uce74\uc6b4\ud2b8: {count}\")\n    count += 1\n    if count == 3:\n        break\n# \ucd9c\ub825: \uce74\uc6b4\ud2b8: 0, \uce74\uc6b4\ud2b8: 1, \uce74\uc6b4\ud2b8: 2\n\n# \uc2e4\uc6a9\uc801\uc778 \uc608: \uc0ac\uc6a9\uc790 \uc785\ub825 \ucc98\ub9ac\nwhile True:\n    command = input(\"\uba85\ub839\uc744 \uc785\ub825\ud558\uc138\uc694 (exit\ub85c \uc885\ub8cc): \")\n    if command.lower() == 'exit':\n        print(\"\ud504\ub85c\uadf8\ub7a8\uc744 \uc885\ub8cc\ud569\ub2c8\ub2e4.\")\n        break\n    print(f\"\uc2e4\ud589: {command}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#42-continue","title":"4.2 continue\ubb38","text":"<p><code>continue</code>\ub294 \ud604\uc7ac \ubc18\ubcf5\uc744 \uac74\ub108\ub6f0\uace0 \ub2e4\uc74c \ubc18\ubcf5\uc73c\ub85c \ub118\uc5b4\uac11\ub2c8\ub2e4.</p> <pre><code># \ud640\uc218\ub9cc \ucd9c\ub825\nfor i in range(10):\n    if i % 2 == 0:  # \uc9dd\uc218\uba74 \uac74\ub108\ub6f0\uae30\n        continue\n    print(f\"\ud640\uc218: {i}\")\n# \ucd9c\ub825: 1, 3, 5, 7, 9\n\n# \ud2b9\uc815 \uac12 \uc81c\uc678\ud558\uace0 \ucc98\ub9ac\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfor num in numbers:\n    if num == 5:  # 5\ub294 \uac74\ub108\ub6f0\uae30\n        continue\n    print(f\"\ucc98\ub9ac: {num}\")\n\n# while\ubb38\uc5d0\uc11c continue\ncount = 0\nwhile count &lt; 10:\n    count += 1\n    if count % 3 == 0:  # 3\uc758 \ubc30\uc218\ub294 \uac74\ub108\ub6f0\uae30\n        continue\n    print(f\"\ucd9c\ub825: {count}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#43-break-continue","title":"4.3 \uc911\ucca9 \ubc18\ubcf5\ubb38\uc5d0\uc11c break\uc640 continue","text":"<pre><code># \uc911\ucca9 for\ubb38\uc5d0\uc11c break (\uc548\ucabd \ubc18\ubcf5\ubb38\ub9cc \uc885\ub8cc)\nfor i in range(3):\n    print(f\"\uc678\ubd80 \ub8e8\ud504 {i}\")\n    for j in range(5):\n        if j == 3:\n            break  # \ub0b4\ubd80 for\ubb38\ub9cc \uc885\ub8cc\n        print(f\"  \ub0b4\ubd80 \ub8e8\ud504 {j}\")\n\nprint()\n\n# \uc678\ubd80 \ubc18\ubcf5\ubb38\ub3c4 \uc885\ub8cc\ud558\ub824\uba74 \ud50c\ub798\uadf8 \uc0ac\uc6a9\nexit_flag = False\nfor i in range(3):\n    if exit_flag:\n        break\n    print(f\"\uc678\ubd80 \ub8e8\ud504 {i}\")\n    for j in range(5):\n        if j == 2 and i == 1:\n            exit_flag = True\n            break\n        print(f\"  \ub0b4\ubd80 \ub8e8\ud504 {j}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#5-nested-loops","title":"5. \uc911\ucca9 \ubc18\ubcf5\ubb38 (Nested Loops)","text":""},{"location":"tutorials/beginner/chapter07_loops/#51","title":"5.1 \uae30\ubcf8 \uc911\ucca9 \ubc18\ubcf5\ubb38","text":"<pre><code># \uad6c\uad6c\ub2e8 \ucd9c\ub825\nprint(\"=== \uad6c\uad6c\ub2e8 ===\")\nfor i in range(2, 10):\n    print(f\"\\n{i}\ub2e8:\")\n    for j in range(1, 10):\n        result = i * j\n        print(f\"{i} \u00d7 {j} = {result}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#52","title":"5.2 \ud328\ud134 \ucd9c\ub825","text":"<pre><code># \ubcc4 \ud328\ud134 1: \uc9c1\uac01\uc0bc\uac01\ud615\nprint(\"\uc9c1\uac01\uc0bc\uac01\ud615 \ud328\ud134:\")\nfor i in range(1, 6):\n    for j in range(i):\n        print(\"*\", end=\"\")\n    print()  # \uc904\ubc14\uafc8\n\n# \ubcc4 \ud328\ud134 2: \uc5ed\uc9c1\uac01\uc0bc\uac01\ud615\nprint(\"\\n\uc5ed\uc9c1\uac01\uc0bc\uac01\ud615 \ud328\ud134:\")\nfor i in range(5, 0, -1):\n    for j in range(i):\n        print(\"*\", end=\"\")\n    print()\n\n# \ubcc4 \ud328\ud134 3: \ud53c\ub77c\ubbf8\ub4dc\nprint(\"\\n\ud53c\ub77c\ubbf8\ub4dc \ud328\ud134:\")\nfor i in range(1, 6):\n    # \uacf5\ubc31 \ucd9c\ub825\n    for j in range(5 - i):\n        print(\" \", end=\"\")\n    # \ubcc4 \ucd9c\ub825\n    for k in range(2 * i - 1):\n        print(\"*\", end=\"\")\n    print()\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#53-2","title":"5.3 2\ucc28\uc6d0 \ub9ac\uc2a4\ud2b8 \ucc98\ub9ac","text":"<pre><code># 2\ucc28\uc6d0 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131 \ubc0f \ucc98\ub9ac\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6], \n    [7, 8, 9]\n]\n\n# \ubaa8\ub4e0 \uc694\uc18c \ucd9c\ub825\nprint(\"\ud589\ub82c \ucd9c\ub825:\")\nfor row in matrix:\n    for element in row:\n        print(f\"{element:2}\", end=\" \")\n    print()\n\n# \uc778\ub371\uc2a4\uc640 \ud568\uaed8 \ucc98\ub9ac\nprint(\"\\n\uc88c\ud45c\uc640 \ud568\uaed8 \ucd9c\ub825:\")\nfor i in range(len(matrix)):\n    for j in range(len(matrix[i])):\n        print(f\"({i},{j}): {matrix[i][j]}\")\n\n# \ub300\uac01\uc120 \uc694\uc18c\uc758 \ud569\ndiagonal_sum = 0\nfor i in range(len(matrix)):\n    diagonal_sum += matrix[i][i]\nprint(f\"\\n\ub300\uac01\uc120 \uc694\uc18c\uc758 \ud569: {diagonal_sum}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#6-for-while","title":"6. for\ubb38\uacfc while\ubb38 \uc120\ud0dd \uae30\uc900","text":""},{"location":"tutorials/beginner/chapter07_loops/#61-for","title":"6.1 for\ubb38\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0","text":"<pre><code># 1. \uc815\ud574\uc9c4 \ud69f\uc218\ub9cc\ud07c \ubc18\ubcf5\nfor i in range(10):\n    print(f\"\ubc18\ubcf5 {i}\")\n\n# 2. \uceec\ub809\uc158\uc758 \ubaa8\ub4e0 \uc694\uc18c \uc21c\ud68c\nfruits = [\"\uc0ac\uacfc\", \"\ubc14\ub098\ub098\", \"\uccb4\ub9ac\"]\nfor fruit in fruits:\n    print(fruit)\n\n# 3. \uc778\ub371\uc2a4\uac00 \ud544\uc694\ud55c \uacbd\uc6b0\nnumbers = [10, 20, 30, 40, 50]\nfor i in range(len(numbers)):\n    numbers[i] *= 2  # \uac01 \uc694\uc18c\ub97c 2\ubc30\ub85c\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#62-while","title":"6.2 while\ubb38\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0","text":"<pre><code># 1. \uc870\uac74\uc5d0 \ub530\ub77c \ubc18\ubcf5 \ud69f\uc218\uac00 \ub2ec\ub77c\uc9c0\ub294 \uacbd\uc6b0\nimport random\n\ncount = 0\nwhile random.randint(1, 6) != 6:  # \uc8fc\uc0ac\uc704\uc5d0\uc11c 6\uc774 \ub098\uc62c \ub54c\uae4c\uc9c0\n    count += 1\nprint(f\"6\uc774 \ub098\uc624\uae30\uae4c\uc9c0 {count}\ubc88 \ub358\uc84c\uc2b5\ub2c8\ub2e4.\")\n\n# 2. \uc0ac\uc6a9\uc790 \uc785\ub825\uc5d0 \ub530\ub77c \uacc4\uc18d \uc2e4\ud589\nwhile True:\n    command = input(\"\uacc4\uc18d\ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c? (y/n): \")\n    if command.lower() == 'n':\n        break\n    print(\"\uc791\uc5c5\uc744 \uacc4\uc18d\ud569\ub2c8\ub2e4...\")\n\n# 3. \ud2b9\uc815 \uc870\uac74\uc774 \ub9cc\uc871\ub420 \ub54c\uae4c\uc9c0\npassword = \"\"\nwhile len(password) &lt; 8:\n    password = input(\"8\uc790 \uc774\uc0c1\uc758 \ube44\ubc00\ubc88\ud638\ub97c \uc785\ub825\ud558\uc138\uc694: \")\n    if len(password) &lt; 8:\n        print(\"\ube44\ubc00\ubc88\ud638\uac00 \ub108\ubb34 \uc9e7\uc2b5\ub2c8\ub2e4.\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#7","title":"7. \ubc18\ubcf5\ubb38 \ud65c\uc6a9 \ud328\ud134","text":""},{"location":"tutorials/beginner/chapter07_loops/#71","title":"7.1 \uce74\uc6b4\ud130 \ud328\ud134","text":"<pre><code># \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uc694\uc18c \uac1c\uc218 \uc138\uae30\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\neven_count = 0\nfor num in numbers:\n    if num % 2 == 0:\n        even_count += 1\n\nprint(f\"\uc9dd\uc218\uc758 \uac1c\uc218: {even_count}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#72","title":"7.2 \ub204\uc801 \ud328\ud134","text":"<pre><code># \ub9ac\uc2a4\ud2b8 \uc694\uc18c\ub4e4\uc758 \ud569\uacc4\nnumbers = [10, 20, 30, 40, 50]\n\ntotal = 0\nfor num in numbers:\n    total += num\n\nprint(f\"\ucd1d\ud569: {total}\")\nprint(f\"\ud3c9\uade0: {total / len(numbers)}\")\n\n# \ucd5c\ub313\uac12\uacfc \ucd5c\uc19f\uac12 \ucc3e\uae30\nnumbers = [45, 23, 67, 12, 89, 34]\n\nmax_val = numbers[0]\nmin_val = numbers[0]\n\nfor num in numbers:\n    if num &gt; max_val:\n        max_val = num\n    if num &lt; min_val:\n        min_val = num\n\nprint(f\"\ucd5c\ub313\uac12: {max_val}, \ucd5c\uc19f\uac12: {min_val}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#73","title":"7.3 \ud544\ud130\ub9c1 \ud328\ud134","text":"<pre><code># \uc870\uac74\uc5d0 \ub9de\ub294 \uc694\uc18c\ub9cc \uc0c8\ub85c\uc6b4 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# \uc9dd\uc218\ub9cc \ud544\ud130\ub9c1\neven_numbers = []\nfor num in numbers:\n    if num % 2 == 0:\n        even_numbers.append(num)\n\nprint(f\"\uc9dd\uc218\ub4e4: {even_numbers}\")\n\n# \ubb38\uc790\uc5f4 \uae38\uc774\ub85c \ud544\ud130\ub9c1\nwords = [\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\", \"frog\"]\nlong_words = []\n\nfor word in words:\n    if len(word) &gt;= 5:\n        long_words.append(word)\n\nprint(f\"5\uae00\uc790 \uc774\uc0c1 \ub2e8\uc5b4\ub4e4: {long_words}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#74","title":"7.4 \ubcc0\ud658 \ud328\ud134","text":"<pre><code># \ubaa8\ub4e0 \uc694\uc18c\uc5d0 \ub3d9\uc77c\ud55c \uc5f0\uc0b0 \uc801\uc6a9\ncelsius_temps = [0, 10, 20, 30, 40]\nfahrenheit_temps = []\n\nfor celsius in celsius_temps:\n    fahrenheit = (celsius * 9/5) + 32\n    fahrenheit_temps.append(fahrenheit)\n\nprint(\"\uc12d\uc528 -&gt; \ud654\uc528 \ubcc0\ud658:\")\nfor i in range(len(celsius_temps)):\n    print(f\"{celsius_temps[i]}\u00b0C = {fahrenheit_temps[i]}\u00b0F\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#8","title":"8. \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c\ub4e4","text":""},{"location":"tutorials/beginner/chapter07_loops/#81","title":"8.1 \uac04\ub2e8\ud55c \ud14d\uc2a4\ud2b8 \ubd84\uc11d\uae30","text":"<pre><code>def analyze_text(text):\n    \"\"\"\ud14d\uc2a4\ud2b8\ub97c \ubd84\uc11d\ud558\uc5ec \ud1b5\uacc4 \uc815\ubcf4 \ubc18\ud658\"\"\"\n\n    # \uae30\ubcf8 \uc815\ubcf4\n    char_count = len(text)\n    word_count = len(text.split())\n\n    # \uae00\uc790\ubcc4 \ube48\ub3c4 \uacc4\uc0b0\n    char_frequency = {}\n    for char in text.lower():\n        if char.isalpha():  # \uc54c\ud30c\ubcb3\ub9cc \uce74\uc6b4\ud2b8\n            if char in char_frequency:\n                char_frequency[char] += 1\n            else:\n                char_frequency[char] = 1\n\n    # \ub2e8\uc5b4\ubcc4 \ube48\ub3c4 \uacc4\uc0b0\n    word_frequency = {}\n    words = text.lower().split()\n    for word in words:\n        # \ud2b9\uc218\ubb38\uc790 \uc81c\uac70\n        clean_word = \"\"\n        for char in word:\n            if char.isalnum():\n                clean_word += char\n\n        if clean_word:\n            if clean_word in word_frequency:\n                word_frequency[clean_word] += 1\n            else:\n                word_frequency[clean_word] = 1\n\n    return {\n        'char_count': char_count,\n        'word_count': word_count,\n        'char_frequency': char_frequency,\n        'word_frequency': word_frequency\n    }\n\n# \uc0ac\uc6a9 \uc608\uc81c\nsample_text = \"Python is a powerful programming language. Python is easy to learn.\"\nresult = analyze_text(sample_text)\n\nprint(f\"\ucd1d \uae00\uc790 \uc218: {result['char_count']}\")\nprint(f\"\ucd1d \ub2e8\uc5b4 \uc218: {result['word_count']}\")\nprint(\"\\n\uae00\uc790 \ube48\ub3c4:\")\nfor char, count in sorted(result['char_frequency'].items()):\n    print(f\"'{char}': {count}\ubc88\")\n\nprint(\"\\n\ub2e8\uc5b4 \ube48\ub3c4:\")\nfor word, count in sorted(result['word_frequency'].items()):\n    print(f\"'{word}': {count}\ubc88\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#82","title":"8.2 \uc18c\uc218 \ucc3e\uae30 \ud504\ub85c\uadf8\ub7a8","text":"<pre><code>def find_primes(limit):\n    \"\"\"limit\uae4c\uc9c0\uc758 \ubaa8\ub4e0 \uc18c\uc218\ub97c \ucc3e\uc544 \ubc18\ud658\"\"\"\n\n    if limit &lt; 2:\n        return []\n\n    primes = []\n\n    for num in range(2, limit + 1):\n        is_prime = True\n\n        # 2\ubd80\ud130 num\uc758 \uc81c\uacf1\uadfc\uae4c\uc9c0 \ub098\ub204\uc5b4\ubcf4\uae30\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            primes.append(num)\n\n    return primes\n\n# \uc0ac\uc6a9 \uc608\uc81c\nlimit = 50\nprimes = find_primes(limit)\n\nprint(f\"1\ubd80\ud130 {limit}\uae4c\uc9c0\uc758 \uc18c\uc218:\")\nprint(primes)\nprint(f\"\ucd1d {len(primes)}\uac1c\uc758 \uc18c\uc218\uac00 \uc788\uc2b5\ub2c8\ub2e4.\")\n\n# \uc18c\uc218\ub97c 10\uac1c\uc529 \ud55c \uc904\uc5d0 \ucd9c\ub825\nprint(\"\\n\uc815\ub82c\ub41c \ucd9c\ub825:\")\nfor i in range(0, len(primes), 10):\n    row = primes[i:i+10]\n    for prime in row:\n        print(f\"{prime:3}\", end=\" \")\n    print()\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#83","title":"8.3 \uac04\ub2e8\ud55c \ud559\uc0dd \uc131\uc801 \uad00\ub9ac \uc2dc\uc2a4\ud15c","text":"<pre><code>def student_grade_system():\n    \"\"\"\ud559\uc0dd \uc131\uc801 \uad00\ub9ac \uc2dc\uc2a4\ud15c\"\"\"\n\n    students = {}\n\n    while True:\n        print(\"\\n=== \ud559\uc0dd \uc131\uc801 \uad00\ub9ac \uc2dc\uc2a4\ud15c ===\")\n        print(\"1. \ud559\uc0dd \ucd94\uac00\")\n        print(\"2. \uc131\uc801 \uc785\ub825\")\n        print(\"3. \uc131\uc801 \uc870\ud68c\")\n        print(\"4. \uc804\uccb4 \ud559\uc0dd \ubaa9\ub85d\")\n        print(\"5. \ud1b5\uacc4 \ubcf4\uae30\")\n        print(\"6. \uc885\ub8cc\")\n\n        choice = input(\"\uc120\ud0dd\ud558\uc138\uc694 (1-6): \")\n\n        if choice == \"1\":\n            name = input(\"\ud559\uc0dd \uc774\ub984\uc744 \uc785\ub825\ud558\uc138\uc694: \")\n            if name not in students:\n                students[name] = []\n                print(f\"{name} \ud559\uc0dd\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n            else:\n                print(\"\uc774\ubbf8 \ub4f1\ub85d\ub41c \ud559\uc0dd\uc785\ub2c8\ub2e4.\")\n\n        elif choice == \"2\":\n            name = input(\"\uc131\uc801\uc744 \uc785\ub825\ud560 \ud559\uc0dd \uc774\ub984: \")\n            if name in students:\n                try:\n                    score = float(input(\"\uc810\uc218\ub97c \uc785\ub825\ud558\uc138\uc694: \"))\n                    if 0 &lt;= score &lt;= 100:\n                        students[name].append(score)\n                        print(f\"{name} \ud559\uc0dd\uc758 \uc131\uc801\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n                    else:\n                        print(\"\uc810\uc218\ub294 0-100 \uc0ac\uc774\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n                except ValueError:\n                    print(\"\uc62c\ubc14\ub978 \uc22b\uc790\ub97c \uc785\ub825\ud574\uc8fc\uc138\uc694.\")\n            else:\n                print(\"\ub4f1\ub85d\ub418\uc9c0 \uc54a\uc740 \ud559\uc0dd\uc785\ub2c8\ub2e4.\")\n\n        elif choice == \"3\":\n            name = input(\"\uc870\ud68c\ud560 \ud559\uc0dd \uc774\ub984: \")\n            if name in students:\n                scores = students[name]\n                if scores:\n                    print(f\"\\n{name} \ud559\uc0dd\uc758 \uc131\uc801:\")\n                    for i, score in enumerate(scores, 1):\n                        print(f\"  {i}\ubc88\uc9f8 \uc2dc\ud5d8: {score}\uc810\")\n\n                    average = sum(scores) / len(scores)\n                    print(f\"\ud3c9\uade0: {average:.2f}\uc810\")\n\n                    # \ub4f1\uae09 \uacc4\uc0b0\n                    if average &gt;= 90:\n                        grade = \"A\"\n                    elif average &gt;= 80:\n                        grade = \"B\"\n                    elif average &gt;= 70:\n                        grade = \"C\"\n                    elif average &gt;= 60:\n                        grade = \"D\"\n                    else:\n                        grade = \"F\"\n                    print(f\"\ub4f1\uae09: {grade}\")\n                else:\n                    print(f\"{name} \ud559\uc0dd\uc758 \uc131\uc801\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n            else:\n                print(\"\ub4f1\ub85d\ub418\uc9c0 \uc54a\uc740 \ud559\uc0dd\uc785\ub2c8\ub2e4.\")\n\n        elif choice == \"4\":\n            if students:\n                print(\"\\n\uc804\uccb4 \ud559\uc0dd \ubaa9\ub85d:\")\n                for i, (name, scores) in enumerate(students.items(), 1):\n                    score_count = len(scores)\n                    avg = sum(scores) / len(scores) if scores else 0\n                    print(f\"{i}. {name} - \uc2dc\ud5d8 {score_count}\ud68c, \ud3c9\uade0 {avg:.2f}\uc810\")\n            else:\n                print(\"\ub4f1\ub85d\ub41c \ud559\uc0dd\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n\n        elif choice == \"5\":\n            if students:\n                all_scores = []\n                for scores in students.values():\n                    all_scores.extend(scores)\n\n                if all_scores:\n                    print(f\"\\n\uc804\uccb4 \ud1b5\uacc4:\")\n                    print(f\"\ucd1d \ud559\uc0dd \uc218: {len(students)}\")\n                    print(f\"\ucd1d \uc2dc\ud5d8 \ud69f\uc218: {len(all_scores)}\")\n                    print(f\"\uc804\uccb4 \ud3c9\uade0: {sum(all_scores) / len(all_scores):.2f}\uc810\")\n                    print(f\"\ucd5c\uace0 \uc810\uc218: {max(all_scores)}\uc810\")\n                    print(f\"\ucd5c\uc800 \uc810\uc218: {min(all_scores)}\uc810\")\n                else:\n                    print(\"\uc785\ub825\ub41c \uc131\uc801\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n            else:\n                print(\"\ub4f1\ub85d\ub41c \ud559\uc0dd\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n\n        elif choice == \"6\":\n            print(\"\ud504\ub85c\uadf8\ub7a8\uc744 \uc885\ub8cc\ud569\ub2c8\ub2e4.\")\n            break\n\n        else:\n            print(\"\uc62c\ubc14\ub978 \uc120\ud0dd\uc9c0\ub97c \uc785\ub825\ud574\uc8fc\uc138\uc694.\")\n\n# \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589\n# student_grade_system()  # \uc8fc\uc11d \ud574\uc81c\ud558\uc5ec \uc2e4\ud589\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#9","title":"9. \uace0\uae09 \ubc18\ubcf5\ubb38 \uae30\ubc95","text":""},{"location":"tutorials/beginner/chapter07_loops/#91-else","title":"9.1 else \uc808\uacfc \ud568\uaed8 \uc0ac\uc6a9\ud558\ub294 \ubc18\ubcf5\ubb38","text":"<pre><code># for-else: \ubc18\ubcf5\ubb38\uc774 break \uc5c6\uc774 \uc815\uc0c1 \uc644\ub8cc\ub418\uc5c8\uc744 \ub54c \uc2e4\ud589\ndef find_number(numbers, target):\n    for num in numbers:\n        if num == target:\n            print(f\"{target}\uc744 \ucc3e\uc558\uc2b5\ub2c8\ub2e4!\")\n            break\n    else:\n        print(f\"{target}\uc744 \ucc3e\uc9c0 \ubabb\ud588\uc2b5\ub2c8\ub2e4.\")\n\nnumbers = [1, 2, 3, 4, 5]\nfind_number(numbers, 3)  # \ucc3e\uc558\uc2b5\ub2c8\ub2e4\nfind_number(numbers, 10) # \ucc3e\uc9c0 \ubabb\ud588\uc2b5\ub2c8\ub2e4\n\n# while-else: while \uc870\uac74\uc774 \uac70\uc9d3\uc774 \ub418\uc5b4 \uc885\ub8cc\ub418\uc5c8\uc744 \ub54c \uc2e4\ud589\ncount = 0\nwhile count &lt; 3:\n    print(f\"\uce74\uc6b4\ud2b8: {count}\")\n    count += 1\nelse:\n    print(\"while \ub8e8\ud504\uac00 \uc815\uc0c1 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#92-list-comprehension","title":"9.2 \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 (List Comprehension)","text":"<pre><code># \uae30\ubcf8 for\ubb38\nsquares = []\nfor i in range(1, 6):\n    squares.append(i ** 2)\nprint(squares)  # [1, 4, 9, 16, 25]\n\n# \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\uc73c\ub85c \uac04\ub2e8\ud788\nsquares = [i ** 2 for i in range(1, 6)]\nprint(squares)  # [1, 4, 9, 16, 25]\n\n# \uc870\uac74\uacfc \ud568\uaed8 \uc0ac\uc6a9\neven_squares = [i ** 2 for i in range(1, 11) if i % 2 == 0]\nprint(even_squares)  # [4, 16, 36, 64, 100]\n\n# \uc911\ucca9 \ubc18\ubcf5\ubb38\uc744 \ucef4\ud504\ub9ac\ud5e8\uc158\uc73c\ub85c\nmatrix = [[i * j for j in range(1, 4)] for i in range(1, 4)]\nprint(matrix)  # [[1, 2, 3], [2, 4, 6], [3, 6, 9]]\n</code></pre>"},{"location":"tutorials/beginner/chapter07_loops/#10","title":"10. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/beginner/chapter07_loops/#1_1","title":"\uc5f0\uc2b5 1: \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4 \uc0dd\uc131\uae30","text":"<p>n\ubc88\uc9f8\uae4c\uc9c0\uc758 \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4\uc744 \uc0dd\uc131\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694. (\ud53c\ubcf4\ub098\uce58 \uc218\uc5f4: 0, 1, 1, 2, 3, 5, 8, 13, ...)</p>"},{"location":"tutorials/beginner/chapter07_loops/#2","title":"\uc5f0\uc2b5 2: \ubcc4\ud45c \ub2e4\uc774\uc544\ubaac\ub4dc \ud328\ud134","text":"<p>\uc0ac\uc6a9\uc790\uac00 \uc785\ub825\ud55c \ud06c\uae30\uc5d0 \ub530\ub77c \ub2e4\uc774\uc544\ubaac\ub4dc \ubaa8\uc591\uc758 \ubcc4\ud45c \ud328\ud134\uc744 \ucd9c\ub825\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter07_loops/#3","title":"\uc5f0\uc2b5 3: \uac04\ub2e8\ud55c \uacc4\uc0b0\uae30","text":"<p>\uc0ac\uc6a9\uc790\uac00 'quit'\uc744 \uc785\ub825\ud560 \ub54c\uae4c\uc9c0 \uacc4\uc18d\ud574\uc11c \ub450 \uc22b\uc790\uc640 \uc5f0\uc0b0\uc790\ub97c \uc785\ub825\ubc1b\uc544 \uacc4\uc0b0 \uacb0\uacfc\ub97c \ucd9c\ub825\ud558\ub294 \uacc4\uc0b0\uae30\ub97c \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter07_loops/#4","title":"\uc5f0\uc2b5 4: \ub2e8\uc5b4 \ube48\ub3c4 \ubd84\uc11d\uae30","text":"<p>\uc0ac\uc6a9\uc790\uac00 \uc785\ub825\ud55c \ud14d\uc2a4\ud2b8\uc5d0\uc11c \uac01 \ub2e8\uc5b4\uac00 \uba87 \ubc88 \ub098\ud0c0\ub098\ub294\uc9c0 \ubd84\uc11d\ud558\uc5ec \ube48\ub3c4\uc21c\uc73c\ub85c \ucd9c\ub825\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter07_loops/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\ubc18\ubcf5\ubb38 \uae30\ubcf8: for\ubb38\uacfc while\ubb38\uc758 \uae30\ubcf8 \ubb38\ubc95\uacfc \uc0ac\uc6a9\ubc95</li> <li>range() \ud568\uc218: \ub2e4\uc591\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \ud65c\uc6a9\ud55c \uc22b\uc790 \uc2dc\ud000\uc2a4 \uc0dd\uc131</li> <li>\uceec\ub809\uc158 \uc21c\ud68c: \ub9ac\uc2a4\ud2b8, \ubb38\uc790\uc5f4, \ub515\uc154\ub108\ub9ac \ub4f1 \ub2e4\uc591\ud55c \uac1d\uccb4 \uc21c\ud68c</li> <li>\ubc18\ubcf5\ubb38 \uc81c\uc5b4: break\uc640 continue\ub97c \uc0ac\uc6a9\ud55c \ud750\ub984 \uc81c\uc5b4</li> <li>\uc911\ucca9 \ubc18\ubcf5\ubb38: 2\ucc28\uc6d0 \ub370\uc774\ud130 \ucc98\ub9ac\uc640 \ud328\ud134 \uc0dd\uc131</li> <li>\ud65c\uc6a9 \ud328\ud134: \uce74\uc6b4\ud130, \ub204\uc801, \ud544\ud130\ub9c1, \ubcc0\ud658 \ud328\ud134</li> <li>\uc2e4\uc6a9 \uc608\uc81c: \ud14d\uc2a4\ud2b8 \ubd84\uc11d, \uc18c\uc218 \ucc3e\uae30, \uc131\uc801 \uad00\ub9ac \uc2dc\uc2a4\ud15c</li> <li>\uace0\uae09 \uae30\ubc95: else \uc808, \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c\uc744 \ud559\uc2b5\ud558\uc5ec \ub370\uc774\ud130\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/beginner/chapter07_loops/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ubc18\ubcf5\ubb38\uc740 \ucf54\ub4dc\uc758 \uc911\ubcf5\uc744 \uc904\uc774\uace0 \ud6a8\uc728\uc131\uc744 \ub192\uc774\ub294 \ud575\uc2ec \ub3c4\uad6c</li> <li>for\ubb38\uc740 \uc815\ud574\uc9c4 \ud69f\uc218\ub098 \uceec\ub809\uc158 \uc21c\ud68c\uc5d0, while\ubb38\uc740 \uc870\uac74 \uae30\ubc18 \ubc18\ubcf5\uc5d0 \uc0ac\uc6a9</li> <li>break\uc640 continue\ub85c \ubc18\ubcf5\ubb38\uc758 \uc2e4\ud589 \ud750\ub984\uc744 \uc81c\uc5b4\ud560 \uc218 \uc788\uc74c</li> <li>\uc911\ucca9 \ubc18\ubcf5\ubb38 \uc0ac\uc6a9 \uc2dc \uc131\ub2a5\uacfc \uac00\ub3c5\uc131\uc744 \uace0\ub824\ud574\uc57c \ud568</li> <li>\uc801\uc808\ud55c \ubc18\ubcf5\ubb38 \uc120\ud0dd\uc774 \ucf54\ub4dc\uc758 \uba85\ud655\uc131\uacfc \uc131\ub2a5\uc5d0 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce68 </li> </ul>"},{"location":"tutorials/beginner/chapter08_lists_tuples/","title":"Chapter 8: \ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c (Lists and Tuples)","text":""},{"location":"tutorials/beginner/chapter08_lists_tuples/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c\uc758 \uae30\ubcf8 \uac1c\ub150\uacfc \ucc28\uc774\uc810 \uc774\ud574\ud558\uae30 - \ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c\uc758 \uc0dd\uc131, \uc811\uadfc, \uc218\uc815 \ubc29\ubc95 \uc775\ud788\uae30 - \ub2e4\uc591\ud55c \ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c \uba54\uc11c\ub4dc \ud65c\uc6a9\ud558\uae30 - \uc2ac\ub77c\uc774\uc2f1\uc744 \ud1b5\ud55c \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \ucc98\ub9ac\ud558\uae30 - \uc911\ucca9 \ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c \ub2e4\ub8e8\uae30 - \uc2e4\uc6a9\uc801\uc778 \ub370\uc774\ud130 \uad6c\uc870 \ud65c\uc6a9 \ud504\ub85c\uadf8\ub7a8 \uc791\uc131\ud558\uae30</p>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#1","title":"1. \ub9ac\uc2a4\ud2b8\uc758 \uae30\ubcf8 \uac1c\ub150","text":""},{"location":"tutorials/beginner/chapter08_lists_tuples/#11","title":"1.1 \ub9ac\uc2a4\ud2b8\ub780?","text":"<p>\ub9ac\uc2a4\ud2b8\ub294 Python\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \ub370\uc774\ud130 \uad6c\uc870\ub85c, \uc5ec\ub7ec \uac1c\uc758 \uac12\uc744 \uc21c\uc11c\ub300\ub85c \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \ubcc0\uacbd \uac00\ub2a5\ud55c(mutable) \uceec\ub809\uc158\uc785\ub2c8\ub2e4.</p> <pre><code># \ub9ac\uc2a4\ud2b8 \uc0dd\uc131 \ubc29\ubc95\ub4e4\nempty_list = []  # \ube48 \ub9ac\uc2a4\ud2b8\nnumbers = [1, 2, 3, 4, 5]  # \uc22b\uc790 \ub9ac\uc2a4\ud2b8\nfruits = [\"\uc0ac\uacfc\", \"\ubc14\ub098\ub098\", \"\uc624\ub80c\uc9c0\"]  # \ubb38\uc790\uc5f4 \ub9ac\uc2a4\ud2b8\nmixed = [1, \"hello\", 3.14, True]  # \ub2e4\uc591\ud55c \ud0c0\uc785\uc758 \ub370\uc774\ud130\n\n# list() \ud568\uc218\ub85c \uc0dd\uc131\nnumbers_from_range = list(range(1, 6))  # [1, 2, 3, 4, 5]\nchars = list(\"Hello\")  # ['H', 'e', 'l', 'l', 'o']\n\nprint(f\"\uc22b\uc790 \ub9ac\uc2a4\ud2b8: {numbers}\")\nprint(f\"\uacfc\uc77c \ub9ac\uc2a4\ud2b8: {fruits}\")\nprint(f\"\ud63c\ud569 \ub9ac\uc2a4\ud2b8: {mixed}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#12","title":"1.2 \ub9ac\uc2a4\ud2b8\uc758 \ud2b9\uc9d5","text":"<pre><code># 1. \uc21c\uc11c\uac00 \uc788\uc74c (ordered)\nfruits = [\"\uc0ac\uacfc\", \"\ubc14\ub098\ub098\", \"\uc624\ub80c\uc9c0\"]\nprint(f\"\uccab \ubc88\uc9f8 \uacfc\uc77c: {fruits[0]}\")  # \uc778\ub371\uc2a4\ub85c \uc811\uadfc \uac00\ub2a5\n\n# 2. \ubcc0\uacbd \uac00\ub2a5 (mutable)\nfruits[1] = \"\ud3ec\ub3c4\"  # \uc694\uc18c \ubcc0\uacbd \uac00\ub2a5\nprint(f\"\ubcc0\uacbd\ub41c \ub9ac\uc2a4\ud2b8: {fruits}\")\n\n# 3. \uc911\ubcf5 \ud5c8\uc6a9\nnumbers = [1, 2, 2, 3, 3, 3]\nprint(f\"\uc911\ubcf5\uc774 \uc788\ub294 \ub9ac\uc2a4\ud2b8: {numbers}\")\n\n# 4. \ub2e4\uc591\ud55c \ud0c0\uc785 \uc800\uc7a5 \uac00\ub2a5\nmixed_data = [42, \"text\", [1, 2, 3], {\"key\": \"value\"}]\nprint(f\"\ub2e4\uc591\ud55c \ud0c0\uc785: {mixed_data}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#2","title":"2. \ub9ac\uc2a4\ud2b8 \uc778\ub371\uc2f1\uacfc \uc2ac\ub77c\uc774\uc2f1","text":""},{"location":"tutorials/beginner/chapter08_lists_tuples/#21-indexing","title":"2.1 \uc778\ub371\uc2f1 (Indexing)","text":"<pre><code>fruits = [\"\uc0ac\uacfc\", \"\ubc14\ub098\ub098\", \"\uc624\ub80c\uc9c0\", \"\ud3ec\ub3c4\", \"\ud0a4\uc704\"]\n\n# \uc591\uc218 \uc778\ub371\uc2a4 (0\ubd80\ud130 \uc2dc\uc791)\nprint(f\"\uccab \ubc88\uc9f8 \uacfc\uc77c: {fruits[0]}\")   # \uc0ac\uacfc\nprint(f\"\ub450 \ubc88\uc9f8 \uacfc\uc77c: {fruits[1]}\")   # \ubc14\ub098\ub098\nprint(f\"\ub9c8\uc9c0\ub9c9 \uacfc\uc77c: {fruits[4]}\")    # \ud0a4\uc704\n\n# \uc74c\uc218 \uc778\ub371\uc2a4 (\ub4a4\uc5d0\uc11c\ubd80\ud130)\nprint(f\"\ub9c8\uc9c0\ub9c9 \uacfc\uc77c: {fruits[-1]}\")   # \ud0a4\uc704\nprint(f\"\ub4a4\uc5d0\uc11c \ub450 \ubc88\uc9f8: {fruits[-2]}\")  # \ud3ec\ub3c4\n\n# \uc778\ub371\uc2a4 \ubc94\uc704 \uccb4\ud06c\ntry:\n    print(fruits[10])  # IndexError \ubc1c\uc0dd\nexcept IndexError as e:\n    print(f\"\uc778\ub371\uc2a4 \uc624\ub958: {e}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#22-slicing","title":"2.2 \uc2ac\ub77c\uc774\uc2f1 (Slicing)","text":"<pre><code>numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# \uae30\ubcf8 \uc2ac\ub77c\uc774\uc2f1\nprint(f\"\ucc98\uc74c\ubd80\ud130 5\ubc88\uc9f8\uae4c\uc9c0: {numbers[:5]}\")     # [0, 1, 2, 3, 4]\nprint(f\"3\ubc88\uc9f8\ubd80\ud130 \ub05d\uae4c\uc9c0: {numbers[3:]}\")      # [3, 4, 5, 6, 7, 8, 9]\nprint(f\"2\ubc88\uc9f8\ubd80\ud130 7\ubc88\uc9f8\uae4c\uc9c0: {numbers[2:8]}\")   # [2, 3, 4, 5, 6, 7]\n\n# \ub2e8\uacc4(step) \uc0ac\uc6a9\nprint(f\"\uc9dd\uc218 \uc778\ub371\uc2a4 \uc694\uc18c\ub4e4: {numbers[::2]}\")    # [0, 2, 4, 6, 8]\nprint(f\"\ud640\uc218 \uc778\ub371\uc2a4 \uc694\uc18c\ub4e4: {numbers[1::2]}\")   # [1, 3, 5, 7, 9]\nprint(f\"\uc5ed\uc21c\uc73c\ub85c: {numbers[::-1]}\")           # [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n# \uc74c\uc218 \uc778\ub371\uc2a4\uc640 \uc2ac\ub77c\uc774\uc2f1\nprint(f\"\ub4a4\uc5d0\uc11c 3\uac1c: {numbers[-3:]}\")          # [7, 8, 9]\nprint(f\"\ucc98\uc74c 3\uac1c \uc81c\uc678: {numbers[3:]}\")        # [3, 4, 5, 6, 7, 8, 9]\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#3","title":"3. \ub9ac\uc2a4\ud2b8 \uba54\uc11c\ub4dc","text":""},{"location":"tutorials/beginner/chapter08_lists_tuples/#31","title":"3.1 \uc694\uc18c \ucd94\uac00 \uba54\uc11c\ub4dc","text":"<pre><code># append(): \ub05d\uc5d0 \ud558\ub098\uc758 \uc694\uc18c \ucd94\uac00\nfruits = [\"\uc0ac\uacfc\", \"\ubc14\ub098\ub098\"]\nfruits.append(\"\uc624\ub80c\uc9c0\")\nprint(f\"append \ud6c4: {fruits}\")  # ['\uc0ac\uacfc', '\ubc14\ub098\ub098', '\uc624\ub80c\uc9c0']\n\n# insert(): \ud2b9\uc815 \uc704\uce58\uc5d0 \uc694\uc18c \ucd94\uac00\nfruits.insert(1, \"\ud3ec\ub3c4\")  # \uc778\ub371\uc2a4 1\uc5d0 '\ud3ec\ub3c4' \ucd94\uac00\nprint(f\"insert \ud6c4: {fruits}\")  # ['\uc0ac\uacfc', '\ud3ec\ub3c4', '\ubc14\ub098\ub098', '\uc624\ub80c\uc9c0']\n\n# extend(): \uc5ec\ub7ec \uc694\uc18c\ub97c \ud55c \ubc88\uc5d0 \ucd94\uac00\nfruits.extend([\"\ud0a4\uc704\", \"\ub9dd\uace0\"])\nprint(f\"extend \ud6c4: {fruits}\")  # ['\uc0ac\uacfc', '\ud3ec\ub3c4', '\ubc14\ub098\ub098', '\uc624\ub80c\uc9c0', '\ud0a4\uc704', '\ub9dd\uace0']\n\n# + \uc5f0\uc0b0\uc790\ub85c \ub9ac\uc2a4\ud2b8 \ud569\uce58\uae30\nmore_fruits = [\"\ub538\uae30\", \"\ubcf5\uc22d\uc544\"]\nall_fruits = fruits + more_fruits\nprint(f\"+ \uc5f0\uc0b0\uc790\ub85c: {all_fruits}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#32","title":"3.2 \uc694\uc18c \uc81c\uac70 \uba54\uc11c\ub4dc","text":"<pre><code>fruits = [\"\uc0ac\uacfc\", \"\ubc14\ub098\ub098\", \"\uc624\ub80c\uc9c0\", \"\ubc14\ub098\ub098\", \"\ud0a4\uc704\"]\n\n# remove(): \uccab \ubc88\uc9f8\ub85c \ucc3e\uc740 \ud2b9\uc815 \uac12 \uc81c\uac70\nfruits.remove(\"\ubc14\ub098\ub098\")  # \uccab \ubc88\uc9f8 '\ubc14\ub098\ub098'\ub9cc \uc81c\uac70\nprint(f\"remove \ud6c4: {fruits}\")  # ['\uc0ac\uacfc', '\uc624\ub80c\uc9c0', '\ubc14\ub098\ub098', '\ud0a4\uc704']\n\n# pop(): \ud2b9\uc815 \uc778\ub371\uc2a4\uc758 \uc694\uc18c \uc81c\uac70\ud558\uace0 \ubc18\ud658\nremoved_fruit = fruits.pop(2)  # \uc778\ub371\uc2a4 2\uc758 \uc694\uc18c \uc81c\uac70\nprint(f\"pop\uc73c\ub85c \uc81c\uac70\ub41c \uacfc\uc77c: {removed_fruit}\")  # \ubc14\ub098\ub098\nprint(f\"pop \ud6c4: {fruits}\")  # ['\uc0ac\uacfc', '\uc624\ub80c\uc9c0', '\ud0a4\uc704']\n\n# \ub9c8\uc9c0\ub9c9 \uc694\uc18c \uc81c\uac70\nlast_fruit = fruits.pop()  # \uc778\ub371\uc2a4 \uc5c6\uc73c\uba74 \ub9c8\uc9c0\ub9c9 \uc694\uc18c \uc81c\uac70\nprint(f\"\ub9c8\uc9c0\ub9c9 \uc694\uc18c: {last_fruit}\")  # \ud0a4\uc704\nprint(f\"\ucd5c\uc885 \ub9ac\uc2a4\ud2b8: {fruits}\")  # ['\uc0ac\uacfc', '\uc624\ub80c\uc9c0']\n\n# del \ud0a4\uc6cc\ub4dc\ub85c \uc81c\uac70\nnumbers = [1, 2, 3, 4, 5]\ndel numbers[2]  # \uc778\ub371\uc2a4 2 \uc81c\uac70\nprint(f\"del \ud6c4: {numbers}\")  # [1, 2, 4, 5]\n\ndel numbers[1:3]  # \uc2ac\ub77c\uc774\uc2f1\uc73c\ub85c \uc5ec\ub7ec \uc694\uc18c \uc81c\uac70\nprint(f\"\uc2ac\ub77c\uc774\uc2a4 del \ud6c4: {numbers}\")  # [1, 5]\n\n# clear(): \ubaa8\ub4e0 \uc694\uc18c \uc81c\uac70\nnumbers.clear()\nprint(f\"clear \ud6c4: {numbers}\")  # []\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#33","title":"3.3 \uac80\uc0c9\uacfc \uc815\ubcf4 \uba54\uc11c\ub4dc","text":"<pre><code>numbers = [1, 2, 3, 2, 4, 2, 5]\n\n# index(): \uc694\uc18c\uc758 \uccab \ubc88\uc9f8 \uc778\ub371\uc2a4 \ucc3e\uae30\nfirst_index = numbers.index(2)\nprint(f\"2\uc758 \uccab \ubc88\uc9f8 \uc778\ub371\uc2a4: {first_index}\")  # 1\n\n# \ud2b9\uc815 \ubc94\uc704\uc5d0\uc11c \ucc3e\uae30\nsecond_index = numbers.index(2, 2)  # \uc778\ub371\uc2a4 2\ubd80\ud130 \ucc3e\uae30\nprint(f\"2\uc758 \ub450 \ubc88\uc9f8 \uc778\ub371\uc2a4: {second_index}\")  # 3\n\n# count(): \ud2b9\uc815 \uac12\uc758 \uac1c\uc218 \uc138\uae30\ncount_2 = numbers.count(2)\nprint(f\"2\uc758 \uac1c\uc218: {count_2}\")  # 3\n\n# len(): \ub9ac\uc2a4\ud2b8 \uae38\uc774\nlength = len(numbers)\nprint(f\"\ub9ac\uc2a4\ud2b8 \uae38\uc774: {length}\")  # 7\n\n# in \uc5f0\uc0b0\uc790: \uc694\uc18c \uc874\uc7ac \ud655\uc778\nprint(f\"3\uc774 \ub9ac\uc2a4\ud2b8\uc5d0 \uc788\ub098\uc694? {3 in numbers}\")  # True\nprint(f\"10\uc774 \ub9ac\uc2a4\ud2b8\uc5d0 \uc788\ub098\uc694? {10 in numbers}\")  # False\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#34","title":"3.4 \uc815\ub82c\uacfc \uc21c\uc11c \ubcc0\uacbd \uba54\uc11c\ub4dc","text":"<pre><code>numbers = [3, 1, 4, 1, 5, 9, 2, 6]\n\n# sort(): \uc6d0\ubcf8 \ub9ac\uc2a4\ud2b8\ub97c \uc815\ub82c (\ub0b4\ub9bc\ucc28\uc21c)\nnumbers_copy = numbers.copy()  # \uc6d0\ubcf8 \ubcf4\uc874\uc6a9 \ubcf5\uc0ac\nnumbers_copy.sort()\nprint(f\"\uc624\ub984\ucc28\uc21c \uc815\ub82c: {numbers_copy}\")  # [1, 1, 2, 3, 4, 5, 6, 9]\n\nnumbers_copy.sort(reverse=True)\nprint(f\"\ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c: {numbers_copy}\")  # [9, 6, 5, 4, 3, 2, 1, 1]\n\n# sorted(): \uc0c8\ub85c\uc6b4 \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8 \ubc18\ud658 (\uc6d0\ubcf8 \uc720\uc9c0)\noriginal = [3, 1, 4, 1, 5]\nsorted_new = sorted(original)\nprint(f\"\uc6d0\ubcf8: {original}\")      # [3, 1, 4, 1, 5]\nprint(f\"\uc815\ub82c\ub41c \uc0c8 \ub9ac\uc2a4\ud2b8: {sorted_new}\")  # [1, 1, 3, 4, 5]\n\n# reverse(): \ub9ac\uc2a4\ud2b8 \ub4a4\uc9d1\uae30\nfruits = [\"\uc0ac\uacfc\", \"\ubc14\ub098\ub098\", \"\uc624\ub80c\uc9c0\"]\nfruits.reverse()\nprint(f\"\ub4a4\uc9d1\ud78c \ub9ac\uc2a4\ud2b8: {fruits}\")  # ['\uc624\ub80c\uc9c0', '\ubc14\ub098\ub098', '\uc0ac\uacfc']\n\n# \ubb38\uc790\uc5f4 \uc815\ub82c\nwords = [\"python\", \"java\", \"c++\", \"javascript\"]\nwords.sort()\nprint(f\"\ubb38\uc790\uc5f4 \uc815\ub82c: {words}\")  # ['c++', 'java', 'javascript', 'python']\n\n# \uae38\uc774\uc21c \uc815\ub82c\nwords.sort(key=len)\nprint(f\"\uae38\uc774\uc21c \uc815\ub82c: {words}\")  # ['c++', 'java', 'python', 'javascript']\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#4","title":"4. \ud29c\ud50c\uc758 \uae30\ubcf8 \uac1c\ub150","text":""},{"location":"tutorials/beginner/chapter08_lists_tuples/#41","title":"4.1 \ud29c\ud50c\ub780?","text":"<p>\ud29c\ud50c\uc740 \ub9ac\uc2a4\ud2b8\uc640 \ube44\uc2b7\ud558\uc9c0\ub9cc \ubcc0\uacbd \ubd88\uac00\ub2a5\ud55c(immutable) \uc21c\uc11c\uac00 \uc788\ub294 \uceec\ub809\uc158\uc785\ub2c8\ub2e4.</p> <pre><code># \ud29c\ud50c \uc0dd\uc131 \ubc29\ubc95\ub4e4\nempty_tuple = ()  # \ube48 \ud29c\ud50c\ncoordinates = (3, 4)  # \uc88c\ud45c\ncolors = (\"red\", \"green\", \"blue\")  # \uc0c9\uc0c1\nmixed_tuple = (1, \"hello\", 3.14, True)  # \ub2e4\uc591\ud55c \ud0c0\uc785\n\n# \ud558\ub098\uc758 \uc694\uc18c\ub9cc \uac00\uc9c4 \ud29c\ud50c (\uc27c\ud45c \ud544\uc218!)\nsingle_element = (42,)  # \uc27c\ud45c\uac00 \uc5c6\uc73c\uba74 \uadf8\ub0e5 \uad04\ud638\nnot_tuple = (42)  # \uc774\uac83\uc740 \uc815\uc218 42\n\nprint(f\"\uc88c\ud45c: {coordinates}\")\nprint(f\"\uc0c9\uc0c1\ub4e4: {colors}\")\nprint(f\"\ub2e8\uc77c \uc694\uc18c \ud29c\ud50c: {single_element}\")\nprint(f\"\ub2e8\uc77c \uc694\uc18c \ud0c0\uc785: {type(single_element)}\")\nprint(f\"\uad04\ud638\ub9cc \uc788\ub294 \uac83: {not_tuple}, \ud0c0\uc785: {type(not_tuple)}\")\n\n# tuple() \ud568\uc218\ub85c \uc0dd\uc131\nnumbers_tuple = tuple([1, 2, 3, 4, 5])\nchars_tuple = tuple(\"Hello\")\nprint(f\"\ub9ac\uc2a4\ud2b8\uc5d0\uc11c \ubcc0\ud658: {numbers_tuple}\")\nprint(f\"\ubb38\uc790\uc5f4\uc5d0\uc11c \ubcc0\ud658: {chars_tuple}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#42","title":"4.2 \ud29c\ud50c\uc758 \ud2b9\uc9d5","text":"<pre><code>point = (10, 20)\n\n# 1. \uc21c\uc11c\uac00 \uc788\uc74c (\uc778\ub371\uc2f1 \uac00\ub2a5)\nprint(f\"x \uc88c\ud45c: {point[0]}\")  # 10\nprint(f\"y \uc88c\ud45c: {point[1]}\")  # 20\n\n# 2. \ubcc0\uacbd \ubd88\uac00\ub2a5 (immutable)\ntry:\n    point[0] = 30  # TypeError \ubc1c\uc0dd\nexcept TypeError as e:\n    print(f\"\ud29c\ud50c \ubcc0\uacbd \uc2dc\ub3c4 \uc624\ub958: {e}\")\n\n# 3. \uc2ac\ub77c\uc774\uc2f1 \uac00\ub2a5\nnumbers = (0, 1, 2, 3, 4, 5)\nprint(f\"\ucc98\uc74c 3\uac1c: {numbers[:3]}\")  # (0, 1, 2)\nprint(f\"\ub9c8\uc9c0\ub9c9 3\uac1c: {numbers[-3:]}\")  # (3, 4, 5)\n\n# 4. \uc911\ubcf5 \ud5c8\uc6a9\nrepeated = (1, 2, 2, 3, 3, 3)\nprint(f\"\uc911\ubcf5\uc774 \uc788\ub294 \ud29c\ud50c: {repeated}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#43","title":"4.3 \ud29c\ud50c \uba54\uc11c\ub4dc","text":"<p>\ud29c\ud50c\uc740 \ubcc0\uacbd \ubd88\uac00\ub2a5\ud558\ubbc0\ub85c \uc81c\ud55c\uc801\uc778 \uba54\uc11c\ub4dc\ub9cc \uc81c\uacf5\ud569\ub2c8\ub2e4.</p> <pre><code>numbers = (1, 2, 3, 2, 4, 2, 5)\n\n# count(): \ud2b9\uc815 \uac12\uc758 \uac1c\uc218\ncount_2 = numbers.count(2)\nprint(f\"2\uc758 \uac1c\uc218: {count_2}\")  # 3\n\n# index(): \ud2b9\uc815 \uac12\uc758 \uccab \ubc88\uc9f8 \uc778\ub371\uc2a4\nindex_2 = numbers.index(2)\nprint(f\"2\uc758 \uccab \ubc88\uc9f8 \uc778\ub371\uc2a4: {index_2}\")  # 1\n\n# len(): \ud29c\ud50c \uae38\uc774\nlength = len(numbers)\nprint(f\"\ud29c\ud50c \uae38\uc774: {length}\")  # 7\n\n# in \uc5f0\uc0b0\uc790: \uc694\uc18c \uc874\uc7ac \ud655\uc778\nprint(f\"3\uc774 \ud29c\ud50c\uc5d0 \uc788\ub098\uc694? {3 in numbers}\")  # True\nprint(f\"10\uc774 \ud29c\ud50c\uc5d0 \uc788\ub098\uc694? {10 in numbers}\")  # False\n\n# max(), min(), sum() \ud568\uc218 \uc0ac\uc6a9 \uac00\ub2a5\nprint(f\"\ucd5c\ub313\uac12: {max(numbers)}\")  # 5\nprint(f\"\ucd5c\uc19f\uac12: {min(numbers)}\")  # 1\nprint(f\"\ud569\uacc4: {sum(numbers)}\")    # 20\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#5-vs","title":"5. \ub9ac\uc2a4\ud2b8 vs \ud29c\ud50c \ube44\uad50","text":""},{"location":"tutorials/beginner/chapter08_lists_tuples/#51","title":"5.1 \uc8fc\uc694 \ucc28\uc774\uc810","text":"<pre><code># 1. \ubcc0\uacbd \uac00\ub2a5\uc131\nmy_list = [1, 2, 3]\nmy_tuple = (1, 2, 3)\n\n# \ub9ac\uc2a4\ud2b8\ub294 \ubcc0\uacbd \uac00\ub2a5\nmy_list[0] = 10\nmy_list.append(4)\nprint(f\"\ubcc0\uacbd\ub41c \ub9ac\uc2a4\ud2b8: {my_list}\")  # [10, 2, 3, 4]\n\n# \ud29c\ud50c\uc740 \ubcc0\uacbd \ubd88\uac00\ub2a5\ntry:\n    my_tuple[0] = 10  # TypeError\nexcept TypeError as e:\n    print(f\"\ud29c\ud50c \ubcc0\uacbd \ubd88\uac00: {e}\")\n\n# 2. \uc131\ub2a5 \ucc28\uc774\nimport time\n\n# \ud070 \ub370\uc774\ud130\ub85c \uc131\ub2a5 \ud14c\uc2a4\ud2b8\nlarge_list = list(range(1000000))\nlarge_tuple = tuple(range(1000000))\n\n# \ub9ac\uc2a4\ud2b8 \uc21c\ud68c \uc2dc\uac04\nstart = time.time()\nfor item in large_list:\n    pass\nlist_time = time.time() - start\n\n# \ud29c\ud50c \uc21c\ud68c \uc2dc\uac04\nstart = time.time()\nfor item in large_tuple:\n    pass\ntuple_time = time.time() - start\n\nprint(f\"\ub9ac\uc2a4\ud2b8 \uc21c\ud68c \uc2dc\uac04: {list_time:.6f}\ucd08\")\nprint(f\"\ud29c\ud50c \uc21c\ud68c \uc2dc\uac04: {tuple_time:.6f}\ucd08\")\nprint(f\"\ud29c\ud50c\uc774 {list_time/tuple_time:.2f}\ubc30 \ube60\ub984\")\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#52","title":"5.2 \uc5b8\uc81c \uc0ac\uc6a9\ud560\uae4c?","text":"<pre><code># \ud29c\ud50c \uc0ac\uc6a9 \uc608\uc2dc\n# 1. \uc88c\ud45c, \uc0c9\uc0c1\uac12 \ub4f1 \ubcc0\ud558\uc9c0 \uc54a\ub294 \ub370\uc774\ud130\npoint = (10, 20)\nrgb_color = (255, 128, 0)\n\n# 2. \ud568\uc218\uc5d0\uc11c \uc5ec\ub7ec \uac12 \ubc18\ud658\ndef get_name_age():\n    return \"\uae40\ucca0\uc218\", 25  # \ud29c\ud50c\ub85c \ubc18\ud658\n\nname, age = get_name_age()  # \ud29c\ud50c \uc5b8\ud328\ud0b9\nprint(f\"\uc774\ub984: {name}, \ub098\uc774: {age}\")\n\n# 3. \ub515\uc154\ub108\ub9ac\uc758 \ud0a4\ub85c \uc0ac\uc6a9\nlocations = {\n    (0, 0): \"\uc6d0\uc810\",\n    (10, 20): \"\uc810 A\",\n    (30, 40): \"\uc810 B\"\n}\nprint(f\"(10, 20) \uc704\uce58: {locations[(10, 20)]}\")\n\n# \ub9ac\uc2a4\ud2b8 \uc0ac\uc6a9 \uc608\uc2dc\n# 1. \ub370\uc774\ud130\ub97c \uc790\uc8fc \ucd94\uac00/\uc81c\uac70/\uc218\uc815\ud558\ub294 \uacbd\uc6b0\nshopping_list = [\"\uc6b0\uc720\", \"\ube75\", \"\uacc4\ub780\"]\nshopping_list.append(\"\uc0ac\uacfc\")  # \ub3d9\uc801\uc73c\ub85c \ucd94\uac00\nshopping_list.remove(\"\ube75\")    # \ub3d9\uc801\uc73c\ub85c \uc81c\uac70\n\n# 2. \ub370\uc774\ud130 \ucc98\ub9ac\ub97c \uc704\ud55c \uc784\uc2dc \uc800\uc7a5\nnumbers = [1, 5, 3, 9, 2]\nnumbers.sort()  # \uc815\ub82c\nnumbers.append(10)  # \ucd94\uac00\n\nprint(f\"\uc1fc\ud551 \ubaa9\ub85d: {shopping_list}\")\nprint(f\"\uc815\ub82c\ub41c \uc22b\uc790\ub4e4: {numbers}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#6","title":"6. \uc911\ucca9 \ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c","text":""},{"location":"tutorials/beginner/chapter08_lists_tuples/#61-2","title":"6.1 2\ucc28\uc6d0 \ub9ac\uc2a4\ud2b8 (\ud589\ub82c)","text":"<pre><code># 2\ucc28\uc6d0 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\n# \uc694\uc18c \uc811\uadfc\nprint(f\"\uccab \ubc88\uc9f8 \ud589: {matrix[0]}\")        # [1, 2, 3]\nprint(f\"\ub450 \ubc88\uc9f8 \ud589, \uc138 \ubc88\uc9f8 \uc5f4: {matrix[1][2]}\")  # 6\n\n# 2\ucc28\uc6d0 \ub9ac\uc2a4\ud2b8 \uc21c\ud68c\nprint(\"\ud589\ub82c \ucd9c\ub825:\")\nfor i in range(len(matrix)):\n    for j in range(len(matrix[i])):\n        print(f\"{matrix[i][j]:2}\", end=\" \")\n    print()  # \uc904\ubc14\uafc8\n\n# \ub354 \uac04\ub2e8\ud55c \uc21c\ud68c\nprint(\"\\n\ud589\ubcc4 \ucd9c\ub825:\")\nfor row in matrix:\n    print(row)\n\n# \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\uc73c\ub85c 2\ucc28\uc6d0 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\n# 3x3 \uc601\ud589\ub82c\nzeros = [[0 for _ in range(3)] for _ in range(3)]\nprint(f\"\uc601\ud589\ub82c: {zeros}\")\n\n# \uad6c\uad6c\ub2e8 \ud45c\nmultiplication_table = [[i * j for j in range(1, 10)] for i in range(2, 10)]\nprint(\"\uad6c\uad6c\ub2e8 2\ub2e8:\", multiplication_table[0][:5])  # 2\ub2e8\uc758 \ucc98\uc74c 5\uac1c\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#62","title":"6.2 \ub9ac\uc2a4\ud2b8 \uc548\uc758 \ub2e4\uc591\ud55c \ub370\uc774\ud130 \uad6c\uc870","text":"<pre><code># \ubcf5\ud569 \ub370\uc774\ud130 \uad6c\uc870\nstudents = [\n    [\"\uae40\ucca0\uc218\", 20, [85, 90, 78]],          # \uc774\ub984, \ub098\uc774, \uc131\uc801\ub4e4\n    [\"\uc774\uc601\ud76c\", 22, [92, 88, 95]],\n    [\"\ubc15\ubbfc\uc218\", 21, [76, 82, 89]]\n]\n\n# \ud559\uc0dd \uc815\ubcf4 \ucd9c\ub825\nfor student in students:\n    name, age, scores = student\n    average = sum(scores) / len(scores)\n    print(f\"{name} ({age}\uc138) - \ud3c9\uade0: {average:.1f}\uc810\")\n\n# \ud2b9\uc815 \ud559\uc0dd\uc758 \ud2b9\uc815 \uacfc\ubaa9 \uc810\uc218\nprint(f\"\uae40\ucca0\uc218\uc758 \ub450 \ubc88\uc9f8 \uc2dc\ud5d8 \uc810\uc218: {students[0][2][1]}\")\n\n# \ub515\uc154\ub108\ub9ac\uc640 \ub9ac\uc2a4\ud2b8 \uc870\ud569\nproducts = [\n    {\"name\": \"\ub178\ud2b8\ubd81\", \"price\": 1200000, \"tags\": [\"\uc804\uc790\uc81c\ud488\", \"\ucef4\ud4e8\ud130\"]},\n    {\"name\": \"\ub9c8\uc6b0\uc2a4\", \"price\": 30000, \"tags\": [\"\uc804\uc790\uc81c\ud488\", \"\uc545\uc138\uc11c\ub9ac\"]},\n    {\"name\": \"\ud0a4\ubcf4\ub4dc\", \"price\": 80000, \"tags\": [\"\uc804\uc790\uc81c\ud488\", \"\uc785\ub825\uc7a5\uce58\"]}\n]\n\n# \ud2b9\uc815 \ud0dc\uadf8\ub97c \uac00\uc9c4 \uc81c\ud488 \ucc3e\uae30\nelectronic_products = []\nfor product in products:\n    if \"\uc804\uc790\uc81c\ud488\" in product[\"tags\"]:\n        electronic_products.append(product[\"name\"])\n\nprint(f\"\uc804\uc790\uc81c\ud488: {electronic_products}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#7","title":"7. \ub9ac\uc2a4\ud2b8\uc640 \ud29c\ud50c\uc758 \uace0\uae09 \ud65c\uc6a9","text":""},{"location":"tutorials/beginner/chapter08_lists_tuples/#71-unpacking","title":"7.1 \uc5b8\ud328\ud0b9 (Unpacking)","text":"<pre><code># \uae30\ubcf8 \uc5b8\ud328\ud0b9\ncoordinates = (10, 20)\nx, y = coordinates\nprint(f\"x: {x}, y: {y}\")\n\n# \ub9ac\uc2a4\ud2b8 \uc5b8\ud328\ud0b9\ncolors = [\"red\", \"green\", \"blue\"]\nprimary1, primary2, primary3 = colors\nprint(f\"\uc6d0\uc0c9\ub4e4: {primary1}, {primary2}, {primary3}\")\n\n# \ud655\uc7a5 \uc5b8\ud328\ud0b9 (Python 3.0+)\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nfirst, second, *middle, last = numbers\nprint(f\"\uccab \ubc88\uc9f8: {first}\")\nprint(f\"\ub450 \ubc88\uc9f8: {second}\")\nprint(f\"\uc911\uac04 \uc694\uc18c\ub4e4: {middle}\")\nprint(f\"\ub9c8\uc9c0\ub9c9: {last}\")\n\n# \ud568\uc218 \uc778\uc790\ub85c \uc5b8\ud328\ud0b9\ndef print_coordinates(x, y, z):\n    print(f\"\uc88c\ud45c: ({x}, {y}, {z})\")\n\npoint_3d = (1, 2, 3)\nprint_coordinates(*point_3d)  # \ud29c\ud50c \uc5b8\ud328\ud0b9\ud558\uc5ec \uc778\uc790\ub85c \uc804\ub2ec\n\n# \ub515\uc154\ub108\ub9ac \uc5b8\ud328\ud0b9\ndef introduce(name, age, city):\n    print(f\"\uc548\ub155\ud558\uc138\uc694, {name}\uc785\ub2c8\ub2e4. {age}\uc138\uc774\uace0 {city}\uc5d0 \uc0b4\uace0 \uc788\uc2b5\ub2c8\ub2e4.\")\n\nperson_info = {\"name\": \"\uae40\ucca0\uc218\", \"age\": 25, \"city\": \"\uc11c\uc6b8\"}\nintroduce(**person_info)  # \ub515\uc154\ub108\ub9ac \uc5b8\ud328\ud0b9\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#72","title":"7.2 \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 \uc2ec\ud654","text":"<pre><code># \uae30\ubcf8 \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\nsquares = [x**2 for x in range(1, 6)]\nprint(f\"\uc81c\uacf1\uc218\ub4e4: {squares}\")  # [1, 4, 9, 16, 25]\n\n# \uc870\uac74\uc774 \uc788\ub294 \ucef4\ud504\ub9ac\ud5e8\uc158\neven_squares = [x**2 for x in range(1, 11) if x % 2 == 0]\nprint(f\"\uc9dd\uc218\uc758 \uc81c\uacf1\ub4e4: {even_squares}\")  # [4, 16, 36, 64, 100]\n\n# \uc911\ucca9 \ucef4\ud504\ub9ac\ud5e8\uc158\nmatrix = [[i * j for j in range(1, 4)] for i in range(1, 4)]\nprint(f\"\uacf1\uc148 \ud589\ub82c: {matrix}\")\n\n# \ubb38\uc790\uc5f4 \ucc98\ub9ac\nwords = [\"hello\", \"world\", \"python\", \"programming\"]\nlengths = [len(word) for word in words]\nprint(f\"\ub2e8\uc5b4 \uae38\uc774\ub4e4: {lengths}\")\n\n# \uc870\uac74\ubd80 \ud45c\ud604\uc2dd\uacfc \ud568\uaed8\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ndescriptions = [\"\uc9dd\uc218\" if x % 2 == 0 else \"\ud640\uc218\" for x in numbers]\nprint(f\"\uc22b\uc790 \uc124\uba85\ub4e4: {descriptions}\")\n\n# \uc911\ucca9 \ub9ac\uc2a4\ud2b8 \ud3c9\ud0c4\ud654 (flattening)\nnested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattened = [item for sublist in nested_list for item in sublist]\nprint(f\"\ud3c9\ud0c4\ud654\ub41c \ub9ac\uc2a4\ud2b8: {flattened}\")  # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#73-vs","title":"7.3 \uc595\uc740 \ubcf5\uc0ac vs \uae4a\uc740 \ubcf5\uc0ac","text":"<pre><code>import copy\n\n# \uc595\uc740 \ubcf5\uc0ac (shallow copy)\noriginal = [[1, 2, 3], [4, 5, 6]]\n\n# \uc2ac\ub77c\uc774\uc2f1\uc73c\ub85c \ubcf5\uc0ac\nshallow_copy1 = original[:]\n# copy() \uba54\uc11c\ub4dc\ub85c \ubcf5\uc0ac\nshallow_copy2 = original.copy()\n# list() \ud568\uc218\ub85c \ubcf5\uc0ac\nshallow_copy3 = list(original)\n\n# \ub0b4\ubd80 \ub9ac\uc2a4\ud2b8 \uc218\uc815\noriginal[0][0] = 99\n\nprint(f\"\uc6d0\ubcf8: {original}\")           # [[99, 2, 3], [4, 5, 6]]\nprint(f\"\uc595\uc740 \ubcf5\uc0ac1: {shallow_copy1}\")  # [[99, 2, 3], [4, 5, 6]] - \uc601\ud5a5 \ubc1b\uc74c!\nprint(f\"\uc595\uc740 \ubcf5\uc0ac2: {shallow_copy2}\")  # [[99, 2, 3], [4, 5, 6]] - \uc601\ud5a5 \ubc1b\uc74c!\n\n# \uae4a\uc740 \ubcf5\uc0ac (deep copy)\noriginal = [[1, 2, 3], [4, 5, 6]]\ndeep_copy = copy.deepcopy(original)\n\noriginal[0][0] = 99\nprint(f\"\uc6d0\ubcf8: {original}\")        # [[99, 2, 3], [4, 5, 6]]\nprint(f\"\uae4a\uc740 \ubcf5\uc0ac: {deep_copy}\")   # [[1, 2, 3], [4, 5, 6]] - \uc601\ud5a5 \uc548 \ubc1b\uc74c!\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#8","title":"8. \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c\ub4e4","text":""},{"location":"tutorials/beginner/chapter08_lists_tuples/#81","title":"8.1 \uc131\uc801 \uad00\ub9ac \uc2dc\uc2a4\ud15c","text":"<pre><code>class GradeManager:\n    def __init__(self):\n        # \ud559\uc0dd \ub370\uc774\ud130: [\uc774\ub984, [\uacfc\ubaa91\uc810\uc218, \uacfc\ubaa92\uc810\uc218, ...]]\n        self.students = []\n        self.subjects = [\"\uad6d\uc5b4\", \"\uc601\uc5b4\", \"\uc218\ud559\", \"\uacfc\ud559\", \"\uc0ac\ud68c\"]\n\n    def add_student(self, name, scores):\n        \"\"\"\ud559\uc0dd \ucd94\uac00\"\"\"\n        if len(scores) != len(self.subjects):\n            print(f\"\uc810\uc218\ub294 {len(self.subjects)}\uac1c \uacfc\ubaa9\uc5d0 \ub9de\ucdb0 \uc785\ub825\ud574\uc8fc\uc138\uc694.\")\n            return\n\n        self.students.append([name, scores[:]])  # \uc810\uc218 \ub9ac\uc2a4\ud2b8 \ubcf5\uc0ac\ud558\uc5ec \uc800\uc7a5\n        print(f\"{name} \ud559\uc0dd\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n\n    def get_student_average(self, name):\n        \"\"\"\ud2b9\uc815 \ud559\uc0dd\uc758 \ud3c9\uade0 \uacc4\uc0b0\"\"\"\n        for student in self.students:\n            if student[0] == name:\n                scores = student[1]\n                return sum(scores) / len(scores)\n        return None\n\n    def get_subject_average(self, subject_index):\n        \"\"\"\ud2b9\uc815 \uacfc\ubaa9\uc758 \uc804\uccb4 \ud3c9\uade0 \uacc4\uc0b0\"\"\"\n        if not self.students:\n            return 0\n\n        total = sum(student[1][subject_index] for student in self.students)\n        return total / len(self.students)\n\n    def get_top_students(self, n=3):\n        \"\"\"\uc0c1\uc704 n\uba85\uc758 \ud559\uc0dd\ub4e4 \ubc18\ud658\"\"\"\n        # (\uc774\ub984, \ud3c9\uade0) \ud29c\ud50c \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\n        student_averages = []\n        for student in self.students:\n            name, scores = student\n            average = sum(scores) / len(scores)\n            student_averages.append((name, average))\n\n        # \ud3c9\uade0 \uc810\uc218\ub85c \uc815\ub82c (\ub0b4\ub9bc\ucc28\uc21c)\n        student_averages.sort(key=lambda x: x[1], reverse=True)\n        return student_averages[:n]\n\n    def print_report(self):\n        \"\"\"\uc131\uc801\ud45c \ucd9c\ub825\"\"\"\n        if not self.students:\n            print(\"\ub4f1\ub85d\ub41c \ud559\uc0dd\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n            return\n\n        print(\"\\n\" + \"=\"*60)\n        print(\"\uc131\uc801\ud45c\")\n        print(\"=\"*60)\n\n        # \ud5e4\ub354 \ucd9c\ub825\n        header = \"\uc774\ub984\".ljust(8)\n        for subject in self.subjects:\n            header += subject.center(6)\n        header += \"\ud3c9\uade0\".center(8)\n        print(header)\n        print(\"-\" * 60)\n\n        # \ud559\uc0dd\ubcc4 \uc131\uc801 \ucd9c\ub825\n        for student in self.students:\n            name, scores = student\n            line = name.ljust(8)\n            for score in scores:\n                line += str(score).center(6)\n            average = sum(scores) / len(scores)\n            line += f\"{average:.1f}\".center(8)\n            print(line)\n\n        # \uacfc\ubaa9\ubcc4 \ud3c9\uade0 \ucd9c\ub825\n        print(\"-\" * 60)\n        avg_line = \"\ud3c9\uade0\".ljust(8)\n        for i in range(len(self.subjects)):\n            subject_avg = self.get_subject_average(i)\n            avg_line += f\"{subject_avg:.1f}\".center(6)\n        print(avg_line)\n\n# \uc0ac\uc6a9 \uc608\uc81c\ngm = GradeManager()\n\n# \ud559\uc0dd \ub370\uc774\ud130 \ucd94\uac00\ngm.add_student(\"\uae40\ucca0\uc218\", [85, 90, 78, 92, 88])\ngm.add_student(\"\uc774\uc601\ud76c\", [92, 85, 95, 89, 91])\ngm.add_student(\"\ubc15\ubbfc\uc218\", [78, 82, 85, 79, 83])\ngm.add_student(\"\ucd5c\uc9c0\uc601\", [96, 94, 92, 95, 93])\n\n# \uc131\uc801\ud45c \ucd9c\ub825\ngm.print_report()\n\n# \uc0c1\uc704 \ud559\uc0dd\ub4e4\nprint(\"\\n\uc0c1\uc704 3\uba85:\")\ntop_students = gm.get_top_students(3)\nfor i, (name, avg) in enumerate(top_students, 1):\n    print(f\"{i}\ub4f1: {name} (\ud3c9\uade0 {avg:.1f}\uc810)\")\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#82","title":"8.2 \uc7a5\ubc14\uad6c\ub2c8 \uc2dc\uc2a4\ud15c","text":"<pre><code>class ShoppingCart:\n    def __init__(self):\n        # \uc7a5\ubc14\uad6c\ub2c8: [(\uc0c1\ud488\uba85, \uac00\uaca9, \uc218\ub7c9), ...]\n        self.items = []\n\n    def add_item(self, name, price, quantity=1):\n        \"\"\"\uc0c1\ud488 \ucd94\uac00\"\"\"\n        # \uc774\ubbf8 \uc788\ub294 \uc0c1\ud488\uc774\uba74 \uc218\ub7c9 \uc99d\uac00\n        for i, (item_name, item_price, item_quantity) in enumerate(self.items):\n            if item_name == name and item_price == price:\n                self.items[i] = (item_name, item_price, item_quantity + quantity)\n                print(f\"{name} {quantity}\uac1c\uac00 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4. (\ucd1d {item_quantity + quantity}\uac1c)\")\n                return\n\n        # \uc0c8\ub85c\uc6b4 \uc0c1\ud488 \ucd94\uac00\n        self.items.append((name, price, quantity))\n        print(f\"{name} {quantity}\uac1c\uac00 \uc7a5\ubc14\uad6c\ub2c8\uc5d0 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n\n    def remove_item(self, name):\n        \"\"\"\uc0c1\ud488 \uc81c\uac70\"\"\"\n        for i, (item_name, _, _) in enumerate(self.items):\n            if item_name == name:\n                removed_item = self.items.pop(i)\n                print(f\"{removed_item[0]}\uc774(\uac00) \uc7a5\ubc14\uad6c\ub2c8\uc5d0\uc11c \uc81c\uac70\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n                return\n        print(f\"{name}\uc744(\ub97c) \uc7a5\ubc14\uad6c\ub2c8\uc5d0\uc11c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n\n    def update_quantity(self, name, new_quantity):\n        \"\"\"\uc218\ub7c9 \ubcc0\uacbd\"\"\"\n        if new_quantity &lt;= 0:\n            self.remove_item(name)\n            return\n\n        for i, (item_name, item_price, _) in enumerate(self.items):\n            if item_name == name:\n                self.items[i] = (item_name, item_price, new_quantity)\n                print(f\"{name}\uc758 \uc218\ub7c9\uc774 {new_quantity}\uac1c\ub85c \ubcc0\uacbd\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n                return\n        print(f\"{name}\uc744(\ub97c) \uc7a5\ubc14\uad6c\ub2c8\uc5d0\uc11c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n\n    def get_total_price(self):\n        \"\"\"\ucd1d \uac00\uaca9 \uacc4\uc0b0\"\"\"\n        return sum(price * quantity for _, price, quantity in self.items)\n\n    def get_total_items(self):\n        \"\"\"\ucd1d \uc0c1\ud488 \uac1c\uc218 \uacc4\uc0b0\"\"\"\n        return sum(quantity for _, _, quantity in self.items)\n\n    def apply_discount(self, discount_rate):\n        \"\"\"\ud560\uc778 \uc801\uc6a9 (\ud560\uc778\ub41c \uc0c8 \ub9ac\uc2a4\ud2b8 \ubc18\ud658)\"\"\"\n        discounted_items = []\n        for name, price, quantity in self.items:\n            discounted_price = price * (1 - discount_rate)\n            discounted_items.append((name, discounted_price, quantity))\n        return discounted_items\n\n    def print_cart(self):\n        \"\"\"\uc7a5\ubc14\uad6c\ub2c8 \ucd9c\ub825\"\"\"\n        if not self.items:\n            print(\"\uc7a5\ubc14\uad6c\ub2c8\uac00 \ube44\uc5b4\uc788\uc2b5\ub2c8\ub2e4.\")\n            return\n\n        print(\"\\n\" + \"=\"*50)\n        print(\"\uc7a5\ubc14\uad6c\ub2c8\")\n        print(\"=\"*50)\n        print(\"\uc0c1\ud488\uba85\".ljust(15) + \"\uac00\uaca9\".rjust(8) + \"\uc218\ub7c9\".rjust(6) + \"\uc18c\uacc4\".rjust(10))\n        print(\"-\" * 50)\n\n        for name, price, quantity in self.items:\n            subtotal = price * quantity\n            print(f\"{name.ljust(15)}{price:8,.0f}{quantity:6}{subtotal:10,.0f}\")\n\n        print(\"-\" * 50)\n        print(f\"\ucd1d \uc0c1\ud488 \uc218: {self.get_total_items()}\uac1c\")\n        print(f\"\ucd1d \uac00\uaca9: {self.get_total_price():,.0f}\uc6d0\")\n\n# \uc0ac\uc6a9 \uc608\uc81c\ncart = ShoppingCart()\n\n# \uc0c1\ud488 \ucd94\uac00\ncart.add_item(\"\ub178\ud2b8\ubd81\", 1200000, 1)\ncart.add_item(\"\ub9c8\uc6b0\uc2a4\", 30000, 2)\ncart.add_item(\"\ud0a4\ubcf4\ub4dc\", 80000, 1)\ncart.add_item(\"\ub9c8\uc6b0\uc2a4\", 30000, 1)  # \uae30\uc874 \ub9c8\uc6b0\uc2a4\uc5d0 \uc218\ub7c9 \ucd94\uac00\n\n# \uc7a5\ubc14\uad6c\ub2c8 \ucd9c\ub825\ncart.print_cart()\n\n# \uc218\ub7c9 \ubcc0\uacbd\ncart.update_quantity(\"\ub9c8\uc6b0\uc2a4\", 5)\n\n# \uc0c1\ud488 \uc81c\uac70\ncart.remove_item(\"\ud0a4\ubcf4\ub4dc\")\n\n# \ucd5c\uc885 \uc7a5\ubc14\uad6c\ub2c8\ncart.print_cart()\n\n# 10% \ud560\uc778 \uc801\uc6a9 \uc2dc\ubbac\ub808\uc774\uc158\nprint(\"\\n10% \ud560\uc778 \uc801\uc6a9 \uc2dc:\")\ndiscounted = cart.apply_discount(0.1)\nfor name, price, quantity in discounted:\n    print(f\"{name}: {price:,.0f}\uc6d0 x {quantity}\uac1c = {price*quantity:,.0f}\uc6d0\")\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#83","title":"8.3 \ud14d\uc2a4\ud2b8 \ub370\uc774\ud130 \ubd84\uc11d\uae30","text":"<pre><code>class TextAnalyzer:\n    def __init__(self, text):\n        self.original_text = text\n        self.words = self._extract_words()\n        self.sentences = self._extract_sentences()\n\n    def _extract_words(self):\n        \"\"\"\ud14d\uc2a4\ud2b8\uc5d0\uc11c \ub2e8\uc5b4 \ucd94\ucd9c\"\"\"\n        import string\n        # \uad6c\ub450\uc810 \uc81c\uac70\ud558\uace0 \uc18c\ubb38\uc790\ub85c \ubcc0\ud658\n        cleaned = self.original_text.lower()\n        for punct in string.punctuation:\n            cleaned = cleaned.replace(punct, ' ')\n\n        # \ub2e8\uc5b4 \ub9ac\uc2a4\ud2b8 \ubc18\ud658 (\ube48 \ubb38\uc790\uc5f4 \uc81c\uc678)\n        words = [word for word in cleaned.split() if word]\n        return words\n\n    def _extract_sentences(self):\n        \"\"\"\ud14d\uc2a4\ud2b8\uc5d0\uc11c \ubb38\uc7a5 \ucd94\ucd9c\"\"\"\n        # \uac04\ub2e8\ud55c \ubb38\uc7a5 \ubd84\ub9ac (. ! ? \uae30\uc900)\n        sentences = []\n        current_sentence = \"\"\n\n        for char in self.original_text:\n            current_sentence += char\n            if char in '.!?':\n                sentences.append(current_sentence.strip())\n                current_sentence = \"\"\n\n        # \ub9c8\uc9c0\ub9c9 \ubb38\uc7a5\uc774 \uad6c\ub450\uc810\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc740 \uacbd\uc6b0\n        if current_sentence.strip():\n            sentences.append(current_sentence.strip())\n\n        return [s for s in sentences if s]  # \ube48 \ubb38\uc7a5 \uc81c\uc678\n\n    def get_word_frequency(self):\n        \"\"\"\ub2e8\uc5b4 \ube48\ub3c4 \uacc4\uc0b0\"\"\"\n        frequency = {}\n        for word in self.words:\n            frequency[word] = frequency.get(word, 0) + 1\n\n        # \ube48\ub3c4\uc21c\uc73c\ub85c \uc815\ub82c\ub41c \ud29c\ud50c \ub9ac\uc2a4\ud2b8 \ubc18\ud658\n        return sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n\n    def get_most_common_words(self, n=10):\n        \"\"\"\uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub41c n\uac1c \ub2e8\uc5b4\"\"\"\n        word_freq = self.get_word_frequency()\n        return word_freq[:n]\n\n    def get_statistics(self):\n        \"\"\"\ud14d\uc2a4\ud2b8 \ud1b5\uacc4 \uc815\ubcf4\"\"\"\n        char_count = len(self.original_text)\n        char_count_no_spaces = len(self.original_text.replace(' ', ''))\n        word_count = len(self.words)\n        sentence_count = len(self.sentences)\n\n        # \ud3c9\uade0 \ub2e8\uc5b4 \uae38\uc774\n        avg_word_length = sum(len(word) for word in self.words) / len(self.words) if self.words else 0\n\n        # \ud3c9\uade0 \ubb38\uc7a5 \uae38\uc774 (\ub2e8\uc5b4 \uc218 \uae30\uc900)\n        avg_sentence_length = word_count / sentence_count if sentence_count else 0\n\n        return {\n            'total_characters': char_count,\n            'characters_no_spaces': char_count_no_spaces,\n            'total_words': word_count,\n            'total_sentences': sentence_count,\n            'unique_words': len(set(self.words)),\n            'avg_word_length': avg_word_length,\n            'avg_sentence_length': avg_sentence_length\n        }\n\n    def find_long_words(self, min_length=6):\n        \"\"\"\ud2b9\uc815 \uae38\uc774 \uc774\uc0c1\uc758 \ub2e8\uc5b4\ub4e4\"\"\"\n        long_words = [word for word in set(self.words) if len(word) &gt;= min_length]\n        return sorted(long_words, key=len, reverse=True)\n\n    def print_analysis(self):\n        \"\"\"\ubd84\uc11d \uacb0\uacfc \ucd9c\ub825\"\"\"\n        stats = self.get_statistics()\n\n        print(\"=\"*50)\n        print(\"\ud14d\uc2a4\ud2b8 \ubd84\uc11d \uacb0\uacfc\")\n        print(\"=\"*50)\n\n        print(f\"\ucd1d \ubb38\uc790 \uc218: {stats['total_characters']:,}\")\n        print(f\"\uacf5\ubc31 \uc81c\uc678 \ubb38\uc790 \uc218: {stats['characters_no_spaces']:,}\")\n        print(f\"\ucd1d \ub2e8\uc5b4 \uc218: {stats['total_words']:,}\")\n        print(f\"\uace0\uc720 \ub2e8\uc5b4 \uc218: {stats['unique_words']:,}\")\n        print(f\"\ucd1d \ubb38\uc7a5 \uc218: {stats['total_sentences']:,}\")\n        print(f\"\ud3c9\uade0 \ub2e8\uc5b4 \uae38\uc774: {stats['avg_word_length']:.1f}\uc790\")\n        print(f\"\ud3c9\uade0 \ubb38\uc7a5 \uae38\uc774: {stats['avg_sentence_length']:.1f}\ub2e8\uc5b4\")\n\n        print(\"\\n\uc0c1\uc704 10\uac1c \uc790\uc8fc \uc0ac\uc6a9\ub41c \ub2e8\uc5b4:\")\n        most_common = self.get_most_common_words(10)\n        for i, (word, count) in enumerate(most_common, 1):\n            print(f\"{i:2}. {word} ({count}\ubc88)\")\n\n        print(f\"\\n6\uae00\uc790 \uc774\uc0c1 \uae34 \ub2e8\uc5b4\ub4e4:\")\n        long_words = self.find_long_words(6)[:10]  # \uc0c1\uc704 10\uac1c\ub9cc\n        for word in long_words:\n            print(f\"- {word} ({len(word)}\uae00\uc790)\")\n\n# \uc0ac\uc6a9 \uc608\uc81c\nsample_text = \"\"\"\nPython is a high-level programming language. Python is easy to learn and powerful to use.\nMany developers love Python because of its simplicity and readability.\nPython can be used for web development, data analysis, artificial intelligence, and more.\nThe Python community is very supportive and helpful.\nLearning Python is a great investment for your programming career!\n\"\"\"\n\nanalyzer = TextAnalyzer(sample_text)\nanalyzer.print_analysis()\n</code></pre>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#9","title":"9. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/beginner/chapter08_lists_tuples/#1_1","title":"\uc5f0\uc2b5 1: \ub9ac\uc2a4\ud2b8 \ud1b5\uacc4 \uacc4\uc0b0\uae30","text":"<p>\uc22b\uc790 \ub9ac\uc2a4\ud2b8\ub97c \uc785\ub825\ubc1b\uc544 \ud3c9\uade0, \uc911\uc559\uac12, \ucd5c\ube48\uac12\uc744 \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#2_1","title":"\uc5f0\uc2b5 2: \ud589\ub82c \uc5f0\uc0b0\uae30","text":"<p>\ub450 \uac1c\uc758 2\ucc28\uc6d0 \ub9ac\uc2a4\ud2b8(\ud589\ub82c)\ub97c \uc785\ub825\ubc1b\uc544 \ub367\uc148, \ube84\uc148, \uacf1\uc148\uc744 \uc218\ud589\ud558\ub294 \ud568\uc218\ub4e4\uc744 \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#3_1","title":"\uc5f0\uc2b5 3: \ud560\uc77c \ubaa9\ub85d \uad00\ub9ac\uc790","text":"<p>\ud29c\ud50c\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud560\uc77c \ud56d\ubaa9\uc744 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4dc\uc138\uc694. \uac01 \ud560\uc77c\uc740 (\uc81c\ubaa9, \uc124\uba85, \uc6b0\uc120\uc21c\uc704, \uc644\ub8cc\uc5ec\ubd80) \ud615\ud0dc\ub85c \uc800\uc7a5\ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#4_1","title":"\uc5f0\uc2b5 4: \uc911\ubcf5 \uc81c\uac70\uae30","text":"<p>\uc911\ucca9 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc911\ubcf5\ub41c \uc694\uc18c\ub4e4\uc744 \uc81c\uac70\ud558\uace0 \uc6d0\ub798 \uc21c\uc11c\ub97c \uc720\uc9c0\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\ub9ac\uc2a4\ud2b8 \uae30\ubcf8: \uc0dd\uc131, \uc778\ub371\uc2f1, \uc2ac\ub77c\uc774\uc2f1, \uc8fc\uc694 \ud2b9\uc9d5</li> <li>\ub9ac\uc2a4\ud2b8 \uba54\uc11c\ub4dc: \ucd94\uac00, \uc81c\uac70, \uac80\uc0c9, \uc815\ub82c \uad00\ub828 \uba54\uc11c\ub4dc\ub4e4</li> <li>\ud29c\ud50c \uae30\ubcf8: \uc0dd\uc131, \ud2b9\uc9d5, \uc81c\ud55c\uc801\uc778 \uba54\uc11c\ub4dc\ub4e4</li> <li>\ub9ac\uc2a4\ud2b8 vs \ud29c\ud50c: \ubcc0\uacbd \uac00\ub2a5\uc131, \uc131\ub2a5, \uc0ac\uc6a9 \uc0c1\ud669</li> <li>\uc911\ucca9 \uad6c\uc870: 2\ucc28\uc6d0 \ub9ac\uc2a4\ud2b8, \ubcf5\ud569 \ub370\uc774\ud130 \uad6c\uc870</li> <li>\uace0\uae09 \ud65c\uc6a9: \uc5b8\ud328\ud0b9, \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158, \ubcf5\uc0ac</li> <li>\uc2e4\uc6a9 \uc608\uc81c: \uc131\uc801 \uad00\ub9ac, \uc7a5\ubc14\uad6c\ub2c8, \ud14d\uc2a4\ud2b8 \ubd84\uc11d</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \ub515\uc154\ub108\ub9ac\uc640 \uc9d1\ud569\uc744 \ud559\uc2b5\ud558\uc5ec \ub354 \ub2e4\uc591\ud55c \ub370\uc774\ud130 \uad6c\uc870 \ud65c\uc6a9\ubc95\uc744 \ubc30\uc6cc\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/beginner/chapter08_lists_tuples/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ub9ac\uc2a4\ud2b8\ub294 \ubcc0\uacbd \uac00\ub2a5\ud558\uace0 \ub2e4\uc591\ud55c \uba54\uc11c\ub4dc \uc81c\uacf5, \ud29c\ud50c\uc740 \ubcc0\uacbd \ubd88\uac00\ub2a5\ud558\uc9c0\ub9cc \ube60\ub974\uace0 \uc548\uc804</li> <li>\uc2ac\ub77c\uc774\uc2f1\uacfc \uc778\ub371\uc2f1\uc740 \ub450 \uc790\ub8cc\ud615 \ubaa8\ub450\uc5d0\uc11c \ub3d9\uc77c\ud558\uac8c \uc791\ub3d9</li> <li>\ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\uc73c\ub85c \uac04\uacb0\ud558\uace0 \ud6a8\uc728\uc801\uc778 \ucf54\ub4dc \uc791\uc131 \uac00\ub2a5</li> <li>\uc911\ucca9 \uad6c\uc870 \uc0ac\uc6a9 \uc2dc \uc595\uc740 \ubcf5\uc0ac\uc640 \uae4a\uc740 \ubcf5\uc0ac\uc758 \ucc28\uc774\uc810 \uc774\ud574 \ud544\uc694</li> <li>\uc5b8\ud328\ud0b9\uc744 \ud65c\uc6a9\ud558\uba74 \ucf54\ub4dc\uac00 \ub354 \uc77d\uae30 \uc27d\uace0 \uc6b0\uc544\ud574\uc9d0 </li> </ul>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/","title":"Chapter 9: \ub515\uc154\ub108\ub9ac\uc640 \uc9d1\ud569 (Dictionaries and Sets)","text":""},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \ub515\uc154\ub108\ub9ac\uc640 \uc9d1\ud569\uc758 \uae30\ubcf8 \uac1c\ub150\uacfc \ud2b9\uc9d5 \uc774\ud574\ud558\uae30 - \ub515\uc154\ub108\ub9ac\uc640 \uc9d1\ud569\uc758 \uc0dd\uc131, \uc811\uadfc, \uc218\uc815 \ubc29\ubc95 \uc775\ud788\uae30 - \ub2e4\uc591\ud55c \ub515\uc154\ub108\ub9ac\uc640 \uc9d1\ud569 \uba54\uc11c\ub4dc \ud65c\uc6a9\ud558\uae30 - \ub515\uc154\ub108\ub9ac\ub97c \uc0ac\uc6a9\ud55c \uc2e4\uc6a9\uc801\uc778 \ub370\uc774\ud130 \uad00\ub9ac - \uc9d1\ud569\uc744 \uc774\uc6a9\ud55c \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \ucc98\ub9ac - \uc2e4\ubb34\uc5d0\uc11c \ud65c\uc6a9 \uac00\ub2a5\ud55c \ud504\ub85c\uadf8\ub7a8 \uc791\uc131\ud558\uae30</p>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#1","title":"1. \ub515\uc154\ub108\ub9ac\uc758 \uae30\ubcf8 \uac1c\ub150","text":""},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#11","title":"1.1 \ub515\uc154\ub108\ub9ac\ub780?","text":"<p>\ub515\uc154\ub108\ub9ac\ub294 \ud0a4(key)\uc640 \uac12(value)\uc758 \uc30d\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\ub294 \ubcc0\uacbd \uac00\ub2a5\ud55c(mutable) \uceec\ub809\uc158\uc785\ub2c8\ub2e4. \uc21c\uc11c\ub294 Python 3.7\ubd80\ud130 \ubcf4\uc7a5\ub429\ub2c8\ub2e4.</p> <pre><code># \ub515\uc154\ub108\ub9ac \uc0dd\uc131 \ubc29\ubc95\ub4e4\nempty_dict = {}  # \ube48 \ub515\uc154\ub108\ub9ac\nstudent_info = {\n    \"name\": \"\uae40\ucca0\uc218\",\n    \"age\": 20,\n    \"major\": \"\ucef4\ud4e8\ud130\uacf5\ud559\",\n    \"grade\": \"A+\"\n}\n\n# dict() \ud568\uc218\ub85c \uc0dd\uc131\ngrades = dict(korean=85, english=90, math=78)\ncoordinates = dict([(\"x\", 10), (\"y\", 20)])\n\nprint(f\"\ud559\uc0dd \uc815\ubcf4: {student_info}\")\nprint(f\"\uc131\uc801: {grades}\")\nprint(f\"\uc88c\ud45c: {coordinates}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#12","title":"1.2 \ub515\uc154\ub108\ub9ac\uc758 \ud2b9\uc9d5","text":"<pre><code># 1. \ud0a4-\uac12 \uc30d\uc73c\ub85c \uc800\uc7a5\nperson = {\n    \"name\": \"\uc774\uc601\ud76c\",\n    \"age\": 25,\n    \"city\": \"\uc11c\uc6b8\"\n}\n\n# 2. \ud0a4\ub85c \ube60\ub978 \uc811\uadfc (O(1) \uc2dc\uac04 \ubcf5\uc7a1\ub3c4)\nprint(f\"\uc774\ub984: {person['name']}\")\nprint(f\"\ub098\uc774: {person['age']}\")\n\n# 3. \ubcc0\uacbd \uac00\ub2a5 (mutable)\nperson[\"age\"] = 26  # \uac12 \uc218\uc815\nperson[\"job\"] = \"\uac1c\ubc1c\uc790\"  # \uc0c8 \ud0a4-\uac12 \ucd94\uac00\nprint(f\"\uc218\uc815\ub41c \uc815\ubcf4: {person}\")\n\n# 4. \ud0a4\ub294 \ubd88\ubcc0 \uac1d\uccb4\ub9cc \uac00\ub2a5 (\ubb38\uc790\uc5f4, \uc22b\uc790, \ud29c\ud50c)\nvalid_keys = {\n    \"string_key\": \"\ubb38\uc790\uc5f4 \ud0a4\",\n    42: \"\uc22b\uc790 \ud0a4\",\n    (1, 2): \"\ud29c\ud50c \ud0a4\"\n}\n\n# 5. \uac12\uc740 \ubaa8\ub4e0 \ud0c0\uc785 \uac00\ub2a5\nmixed_values = {\n    \"number\": 42,\n    \"string\": \"hello\",\n    \"list\": [1, 2, 3],\n    \"dict\": {\"nested\": \"value\"}\n}\n\nprint(f\"\ub2e4\uc591\ud55c \ud0a4: {valid_keys}\")\nprint(f\"\ub2e4\uc591\ud55c \uac12: {mixed_values}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#2","title":"2. \ub515\uc154\ub108\ub9ac \uc811\uadfc\uacfc \uc218\uc815","text":""},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#21","title":"2.1 \ub515\uc154\ub108\ub9ac \uc694\uc18c \uc811\uadfc","text":"<pre><code>student = {\n    \"name\": \"\ubc15\ubbfc\uc218\",\n    \"age\": 22,\n    \"subjects\": [\"Python\", \"Java\", \"C++\"],\n    \"gpa\": 3.8\n}\n\n# \ub300\uad04\ud638\ub85c \uc811\uadfc\nprint(f\"\uc774\ub984: {student['name']}\")\nprint(f\"\uacfc\ubaa9\ub4e4: {student['subjects']}\")\n\n# get() \uba54\uc11c\ub4dc\ub85c \uc548\uc804\ud55c \uc811\uadfc\nprint(f\"\ub098\uc774: {student.get('age')}\")\nprint(f\"\uc804\uacf5: {student.get('major', '\ubbf8\uc815')}\")  # \uae30\ubcf8\uac12 \uc124\uc815\n\n# \ud0a4 \uc874\uc7ac \ud655\uc778\nif \"gpa\" in student:\n    print(f\"\ud559\uc810: {student['gpa']}\")\n\n# \ud0a4\uac00 \uc5c6\uc744 \ub54c \ucc98\ub9ac\ntry:\n    print(student[\"phone\"])  # KeyError \ubc1c\uc0dd\nexcept KeyError as e:\n    print(f\"\ud0a4 \uc624\ub958: {e}\")\n\n# \uc548\uc804\ud55c \uc811\uadfc \ubc29\ubc95 \ube44\uad50\nprint(f\"\uc804\ud654\ubc88\ud638(get): {student.get('phone', '\uc5c6\uc74c')}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#22","title":"2.2 \ub515\uc154\ub108\ub9ac \uc694\uc18c \uc218\uc815","text":"<pre><code># \uae30\ubcf8 \ub515\uc154\ub108\ub9ac\ninventory = {\n    \"apple\": 50,\n    \"banana\": 30,\n    \"orange\": 25\n}\n\n# \uac12 \uc218\uc815\ninventory[\"apple\"] = 45\nprint(f\"\uc0ac\uacfc \uc218\ub7c9 \uc218\uc815: {inventory}\")\n\n# \uc0c8 \ud0a4-\uac12 \ucd94\uac00\ninventory[\"grape\"] = 20\ninventory[\"mango\"] = 15\nprint(f\"\uacfc\uc77c \ucd94\uac00: {inventory}\")\n\n# \uc5ec\ub7ec \ud56d\ubaa9 \ub3d9\uc2dc \ucd94\uac00/\uc218\uc815\ninventory.update({\n    \"pineapple\": 10,\n    \"banana\": 35,  # \uae30\uc874 \uac12 \uc218\uc815\n    \"kiwi\": 12\n})\nprint(f\"\uc77c\uad04 \uc5c5\ub370\uc774\ud2b8: {inventory}\")\n\n# \ub515\uc154\ub108\ub9ac \ubcd1\ud569 (Python 3.9+)\nnew_fruits = {\"strawberry\": 8, \"blueberry\": 22}\ninventory = inventory | new_fruits  # \ubcd1\ud569 \uc5f0\uc0b0\uc790\nprint(f\"\ubcd1\ud569 \ud6c4: {inventory}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#3","title":"3. \ub515\uc154\ub108\ub9ac \uba54\uc11c\ub4dc","text":""},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#31","title":"3.1 \ud0a4, \uac12, \ud56d\ubaa9 \uc811\uadfc","text":"<pre><code>menu = {\n    \"coffee\": 4000,\n    \"tea\": 3000,\n    \"juice\": 5000,\n    \"sandwich\": 7000,\n    \"cake\": 6000\n}\n\n# keys(): \ubaa8\ub4e0 \ud0a4 \ubc18\ud658\nall_keys = menu.keys()\nprint(f\"\uba54\ub274 \ud56d\ubaa9\ub4e4: {list(all_keys)}\")\n\n# values(): \ubaa8\ub4e0 \uac12 \ubc18\ud658\nall_prices = menu.values()\nprint(f\"\uac00\uaca9\ub4e4: {list(all_prices)}\")\nprint(f\"\ud3c9\uade0 \uac00\uaca9: {sum(all_prices) / len(all_prices):.0f}\uc6d0\")\n\n# items(): \ubaa8\ub4e0 \ud0a4-\uac12 \uc30d \ubc18\ud658\nall_items = menu.items()\nprint(f\"\uba54\ub274\uc640 \uac00\uaca9:\")\nfor item, price in all_items:\n    print(f\"  {item}: {price:,}\uc6d0\")\n\n# \ub515\uc154\ub108\ub9ac \uc21c\ud68c\nprint(\"\\n\uac00\uaca9\ubcc4 \uba54\ub274:\")\nfor name, price in menu.items():\n    if price &gt;= 5000:\n        print(f\"  \uace0\uac00: {name} ({price:,}\uc6d0)\")\n    else:\n        print(f\"  \uc77c\ubc18: {name} ({price:,}\uc6d0)\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#32","title":"3.2 \ub515\uc154\ub108\ub9ac \uc218\uc815 \uba54\uc11c\ub4dc","text":"<pre><code>scores = {\n    \"alice\": 85,\n    \"bob\": 92,\n    \"charlie\": 78,\n    \"david\": 88\n}\n\n# pop(): \ud0a4\ub97c \uc81c\uac70\ud558\uace0 \uac12 \ubc18\ud658\nremoved_score = scores.pop(\"charlie\")\nprint(f\"\uc81c\uac70\ub41c \uc810\uc218: {removed_score}\")\nprint(f\"\uc81c\uac70 \ud6c4: {scores}\")\n\n# pop()\uc5d0 \uae30\ubcf8\uac12 \uc124\uc815\nmissing_score = scores.pop(\"eve\", 0)\nprint(f\"\uc5c6\ub294 \ud559\uc0dd \uc810\uc218: {missing_score}\")\n\n# popitem(): \ub9c8\uc9c0\ub9c9 \ud0a4-\uac12 \uc30d \uc81c\uac70 (Python 3.7+)\nlast_item = scores.popitem()\nprint(f\"\ub9c8\uc9c0\ub9c9 \ud56d\ubaa9: {last_item}\")\nprint(f\"popitem \ud6c4: {scores}\")\n\n# del\ub85c \ud2b9\uc815 \ud0a4 \uc81c\uac70\ndel scores[\"bob\"]\nprint(f\"del \ud6c4: {scores}\")\n\n# clear(): \ubaa8\ub4e0 \ud56d\ubaa9 \uc81c\uac70\nscores_copy = scores.copy()\nscores_copy.clear()\nprint(f\"clear \ud6c4: {scores_copy}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#33","title":"3.3 \ub515\uc154\ub108\ub9ac \ubcf5\uc0ac\uc640 \uae30\ubcf8\uac12","text":"<pre><code>original = {\"a\": 1, \"b\": 2, \"c\": 3}\n\n# copy(): \uc595\uc740 \ubcf5\uc0ac\ncopied = original.copy()\ncopied[\"d\"] = 4\nprint(f\"\uc6d0\ubcf8: {original}\")\nprint(f\"\ubcf5\uc0ac\ubcf8: {copied}\")\n\n# setdefault(): \ud0a4\uac00 \uc5c6\uc73c\uba74 \uae30\ubcf8\uac12 \uc124\uc815\nconfig = {\"debug\": True, \"port\": 8080}\n\n# \ud0a4\uac00 \uc788\uc73c\uba74 \uae30\uc874 \uac12 \ubc18\ud658\nexisting_value = config.setdefault(\"debug\", False)\nprint(f\"\uae30\uc874 debug \uac12: {existing_value}\")\n\n# \ud0a4\uac00 \uc5c6\uc73c\uba74 \uae30\ubcf8\uac12 \uc124\uc815\ud558\uace0 \ubc18\ud658\nnew_value = config.setdefault(\"timeout\", 30)\nprint(f\"\uc0c8 timeout \uac12: {new_value}\")\nprint(f\"\uc124\uc815 \ud6c4: {config}\")\n\n# fromkeys(): \uac19\uc740 \uac12\uc73c\ub85c \ub515\uc154\ub108\ub9ac \uc0dd\uc131\nkeys = [\"x\", \"y\", \"z\"]\ndefault_dict = dict.fromkeys(keys, 0)\nprint(f\"\uae30\ubcf8\uac12 \ub515\uc154\ub108\ub9ac: {default_dict}\")\n\n# \ub9ac\uc2a4\ud2b8\ub97c \uae30\ubcf8\uac12\uc73c\ub85c \uc0ac\uc6a9\ud560 \ub54c \uc8fc\uc758\uc810\ncategories = [\"food\", \"clothes\", \"electronics\"]\n# \uc798\ubabb\ub41c \ubc29\ubc95 (\ubaa8\ub4e0 \ud0a4\uac00 \uac19\uc740 \ub9ac\uc2a4\ud2b8 \uac1d\uccb4\ub97c \ucc38\uc870)\nwrong_dict = dict.fromkeys(categories, [])\n# \uc62c\ubc14\ub978 \ubc29\ubc95\nright_dict = {category: [] for category in categories}\nprint(f\"\uc62c\ubc14\ub978 \ub515\uc154\ub108\ub9ac: {right_dict}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#4","title":"4. \uc9d1\ud569\uc758 \uae30\ubcf8 \uac1c\ub150","text":""},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#41","title":"4.1 \uc9d1\ud569\uc774\ub780?","text":"<p>\uc9d1\ud569(Set)\uc740 \uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294 \uc21c\uc11c\uac00 \uc5c6\ub294 \ubcc0\uacbd \uac00\ub2a5\ud55c \uceec\ub809\uc158\uc785\ub2c8\ub2e4.</p> <pre><code># \uc9d1\ud569 \uc0dd\uc131 \ubc29\ubc95\ub4e4\nempty_set = set()  # \ube48 \uc9d1\ud569 ({}\ub294 \ub515\uc154\ub108\ub9ac!)\nnumbers = {1, 2, 3, 4, 5}\nfruits = {\"apple\", \"banana\", \"orange\"}\n\n# set() \ud568\uc218\ub85c \uc0dd\uc131\nfrom_list = set([1, 2, 2, 3, 3, 4])  # \uc911\ubcf5 \uc790\ub3d9 \uc81c\uac70\nfrom_string = set(\"hello\")  # \ubb38\uc790 \ub2e8\uc704\ub85c \ubd84\ub9ac\n\nprint(f\"\uc22b\uc790 \uc9d1\ud569: {numbers}\")\nprint(f\"\uacfc\uc77c \uc9d1\ud569: {fruits}\")\nprint(f\"\ub9ac\uc2a4\ud2b8\uc5d0\uc11c \ubcc0\ud658: {from_list}\")\nprint(f\"\ubb38\uc790\uc5f4\uc5d0\uc11c \ubcc0\ud658: {from_string}\")\n\n# \uc9d1\ud569\uc758 \ud2b9\uc9d5\nmixed_set = {1, \"hello\", 3.14, (1, 2)}  # \ud574\uc2dc \uac00\ub2a5\ud55c \uac1d\uccb4\ub9cc\nprint(f\"\ud63c\ud569 \uc9d1\ud569: {mixed_set}\")\n\n# \uc911\ubcf5 \uc81c\uac70 \ud65c\uc6a9\nduplicate_list = [1, 2, 2, 3, 3, 3, 4, 4, 5]\nunique_list = list(set(duplicate_list))\nprint(f\"\uc911\ubcf5 \uc81c\uac70: {duplicate_list} \u2192 {unique_list}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#42","title":"4.2 \uc9d1\ud569\uc758 \ud2b9\uc9d5","text":"<pre><code># 1. \uc911\ubcf5 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\uc74c\ncolors = {\"red\", \"blue\", \"red\", \"green\", \"blue\"}\nprint(f\"\uc911\ubcf5 \uc81c\uac70\ub41c \uc0c9\uc0c1: {colors}\")\n\n# 2. \uc21c\uc11c\uac00 \uc5c6\uc74c (\ucd9c\ub825 \uc21c\uc11c\ub294 \ubcf4\uc7a5\ub418\uc9c0 \uc54a\uc74c)\nnumbers = {3, 1, 4, 1, 5, 9, 2, 6}\nprint(f\"\uc21c\uc11c \uc5c6\ub294 \uc22b\uc790\ub4e4: {numbers}\")\n\n# 3. \ubcc0\uacbd \uac00\ub2a5\nfruits = {\"apple\", \"banana\"}\nfruits.add(\"orange\")\nfruits.remove(\"banana\")\nprint(f\"\ubcc0\uacbd\ub41c \uacfc\uc77c\ub4e4: {fruits}\")\n\n# 4. \uba64\ubc84\uc2ed \ud14c\uc2a4\ud2b8\uac00 \ube60\ub984 (O(1))\nlarge_set = set(range(1000000))\nprint(f\"999999\uac00 \uc9d1\ud569\uc5d0 \uc788\ub098\uc694? {999999 in large_set}\")\n\n# 5. \ud574\uc2dc \uac00\ub2a5\ud55c \uac1d\uccb4\ub9cc \uc800\uc7a5 \uac00\ub2a5\nvalid_set = {1, \"text\", (1, 2), frozenset([3, 4])}\nprint(f\"\uc720\ud6a8\ud55c \uc9d1\ud569: {valid_set}\")\n\n# \uc798\ubabb\ub41c \uc608 (\ub9ac\uc2a4\ud2b8\ub294 \ud574\uc2dc \ubd88\uac00\ub2a5)\ntry:\n    invalid_set = {[1, 2, 3]}  # TypeError\nexcept TypeError as e:\n    print(f\"\uc9d1\ud569 \uc624\ub958: {e}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#5","title":"5. \uc9d1\ud569 \uc5f0\uc0b0","text":""},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#51","title":"5.1 \uae30\ubcf8 \uc9d1\ud569 \uba54\uc11c\ub4dc","text":"<pre><code>programming_languages = {\"Python\", \"Java\", \"C++\", \"JavaScript\"}\n\n# add(): \uc694\uc18c \ucd94\uac00\nprogramming_languages.add(\"Go\")\nprint(f\"\uc5b8\uc5b4 \ucd94\uac00: {programming_languages}\")\n\n# remove(): \uc694\uc18c \uc81c\uac70 (\uc5c6\uc73c\uba74 KeyError)\nprogramming_languages.remove(\"C++\")\nprint(f\"\uc5b8\uc5b4 \uc81c\uac70: {programming_languages}\")\n\n# discard(): \uc694\uc18c \uc81c\uac70 (\uc5c6\uc5b4\ub3c4 \uc624\ub958 \uc5c6\uc74c)\nprogramming_languages.discard(\"Ruby\")  # \uc5c6\uc5b4\ub3c4 \uc5d0\ub7ec \uc5c6\uc74c\nprogramming_languages.discard(\"Java\")  # \uc788\uc73c\uba74 \uc81c\uac70\nprint(f\"discard \ud6c4: {programming_languages}\")\n\n# pop(): \uc784\uc758\uc758 \uc694\uc18c \uc81c\uac70\ud558\uace0 \ubc18\ud658\nremoved_language = programming_languages.pop()\nprint(f\"\uc81c\uac70\ub41c \uc5b8\uc5b4: {removed_language}\")\nprint(f\"pop \ud6c4: {programming_languages}\")\n\n# clear(): \ubaa8\ub4e0 \uc694\uc18c \uc81c\uac70\ntest_set = {\"a\", \"b\", \"c\"}\ntest_set.clear()\nprint(f\"clear \ud6c4: {test_set}\")\n\n# update(): \uc5ec\ub7ec \uc694\uc18c \ucd94\uac00\nprogramming_languages.update([\"Rust\", \"TypeScript\", \"Kotlin\"])\nprint(f\"\uc5c5\ub370\uc774\ud2b8 \ud6c4: {programming_languages}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#52","title":"5.2 \uc9d1\ud569 \uc5f0\uc0b0 (\uad50\uc9d1\ud569, \ud569\uc9d1\ud569, \ucc28\uc9d1\ud569)","text":"<pre><code># \ub450 \uac1c\uc758 \uc9d1\ud569 \uc815\uc758\npython_users = {\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"}\njava_users = {\"Bob\", \"David\", \"Frank\", \"Grace\", \"Henry\"}\n\nprint(f\"Python \uc0ac\uc6a9\uc790: {python_users}\")\nprint(f\"Java \uc0ac\uc6a9\uc790: {java_users}\")\n\n# \uad50\uc9d1\ud569 (intersection): \ub450 \uc9d1\ud569 \ubaa8\ub450\uc5d0 \uc788\ub294 \uc694\uc18c\nboth_languages = python_users &amp; java_users\nboth_languages_method = python_users.intersection(java_users)\nprint(f\"\ub450 \uc5b8\uc5b4 \ubaa8\ub450 \uc0ac\uc6a9: {both_languages}\")\n\n# \ud569\uc9d1\ud569 (union): \ub450 \uc9d1\ud569\uc744 \ud569\uce5c \ubaa8\ub4e0 \uc694\uc18c\nall_users = python_users | java_users\nall_users_method = python_users.union(java_users)\nprint(f\"\ubaa8\ub4e0 \uc0ac\uc6a9\uc790: {all_users}\")\n\n# \ucc28\uc9d1\ud569 (difference): \uccab \ubc88\uc9f8 \uc9d1\ud569\uc5d0\ub9cc \uc788\ub294 \uc694\uc18c\nonly_python = python_users - java_users\nonly_java = java_users - python_users\nprint(f\"Python\ub9cc \uc0ac\uc6a9: {only_python}\")\nprint(f\"Java\ub9cc \uc0ac\uc6a9: {only_java}\")\n\n# \ub300\uce6d \ucc28\uc9d1\ud569 (symmetric difference): \ub450 \uc9d1\ud569 \uc911 \ud558\ub098\uc5d0\ub9cc \uc788\ub294 \uc694\uc18c\nexclusive_users = python_users ^ java_users\nprint(f\"\ud55c \uc5b8\uc5b4\ub9cc \uc0ac\uc6a9: {exclusive_users}\")\n\n# \uc5ec\ub7ec \uc9d1\ud569\uacfc\uc758 \uc5f0\uc0b0\ncpp_users = {\"Charlie\", \"David\", \"Ian\", \"Jack\"}\nall_three = python_users | java_users | cpp_users\ncommon_three = python_users &amp; java_users &amp; cpp_users\nprint(f\"\uc138 \uc5b8\uc5b4 \uc0ac\uc6a9\uc790 \ud569\uacc4: {all_three}\")\nprint(f\"\uc138 \uc5b8\uc5b4 \ubaa8\ub450 \uc0ac\uc6a9: {common_three}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#53","title":"5.3 \uc9d1\ud569 \uad00\uacc4 \ud655\uc778","text":"<pre><code># \ubd80\ubd84\uc9d1\ud569\uacfc \uc0c1\uc704\uc9d1\ud569 \uad00\uacc4\nall_employees = {\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\"}\ndevelopers = {\"Alice\", \"Bob\", \"Charlie\"}\nmanagers = {\"David\", \"Eve\"}\nseniors = {\"Alice\", \"David\"}\n\n# \ubd80\ubd84\uc9d1\ud569 \ud655\uc778 (subset)\nprint(f\"\uac1c\ubc1c\uc790\ub4e4\uc774 \uc804\uccb4 \uc9c1\uc6d0\uc758 \ubd80\ubd84\uc9d1\ud569\uc778\uac00? {developers &lt;= all_employees}\")\nprint(f\"\uac1c\ubc1c\uc790\ub4e4\uc774 \uc804\uccb4 \uc9c1\uc6d0\uc758 \ubd80\ubd84\uc9d1\ud569\uc778\uac00? {developers.issubset(all_employees)}\")\n\n# \uc0c1\uc704\uc9d1\ud569 \ud655\uc778 (superset)\nprint(f\"\uc804\uccb4 \uc9c1\uc6d0\uc774 \uac1c\ubc1c\uc790\ub4e4\uc758 \uc0c1\uc704\uc9d1\ud569\uc778\uac00? {all_employees &gt;= developers}\")\nprint(f\"\uc804\uccb4 \uc9c1\uc6d0\uc774 \uac1c\ubc1c\uc790\ub4e4\uc758 \uc0c1\uc704\uc9d1\ud569\uc778\uac00? {all_employees.issuperset(developers)}\")\n\n# \uc9c4\ubd80\ubd84\uc9d1\ud569 \ud655\uc778 (proper subset)\nprint(f\"\uac1c\ubc1c\uc790\ub4e4\uc774 \uc804\uccb4 \uc9c1\uc6d0\uc758 \uc9c4\ubd80\ubd84\uc9d1\ud569\uc778\uac00? {developers &lt; all_employees}\")\n\n# \uc11c\ub85c\uc18c \ud655\uc778 (disjoint: \uad50\uc9d1\ud569\uc774 \uc5c6\uc74c)\nprint(f\"\uac1c\ubc1c\uc790\uc640 \ub9e4\ub2c8\uc800\uac00 \uc11c\ub85c\uc18c\uc778\uac00? {developers.isdisjoint(managers)}\")\nprint(f\"\uac1c\ubc1c\uc790\uc640 \uc2dc\ub2c8\uc5b4\uac00 \uc11c\ub85c\uc18c\uc778\uac00? {developers.isdisjoint(seniors)}\")\n\n# \uc9d1\ud569 \ud06c\uae30 \ube44\uad50\nprint(f\"\uc9d1\ud569 \ud06c\uae30:\")\nprint(f\"  \uc804\uccb4 \uc9c1\uc6d0: {len(all_employees)}\")\nprint(f\"  \uac1c\ubc1c\uc790: {len(developers)}\")\nprint(f\"  \ub9e4\ub2c8\uc800: {len(managers)}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#6","title":"6. \ub515\uc154\ub108\ub9ac\uc640 \uc9d1\ud569\uc758 \uc2e4\uc6a9\uc801 \ud65c\uc6a9","text":""},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#61","title":"6.1 \ub515\uc154\ub108\ub9ac \ucef4\ud504\ub9ac\ud5e8\uc158","text":"<pre><code># \uae30\ubcf8 \ub515\uc154\ub108\ub9ac \ucef4\ud504\ub9ac\ud5e8\uc158\nsquares = {x: x**2 for x in range(1, 6)}\nprint(f\"\uc81c\uacf1 \ub515\uc154\ub108\ub9ac: {squares}\")\n\n# \uc870\uac74\ubd80 \ub515\uc154\ub108\ub9ac \ucef4\ud504\ub9ac\ud5e8\uc158\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_squares = {x: x**2 for x in numbers if x % 2 == 0}\nprint(f\"\uc9dd\uc218 \uc81c\uacf1: {even_squares}\")\n\n# \ub450 \ub9ac\uc2a4\ud2b8\ub85c \ub515\uc154\ub108\ub9ac \uc0dd\uc131\nnames = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\nages = [25, 30, 35, 28]\npeople = {name: age for name, age in zip(names, ages)}\nprint(f\"\uc0ac\ub78c\ub4e4: {people}\")\n\n# \ubb38\uc790\uc5f4 \ucc98\ub9ac\ntext = \"hello world\"\nchar_count = {char: text.count(char) for char in set(text) if char != ' '}\nprint(f\"\ubb38\uc790 \ube48\ub3c4: {char_count}\")\n\n# \ub515\uc154\ub108\ub9ac \ubcc0\ud658\noriginal_prices = {\"apple\": 1000, \"banana\": 1500, \"orange\": 2000}\ndiscounted = {item: price * 0.8 for item, price in original_prices.items()}\nprint(f\"\ud560\uc778\uac00: {discounted}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#62","title":"6.2 \uc9d1\ud569 \ucef4\ud504\ub9ac\ud5e8\uc158","text":"<pre><code># \uae30\ubcf8 \uc9d1\ud569 \ucef4\ud504\ub9ac\ud5e8\uc158\nsquares_set = {x**2 for x in range(1, 11)}\nprint(f\"\uc81c\uacf1\uc218 \uc9d1\ud569: {squares_set}\")\n\n# \uc870\uac74\ubd80 \uc9d1\ud569 \ucef4\ud504\ub9ac\ud5e8\uc158\ntext = \"The Quick Brown Fox Jumps Over The Lazy Dog\"\nvowels = {char.lower() for char in text if char.lower() in 'aeiou'}\nprint(f\"\ubaa8\uc74c\ub4e4: {vowels}\")\n\n# \ubcf5\uc7a1\ud55c \uc870\uac74\nnumbers = range(1, 101)\nspecial_numbers = {x for x in numbers if x % 3 == 0 or x % 5 == 0}\nprint(f\"3 \ub610\ub294 5\uc758 \ubc30\uc218: {sorted(list(special_numbers))[:10]}...\")  # \ucc98\uc74c 10\uac1c\ub9cc\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#7","title":"7. \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c\ub4e4","text":""},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#71","title":"7.1 \ub2e8\uc5b4 \ube48\ub3c4 \ubd84\uc11d\uae30","text":"<pre><code>class WordFrequencyAnalyzer:\n    def __init__(self):\n        self.word_count = {}\n        self.total_words = 0\n\n    def add_text(self, text):\n        \"\"\"\ud14d\uc2a4\ud2b8\ub97c \ucd94\uac00\ud558\uc5ec \ub2e8\uc5b4 \ube48\ub3c4 \ubd84\uc11d\"\"\"\n        import string\n\n        # \ud14d\uc2a4\ud2b8 \uc804\ucc98\ub9ac\n        text = text.lower()\n        # \uad6c\ub450\uc810 \uc81c\uac70\n        for punct in string.punctuation:\n            text = text.replace(punct, ' ')\n\n        # \ub2e8\uc5b4 \ubd84\ub9ac \ubc0f \uce74\uc6b4\ud2b8\n        words = text.split()\n        for word in words:\n            if word:  # \ube48 \ubb38\uc790\uc5f4 \uc81c\uc678\n                self.word_count[word] = self.word_count.get(word, 0) + 1\n                self.total_words += 1\n\n    def get_frequency(self, word):\n        \"\"\"\ud2b9\uc815 \ub2e8\uc5b4\uc758 \ube48\ub3c4 \ubc18\ud658\"\"\"\n        return self.word_count.get(word.lower(), 0)\n\n    def get_top_words(self, n=10):\n        \"\"\"\uac00\uc7a5 \ube48\ubc88\ud55c n\uac1c \ub2e8\uc5b4 \ubc18\ud658\"\"\"\n        # \ube48\ub3c4\uc21c\uc73c\ub85c \uc815\ub82c\n        sorted_words = sorted(self.word_count.items(), \n                            key=lambda x: x[1], reverse=True)\n        return sorted_words[:n]\n\n    def get_unique_words(self):\n        \"\"\"\uace0\uc720 \ub2e8\uc5b4 \uc9d1\ud569 \ubc18\ud658\"\"\"\n        return set(self.word_count.keys())\n\n    def get_words_by_length(self, length):\n        \"\"\"\ud2b9\uc815 \uae38\uc774\uc758 \ub2e8\uc5b4\ub4e4 \ubc18\ud658\"\"\"\n        return {word for word in self.word_count.keys() if len(word) == length}\n\n    def get_statistics(self):\n        \"\"\"\ud1b5\uacc4 \uc815\ubcf4 \ubc18\ud658\"\"\"\n        if not self.word_count:\n            return {}\n\n        word_lengths = [len(word) for word in self.word_count.keys()]\n        return {\n            'total_words': self.total_words,\n            'unique_words': len(self.word_count),\n            'avg_word_length': sum(word_lengths) / len(word_lengths),\n            'longest_word': max(self.word_count.keys(), key=len),\n            'shortest_word': min(self.word_count.keys(), key=len)\n        }\n\n    def print_analysis(self):\n        \"\"\"\ubd84\uc11d \uacb0\uacfc \ucd9c\ub825\"\"\"\n        print(\"=\"*50)\n        print(\"\ub2e8\uc5b4 \ube48\ub3c4 \ubd84\uc11d \uacb0\uacfc\")\n        print(\"=\"*50)\n\n        stats = self.get_statistics()\n        if not stats:\n            print(\"\ubd84\uc11d\ud560 \ud14d\uc2a4\ud2b8\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n            return\n\n        print(f\"\ucd1d \ub2e8\uc5b4 \uc218: {stats['total_words']:,}\")\n        print(f\"\uace0\uc720 \ub2e8\uc5b4 \uc218: {stats['unique_words']:,}\")\n        print(f\"\ud3c9\uade0 \ub2e8\uc5b4 \uae38\uc774: {stats['avg_word_length']:.1f}\uc790\")\n        print(f\"\uac00\uc7a5 \uae34 \ub2e8\uc5b4: {stats['longest_word']}\")\n        print(f\"\uac00\uc7a5 \uc9e7\uc740 \ub2e8\uc5b4: {stats['shortest_word']}\")\n\n        print(f\"\\n\uc0c1\uc704 10\uac1c \ub2e8\uc5b4:\")\n        for i, (word, count) in enumerate(self.get_top_words(10), 1):\n            percentage = (count / self.total_words) * 100\n            print(f\"{i:2}. {word:&lt;15} {count:4}\ud68c ({percentage:4.1f}%)\")\n\n# \uc0ac\uc6a9 \uc608\uc81c\nanalyzer = WordFrequencyAnalyzer()\n\nsample_texts = [\n    \"Python is a powerful programming language. Python is easy to learn.\",\n    \"Machine learning and data science are popular fields in Python.\",\n    \"Python has a large community and many useful libraries.\",\n    \"Learning Python opens up many career opportunities in tech.\"\n]\n\nfor text in sample_texts:\n    analyzer.add_text(text)\n\nanalyzer.print_analysis()\n\n# \ud2b9\uc815 \ub2e8\uc5b4 \uac80\uc0c9\nprint(f\"\\n'python' \ube48\ub3c4: {analyzer.get_frequency('python')}\ud68c\")\nprint(f\"5\uae00\uc790 \ub2e8\uc5b4\ub4e4: {analyzer.get_words_by_length(5)}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#72","title":"7.2 \ud559\uc0dd \uc131\uc801 \uad00\ub9ac \uc2dc\uc2a4\ud15c (\ub515\uc154\ub108\ub9ac \ud65c\uc6a9)","text":"<pre><code>class StudentGradeManager:\n    def __init__(self):\n        # \ud559\uc0dd \uc815\ubcf4: {\ud559\ubc88: {'name': \uc774\ub984, 'grades': {\uacfc\ubaa9: \uc810\uc218}}}\n        self.students = {}\n        self.subjects = set()  # \uc804\uccb4 \uacfc\ubaa9 \uc9d1\ud569\n\n    def add_student(self, student_id, name):\n        \"\"\"\ud559\uc0dd \ucd94\uac00\"\"\"\n        if student_id in self.students:\n            print(f\"\ud559\ubc88 {student_id}\ub294 \uc774\ubbf8 \uc874\uc7ac\ud569\ub2c8\ub2e4.\")\n            return False\n\n        self.students[student_id] = {\n            'name': name,\n            'grades': {}\n        }\n        print(f\"\ud559\uc0dd {name} (\ud559\ubc88: {student_id})\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n        return True\n\n    def add_grade(self, student_id, subject, score):\n        \"\"\"\uc131\uc801 \ucd94\uac00\"\"\"\n        if student_id not in self.students:\n            print(f\"\ud559\ubc88 {student_id}\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n            return False\n\n        if not 0 &lt;= score &lt;= 100:\n            print(\"\uc810\uc218\ub294 0-100 \uc0ac\uc774\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n            return False\n\n        self.students[student_id]['grades'][subject] = score\n        self.subjects.add(subject)\n        print(f\"{self.students[student_id]['name']}\uc758 {subject} \uc131\uc801\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n        return True\n\n    def get_student_average(self, student_id):\n        \"\"\"\ud559\uc0dd \ud3c9\uade0 \uacc4\uc0b0\"\"\"\n        if student_id not in self.students:\n            return None\n\n        grades = self.students[student_id]['grades']\n        if not grades:\n            return 0\n\n        return sum(grades.values()) / len(grades)\n\n    def get_subject_statistics(self, subject):\n        \"\"\"\uacfc\ubaa9\ubcc4 \ud1b5\uacc4\"\"\"\n        scores = []\n        for student in self.students.values():\n            if subject in student['grades']:\n                scores.append(student['grades'][subject])\n\n        if not scores:\n            return None\n\n        return {\n            'count': len(scores),\n            'average': sum(scores) / len(scores),\n            'max': max(scores),\n            'min': min(scores)\n        }\n\n    def get_top_students(self, n=5):\n        \"\"\"\uc0c1\uc704 n\uba85 \ud559\uc0dd\"\"\"\n        student_averages = []\n        for student_id, info in self.students.items():\n            avg = self.get_student_average(student_id)\n            if avg is not None:\n                student_averages.append((student_id, info['name'], avg))\n\n        # \ud3c9\uade0 \uc810\uc218\ub85c \uc815\ub82c\n        student_averages.sort(key=lambda x: x[2], reverse=True)\n        return student_averages[:n]\n\n    def get_failing_students(self, passing_score=60):\n        \"\"\"\ub099\uc81c \uc704\ud5d8 \ud559\uc0dd\ub4e4 (\ud3c9\uade0 60\uc810 \ubbf8\ub9cc)\"\"\"\n        failing = []\n        for student_id, info in self.students.items():\n            avg = self.get_student_average(student_id)\n            if avg is not None and avg &lt; passing_score:\n                failing.append((student_id, info['name'], avg))\n\n        return sorted(failing, key=lambda x: x[2])\n\n    def print_report(self):\n        \"\"\"\uc804\uccb4 \uc131\uc801\ud45c \ucd9c\ub825\"\"\"\n        if not self.students:\n            print(\"\ub4f1\ub85d\ub41c \ud559\uc0dd\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n            return\n\n        print(\"\\n\" + \"=\"*80)\n        print(\"\uc804\uccb4 \uc131\uc801\ud45c\")\n        print(\"=\"*80)\n\n        # \ud5e4\ub354\n        subjects_list = sorted(list(self.subjects))\n        header = f\"{'\ud559\ubc88':&lt;8} {'\uc774\ub984':&lt;10}\"\n        for subject in subjects_list:\n            header += f\"{subject:&gt;8}\"\n        header += f\"{'\ud3c9\uade0':&gt;8}\"\n        print(header)\n        print(\"-\" * 80)\n\n        # \ud559\uc0dd\ubcc4 \uc131\uc801\n        for student_id, info in self.students.items():\n            line = f\"{student_id:&lt;8} {info['name']:&lt;10}\"\n            grades = info['grades']\n\n            for subject in subjects_list:\n                score = grades.get(subject, '-')\n                if score == '-':\n                    line += f\"{score:&gt;8}\"\n                else:\n                    line += f\"{score:&gt;8.0f}\"\n\n            avg = self.get_student_average(student_id)\n            avg_str = f\"{avg:.1f}\" if avg is not None else \"-\"\n            line += f\"{avg_str:&gt;8}\"\n            print(line)\n\n        # \uacfc\ubaa9\ubcc4 \ud1b5\uacc4\n        print(\"-\" * 80)\n        print(\"\uacfc\ubaa9\ubcc4 \ud1b5\uacc4:\")\n        for subject in subjects_list:\n            stats = self.get_subject_statistics(subject)\n            if stats:\n                print(f\"{subject}: \ud3c9\uade0 {stats['average']:.1f}, \"\n                      f\"\ucd5c\uace0 {stats['max']}, \ucd5c\uc800 {stats['min']} \"\n                      f\"({stats['count']}\uba85)\")\n\n# \uc0ac\uc6a9 \uc608\uc81c\nmanager = StudentGradeManager()\n\n# \ud559\uc0dd \ucd94\uac00\nstudents_data = [\n    (\"2024001\", \"\uae40\ucca0\uc218\"),\n    (\"2024002\", \"\uc774\uc601\ud76c\"),\n    (\"2024003\", \"\ubc15\ubbfc\uc218\"),\n    (\"2024004\", \"\ucd5c\uc9c0\uc601\"),\n    (\"2024005\", \"\uc815\ub2e4\uc740\")\n]\n\nfor student_id, name in students_data:\n    manager.add_student(student_id, name)\n\n# \uc131\uc801 \ucd94\uac00\ngrades_data = [\n    (\"2024001\", \"\uc218\ud559\", 85), (\"2024001\", \"\uc601\uc5b4\", 90), (\"2024001\", \"\uacfc\ud559\", 78),\n    (\"2024002\", \"\uc218\ud559\", 92), (\"2024002\", \"\uc601\uc5b4\", 88), (\"2024002\", \"\uacfc\ud559\", 95),\n    (\"2024003\", \"\uc218\ud559\", 76), (\"2024003\", \"\uc601\uc5b4\", 82), (\"2024003\", \"\uacfc\ud559\", 70),\n    (\"2024004\", \"\uc218\ud559\", 96), (\"2024004\", \"\uc601\uc5b4\", 94), (\"2024004\", \"\uacfc\ud559\", 92),\n    (\"2024005\", \"\uc218\ud559\", 58), (\"2024005\", \"\uc601\uc5b4\", 65), (\"2024005\", \"\uacfc\ud559\", 62)\n]\n\nfor student_id, subject, score in grades_data:\n    manager.add_grade(student_id, subject, score)\n\n# \uc131\uc801\ud45c \ucd9c\ub825\nmanager.print_report()\n\n# \uc0c1\uc704 \ud559\uc0dd\ub4e4\nprint(f\"\\n\uc0c1\uc704 3\uba85:\")\nfor i, (student_id, name, avg) in enumerate(manager.get_top_students(3), 1):\n    print(f\"{i}\ub4f1: {name} (\ud559\ubc88: {student_id}, \ud3c9\uade0: {avg:.1f})\")\n\n# \ub099\uc81c \uc704\ud5d8 \ud559\uc0dd\ub4e4\nfailing = manager.get_failing_students()\nif failing:\n    print(f\"\\n\ub099\uc81c \uc704\ud5d8 \ud559\uc0dd\ub4e4:\")\n    for student_id, name, avg in failing:\n        print(f\"  {name} (\ud559\ubc88: {student_id}, \ud3c9\uade0: {avg:.1f})\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#73","title":"7.3 \uc7ac\uace0 \uad00\ub9ac \uc2dc\uc2a4\ud15c","text":"<pre><code>class InventoryManager:\n    def __init__(self):\n        # \uc7ac\uace0: {\uc0c1\ud488ID: {'name': \uc774\ub984, 'quantity': \uc218\ub7c9, 'price': \uac00\uaca9, 'category': \uce74\ud14c\uace0\ub9ac}}\n        self.inventory = {}\n        self.categories = set()\n        self.low_stock_threshold = 10\n\n    def add_product(self, product_id, name, quantity, price, category):\n        \"\"\"\uc0c1\ud488 \ucd94\uac00\"\"\"\n        if product_id in self.inventory:\n            print(f\"\uc0c1\ud488 ID {product_id}\ub294 \uc774\ubbf8 \uc874\uc7ac\ud569\ub2c8\ub2e4.\")\n            return False\n\n        self.inventory[product_id] = {\n            'name': name,\n            'quantity': quantity,\n            'price': price,\n            'category': category\n        }\n        self.categories.add(category)\n        print(f\"\uc0c1\ud488 '{name}'\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n        return True\n\n    def update_stock(self, product_id, quantity_change):\n        \"\"\"\uc7ac\uace0 \uc218\ub7c9 \ubcc0\uacbd (\uc591\uc218: \uc785\uace0, \uc74c\uc218: \ucd9c\uace0)\"\"\"\n        if product_id not in self.inventory:\n            print(f\"\uc0c1\ud488 ID {product_id}\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n            return False\n\n        current_quantity = self.inventory[product_id]['quantity']\n        new_quantity = current_quantity + quantity_change\n\n        if new_quantity &lt; 0:\n            print(f\"\uc7ac\uace0\uac00 \ubd80\uc871\ud569\ub2c8\ub2e4. \ud604\uc7ac \uc7ac\uace0: {current_quantity}\")\n            return False\n\n        self.inventory[product_id]['quantity'] = new_quantity\n        product_name = self.inventory[product_id]['name']\n\n        if quantity_change &gt; 0:\n            print(f\"{product_name} {quantity_change}\uac1c \uc785\uace0. \ud604\uc7ac \uc7ac\uace0: {new_quantity}\")\n        else:\n            print(f\"{product_name} {abs(quantity_change)}\uac1c \ucd9c\uace0. \ud604\uc7ac \uc7ac\uace0: {new_quantity}\")\n\n        return True\n\n    def get_low_stock_items(self):\n        \"\"\"\uc7ac\uace0 \ubd80\uc871 \uc0c1\ud488\ub4e4\"\"\"\n        low_stock = {}\n        for product_id, info in self.inventory.items():\n            if info['quantity'] &lt;= self.low_stock_threshold:\n                low_stock[product_id] = info\n        return low_stock\n\n    def get_products_by_category(self, category):\n        \"\"\"\uce74\ud14c\uace0\ub9ac\ubcc4 \uc0c1\ud488\ub4e4\"\"\"\n        category_products = {}\n        for product_id, info in self.inventory.items():\n            if info['category'] == category:\n                category_products[product_id] = info\n        return category_products\n\n    def calculate_total_value(self):\n        \"\"\"\ucd1d \uc7ac\uace0 \uac00\uce58 \uacc4\uc0b0\"\"\"\n        total_value = 0\n        category_values = {}\n\n        for info in self.inventory.values():\n            value = info['quantity'] * info['price']\n            total_value += value\n\n            category = info['category']\n            category_values[category] = category_values.get(category, 0) + value\n\n        return total_value, category_values\n\n    def search_products(self, keyword):\n        \"\"\"\uc0c1\ud488\uba85\uc73c\ub85c \uac80\uc0c9\"\"\"\n        results = {}\n        keyword = keyword.lower()\n\n        for product_id, info in self.inventory.items():\n            if keyword in info['name'].lower():\n                results[product_id] = info\n\n        return results\n\n    def get_top_value_products(self, n=5):\n        \"\"\"\uac00\uce58 \ub192\uc740 \uc0c1\ud488 \uc21c\uc11c\"\"\"\n        product_values = []\n        for product_id, info in self.inventory.items():\n            value = info['quantity'] * info['price']\n            product_values.append((product_id, info['name'], value, info['quantity'], info['price']))\n\n        # \uac00\uce58\uc21c\uc73c\ub85c \uc815\ub82c\n        product_values.sort(key=lambda x: x[2], reverse=True)\n        return product_values[:n]\n\n    def print_inventory_report(self):\n        \"\"\"\uc7ac\uace0 \ud604\ud669 \ubcf4\uace0\uc11c\"\"\"\n        if not self.inventory:\n            print(\"\uc7ac\uace0\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n            return\n\n        print(\"\\n\" + \"=\"*90)\n        print(\"\uc7ac\uace0 \ud604\ud669 \ubcf4\uace0\uc11c\")\n        print(\"=\"*90)\n\n        # \uc804\uccb4 \ud604\ud669\n        total_value, category_values = self.calculate_total_value()\n        total_items = sum(info['quantity'] for info in self.inventory.values())\n\n        print(f\"\ucd1d \uc0c1\ud488 \uc885\ub958: {len(self.inventory)}\uac1c\")\n        print(f\"\ucd1d \uc7ac\uace0 \uc218\ub7c9: {total_items:,}\uac1c\")\n        print(f\"\ucd1d \uc7ac\uace0 \uac00\uce58: {total_value:,.0f}\uc6d0\")\n        print(f\"\ub4f1\ub85d\ub41c \uce74\ud14c\uace0\ub9ac: {', '.join(sorted(self.categories))}\")\n\n        # \uce74\ud14c\uace0\ub9ac\ubcc4 \uac00\uce58\n        print(f\"\\n\uce74\ud14c\uace0\ub9ac\ubcc4 \uc7ac\uace0 \uac00\uce58:\")\n        for category in sorted(self.categories):\n            value = category_values.get(category, 0)\n            percentage = (value / total_value) * 100 if total_value &gt; 0 else 0\n            print(f\"  {category}: {value:,.0f}\uc6d0 ({percentage:.1f}%)\")\n\n        # \uc0c1\ud488 \ubaa9\ub85d\n        print(f\"\\n\uc0c1\ud488 \ubaa9\ub85d:\")\n        print(f\"{'ID':&lt;8} {'\uc0c1\ud488\uba85':&lt;20} {'\uce74\ud14c\uace0\ub9ac':&lt;12} {'\uc218\ub7c9':&gt;8} {'\ub2e8\uac00':&gt;10} {'\ucd1d\uac00\uce58':&gt;12}\")\n        print(\"-\" * 90)\n\n        for product_id, info in sorted(self.inventory.items()):\n            total_value_item = info['quantity'] * info['price']\n            print(f\"{product_id:&lt;8} {info['name']:&lt;20} {info['category']:&lt;12} \"\n                  f\"{info['quantity']:&gt;8} {info['price']:&gt;10,.0f} {total_value_item:&gt;12,.0f}\")\n\n        # \uc7ac\uace0 \ubd80\uc871 \uacbd\uace0\n        low_stock = self.get_low_stock_items()\n        if low_stock:\n            print(f\"\\n\u26a0\ufe0f  \uc7ac\uace0 \ubd80\uc871 \uacbd\uace0 (\uae30\uc900: {self.low_stock_threshold}\uac1c \uc774\ud558):\")\n            for product_id, info in low_stock.items():\n                print(f\"  {info['name']} (ID: {product_id}): {info['quantity']}\uac1c\")\n\n# \uc0ac\uc6a9 \uc608\uc81c\ninventory = InventoryManager()\n\n# \uc0c1\ud488 \ucd94\uac00\nproducts = [\n    (\"P001\", \"\ub178\ud2b8\ubd81\", 50, 1200000, \"\uc804\uc790\uc81c\ud488\"),\n    (\"P002\", \"\ub9c8\uc6b0\uc2a4\", 150, 30000, \"\uc804\uc790\uc81c\ud488\"),\n    (\"P003\", \"\ud0a4\ubcf4\ub4dc\", 80, 80000, \"\uc804\uc790\uc81c\ud488\"),\n    (\"P004\", \"\uc758\uc790\", 25, 150000, \"\uac00\uad6c\"),\n    (\"P005\", \"\ucc45\uc0c1\", 12, 200000, \"\uac00\uad6c\"),\n    (\"P006\", \"\ubaa8\ub2c8\ud130\", 35, 300000, \"\uc804\uc790\uc81c\ud488\"),\n    (\"P007\", \"\ucc45\uc7a5\", 8, 120000, \"\uac00\uad6c\")\n]\n\nfor product_id, name, quantity, price, category in products:\n    inventory.add_product(product_id, name, quantity, price, category)\n\n# \uc7ac\uace0 \ubcc0\ub3d9\ninventory.update_stock(\"P001\", -5)  # \ub178\ud2b8\ubd81 5\uac1c \ucd9c\uace0\ninventory.update_stock(\"P002\", 20)  # \ub9c8\uc6b0\uc2a4 20\uac1c \uc785\uace0\ninventory.update_stock(\"P007\", -3)  # \ucc45\uc7a5 3\uac1c \ucd9c\uace0\n\n# \ubcf4\uace0\uc11c \ucd9c\ub825\ninventory.print_inventory_report()\n\n# \uac80\uc0c9 \uae30\ub2a5\nprint(f\"\\n'\ub178\ud2b8' \uac80\uc0c9 \uacb0\uacfc:\")\nsearch_results = inventory.search_products(\"\ub178\ud2b8\")\nfor product_id, info in search_results.items():\n    print(f\"  {info['name']} (ID: {product_id}): {info['quantity']}\uac1c\")\n\n# \uac00\uce58 \ub192\uc740 \uc0c1\ud488\ub4e4\nprint(f\"\\n\uac00\uce58 \ub192\uc740 \uc0c1\uc704 3\uac1c \uc0c1\ud488:\")\ntop_products = inventory.get_top_value_products(3)\nfor i, (product_id, name, value, quantity, price) in enumerate(top_products, 1):\n    print(f\"{i}. {name}: {value:,.0f}\uc6d0 ({quantity}\uac1c \u00d7 {price:,.0f}\uc6d0)\")\n</code></pre>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#8","title":"8. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#1_1","title":"\uc5f0\uc2b5 1: \uc804\ud654\ubc88\ud638\ubd80 \uad00\ub9ac\uc790","text":"<p>\ub515\uc154\ub108\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc774\ub984\uc744 \ud0a4\ub85c \ud558\uace0 \uc804\ud654\ubc88\ud638, \uc774\uba54\uc77c \ub4f1\uc758 \uc815\ubcf4\ub97c \uac12\uc73c\ub85c \ud558\ub294 \uc804\ud654\ubc88\ud638\ubd80\ub97c \ub9cc\ub4dc\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#2_1","title":"\uc5f0\uc2b5 2: \uc911\ubcf5 \ub2e8\uc5b4 \ucc3e\uae30","text":"<p>\ub450 \uac1c\uc758 \ud14d\uc2a4\ud2b8\uc5d0\uc11c \uacf5\ud1b5\uc73c\ub85c \ub098\ud0c0\ub098\ub294 \ub2e8\uc5b4\ub4e4\uc744 \uc9d1\ud569 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucc3e\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#3_1","title":"\uc5f0\uc2b5 3: \ud22c\ud45c \uc2dc\uc2a4\ud15c","text":"<p>\ub515\uc154\ub108\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud6c4\ubcf4\uc790\ubcc4 \ub4dd\ud45c\uc218\ub97c \uad00\ub9ac\ud558\uace0, \ucd5c\uc885 \uacb0\uacfc\ub97c \ubd84\uc11d\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4dc\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#4_1","title":"\uc5f0\uc2b5 4: \uce5c\uad6c \uad00\uacc4 \ubd84\uc11d","text":"<p>\uc9d1\ud569\uc744 \uc0ac\uc6a9\ud558\uc5ec SNS\uc5d0\uc11c \uacf5\ud1b5 \uce5c\uad6c, \uce5c\uad6c \ucd94\ucc9c \ub4f1\uc758 \uae30\ub2a5\uc744 \uad6c\ud604\ud574\ubcf4\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\ub515\uc154\ub108\ub9ac \uae30\ubcf8: \ud0a4-\uac12 \uc30d, \uc0dd\uc131, \uc811\uadfc, \uc218\uc815 \ubc29\ubc95</li> <li>\ub515\uc154\ub108\ub9ac \uba54\uc11c\ub4dc: keys(), values(), items(), get(), pop() \ub4f1</li> <li>\uc9d1\ud569 \uae30\ubcf8: \uc911\ubcf5 \uc5c6\ub294 \uceec\ub809\uc158, \uc0dd\uc131, \ud2b9\uc9d5</li> <li>\uc9d1\ud569 \uc5f0\uc0b0: \uad50\uc9d1\ud569, \ud569\uc9d1\ud569, \ucc28\uc9d1\ud569, \ubd80\ubd84\uc9d1\ud569 \uad00\uacc4</li> <li>\ucef4\ud504\ub9ac\ud5e8\uc158: \ub515\uc154\ub108\ub9ac\uc640 \uc9d1\ud569 \ucef4\ud504\ub9ac\ud5e8\uc158</li> <li>\uc2e4\uc6a9 \uc608\uc81c: \ub2e8\uc5b4 \ubd84\uc11d, \uc131\uc801 \uad00\ub9ac, \uc7ac\uace0 \uad00\ub9ac</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \ud568\uc218\uc758 \uae30\ucd08\ub97c \ud559\uc2b5\ud558\uc5ec \ucf54\ub4dc\ub97c \ub354\uc6b1 \uccb4\uacc4\uc801\uc73c\ub85c \uad6c\uc131\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/beginner/chapter09_dictionaries_sets/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ub515\uc154\ub108\ub9ac\ub294 \ud0a4\ub85c \ube60\ub978 \uc811\uadfc\uc774 \uac00\ub2a5\ud55c \ud574\uc2dc \ud14c\uc774\ube14 \uad6c\uc870</li> <li>\uc9d1\ud569\uc740 \uc911\ubcf5 \uc81c\uac70\uc640 \uc9d1\ud569 \uc5f0\uc0b0\uc5d0 \ucd5c\uc801\ud654\ub41c \uc790\ub8cc\uad6c\uc870</li> <li>\ub450 \uc790\ub8cc\ud615 \ubaa8\ub450 \ud574\uc2dc \uac00\ub2a5\ud55c \uac1d\uccb4\ub9cc \ud0a4/\uc694\uc18c\ub85c \uc0ac\uc6a9 \uac00\ub2a5</li> <li>\ucef4\ud504\ub9ac\ud5e8\uc158\uc744 \ud65c\uc6a9\ud558\uba74 \uac04\uacb0\ud558\uace0 \ud6a8\uc728\uc801\uc778 \ucf54\ub4dc \uc791\uc131 \uac00\ub2a5</li> <li>\uc2e4\ubb34\uc5d0\uc11c\ub294 \ub370\uc774\ud130 \ubd84\uc11d, \uad00\ub9ac \uc2dc\uc2a4\ud15c \ub4f1\uc5d0 \uad11\ubc94\uc704\ud558\uac8c \ud65c\uc6a9 </li> </ul>"},{"location":"tutorials/beginner/chapter10_functions_basics/","title":"Chapter 10: \ud568\uc218 \uae30\ucd08 (Functions Basics)","text":""},{"location":"tutorials/beginner/chapter10_functions_basics/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \ud568\uc218\uc758 \uac1c\ub150\uacfc \ud544\uc694\uc131 \uc774\ud574\ud558\uae30 - \ud568\uc218\ub97c \uc815\uc758\ud558\uace0 \ud638\ucd9c\ud558\ub294 \ubc29\ubc95 \uc775\ud788\uae30 - \ub9e4\uac1c\ubcc0\uc218\uc640 \uc778\uc218\uc758 \ucc28\uc774\uc810\uacfc \ud65c\uc6a9\ubc95 \uc774\ud574\ud558\uae30 - \ubc18\ud658\uac12\uc744 \uc0ac\uc6a9\ud558\ub294 \ub2e4\uc591\ud55c \ubc29\ubc95 \uc775\ud788\uae30 - \uc9c0\uc5ed\ubcc0\uc218\uc640 \uc804\uc5ed\ubcc0\uc218\uc758 \uc2a4\ucf54\ud504 \uc774\ud574\ud558\uae30 - \ub2e4\uc591\ud55c \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785 \ud65c\uc6a9\ud558\uae30 (\uae30\ubcf8\uac12, \ud0a4\uc6cc\ub4dc, \uac00\ubcc0 \uc778\uc218) - \ub78c\ub2e4 \ud568\uc218\uc758 \uae30\ubcf8 \uac1c\ub150\uacfc \ud65c\uc6a9\ubc95 - \uc2e4\ubb34\uc5d0\uc11c \ud65c\uc6a9 \uac00\ub2a5\ud55c \ud568\uc218 \uc791\uc131\ud558\uae30</p>"},{"location":"tutorials/beginner/chapter10_functions_basics/#1","title":"1. \ud568\uc218\uc758 \uae30\ubcf8 \uac1c\ub150","text":""},{"location":"tutorials/beginner/chapter10_functions_basics/#11","title":"1.1 \ud568\uc218\ub780?","text":"<p>\ud568\uc218\ub294 \ud2b9\uc815\ud55c \uc791\uc5c5\uc744 \uc218\ud589\ud558\ub294 \ucf54\ub4dc \ube14\ub85d\uc785\ub2c8\ub2e4. \uc785\ub825(\ub9e4\uac1c\ubcc0\uc218)\uc744 \ubc1b\uc544\uc11c \ucc98\ub9ac\ud55c \ud6c4 \uacb0\uacfc(\ubc18\ud658\uac12)\ub97c \ub3cc\ub824\uc8fc\ub294 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ucf54\ub4dc \ub2e8\uc704\uc785\ub2c8\ub2e4.</p> <pre><code># \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0 (\ucf54\ub4dc \uc911\ubcf5)\n# \uc138 \ud559\uc0dd\uc758 \ud3c9\uade0 \uacc4\uc0b0\nstudent1_scores = [85, 90, 78, 92]\nstudent1_average = sum(student1_scores) / len(student1_scores)\nprint(f\"\ud559\uc0dd1 \ud3c9\uade0: {student1_average:.1f}\")\n\nstudent2_scores = [76, 88, 84, 90]\nstudent2_average = sum(student2_scores) / len(student2_scores)\nprint(f\"\ud559\uc0dd2 \ud3c9\uade0: {student2_average:.1f}\")\n\nstudent3_scores = [95, 87, 91, 89]\nstudent3_average = sum(student3_scores) / len(student3_scores)\nprint(f\"\ud559\uc0dd3 \ud3c9\uade0: {student3_average:.1f}\")\n\nprint(\"-\" * 30)\n\n# \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 (\ucf54\ub4dc \uc7ac\uc0ac\uc6a9)\ndef calculate_average(scores):\n    \"\"\"\uc810\uc218 \ub9ac\uc2a4\ud2b8\uc758 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud558\ub294 \ud568\uc218\"\"\"\n    return sum(scores) / len(scores)\n\n# \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac19\uc740 \uc791\uc5c5 \uc218\ud589\nstudents_scores = [\n    [85, 90, 78, 92],\n    [76, 88, 84, 90],\n    [95, 87, 91, 89]\n]\n\nfor i, scores in enumerate(students_scores, 1):\n    average = calculate_average(scores)\n    print(f\"\ud559\uc0dd{i} \ud3c9\uade0: {average:.1f}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#12","title":"1.2 \ud568\uc218\uc758 \uc7a5\uc810","text":"<pre><code># 1. \ucf54\ub4dc \uc7ac\uc0ac\uc6a9\uc131\ndef greet_user(name, language=\"ko\"):\n    \"\"\"\uc0ac\uc6a9\uc790\uc5d0\uac8c \uc778\uc0ac\ud558\ub294 \ud568\uc218\"\"\"\n    if language == \"ko\":\n        return f\"\uc548\ub155\ud558\uc138\uc694, {name}\ub2d8!\"\n    elif language == \"en\":\n        return f\"Hello, {name}!\"\n    else:\n        return f\"Hi, {name}!\"\n\n# \uc5ec\ub7ec \ubc88 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\nprint(greet_user(\"\uae40\ucca0\uc218\"))\nprint(greet_user(\"Alice\", \"en\"))\nprint(greet_user(\"\u7530\u4e2d\", \"jp\"))\n\n# 2. \ucf54\ub4dc \uac00\ub3c5\uc131\uacfc \uc720\uc9c0\ubcf4\uc218\uc131\ndef is_prime(number):\n    \"\"\"\uc18c\uc218\uc778\uc9c0 \ud310\ubcc4\ud558\ub294 \ud568\uc218\"\"\"\n    if number &lt; 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef find_primes_in_range(start, end):\n    \"\"\"\ubc94\uc704 \ub0b4 \ubaa8\ub4e0 \uc18c\uc218\ub97c \ucc3e\ub294 \ud568\uc218\"\"\"\n    primes = []\n    for num in range(start, end + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\n# \ud568\uc218 \uc774\ub984\ub9cc\uc73c\ub85c\ub3c4 \uae30\ub2a5\uc744 \uc774\ud574\ud560 \uc218 \uc788\uc74c\nprimes_1_to_30 = find_primes_in_range(1, 30)\nprint(f\"1-30 \uc0ac\uc774\uc758 \uc18c\uc218: {primes_1_to_30}\")\n\n# 3. \ubaa8\ub4c8\ud654\uc640 \ucd94\uc0c1\ud654\ndef format_currency(amount, currency=\"\uc6d0\"):\n    \"\"\"\uae08\uc561\uc744 \ud1b5\ud654 \ud615\uc2dd\uc73c\ub85c \ud3ec\ub9f7\ud305\"\"\"\n    return f\"{amount:,}{currency}\"\n\ndef calculate_tax(amount, tax_rate=0.1):\n    \"\"\"\uc138\uae08\uc744 \uacc4\uc0b0\ud558\ub294 \ud568\uc218\"\"\"\n    return amount * tax_rate\n\ndef calculate_total_with_tax(amount, tax_rate=0.1):\n    \"\"\"\uc138\uae08 \ud3ec\ud568 \ucd1d\uc561 \uacc4\uc0b0\"\"\"\n    tax = calculate_tax(amount, tax_rate)\n    total = amount + tax\n    return amount, tax, total\n\n# \ubcf5\uc7a1\ud55c \uacc4\uc0b0\ub3c4 \uac04\ub2e8\ud55c \ud568\uc218 \ud638\ucd9c\ub85c \ud574\uacb0\nprice, tax, total = calculate_total_with_tax(10000, 0.1)\nprint(f\"\uc0c1\ud488\uac00\uaca9: {format_currency(price)}\")\nprint(f\"\uc138    \uae08: {format_currency(tax)}\")\nprint(f\"\ucd1d  \uac00\uaca9: {format_currency(total)}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#2","title":"2. \ud568\uc218 \uc815\uc758\uc640 \ud638\ucd9c","text":""},{"location":"tutorials/beginner/chapter10_functions_basics/#21","title":"2.1 \uae30\ubcf8 \ud568\uc218 \uc815\uc758","text":"<pre><code># \uae30\ubcf8 \ud568\uc218 \uc815\uc758 \ubb38\ubc95\ndef function_name():\n    \"\"\"\ud568\uc218 \uc124\uba85 (docstring)\"\"\"\n    # \ud568\uc218 \ubcf8\ubb38\n    pass\n\n# \uc2e4\uc81c \uc608\uc81c\ndef say_hello():\n    \"\"\"\uac04\ub2e8\ud55c \uc778\uc0ac \ud568\uc218\"\"\"\n    print(\"\uc548\ub155\ud558\uc138\uc694!\")\n\ndef print_separator():\n    \"\"\"\uad6c\ubd84\uc120\uc744 \ucd9c\ub825\ud558\ub294 \ud568\uc218\"\"\"\n    print(\"=\" * 40)\n\n# \ud568\uc218 \ud638\ucd9c\nsay_hello()\nprint_separator()\nsay_hello()\n\n# \ud568\uc218 \uc815\ubcf4 \ud655\uc778\nprint(f\"\ud568\uc218 \uc774\ub984: {say_hello.__name__}\")\nprint(f\"\ud568\uc218 \uc124\uba85: {say_hello.__doc__}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#22","title":"2.2 \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub294 \ud568\uc218","text":"<pre><code># \ud558\ub098\uc758 \ub9e4\uac1c\ubcc0\uc218\ndef greet(name):\n    \"\"\"\uc774\ub984\uc744 \ubc1b\uc544\uc11c \uc778\uc0ac\ud558\ub294 \ud568\uc218\"\"\"\n    print(f\"\uc548\ub155\ud558\uc138\uc694, {name}\ub2d8!\")\n\n# \uc5ec\ub7ec \uac1c\uc758 \ub9e4\uac1c\ubcc0\uc218\ndef introduce_person(name, age, city):\n    \"\"\"\uac1c\uc778 \uc815\ubcf4\ub97c \uc18c\uac1c\ud558\ub294 \ud568\uc218\"\"\"\n    print(f\"\uc774\ub984: {name}\")\n    print(f\"\ub098\uc774: {age}\uc138\")\n    print(f\"\uac70\uc8fc\uc9c0: {city}\")\n\n# \ud568\uc218 \ud638\ucd9c\ngreet(\"\uae40\ucca0\uc218\")\nprint()\nintroduce_person(\"\uc774\uc601\ud76c\", 25, \"\uc11c\uc6b8\")\n\n# \ub9e4\uac1c\ubcc0\uc218 \uc21c\uc11c \uc8fc\uc758\ndef calculate_rectangle_area(width, height):\n    \"\"\"\uc9c1\uc0ac\uac01\ud615\uc758 \ub113\uc774\ub97c \uacc4\uc0b0\ud558\uace0 \ucd9c\ub825\"\"\"\n    area = width * height\n    print(f\"\uac00\ub85c {width}cm, \uc138\ub85c {height}cm\")\n    print(f\"\ub113\uc774: {area}cm\u00b2\")\n\ncalculate_rectangle_area(10, 5)  # \uc21c\uc11c \uc911\uc694!\ncalculate_rectangle_area(5, 10)  # \ub2e4\ub978 \uacb0\uacfc\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#23","title":"2.3 \ubc18\ud658\uac12\uc774 \uc788\ub294 \ud568\uc218","text":"<pre><code># \uac12\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ndef add_numbers(a, b):\n    \"\"\"\ub450 \uc218\ub97c \ub354\ud55c \uacb0\uacfc\ub97c \ubc18\ud658\"\"\"\n    result = a + b\n    return result\n\ndef multiply_numbers(a, b):\n    \"\"\"\ub450 \uc218\ub97c \uacf1\ud55c \uacb0\uacfc\ub97c \ubc18\ud658\"\"\"\n    return a * b  # \uc9c1\uc811 \ubc18\ud658\ub3c4 \uac00\ub2a5\n\n# \ubc18\ud658\uac12 \uc0ac\uc6a9\nsum_result = add_numbers(10, 20)\nproduct_result = multiply_numbers(5, 6)\n\nprint(f\"\ub367\uc148 \uacb0\uacfc: {sum_result}\")\nprint(f\"\uacf1\uc148 \uacb0\uacfc: {product_result}\")\n\n# \ubc18\ud658\uac12\uc744 \ub2e4\ub978 \ud568\uc218\uc758 \uc778\uc218\ub85c \uc0ac\uc6a9\nfinal_result = add_numbers(sum_result, product_result)\nprint(f\"\ucd5c\uc885 \uacb0\uacfc: {final_result}\")\n\n# \uc5ec\ub7ec \uac12 \ubc18\ud658\ndef calculate_circle(radius):\n    \"\"\"\uc6d0\uc758 \ub458\ub808\uc640 \ub113\uc774\ub97c \uacc4\uc0b0\"\"\"\n    import math\n    circumference = 2 * math.pi * radius\n    area = math.pi * radius ** 2\n    return circumference, area  # \ud29c\ud50c\ub85c \ubc18\ud658\n\n# \uc5ec\ub7ec \uac12 \ubc1b\uae30\nperimeter, area = calculate_circle(5)\nprint(f\"\ubc18\uc9c0\ub984 5\uc778 \uc6d0:\")\nprint(f\"\ub458\ub808: {perimeter:.2f}\")\nprint(f\"\ub113\uc774: {area:.2f}\")\n\n# \uc870\uac74\ubd80 \ubc18\ud658\ndef get_grade(score):\n    \"\"\"\uc810\uc218\uc5d0 \ub530\ub978 \ub4f1\uae09 \ubc18\ud658\"\"\"\n    if score &gt;= 90:\n        return \"A\"\n    elif score &gt;= 80:\n        return \"B\"\n    elif score &gt;= 70:\n        return \"C\"\n    elif score &gt;= 60:\n        return \"D\"\n    else:\n        return \"F\"\n\n# \ud568\uc218 \uacb0\uacfc\ub97c \ubc14\ub85c \uc0ac\uc6a9\nstudent_score = 85\nprint(f\"\uc810\uc218 {student_score}\uc810: {get_grade(student_score)}\ub4f1\uae09\")\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#3","title":"3. \ub9e4\uac1c\ubcc0\uc218\uc640 \uc778\uc218\uc758 \uc774\ud574","text":""},{"location":"tutorials/beginner/chapter10_functions_basics/#31-vs","title":"3.1 \ub9e4\uac1c\ubcc0\uc218 vs \uc778\uc218","text":"<pre><code># \ub9e4\uac1c\ubcc0\uc218(Parameter): \ud568\uc218 \uc815\uc758\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ubcc0\uc218\ndef create_profile(name, age):  # name, age\ub294 \ub9e4\uac1c\ubcc0\uc218\n    \"\"\"\uc0ac\uc6a9\uc790 \ud504\ub85c\ud544\uc744 \uc0dd\uc131\ud558\ub294 \ud568\uc218\"\"\"\n    profile = f\"\uc774\ub984: {name}, \ub098\uc774: {age}\uc138\"\n    return profile\n\n# \uc778\uc218(Argument): \ud568\uc218 \ud638\ucd9c \uc2dc \uc804\ub2ec\ud558\ub294 \uc2e4\uc81c \uac12\nuser_profile = create_profile(\"\uae40\ucca0\uc218\", 25)  # \"\uae40\ucca0\uc218\", 25\ub294 \uc778\uc218\nprint(user_profile)\n\n# \ub2e4\uc591\ud55c \uc778\uc218 \uc804\ub2ec \ubc29\ubc95\ndef display_info(title, content, separator=\"=\"):\n    \"\"\"\uc815\ubcf4\ub97c \ud3ec\ub9f7\ud305\ud574\uc11c \ucd9c\ub825\"\"\"\n    print(separator * len(title))\n    print(title)\n    print(separator * len(title))\n    print(content)\n    print()\n\n# \uc704\uce58 \uc778\uc218 (positional arguments)\ndisplay_info(\"\uacf5\uc9c0\uc0ac\ud56d\", \"\ub0b4\uc77c \ud68c\uc758\uac00 \uc788\uc2b5\ub2c8\ub2e4.\")\n\n# \ud0a4\uc6cc\ub4dc \uc778\uc218 (keyword arguments)\ndisplay_info(title=\"\uc54c\ub9bc\", content=\"\uc810\uc2ec\uc2dc\uac04\uc774 \ubcc0\uacbd\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\", separator=\"-\")\ndisplay_info(content=\"\uc0c8\ub85c\uc6b4 \ud504\ub85c\uc81d\ud2b8 \uc2dc\uc791\", title=\"\ud504\ub85c\uc81d\ud2b8\", separator=\"*\")\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#32","title":"3.2 \uae30\ubcf8\uac12 \ub9e4\uac1c\ubcc0\uc218","text":"<pre><code># \uae30\ubcf8\uac12\uc774 \uc788\ub294 \ub9e4\uac1c\ubcc0\uc218\ndef create_email(username, domain=\"gmail.com\", is_business=False):\n    \"\"\"\uc774\uba54\uc77c \uc8fc\uc18c\ub97c \uc0dd\uc131\ud558\ub294 \ud568\uc218\"\"\"\n    if is_business:\n        domain = \"company.com\"\n\n    email = f\"{username}@{domain}\"\n    return email\n\n# \ub2e4\uc591\ud55c \ud638\ucd9c \ubc29\ubc95\nprint(create_email(\"john\"))  # \uae30\ubcf8\uac12 \uc0ac\uc6a9\nprint(create_email(\"mary\", \"naver.com\"))  # domain\ub9cc \ubcc0\uacbd\nprint(create_email(\"bob\", is_business=True))  # is_business\ub9cc \ubcc0\uacbd\nprint(create_email(\"alice\", \"yahoo.com\", True))  # \ubaa8\ub4e0 \uac12 \uc9c0\uc815\n\n# \uae30\ubcf8\uac12 \ub9e4\uac1c\ubcc0\uc218 \uc8fc\uc758\uc0ac\ud56d\ndef add_item_to_list(item, target_list=None):\n    \"\"\"\ub9ac\uc2a4\ud2b8\uc5d0 \uc544\uc774\ud15c\uc744 \ucd94\uac00 (\uc62c\ubc14\ub978 \ubc29\ubc95)\"\"\"\n    if target_list is None:\n        target_list = []  # \ub9e4\ubc88 \uc0c8\ub85c\uc6b4 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\n\n    target_list.append(item)\n    return target_list\n\n# \uc798\ubabb\ub41c \uc608\uc2dc (\uc2e4\uc81c\ub85c\ub294 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0 \uac83)\ndef add_item_wrong(item, target_list=[]):\n    \"\"\"\uc798\ubabb\ub41c \uae30\ubcf8\uac12 \uc0ac\uc6a9 \uc608\uc2dc\"\"\"\n    target_list.append(item)\n    return target_list\n\n# \uc62c\ubc14\ub978 \ubc29\ubc95 \ud14c\uc2a4\ud2b8\nlist1 = add_item_to_list(\"\uc0ac\uacfc\")\nlist2 = add_item_to_list(\"\ubc14\ub098\ub098\")\nprint(f\"\ub3c5\ub9bd\uc801\uc778 \ub9ac\uc2a4\ud2b81: {list1}\")\nprint(f\"\ub3c5\ub9bd\uc801\uc778 \ub9ac\uc2a4\ud2b82: {list2}\")\n\n# \uac00\ubcc0 \uae30\ubcf8\uac12\uc744 \uc548\uc804\ud558\uac8c \uc0ac\uc6a9\ud558\ub294 \ud328\ud134\ndef create_student_record(name, subjects=None, grades=None):\n    \"\"\"\ud559\uc0dd \uae30\ub85d\uc744 \uc0dd\uc131\ud558\ub294 \ud568\uc218\"\"\"\n    if subjects is None:\n        subjects = [\"\uc218\ud559\", \"\uc601\uc5b4\", \"\uacfc\ud559\"]\n    if grades is None:\n        grades = [0, 0, 0]\n\n    return {\n        \"name\": name,\n        \"subjects\": subjects.copy(),  # \ubcf5\uc0ac\ubcf8 \uc0ac\uc6a9\n        \"grades\": grades.copy()\n    }\n\nstudent1 = create_student_record(\"\uae40\ucca0\uc218\")\nstudent2 = create_student_record(\"\uc774\uc601\ud76c\", [\"\uad6d\uc5b4\", \"\uc218\ud559\"])\nprint(f\"\ud559\uc0dd1: {student1}\")\nprint(f\"\ud559\uc0dd2: {student2}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#33-args-kwargs","title":"3.3 \uac00\ubcc0 \uc778\uc218 (args, *kwargs)","text":"<pre><code># *args: \uac00\ubcc0 \uc704\uce58 \uc778\uc218\ndef calculate_sum(*numbers):\n    \"\"\"\uc5ec\ub7ec \uac1c\uc758 \uc22b\uc790\ub97c \ubaa8\ub450 \ub354\ud558\ub294 \ud568\uc218\"\"\"\n    print(f\"\ubc1b\uc740 \uc778\uc218\ub4e4: {numbers}\")  # \ud29c\ud50c\ub85c \uc800\uc7a5\ub428\n    total = sum(numbers)\n    return total\n\n# \ub2e4\uc591\ud55c \uac1c\uc218\uc758 \uc778\uc218 \uc804\ub2ec\nprint(f\"\ud569\uacc4: {calculate_sum(1, 2, 3)}\")\nprint(f\"\ud569\uacc4: {calculate_sum(10, 20, 30, 40, 50)}\")\nprint(f\"\ud569\uacc4: {calculate_sum(100)}\")\n\n# **kwargs: \uac00\ubcc0 \ud0a4\uc6cc\ub4dc \uc778\uc218\ndef create_person(**person_info):\n    \"\"\"\uc778\uc801\uc0ac\ud56d\uc744 \ub515\uc154\ub108\ub9ac\ub85c \uc0dd\uc131\ud558\ub294 \ud568\uc218\"\"\"\n    print(f\"\ubc1b\uc740 \uc815\ubcf4: {person_info}\")  # \ub515\uc154\ub108\ub9ac\ub85c \uc800\uc7a5\ub428\n\n    # \ud544\uc218 \uc815\ubcf4 \ud655\uc778\n    if \"name\" not in person_info:\n        return \"\uc774\ub984\uc740 \ud544\uc218 \uc815\ubcf4\uc785\ub2c8\ub2e4.\"\n\n    return person_info\n\n# \ub2e4\uc591\ud55c \ud0a4\uc6cc\ub4dc \uc778\uc218 \uc804\ub2ec\nperson1 = create_person(name=\"\uae40\ucca0\uc218\", age=25, city=\"\uc11c\uc6b8\")\nperson2 = create_person(name=\"\uc774\uc601\ud76c\", age=30, job=\"\uac1c\ubc1c\uc790\", hobby=\"\ub3c5\uc11c\")\nprint(f\"\uc778\ubb3c1: {person1}\")\nprint(f\"\uc778\ubb3c2: {person2}\")\n\n# *args\uc640 **kwargs \ud568\uaed8 \uc0ac\uc6a9\ndef process_data(operation, *args, **kwargs):\n    \"\"\"\ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\ub294 \ubc94\uc6a9 \ud568\uc218\"\"\"\n    print(f\"\uc791\uc5c5: {operation}\")\n    print(f\"\uc704\uce58 \uc778\uc218: {args}\")\n    print(f\"\ud0a4\uc6cc\ub4dc \uc778\uc218: {kwargs}\")\n\n    if operation == \"add\":\n        return sum(args)\n    elif operation == \"multiply\":\n        result = 1\n        for num in args:\n            result *= num\n        return result\n    elif operation == \"format\":\n        name = kwargs.get(\"name\", \"Unknown\")\n        age = kwargs.get(\"age\", 0)\n        return f\"{name} ({age}\uc138)\"\n\n# \ud568\uc218 \uc0ac\uc6a9 \uc608\uc81c\nprint(f\"\ub367\uc148 \uacb0\uacfc: {process_data('add', 1, 2, 3, 4, 5)}\")\nprint(f\"\uacf1\uc148 \uacb0\uacfc: {process_data('multiply', 2, 3, 4)}\")\nprint(f\"\ud3ec\ub9f7 \uacb0\uacfc: {process_data('format', name='\uae40\ucca0\uc218', age=25)}\")\n\n# \ub9ac\uc2a4\ud2b8\ub098 \ub515\uc154\ub108\ub9ac\ub97c \uc5b8\ud328\ud0b9\ud558\uc5ec \uc804\ub2ec\nnumbers_list = [10, 20, 30, 40]\nperson_dict = {\"name\": \"\ubc15\ubbfc\uc218\", \"age\": 28, \"city\": \"\ubd80\uc0b0\"}\n\nprint(f\"\ub9ac\uc2a4\ud2b8 \uc5b8\ud328\ud0b9: {calculate_sum(*numbers_list)}\")\nprint(f\"\ub515\uc154\ub108\ub9ac \uc5b8\ud328\ud0b9: {create_person(**person_dict)}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#4-scope","title":"4. \ubcc0\uc218\uc758 \uc2a4\ucf54\ud504 (Scope)","text":""},{"location":"tutorials/beginner/chapter10_functions_basics/#41","title":"4.1 \uc9c0\uc5ed\ubcc0\uc218\uc640 \uc804\uc5ed\ubcc0\uc218","text":"<pre><code># \uc804\uc5ed\ubcc0\uc218\nglobal_message = \"\uc804\uc5ed \uba54\uc2dc\uc9c0\uc785\ub2c8\ub2e4\"\nglobal_counter = 0\n\ndef demonstrate_scope():\n    \"\"\"\uc2a4\ucf54\ud504 \ud14c\uc2a4\ud2b8 \ud568\uc218\"\"\"\n    # \uc9c0\uc5ed\ubcc0\uc218\n    local_message = \"\uc9c0\uc5ed \uba54\uc2dc\uc9c0\uc785\ub2c8\ub2e4\"\n    local_counter = 10\n\n    print(f\"\ud568\uc218 \ub0b4\ubd80:\")\n    print(f\"  \uc9c0\uc5ed \uba54\uc2dc\uc9c0: {local_message}\")\n    print(f\"  \uc9c0\uc5ed \uce74\uc6b4\ud130: {local_counter}\")\n    print(f\"  \uc804\uc5ed \uba54\uc2dc\uc9c0: {global_message}\")  # \uc804\uc5ed\ubcc0\uc218 \uc811\uadfc \uac00\ub2a5\n    print(f\"  \uc804\uc5ed \uce74\uc6b4\ud130: {global_counter}\")\n\n# \ud568\uc218 \ud638\ucd9c\ndemonstrate_scope()\n\nprint(f\"\\n\ud568\uc218 \uc678\ubd80:\")\nprint(f\"  \uc804\uc5ed \uba54\uc2dc\uc9c0: {global_message}\")\nprint(f\"  \uc804\uc5ed \uce74\uc6b4\ud130: {global_counter}\")\n\n# print(local_message)  # \uc624\ub958! \uc9c0\uc5ed\ubcc0\uc218\ub294 \ud568\uc218 \uc678\ubd80\uc5d0\uc11c \uc811\uadfc \ubd88\uac00\n\n# \ubcc0\uc218 \uc774\ub984\uc774 \uac19\uc744 \ub54c\nuser_name = \"\uc804\uc5ed \uc0ac\uc6a9\uc790\"\n\ndef greet_user():\n    user_name = \"\uc9c0\uc5ed \uc0ac\uc6a9\uc790\"  # \uc9c0\uc5ed\ubcc0\uc218\uac00 \uc804\uc5ed\ubcc0\uc218\ub97c \uac00\ub9bc\n    print(f\"\uc548\ub155\ud558\uc138\uc694, {user_name}\ub2d8!\")\n\ngreet_user()\nprint(f\"\uc804\uc5ed \ubcc0\uc218: {user_name}\")  # \uc804\uc5ed\ubcc0\uc218\ub294 \ubcc0\uacbd\ub418\uc9c0 \uc54a\uc74c\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#42-global-nonlocal","title":"4.2 global\uacfc nonlocal \ud0a4\uc6cc\ub4dc","text":"<pre><code># global \ud0a4\uc6cc\ub4dc \uc0ac\uc6a9\naccount_balance = 1000  # \uc804\uc5ed\ubcc0\uc218\n\ndef deposit(amount):\n    \"\"\"\uc785\uae08 \ud568\uc218\"\"\"\n    global account_balance  # \uc804\uc5ed\ubcc0\uc218 \uc218\uc815 \uc120\uc5b8\n    account_balance += amount\n    print(f\"{amount}\uc6d0 \uc785\uae08. \uc794\uc561: {account_balance}\uc6d0\")\n\ndef withdraw(amount):\n    \"\"\"\ucd9c\uae08 \ud568\uc218\"\"\"\n    global account_balance\n    if account_balance &gt;= amount:\n        account_balance -= amount\n        print(f\"{amount}\uc6d0 \ucd9c\uae08. \uc794\uc561: {account_balance}\uc6d0\")\n    else:\n        print(\"\uc794\uc561\uc774 \ubd80\uc871\ud569\ub2c8\ub2e4.\")\n\ndef check_balance():\n    \"\"\"\uc794\uc561 \ud655\uc778 \ud568\uc218 (global \uc5c6\uc774\ub3c4 \uc77d\uae30 \uac00\ub2a5)\"\"\"\n    print(f\"\ud604\uc7ac \uc794\uc561: {account_balance}\uc6d0\")\n\n# \uacc4\uc88c \uac70\ub798 \ud14c\uc2a4\ud2b8\ncheck_balance()\ndeposit(500)\nwithdraw(300)\ncheck_balance()\n\n# nonlocal \ud0a4\uc6cc\ub4dc (\uc911\ucca9 \ud568\uc218)\ndef create_counter():\n    \"\"\"\uce74\uc6b4\ud130 \uc0dd\uc131\uae30 \ud568\uc218\"\"\"\n    count = 0  # \uc678\ubd80 \ud568\uc218\uc758 \uc9c0\uc5ed\ubcc0\uc218\n\n    def increment():\n        \"\"\"\uce74\uc6b4\ud130 \uc99d\uac00 \ud568\uc218\"\"\"\n        nonlocal count  # \uc678\ubd80 \ud568\uc218\uc758 \ubcc0\uc218 \uc218\uc815\n        count += 1\n        return count\n\n    def decrement():\n        \"\"\"\uce74\uc6b4\ud130 \uac10\uc18c \ud568\uc218\"\"\"\n        nonlocal count\n        count -= 1\n        return count\n\n    def get_count():\n        \"\"\"\ud604\uc7ac \uce74\uc6b4\ud130 \uac12 \ubc18\ud658\"\"\"\n        return count\n\n    # \ud568\uc218\ub4e4\uc744 \ub515\uc154\ub108\ub9ac\ub85c \ubc18\ud658\n    return {\n        \"increment\": increment,\n        \"decrement\": decrement,\n        \"get_count\": get_count\n    }\n\n# \uce74\uc6b4\ud130 \uc0ac\uc6a9\ncounter = create_counter()\nprint(f\"\ucd08\uae30\uac12: {counter['get_count']()}\")\nprint(f\"\uc99d\uac00 \ud6c4: {counter['increment']()}\")\nprint(f\"\uc99d\uac00 \ud6c4: {counter['increment']()}\")\nprint(f\"\uac10\uc18c \ud6c4: {counter['decrement']()}\")\nprint(f\"\ud604\uc7ac\uac12: {counter['get_count']()}\")\n\n# \uac01 \uce74\uc6b4\ud130\ub294 \ub3c5\ub9bd\uc801\ncounter1 = create_counter()\ncounter2 = create_counter()\n\ncounter1['increment']()\ncounter1['increment']()\ncounter2['increment']()\n\nprint(f\"\uce74\uc6b4\ud1301: {counter1['get_count']()}\")\nprint(f\"\uce74\uc6b4\ud1302: {counter2['get_count']()}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#5-lambda-functions","title":"5. \ub78c\ub2e4 \ud568\uc218 (Lambda Functions)","text":""},{"location":"tutorials/beginner/chapter10_functions_basics/#51","title":"5.1 \ub78c\ub2e4 \ud568\uc218 \uae30\ubcf8","text":"<pre><code># \uc77c\ubc18 \ud568\uc218 vs \ub78c\ub2e4 \ud568\uc218\ndef square(x):\n    \"\"\"\uc81c\uacf1\uc744 \uacc4\uc0b0\ud558\ub294 \uc77c\ubc18 \ud568\uc218\"\"\"\n    return x ** 2\n\n# \uac19\uc740 \uae30\ub2a5\uc758 \ub78c\ub2e4 \ud568\uc218\nsquare_lambda = lambda x: x ** 2\n\n# \ub450 \ud568\uc218 \ubaa8\ub450 \uac19\uc740 \uacb0\uacfc\nprint(f\"\uc77c\ubc18 \ud568\uc218: {square(5)}\")\nprint(f\"\ub78c\ub2e4 \ud568\uc218: {square_lambda(5)}\")\n\n# \uc5ec\ub7ec \ub9e4\uac1c\ubcc0\uc218\ub97c \uac00\uc9c4 \ub78c\ub2e4 \ud568\uc218\nadd = lambda x, y: x + y\nmultiply = lambda x, y, z: x * y * z\ngreet = lambda name: f\"\uc548\ub155\ud558\uc138\uc694, {name}\ub2d8!\"\n\nprint(f\"\ub367\uc148: {add(10, 20)}\")\nprint(f\"\uacf1\uc148: {multiply(2, 3, 4)}\")\nprint(f\"\uc778\uc0ac: {greet('\uae40\ucca0\uc218')}\")\n\n# \uc870\uac74\ubd80 \ub78c\ub2e4 \ud568\uc218\nmax_value = lambda a, b: a if a &gt; b else b\nis_even = lambda n: n % 2 == 0\nabsolute = lambda x: x if x &gt;= 0 else -x\n\nprint(f\"\ucd5c\ub313\uac12: {max_value(15, 23)}\")\nprint(f\"\uc9dd\uc218 \uc5ec\ubd80: {is_even(10)}\")\nprint(f\"\uc808\ub313\uac12: {absolute(-7)}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#52","title":"5.2 \ub78c\ub2e4 \ud568\uc218\uc758 \ud65c\uc6a9","text":"<pre><code># \uc815\ub82c\uc5d0\uc11c \ub78c\ub2e4 \ud568\uc218 \ud65c\uc6a9\nstudents = [\n    {\"name\": \"\uae40\ucca0\uc218\", \"age\": 20, \"grade\": 85},\n    {\"name\": \"\uc774\uc601\ud76c\", \"age\": 22, \"grade\": 92},\n    {\"name\": \"\ubc15\ubbfc\uc218\", \"age\": 19, \"grade\": 78},\n    {\"name\": \"\ucd5c\uc9c0\uc601\", \"age\": 21, \"grade\": 95}\n]\n\n# \ub098\uc774\uc21c \uc815\ub82c\nstudents_by_age = sorted(students, key=lambda student: student[\"age\"])\nprint(\"\ub098\uc774\uc21c \uc815\ub82c:\")\nfor student in students_by_age:\n    print(f\"  {student['name']} ({student['age']}\uc138)\")\n\n# \uc131\uc801\uc21c \uc815\ub82c (\ub0b4\ub9bc\ucc28\uc21c)\nstudents_by_grade = sorted(students, key=lambda student: student[\"grade\"], reverse=True)\nprint(\"\\n\uc131\uc801\uc21c \uc815\ub82c:\")\nfor student in students_by_grade:\n    print(f\"  {student['name']} ({student['grade']}\uc810)\")\n\n# \ud544\ud130\ub9c1\uc5d0\uc11c \ub78c\ub2e4 \ud568\uc218 \ud65c\uc6a9\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# \uc9dd\uc218\ub9cc \ud544\ud130\ub9c1\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\nprint(f\"\\n\uc9dd\uc218\ub4e4: {even_numbers}\")\n\n# 5\ubcf4\ub2e4 \ud070 \uc218\ub4e4\ngreater_than_5 = list(filter(lambda x: x &gt; 5, numbers))\nprint(f\"5\ubcf4\ub2e4 \ud070 \uc218\ub4e4: {greater_than_5}\")\n\n# \uc131\uc801\uc774 90\uc810 \uc774\uc0c1\uc778 \ud559\uc0dd\ub4e4\ntop_students = list(filter(lambda student: student[\"grade\"] &gt;= 90, students))\nprint(f\"\\n\uc6b0\uc218 \ud559\uc0dd\ub4e4:\")\nfor student in top_students:\n    print(f\"  {student['name']} ({student['grade']}\uc810)\")\n\n# map \ud568\uc218\uc640 \ub78c\ub2e4 \ud568\uc218\n# \ubaa8\ub4e0 \uc218\ub97c \uc81c\uacf1\nsquared_numbers = list(map(lambda x: x ** 2, numbers))\nprint(f\"\\n\uc81c\uacf1\uc218\ub4e4: {squared_numbers}\")\n\n# \ud559\uc0dd \uc774\ub984\ub4e4\ub9cc \ucd94\ucd9c\nstudent_names = list(map(lambda student: student[\"name\"], students))\nprint(f\"\ud559\uc0dd \uc774\ub984\ub4e4: {student_names}\")\n\n# \ubcf5\uc7a1\ud55c \ubcc0\ud658\nformatted_students = list(map(\n    lambda s: f\"{s['name']} ({s['age']}\uc138, {s['grade']}\uc810)\", \n    students\n))\nprint(\"\\n\ud3ec\ub9f7\ub41c \ud559\uc0dd \uc815\ubcf4:\")\nfor info in formatted_students:\n    print(f\"  {info}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#6","title":"6. \uc2e4\uc6a9\uc801\uc778 \ud568\uc218 \uc608\uc81c\ub4e4","text":""},{"location":"tutorials/beginner/chapter10_functions_basics/#61","title":"6.1 \uacc4\uc0b0\uae30 \ud568\uc218\ub4e4","text":"<pre><code>class SimpleCalculator:\n    \"\"\"\uac04\ub2e8\ud55c \uacc4\uc0b0\uae30 \ud568\uc218\ub4e4\uc758 \ubaa8\uc74c\"\"\"\n\n    @staticmethod\n    def add(a, b):\n        \"\"\"\ub367\uc148\"\"\"\n        return a + b\n\n    @staticmethod\n    def subtract(a, b):\n        \"\"\"\ube84\uc148\"\"\"\n        return a - b\n\n    @staticmethod\n    def multiply(a, b):\n        \"\"\"\uacf1\uc148\"\"\"\n        return a * b\n\n    @staticmethod\n    def divide(a, b):\n        \"\"\"\ub098\ub217\uc148 (0\uc73c\ub85c \ub098\ub204\uae30 \ubc29\uc9c0)\"\"\"\n        if b == 0:\n            return \"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\"\n        return a / b\n\n    @staticmethod\n    def power(base, exponent):\n        \"\"\"\uac70\ub4ed\uc81c\uacf1\"\"\"\n        return base ** exponent\n\n    @staticmethod\n    def sqrt(number):\n        \"\"\"\uc81c\uacf1\uadfc\"\"\"\n        if number &lt; 0:\n            return \"\uc74c\uc218\uc758 \uc81c\uacf1\uadfc\uc740 \uacc4\uc0b0\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\"\n        return number ** 0.5\n\n# \uacc4\uc0b0\uae30 \ud568\uc218 \ub515\uc154\ub108\ub9ac\noperations = {\n    \"+\": SimpleCalculator.add,\n    \"-\": SimpleCalculator.subtract,\n    \"*\": SimpleCalculator.multiply,\n    \"/\": SimpleCalculator.divide,\n    \"**\": SimpleCalculator.power\n}\n\ndef calculate(a, operator, b):\n    \"\"\"\uacc4\uc0b0 \uc2e4\ud589 \ud568\uc218\"\"\"\n    if operator in operations:\n        result = operations[operator](a, b)\n        return f\"{a} {operator} {b} = {result}\"\n    else:\n        return \"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uc5f0\uc0b0\uc790\uc785\ub2c8\ub2e4.\"\n\n# \uacc4\uc0b0\uae30 \ud14c\uc2a4\ud2b8\nprint(calculate(10, \"+\", 5))\nprint(calculate(10, \"-\", 3))\nprint(calculate(4, \"*\", 7))\nprint(calculate(15, \"/\", 3))\nprint(calculate(2, \"**\", 8))\nprint(calculate(9, \"/\", 0))  # \uc624\ub958 \ucc98\ub9ac \ud14c\uc2a4\ud2b8\n\n# \uc81c\uacf1\uadfc \ud14c\uc2a4\ud2b8\nprint(f\"\u221a16 = {SimpleCalculator.sqrt(16)}\")\nprint(f\"\u221a-4 = {SimpleCalculator.sqrt(-4)}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#62","title":"6.2 \ubb38\uc790\uc5f4 \ucc98\ub9ac \ud568\uc218\ub4e4","text":"<pre><code>def clean_text(text):\n    \"\"\"\ud14d\uc2a4\ud2b8\ub97c \uc815\ub9ac\ud558\ub294 \ud568\uc218\"\"\"\n    # \uc55e\ub4a4 \uacf5\ubc31 \uc81c\uac70 \ud6c4 \uc18c\ubb38\uc790\ub85c \ubcc0\ud658\n    cleaned = text.strip().lower()\n    return cleaned\n\ndef count_words(text):\n    \"\"\"\ud14d\uc2a4\ud2b8\uc758 \ub2e8\uc5b4 \uac1c\uc218\ub97c \uc138\ub294 \ud568\uc218\"\"\"\n    words = text.split()\n    return len(words)\n\ndef count_characters(text, include_spaces=False):\n    \"\"\"\ubb38\uc790 \uac1c\uc218\ub97c \uc138\ub294 \ud568\uc218\"\"\"\n    if include_spaces:\n        return len(text)\n    else:\n        return len(text.replace(\" \", \"\"))\n\ndef is_palindrome(text):\n    \"\"\"\ud68c\ubb38\uc778\uc9c0 \ud655\uc778\ud558\ub294 \ud568\uc218\"\"\"\n    cleaned = clean_text(text).replace(\" \", \"\")\n    return cleaned == cleaned[::-1]\n\ndef capitalize_words(text):\n    \"\"\"\uac01 \ub2e8\uc5b4\uc758 \uccab \uae00\uc790\ub97c \ub300\ubb38\uc790\ub85c \ub9cc\ub4dc\ub294 \ud568\uc218\"\"\"\n    return \" \".join(word.capitalize() for word in text.split())\n\ndef extract_numbers(text):\n    \"\"\"\ud14d\uc2a4\ud2b8\uc5d0\uc11c \uc22b\uc790\ub9cc \ucd94\ucd9c\ud558\ub294 \ud568\uc218\"\"\"\n    numbers = []\n    current_number = \"\"\n\n    for char in text:\n        if char.isdigit() or char == \".\":\n            current_number += char\n        else:\n            if current_number:\n                try:\n                    # \uc815\uc218\uc778\uc9c0 \uc2e4\uc218\uc778\uc9c0 \ud310\ub2e8\ud558\uc5ec \ubcc0\ud658\n                    if \".\" in current_number:\n                        numbers.append(float(current_number))\n                    else:\n                        numbers.append(int(current_number))\n                except ValueError:\n                    pass  # \ubcc0\ud658 \uc2e4\ud328\uc2dc \ubb34\uc2dc\n                current_number = \"\"\n\n    # \ub9c8\uc9c0\ub9c9 \uc22b\uc790 \ucc98\ub9ac\n    if current_number:\n        try:\n            if \".\" in current_number:\n                numbers.append(float(current_number))\n            else:\n                numbers.append(int(current_number))\n        except ValueError:\n            pass\n\n    return numbers\n\n# \ubb38\uc790\uc5f4 \ucc98\ub9ac \ud568\uc218\ub4e4 \ud14c\uc2a4\ud2b8\ntest_text = \"  Hello World! This is a Test Message 123.45 and 678  \"\n\nprint(\"=== \ubb38\uc790\uc5f4 \ucc98\ub9ac \ud568\uc218 \ud14c\uc2a4\ud2b8 ===\")\nprint(f\"\uc6d0\ubcf8 \ud14d\uc2a4\ud2b8: '{test_text}'\")\nprint(f\"\uc815\ub9ac\ub41c \ud14d\uc2a4\ud2b8: '{clean_text(test_text)}'\")\nprint(f\"\ub2e8\uc5b4 \uac1c\uc218: {count_words(test_text)}\")\nprint(f\"\ubb38\uc790 \uac1c\uc218 (\uacf5\ubc31 \ud3ec\ud568): {count_characters(test_text, True)}\")\nprint(f\"\ubb38\uc790 \uac1c\uc218 (\uacf5\ubc31 \uc81c\uc678): {count_characters(test_text, False)}\")\nprint(f\"\uccab \uae00\uc790 \ub300\ubb38\uc790: '{capitalize_words(test_text)}'\")\nprint(f\"\ucd94\ucd9c\ub41c \uc22b\uc790\ub4e4: {extract_numbers(test_text)}\")\n\n# \ud68c\ubb38 \ud14c\uc2a4\ud2b8\npalindrome_tests = [\"level\", \"A man a plan a canal Panama\", \"hello\", \"race car\"]\nprint(f\"\\n\ud68c\ubb38 \ud14c\uc2a4\ud2b8:\")\nfor test in palindrome_tests:\n    result = is_palindrome(test)\n    print(f\"  '{test}' -&gt; {result}\")\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#63","title":"6.3 \ub370\uc774\ud130 \ubd84\uc11d \ud568\uc218\ub4e4","text":"<pre><code>def calculate_statistics(numbers):\n    \"\"\"\uc22b\uc790 \ub9ac\uc2a4\ud2b8\uc758 \uae30\ubcf8 \ud1b5\uacc4\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\"\"\"\n    if not numbers:\n        return None\n\n    total = sum(numbers)\n    count = len(numbers)\n    mean = total / count\n\n    # \uc911\uc559\uac12 \uacc4\uc0b0\n    sorted_numbers = sorted(numbers)\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2\n    else:\n        median = sorted_numbers[n//2]\n\n    # \ucd5c\ube48\uac12 \uacc4\uc0b0 (\uac04\ub2e8\ud55c \ubc29\ubc95)\n    frequency = {}\n    for num in numbers:\n        frequency[num] = frequency.get(num, 0) + 1\n\n    max_freq = max(frequency.values())\n    mode = [num for num, freq in frequency.items() if freq == max_freq]\n\n    return {\n        \"count\": count,\n        \"sum\": total,\n        \"mean\": mean,\n        \"median\": median,\n        \"mode\": mode,\n        \"min\": min(numbers),\n        \"max\": max(numbers),\n        \"range\": max(numbers) - min(numbers)\n    }\n\ndef find_outliers(numbers, threshold=2):\n    \"\"\"\ud3c9\uade0\uc5d0\uc11c \ubc97\uc5b4\ub09c \uac12\ub4e4\uc744 \ucc3e\ub294 \ud568\uc218 (\uac04\ub2e8\ud55c \ubc29\ubc95)\"\"\"\n    if len(numbers) &lt; 2:\n        return []\n\n    mean = sum(numbers) / len(numbers)\n\n    # \ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0\n    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)\n    std_dev = variance ** 0.5\n\n    outliers = []\n    for num in numbers:\n        if abs(num - mean) &gt; threshold * std_dev:\n            outliers.append(num)\n\n    return outliers\n\ndef group_by_range(numbers, range_size=10):\n    \"\"\"\uc22b\uc790\ub4e4\uc744 \ubc94\uc704\ubcc4\ub85c \uadf8\ub8f9\ud654\ud558\ub294 \ud568\uc218\"\"\"\n    if not numbers:\n        return {}\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    groups = {}\n\n    for num in numbers:\n        # \uc5b4\ub290 \uadf8\ub8f9\uc5d0 \uc18d\ud558\ub294\uc9c0 \uacc4\uc0b0\n        group_index = int((num - min_val) // range_size)\n        group_start = min_val + (group_index * range_size)\n        group_end = group_start + range_size - 1\n\n        group_key = f\"{group_start}-{group_end}\"\n\n        if group_key not in groups:\n            groups[group_key] = []\n        groups[group_key].append(num)\n\n    return groups\n\n# \ub370\uc774\ud130 \ubd84\uc11d \ud568\uc218\ub4e4 \ud14c\uc2a4\ud2b8\nsample_data = [85, 92, 78, 95, 88, 76, 94, 82, 90, 87, 91, 89, 15, 98]  # 15\ub294 \uc774\uc0c1\uac12\n\nprint(\"=== \ub370\uc774\ud130 \ubd84\uc11d \ud568\uc218 \ud14c\uc2a4\ud2b8 ===\")\nprint(f\"\uc0d8\ud50c \ub370\uc774\ud130: {sample_data}\")\n\n# \uae30\ubcf8 \ud1b5\uacc4\nstats = calculate_statistics(sample_data)\nif stats:\n    print(f\"\\n\uae30\ubcf8 \ud1b5\uacc4:\")\n    print(f\"  \uac1c\uc218: {stats['count']}\")\n    print(f\"  \ud569\uacc4: {stats['sum']}\")\n    print(f\"  \ud3c9\uade0: {stats['mean']:.2f}\")\n    print(f\"  \uc911\uc559\uac12: {stats['median']:.2f}\")\n    print(f\"  \ucd5c\ube48\uac12: {stats['mode']}\")\n    print(f\"  \ucd5c\uc19f\uac12: {stats['min']}\")\n    print(f\"  \ucd5c\ub313\uac12: {stats['max']}\")\n    print(f\"  \ubc94\uc704: {stats['range']}\")\n\n# \uc774\uc0c1\uac12 \ucc3e\uae30\noutliers = find_outliers(sample_data)\nprint(f\"\\n\uc774\uc0c1\uac12\ub4e4: {outliers}\")\n\n# \ubc94\uc704\ubcc4 \uadf8\ub8f9\ud654\ngroups = group_by_range(sample_data, 10)\nprint(f\"\\n\ubc94\uc704\ubcc4 \uadf8\ub8f9\ud654 (10\ub2e8\uc704):\")\nfor range_key, values in sorted(groups.items()):\n    print(f\"  {range_key}: {values} ({len(values)}\uac1c)\")\n</code></pre>"},{"location":"tutorials/beginner/chapter10_functions_basics/#7","title":"7. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/beginner/chapter10_functions_basics/#1_1","title":"\uc5f0\uc2b5 1: \uc628\ub3c4 \ubcc0\ud658\uae30","text":"<p>\uc12d\uc528, \ud654\uc528, \ucf08\ube48 \uc628\ub3c4\ub97c \uc11c\ub85c \ubcc0\ud658\ud558\ub294 \ud568\uc218\ub4e4\uc744 \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter10_functions_basics/#2_1","title":"\uc5f0\uc2b5 2: \ube44\ubc00\ubc88\ud638 \uac80\uc99d\uae30","text":"<p>\ube44\ubc00\ubc88\ud638\uac00 \uc548\uc804\ud55c\uc9c0 \uac80\uc0ac\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694. (\uae38\uc774, \ub300\uc18c\ubb38\uc790, \uc22b\uc790, \ud2b9\uc218\ubb38\uc790 \ud3ec\ud568 \uc5ec\ubd80)</p>"},{"location":"tutorials/beginner/chapter10_functions_basics/#3_1","title":"\uc5f0\uc2b5 3: \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4 \uc0dd\uc131\uae30","text":"<p>n\ubc88\uc9f8\uae4c\uc9c0\uc758 \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4\uc744 \uc0dd\uc131\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter10_functions_basics/#4","title":"\uc5f0\uc2b5 4: \ud14d\uc2a4\ud2b8 \uc554\ud638\ud654\uae30","text":"<p>\uac04\ub2e8\ud55c \uc2dc\uc800 \uc554\ud638\ub97c \uad6c\ud604\ud558\ub294 \ud568\uc218\ub4e4\uc744 \uc791\uc131\ud558\uc138\uc694. (\uc554\ud638\ud654/\ubcf5\ud638\ud654)</p>"},{"location":"tutorials/beginner/chapter10_functions_basics/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\ud568\uc218\uc758 \uae30\ubcf8 \uac1c\ub150: \ucf54\ub4dc \uc7ac\uc0ac\uc6a9\uc131\uacfc \uac00\ub3c5\uc131\uc744 \ud06c\uac8c \ud5a5\uc0c1\uc2dc\ud0b5\ub2c8\ub2e4</li> <li>\ud568\uc218 \uc815\uc758\uc640 \ud638\ucd9c: def \ud0a4\uc6cc\ub4dc, \ub9e4\uac1c\ubcc0\uc218, \ubc18\ud658\uac12</li> <li>\ub9e4\uac1c\ubcc0\uc218 \uc885\ub958: \uc704\uce58 \uc778\uc218, \ud0a4\uc6cc\ub4dc \uc778\uc218, \uae30\ubcf8\uac12, \uac00\ubcc0 \uc778\uc218</li> <li>\ubcc0\uc218 \uc2a4\ucf54\ud504: \uc9c0\uc5ed\ubcc0\uc218, \uc804\uc5ed\ubcc0\uc218, global, nonlocal</li> <li>\ub78c\ub2e4 \ud568\uc218: \uac04\ub2e8\ud55c \ud568\uc218 \ud45c\ud604, \uace0\ucc28 \ud568\uc218\uc640\uc758 \ud65c\uc6a9</li> <li>\uc2e4\uc6a9\uc801 \uc608\uc81c: \uacc4\uc0b0\uae30, \ubb38\uc790\uc5f4 \ucc98\ub9ac, \ub370\uc774\ud130 \ubd84\uc11d \ud568\uc218\ub4e4</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \uc5d0\ub7ec \ucc98\ub9ac\uc640 \ub514\ubc84\uae45\uc744 \ud559\uc2b5\ud558\uc5ec \ub354\uc6b1 \uc548\uc815\uc801\uc778 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/beginner/chapter10_functions_basics/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ud568\uc218\ub294 \ucf54\ub4dc\uc758 \uc7ac\uc0ac\uc6a9\uc131\uacfc \uac00\ub3c5\uc131\uc744 \ud06c\uac8c \ud5a5\uc0c1\uc2dc\ud0b5\ub2c8\ub2e4</li> <li>\ub9e4\uac1c\ubcc0\uc218\uc640 \ubc18\ud658\uac12\uc744 \uc801\uc808\ud788 \ud65c\uc6a9\ud558\uc5ec \uc720\uc5f0\ud55c \ud568\uc218\ub97c \uc124\uacc4\ud558\uc138\uc694</li> <li>\ubcc0\uc218\uc758 \uc2a4\ucf54\ud504\ub97c \uc774\ud574\ud558\uace0 \uc801\uc808\ud55c \ubc94\uc704\uc5d0\uc11c \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc138\uc694</li> <li>\ub78c\ub2e4 \ud568\uc218\ub294 \uac04\ub2e8\ud55c \ud568\uc218\uac00 \ud544\uc694\ud560 \ub54c \uc720\uc6a9\ud569\ub2c8\ub2e4</li> <li>\ud568\uc218\uba85\uacfc \ub9e4\uac1c\ubcc0\uc218\uba85\uc744 \uba85\ud655\ud558\uac8c \uc9c0\uc5b4 \ucf54\ub4dc\uc758 \uc758\ub3c4\ub97c \ubd84\uba85\ud788 \ud558\uc138\uc694 </li> </ul>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/","title":"Chapter 11: \uc5d0\ub7ec \ucc98\ub9ac\uc640 \ub514\ubc84\uae45 (Error Handling and Debugging)","text":""},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \ud30c\uc774\uc36c\uc758 \ub2e4\uc591\ud55c \uc5d0\ub7ec \ud0c0\uc785\uacfc \uc6d0\uc778 \uc774\ud574\ud558\uae30 - try-except \ubb38\uc744 \uc0ac\uc6a9\ud55c \uc608\uc678 \ucc98\ub9ac \ubc29\ubc95 \uc775\ud788\uae30 - finally\uc640 else \uc808\uc758 \ud65c\uc6a9\ubc95 \uc774\ud574\ud558\uae30 - \uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678 \ub9cc\ub4e4\uae30 - \ud6a8\uacfc\uc801\uc778 \ub514\ubc84\uae45 \uae30\ubc95\uacfc \ub3c4\uad6c \ud65c\uc6a9\ud558\uae30 - \ub85c\uae45\uc744 \ud1b5\ud55c \ud504\ub85c\uadf8\ub7a8 \uc0c1\ud0dc \ucd94\uc801\ud558\uae30 - \uc548\uc804\ud558\uace0 \uacac\uace0\ud55c \ud504\ub85c\uadf8\ub7a8 \uc791\uc131\ud558\uae30</p>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#1","title":"1. \uc5d0\ub7ec\uc640 \uc608\uc678\uc758 \uae30\ubcf8 \uac1c\ub150","text":""},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#11","title":"1.1 \uc5d0\ub7ec\uc758 \uc885\ub958","text":"<pre><code># 1. \ubb38\ubc95 \uc5d0\ub7ec (Syntax Error) - \ucf54\ub4dc \uc2e4\ud589 \uc804\uc5d0 \ubc1c\uc0dd\n# print(\"Hello World\"  # SyntaxError: \uad04\ud638 \ub204\ub77d\n\n# 2. \ub7f0\ud0c0\uc784 \uc5d0\ub7ec (Runtime Error) - \uc2e4\ud589 \uc911\uc5d0 \ubc1c\uc0dd\ndef demonstrate_runtime_errors():\n    \"\"\"\ub2e4\uc591\ud55c \ub7f0\ud0c0\uc784 \uc5d0\ub7ec \uc608\uc81c\"\"\"\n\n    # NameError: \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218 \uc0ac\uc6a9\n    try:\n        print(undefined_variable)\n    except NameError as e:\n        print(f\"NameError: {e}\")\n\n    # TypeError: \uc798\ubabb\ub41c \ud0c0\uc785 \uc5f0\uc0b0\n    try:\n        result = \"hello\" + 5\n    except TypeError as e:\n        print(f\"TypeError: {e}\")\n\n    # ValueError: \uc798\ubabb\ub41c \uac12\n    try:\n        number = int(\"hello\")\n    except ValueError as e:\n        print(f\"ValueError: {e}\")\n\n    # ZeroDivisionError: 0\uc73c\ub85c \ub098\ub204\uae30\n    try:\n        result = 10 / 0\n    except ZeroDivisionError as e:\n        print(f\"ZeroDivisionError: {e}\")\n\n    # IndexError: \uc798\ubabb\ub41c \uc778\ub371\uc2a4\n    try:\n        my_list = [1, 2, 3]\n        print(my_list[10])\n    except IndexError as e:\n        print(f\"IndexError: {e}\")\n\n    # KeyError: \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \ud0a4\n    try:\n        my_dict = {\"a\": 1, \"b\": 2}\n        print(my_dict[\"c\"])\n    except KeyError as e:\n        print(f\"KeyError: {e}\")\n\n# \uc5d0\ub7ec \uc608\uc81c \uc2e4\ud589\ndemonstrate_runtime_errors()\n</code></pre>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#12","title":"1.2 \uc608\uc678 \ucc98\ub9ac\uac00 \ud544\uc694\ud55c \uc774\uc720","text":"<pre><code># \uc608\uc678 \ucc98\ub9ac \uc5c6\uc774 \uc791\uc131\ud55c \ucf54\ub4dc (\ubb38\uc81c \uc788\uc74c)\ndef unsafe_calculator(a, b, operation):\n    \"\"\"\uc548\uc804\ud558\uc9c0 \uc54a\uc740 \uacc4\uc0b0\uae30\"\"\"\n    if operation == \"add\":\n        return a + b\n    elif operation == \"subtract\":\n        return a - b\n    elif operation == \"multiply\":\n        return a * b\n    elif operation == \"divide\":\n        return a / b  # 0\uc73c\ub85c \ub098\ub204\uba74 \ud504\ub85c\uadf8\ub7a8 \uc911\ub2e8!\n\n# \uc608\uc678 \ucc98\ub9ac\uac00 \uc788\ub294 \uc548\uc804\ud55c \ucf54\ub4dc\ndef safe_calculator(a, b, operation):\n    \"\"\"\uc548\uc804\ud55c \uacc4\uc0b0\uae30\"\"\"\n    try:\n        if operation == \"add\":\n            return a + b\n        elif operation == \"subtract\":\n            return a - b\n        elif operation == \"multiply\":\n            return a * b\n        elif operation == \"divide\":\n            if b == 0:\n                return \"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\"\n            return a / b\n        else:\n            return \"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uc5f0\uc0b0\uc785\ub2c8\ub2e4\"\n    except TypeError:\n        return \"\uc62c\ubc14\ub978 \uc22b\uc790\ub97c \uc785\ub825\ud574\uc8fc\uc138\uc694\"\n    except Exception as e:\n        return f\"\uc608\uc0c1\uce58 \ubabb\ud55c \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4: {e}\"\n\n# \ud14c\uc2a4\ud2b8\nprint(\"=== \uc548\uc804\ud55c \uacc4\uc0b0\uae30 \ud14c\uc2a4\ud2b8 ===\")\nprint(safe_calculator(10, 2, \"divide\"))  # \uc815\uc0c1 \uc791\ub3d9\nprint(safe_calculator(10, 0, \"divide\"))  # 0\uc73c\ub85c \ub098\ub204\uae30 \ucc98\ub9ac\nprint(safe_calculator(\"10\", 2, \"add\"))   # \ud0c0\uc785 \uc5d0\ub7ec \ucc98\ub9ac\nprint(safe_calculator(10, 2, \"power\"))   # \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uc5f0\uc0b0\n</code></pre>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#2-try-except","title":"2. try-except \ubb38 \uae30\ubcf8 \uc0ac\uc6a9\ubc95","text":""},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#21-try-except","title":"2.1 \uae30\ubcf8 try-except \uad6c\uc870","text":"<pre><code># \uae30\ubcf8 \ubb38\ubc95\ndef basic_exception_handling():\n    \"\"\"\uae30\ubcf8\uc801\uc778 \uc608\uc678 \ucc98\ub9ac \uc608\uc81c\"\"\"\n\n    # 1. \uae30\ubcf8 try-except\n    try:\n        number = int(input(\"\uc22b\uc790\ub97c \uc785\ub825\ud558\uc138\uc694: \"))\n        result = 100 / number\n        print(f\"\uacb0\uacfc: {result}\")\n    except:\n        print(\"\uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4!\")\n\n    print(\"\ud504\ub85c\uadf8\ub7a8\uc774 \uacc4\uc18d \uc2e4\ud589\ub429\ub2c8\ub2e4.\")\n\n# \ub354 \uad6c\uccb4\uc801\uc778 \uc608\uc678 \ucc98\ub9ac\ndef specific_exception_handling():\n    \"\"\"\uad6c\uccb4\uc801\uc778 \uc608\uc678 \ucc98\ub9ac \uc608\uc81c\"\"\"\n\n    try:\n        # \uc0ac\uc6a9\uc790 \uc785\ub825 \ubc1b\uae30\n        user_input = input(\"\uc22b\uc790\ub97c \uc785\ub825\ud558\uc138\uc694: \")\n        number = int(user_input)\n        result = 100 / number\n        print(f\"100 \u00f7 {number} = {result}\")\n\n    except ValueError:\n        print(\"\uc62c\ubc14\ub978 \uc22b\uc790\ub97c \uc785\ub825\ud574\uc8fc\uc138\uc694!\")\n    except ZeroDivisionError:\n        print(\"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4!\")\n    except Exception as e:\n        print(f\"\uc608\uc0c1\uce58 \ubabb\ud55c \uc624\ub958: {e}\")\n\n# \uc608\uc678 \uc815\ubcf4 \ud65c\uc6a9\ndef detailed_exception_handling():\n    \"\"\"\uc608\uc678 \uc815\ubcf4\ub97c \ud65c\uc6a9\ud55c \ucc98\ub9ac\"\"\"\n\n    numbers = [\"10\", \"20\", \"hello\", \"0\", \"30\"]\n\n    for item in numbers:\n        try:\n            number = int(item)\n            result = 100 / number\n            print(f\"\u2713 {item}: 100 \u00f7 {number} = {result:.2f}\")\n\n        except ValueError as e:\n            print(f\"\u2717 {item}: \uc22b\uc790\uac00 \uc544\ub2d9\ub2c8\ub2e4 - {e}\")\n        except ZeroDivisionError as e:\n            print(f\"\u2717 {item}: 0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4 - {e}\")\n\n# \ud14c\uc2a4\ud2b8 \uc2e4\ud589\nprint(\"=== \uc0c1\uc138\ud55c \uc608\uc678 \ucc98\ub9ac \ud14c\uc2a4\ud2b8 ===\")\ndetailed_exception_handling()\n</code></pre>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#22","title":"2.2 \uc5ec\ub7ec \uc608\uc678 \ucc98\ub9ac\ud558\uae30","text":"<pre><code># \uc5ec\ub7ec \uc608\uc678\ub97c \ud55c \ubc88\uc5d0 \ucc98\ub9ac\ndef multiple_exception_handling():\n    \"\"\"\uc5ec\ub7ec \uc608\uc678\ub97c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\ub4e4\"\"\"\n\n    test_data = [\n        \"123\",      # \uc815\uc0c1\n        \"hello\",    # ValueError\n        \"0\",        # ZeroDivisionError\n        \"\",         # ValueError (\ube48 \ubb38\uc790\uc5f4)\n        \"12.5\",     # ValueError (\uc18c\uc218\uc810)\n    ]\n\n    for data in test_data:\n        try:\n            # \uc5ec\ub7ec \uc5f0\uc0b0 \uc218\ud589\n            number = int(data)\n            result1 = 100 / number\n            result2 = number ** 0.5\n\n            print(f\"\u2713 {data}: 100\u00f7{number}={result1:.2f}, \u221a{number}={result2:.2f}\")\n\n        except (ValueError, TypeError) as e:\n            # \uc5ec\ub7ec \uc608\uc678\ub97c \ud568\uaed8 \ucc98\ub9ac\n            print(f\"\u2717 {data}: \uc785\ub825\uac12 \uc624\ub958 - {e}\")\n\n        except ZeroDivisionError as e:\n            print(f\"\u2717 {data}: \ub098\ub204\uae30 \uc624\ub958 - {e}\")\n\n        except Exception as e:\n            print(f\"\u2717 {data}: \uae30\ud0c0 \uc624\ub958 - {type(e).__name__}: {e}\")\n\n# \uc21c\ucc28\uc801 \uc608\uc678 \ucc98\ub9ac\ndef sequential_exception_handling():\n    \"\"\"\uc21c\ucc28\uc801\uc73c\ub85c \ub2e4\ub978 \uc608\uc678\ub97c \ucc98\ub9ac\"\"\"\n\n    file_names = [\"existing_file.txt\", \"nonexistent.txt\", \"\"]\n\n    for filename in file_names:\n        try:\n            if not filename:\n                raise ValueError(\"\ud30c\uc77c\uba85\uc774 \ube44\uc5b4\uc788\uc2b5\ub2c8\ub2e4\")\n\n            # \ud30c\uc77c \uc5f4\uae30 \uc2dc\ubbac\ub808\uc774\uc158\n            if filename == \"nonexistent.txt\":\n                raise FileNotFoundError(f\"\ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {filename}\")\n\n            print(f\"\u2713 {filename}: \ud30c\uc77c\uc744 \uc131\uacf5\uc801\uc73c\ub85c \ucc98\ub9ac\ud588\uc2b5\ub2c8\ub2e4\")\n\n        except ValueError as e:\n            print(f\"\u2717 \uac12 \uc624\ub958: {e}\")\n        except FileNotFoundError as e:\n            print(f\"\u2717 \ud30c\uc77c \uc624\ub958: {e}\")\n        except PermissionError as e:\n            print(f\"\u2717 \uad8c\ud55c \uc624\ub958: {e}\")\n        except Exception as e:\n            print(f\"\u2717 \uae30\ud0c0 \uc624\ub958: {e}\")\n\nprint(\"=== \uc5ec\ub7ec \uc608\uc678 \ucc98\ub9ac \ud14c\uc2a4\ud2b8 ===\")\nmultiple_exception_handling()\nprint(\"\\n=== \uc21c\ucc28\uc801 \uc608\uc678 \ucc98\ub9ac \ud14c\uc2a4\ud2b8 ===\")\nsequential_exception_handling()\n</code></pre>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#3-else-finally","title":"3. else\uc640 finally \uc808","text":""},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#31-else","title":"3.1 else \uc808 \uc0ac\uc6a9\ubc95","text":"<pre><code>def demonstrate_else_clause():\n    \"\"\"else \uc808 \uc0ac\uc6a9 \uc608\uc81c\"\"\"\n\n    test_cases = [\"10\", \"hello\", \"0\", \"5\"]\n\n    for test_input in test_cases:\n        print(f\"\\n\ud14c\uc2a4\ud2b8 \uc785\ub825: '{test_input}'\")\n\n        try:\n            number = int(test_input)\n            result = 100 / number\n\n        except ValueError:\n            print(\"  \u2717 \uc22b\uc790\uac00 \uc544\ub2d9\ub2c8\ub2e4\")\n        except ZeroDivisionError:\n            print(\"  \u2717 0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n        else:\n            # \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc558\uc744 \ub54c\ub9cc \uc2e4\ud589\n            print(f\"  \u2713 \uc131\uacf5: 100 \u00f7 {number} = {result}\")\n            print(f\"  \u2713 \ucd94\uac00 \ucc98\ub9ac: {number}\uc758 \uc81c\uacf1\uc740 {number**2}\")\n\n# \ud30c\uc77c \ucc98\ub9ac\uc5d0\uc11c else \ud65c\uc6a9\ndef file_processing_with_else():\n    \"\"\"\ud30c\uc77c \ucc98\ub9ac\uc5d0\uc11c else \uc808 \ud65c\uc6a9\"\"\"\n\n    file_data = [\n        (\"valid_data.txt\", \"123\\n456\\n789\"),\n        (\"invalid_data.txt\", \"123\\nhello\\n789\"),\n        (\"\", \"\")  # \ube48 \ud30c\uc77c\uba85\n    ]\n\n    for filename, content in file_data:\n        print(f\"\\n\ud30c\uc77c \ucc98\ub9ac: {filename}\")\n\n        try:\n            if not filename:\n                raise ValueError(\"\ud30c\uc77c\uba85\uc774 \ube44\uc5b4\uc788\uc2b5\ub2c8\ub2e4\")\n\n            # \ud30c\uc77c \ub0b4\uc6a9 \ucc98\ub9ac \uc2dc\ubbac\ub808\uc774\uc158\n            lines = content.strip().split('\\n') if content else []\n            numbers = [int(line) for line in lines if line]\n\n        except ValueError as e:\n            print(f\"  \u2717 \uc624\ub958: {e}\")\n        except Exception as e:\n            print(f\"  \u2717 \uc608\uc0c1\uce58 \ubabb\ud55c \uc624\ub958: {e}\")\n        else:\n            # \uc131\uacf5\uc801\uc73c\ub85c \ucc98\ub9ac\ub41c \uacbd\uc6b0\uc5d0\ub9cc \uc2e4\ud589\n            print(f\"  \u2713 \ud30c\uc77c \ucc98\ub9ac \uc131\uacf5!\")\n            print(f\"  \u2713 \uc77d\uc740 \uc22b\uc790\ub4e4: {numbers}\")\n            if numbers:\n                print(f\"  \u2713 \ud569\uacc4: {sum(numbers)}\")\n                print(f\"  \u2713 \ud3c9\uade0: {sum(numbers)/len(numbers):.2f}\")\n\nprint(\"=== else \uc808 \ud14c\uc2a4\ud2b8 ===\")\ndemonstrate_else_clause()\nprint(\"\\n=== \ud30c\uc77c \ucc98\ub9ac else \uc808 \ud14c\uc2a4\ud2b8 ===\")\nfile_processing_with_else()\n</code></pre>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#32-finally","title":"3.2 finally \uc808 \uc0ac\uc6a9\ubc95","text":"<pre><code>def demonstrate_finally_clause():\n    \"\"\"finally \uc808 \uc0ac\uc6a9 \uc608\uc81c\"\"\"\n\n    test_cases = [\"10\", \"hello\", \"0\"]\n\n    for test_input in test_cases:\n        print(f\"\\n\ud14c\uc2a4\ud2b8 \uc785\ub825: '{test_input}'\")\n\n        try:\n            print(\"  \u2192 try \ube14\ub85d \uc2dc\uc791\")\n            number = int(test_input)\n            result = 100 / number\n            print(f\"  \u2192 \uacc4\uc0b0 \uc131\uacf5: {result}\")\n\n        except ValueError:\n            print(\"  \u2192 except: \uc22b\uc790 \ubcc0\ud658 \uc2e4\ud328\")\n        except ZeroDivisionError:\n            print(\"  \u2192 except: 0\uc73c\ub85c \ub098\ub204\uae30 \uc2e4\ud328\")\n        else:\n            print(\"  \u2192 else: \uc608\uc678 \uc5c6\uc774 \uc131\uacf5\")\n        finally:\n            print(\"  \u2192 finally: \ud56d\uc0c1 \uc2e4\ud589\ub418\ub294 \uc815\ub9ac \uc791\uc5c5\")\n\n# \ub9ac\uc18c\uc2a4 \uad00\ub9ac\uc5d0\uc11c finally \ud65c\uc6a9\nclass DatabaseConnection:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc2dc\ubbac\ub808\uc774\uc158 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, db_name):\n        self.db_name = db_name\n        self.is_connected = False\n\n    def connect(self):\n        print(f\"  \ud83d\udce1 {self.db_name} \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc5f0\uacb0 \uc911...\")\n        self.is_connected = True\n        print(\"  \u2713 \uc5f0\uacb0 \uc131\uacf5\")\n\n    def execute_query(self, query):\n        if not self.is_connected:\n            raise ConnectionError(\"\ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4\")\n\n        if \"DROP\" in query.upper():\n            raise PermissionError(\"DROP \uba85\ub839\uc740 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\")\n\n        print(f\"  \ud83d\udd0d \ucffc\ub9ac \uc2e4\ud589: {query}\")\n        return f\"\ucffc\ub9ac '{query}' \uc2e4\ud589 \uacb0\uacfc\"\n\n    def disconnect(self):\n        if self.is_connected:\n            print(f\"  \ud83d\udd0c {self.db_name} \uc5f0\uacb0 \ud574\uc81c\")\n            self.is_connected = False\n\ndef database_operation(db_name, query):\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5 \ud568\uc218\"\"\"\n    db = DatabaseConnection(db_name)\n\n    try:\n        db.connect()\n        result = db.execute_query(query)\n        print(f\"  \u2713 \uc131\uacf5: {result}\")\n        return result\n\n    except ConnectionError as e:\n        print(f\"  \u2717 \uc5f0\uacb0 \uc624\ub958: {e}\")\n    except PermissionError as e:\n        print(f\"  \u2717 \uad8c\ud55c \uc624\ub958: {e}\")\n    except Exception as e:\n        print(f\"  \u2717 \uae30\ud0c0 \uc624\ub958: {e}\")\n    finally:\n        # \uc608\uc678 \ubc1c\uc0dd \uc5ec\ubd80\uc640 \uad00\uacc4\uc5c6\uc774 \ud56d\uc0c1 \uc5f0\uacb0 \ud574\uc81c\n        db.disconnect()\n        print(\"  \ud83e\uddf9 \ub9ac\uc18c\uc2a4 \uc815\ub9ac \uc644\ub8cc\")\n\n# \ud14c\uc2a4\ud2b8\nprint(\"=== finally \uc808 \ud14c\uc2a4\ud2b8 ===\")\ndemonstrate_finally_clause()\n\nprint(\"\\n=== \ub9ac\uc18c\uc2a4 \uad00\ub9ac finally \ud14c\uc2a4\ud2b8 ===\")\nqueries = [\n    (\"UserDB\", \"SELECT * FROM users\"),\n    (\"UserDB\", \"DROP TABLE users\"),  # \uad8c\ud55c \uc624\ub958\n    (\"\", \"SELECT * FROM products\")    # \ube48 DB\uba85\n]\n\nfor db_name, query in queries:\n    print(f\"\\n\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5: {db_name} - {query}\")\n    database_operation(db_name, query)\n</code></pre>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#4","title":"4. \uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678","text":""},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#41","title":"4.1 \ucee4\uc2a4\ud140 \uc608\uc678 \ud074\ub798\uc2a4 \ub9cc\ub4e4\uae30","text":"<pre><code># \uae30\ubcf8 \uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678\nclass CustomError(Exception):\n    \"\"\"\uae30\ubcf8 \uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678\"\"\"\n    pass\n\nclass ValidationError(Exception):\n    \"\"\"\uc720\ud6a8\uc131 \uac80\uc0ac \uc608\uc678\"\"\"\n    def __init__(self, message, field_name=None):\n        super().__init__(message)\n        self.field_name = field_name\n\n    def __str__(self):\n        if self.field_name:\n            return f\"[{self.field_name}] {super().__str__()}\"\n        return super().__str__()\n\nclass BusinessLogicError(Exception):\n    \"\"\"\ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc608\uc678\"\"\"\n    def __init__(self, message, error_code=None):\n        super().__init__(message)\n        self.error_code = error_code\n\n    def __str__(self):\n        if self.error_code:\n            return f\"[\ucf54\ub4dc: {self.error_code}] {super().__str__()}\"\n        return super().__str__()\n\n# \uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678 \ud65c\uc6a9 \uc608\uc81c\nclass UserAccount:\n    \"\"\"\uc0ac\uc6a9\uc790 \uacc4\uc815 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, username, email, age):\n        self.username = self._validate_username(username)\n        self.email = self._validate_email(email)\n        self.age = self._validate_age(age)\n        self.balance = 0\n\n    def _validate_username(self, username):\n        if not username:\n            raise ValidationError(\"\uc0ac\uc6a9\uc790\uba85\uc740 \ud544\uc218\uc785\ub2c8\ub2e4\", \"username\")\n        if len(username) &lt; 3:\n            raise ValidationError(\"\uc0ac\uc6a9\uc790\uba85\uc740 3\uc790 \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4\", \"username\")\n        if not username.isalnum():\n            raise ValidationError(\"\uc0ac\uc6a9\uc790\uba85\uc740 \uc601\ubb38\uc790\uc640 \uc22b\uc790\ub9cc \ud5c8\uc6a9\ub429\ub2c8\ub2e4\", \"username\")\n        return username\n\n    def _validate_email(self, email):\n        if not email:\n            raise ValidationError(\"\uc774\uba54\uc77c\uc740 \ud544\uc218\uc785\ub2c8\ub2e4\", \"email\")\n        if \"@\" not in email or \".\" not in email:\n            raise ValidationError(\"\uc62c\ubc14\ub978 \uc774\uba54\uc77c \ud615\uc2dd\uc774 \uc544\ub2d9\ub2c8\ub2e4\", \"email\")\n        return email\n\n    def _validate_age(self, age):\n        if not isinstance(age, int):\n            raise ValidationError(\"\ub098\uc774\ub294 \uc815\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4\", \"age\")\n        if age &lt; 0:\n            raise ValidationError(\"\ub098\uc774\ub294 0 \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4\", \"age\")\n        if age &gt; 150:\n            raise ValidationError(\"\ub098\uc774\ub294 150 \uc774\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4\", \"age\")\n        return age\n\n    def deposit(self, amount):\n        if amount &lt;= 0:\n            raise BusinessLogicError(\"\uc785\uae08\uc561\uc740 0\ubcf4\ub2e4 \ucee4\uc57c \ud569\ub2c8\ub2e4\", \"INVALID_AMOUNT\")\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if amount &lt;= 0:\n            raise BusinessLogicError(\"\ucd9c\uae08\uc561\uc740 0\ubcf4\ub2e4 \ucee4\uc57c \ud569\ub2c8\ub2e4\", \"INVALID_AMOUNT\")\n        if amount &gt; self.balance:\n            raise BusinessLogicError(\"\uc794\uc561\uc774 \ubd80\uc871\ud569\ub2c8\ub2e4\", \"INSUFFICIENT_FUNDS\")\n        self.balance -= amount\n        return self.balance\n\n# \uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678 \ud14c\uc2a4\ud2b8\ndef test_custom_exceptions():\n    \"\"\"\uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678 \ud14c\uc2a4\ud2b8\"\"\"\n\n    # \uc720\ud6a8\ud55c \uacc4\uc815 \uc0dd\uc131\n    print(\"=== \uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678 \ud14c\uc2a4\ud2b8 ===\")\n\n    try:\n        user = UserAccount(\"john123\", \"john@email.com\", 25)\n        print(f\"\u2713 \uacc4\uc815 \uc0dd\uc131 \uc131\uacf5: {user.username}\")\n\n        # \uc815\uc0c1 \uac70\ub798\n        user.deposit(1000)\n        print(f\"\u2713 \uc785\uae08 \uc131\uacf5, \uc794\uc561: {user.balance}\")\n\n        user.withdraw(300)\n        print(f\"\u2713 \ucd9c\uae08 \uc131\uacf5, \uc794\uc561: {user.balance}\")\n\n    except ValidationError as e:\n        print(f\"\u2717 \uc720\ud6a8\uc131 \uac80\uc0ac \uc2e4\ud328: {e}\")\n    except BusinessLogicError as e:\n        print(f\"\u2717 \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc624\ub958: {e}\")\n\n    # \uc798\ubabb\ub41c \uacc4\uc815 \uc0dd\uc131 \ud14c\uc2a4\ud2b8\n    invalid_users = [\n        (\"\", \"john@email.com\", 25),           # \ube48 \uc0ac\uc6a9\uc790\uba85\n        (\"jo\", \"john@email.com\", 25),         # \uc9e7\uc740 \uc0ac\uc6a9\uc790\uba85\n        (\"john!\", \"john@email.com\", 25),      # \ud2b9\uc218\ubb38\uc790 \ud3ec\ud568\n        (\"john123\", \"invalid-email\", 25),     # \uc798\ubabb\ub41c \uc774\uba54\uc77c\n        (\"john123\", \"john@email.com\", -5),    # \uc74c\uc218 \ub098\uc774\n        (\"john123\", \"john@email.com\", 200),   # \ub108\ubb34 \ud070 \ub098\uc774\n    ]\n\n    for username, email, age in invalid_users:\n        try:\n            user = UserAccount(username, email, age)\n            print(f\"\u2713 \uacc4\uc815 \uc0dd\uc131: {username}\")\n        except ValidationError as e:\n            print(f\"\u2717 {username}: {e}\")\n        except Exception as e:\n            print(f\"\u2717 {username}: \uc608\uc0c1\uce58 \ubabb\ud55c \uc624\ub958 - {e}\")\n\ntest_custom_exceptions()\n</code></pre>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#42","title":"4.2 \uc608\uc678 \uccb4\uc778\uacfc \ucee8\ud14d\uc2a4\ud2b8","text":"<pre><code># \uc608\uc678 \uccb4\uc778 (Exception Chaining)\ndef divide_numbers(a, b):\n    \"\"\"\uc22b\uc790 \ub098\ub204\uae30 \ud568\uc218\"\"\"\n    try:\n        return a / b\n    except ZeroDivisionError as e:\n        # \uc6d0\ubcf8 \uc608\uc678\ub97c \uc720\uc9c0\ud558\uba74\uc11c \uc0c8\ub85c\uc6b4 \uc608\uc678 \ubc1c\uc0dd\n        raise BusinessLogicError(\"\uacc4\uc0b0 \uc911 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4\") from e\n\ndef process_user_input():\n    \"\"\"\uc0ac\uc6a9\uc790 \uc785\ub825 \ucc98\ub9ac \ud568\uc218\"\"\"\n    try:\n        user_input = \"10 0\"  # \uc2dc\ubbac\ub808\uc774\uc158\n        numbers = user_input.split()\n        a, b = int(numbers[0]), int(numbers[1])\n        result = divide_numbers(a, b)\n        return result\n    except (ValueError, IndexError) as e:\n        raise ValidationError(\"\uc785\ub825 \ud615\uc2dd\uc774 \uc62c\ubc14\ub974\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\") from e\n    except BusinessLogicError:\n        # \uc774\ubbf8 \uc801\uc808\ud55c \uc608\uc678\uc774\ubbc0\ub85c \uadf8\ub300\ub85c \uc804\ud30c\n        raise\n\n# \uc608\uc678 \uccb4\uc778 \ud14c\uc2a4\ud2b8\ndef test_exception_chaining():\n    \"\"\"\uc608\uc678 \uccb4\uc778 \ud14c\uc2a4\ud2b8\"\"\"\n    print(\"\\n=== \uc608\uc678 \uccb4\uc778 \ud14c\uc2a4\ud2b8 ===\")\n\n    try:\n        result = process_user_input()\n        print(f\"\uacb0\uacfc: {result}\")\n    except ValidationError as e:\n        print(f\"\u2717 \uc720\ud6a8\uc131 \uc624\ub958: {e}\")\n        if e.__cause__:\n            print(f\"  \uc6d0\uc778: {type(e.__cause__).__name__}: {e.__cause__}\")\n    except BusinessLogicError as e:\n        print(f\"\u2717 \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc624\ub958: {e}\")\n        if e.__cause__:\n            print(f\"  \uc6d0\uc778: {type(e.__cause__).__name__}: {e.__cause__}\")\n\ntest_exception_chaining()\n</code></pre>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#5","title":"5. \ub514\ubc84\uae45 \uae30\ubc95","text":""},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#51-print","title":"5.1 print\ub97c \uc774\uc6a9\ud55c \ub514\ubc84\uae45","text":"<pre><code>def debug_with_print():\n    \"\"\"print\ub97c \uc0ac\uc6a9\ud55c \ub514\ubc84\uae45 \uc608\uc81c\"\"\"\n\n    def calculate_average(numbers):\n        \"\"\"\ud3c9\uade0 \uacc4\uc0b0 \ud568\uc218 (\ub514\ubc84\uadf8 \ubc84\uc804)\"\"\"\n        print(f\"[DEBUG] \uc785\ub825\ubc1b\uc740 \uc22b\uc790\ub4e4: {numbers}\")\n        print(f\"[DEBUG] \uc785\ub825 \ud0c0\uc785: {type(numbers)}\")\n\n        if not numbers:\n            print(\"[DEBUG] \ube48 \ub9ac\uc2a4\ud2b8\uc785\ub2c8\ub2e4\")\n            return 0\n\n        total = 0\n        for i, num in enumerate(numbers):\n            print(f\"[DEBUG] {i}\ubc88\uc9f8 \uc22b\uc790: {num} (\ud0c0\uc785: {type(num)})\")\n            total += num\n            print(f\"[DEBUG] \ud604\uc7ac \ud569\uacc4: {total}\")\n\n        average = total / len(numbers)\n        print(f\"[DEBUG] \ucd5c\uc885 \ud3c9\uade0: {average}\")\n        return average\n\n    # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\n    test_cases = [\n        [1, 2, 3, 4, 5],\n        [],\n        [10.5, 20.5, 30.0],\n        [\"10\", 20, 30]  # \uc758\ub3c4\uc801 \ud0c0\uc785 \ud63c\uc7ac\n    ]\n\n    for i, test_data in enumerate(test_cases, 1):\n        print(f\"\\n--- \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 {i} ---\")\n        try:\n            result = calculate_average(test_data)\n            print(f\"\u2713 \uacb0\uacfc: {result}\")\n        except Exception as e:\n            print(f\"\u2717 \uc624\ub958 \ubc1c\uc0dd: {type(e).__name__}: {e}\")\n\n# \uc870\uac74\ubd80 \ub514\ubc84\uadf8 \ucd9c\ub825\nDEBUG_MODE = True\n\ndef debug_print(*args, **kwargs):\n    \"\"\"\uc870\uac74\ubd80 \ub514\ubc84\uadf8 \ucd9c\ub825 \ud568\uc218\"\"\"\n    if DEBUG_MODE:\n        print(\"[DEBUG]\", *args, **kwargs)\n\ndef improved_function():\n    \"\"\"\uac1c\uc120\ub41c \ub514\ubc84\uae45 \ud568\uc218\"\"\"\n\n    def process_data(data):\n        debug_print(f\"\ub370\uc774\ud130 \ucc98\ub9ac \uc2dc\uc791: {data}\")\n\n        try:\n            # \ub370\uc774\ud130 \uac80\uc99d\n            if not isinstance(data, list):\n                debug_print(f\"\ub9ac\uc2a4\ud2b8\uac00 \uc544\ub2cc \ud0c0\uc785: {type(data)}\")\n                data = [data]\n\n            # \uc22b\uc790 \ubcc0\ud658\n            numbers = []\n            for item in data:\n                debug_print(f\"\ud56d\ubaa9 \ucc98\ub9ac: {item}\")\n                if isinstance(item, str):\n                    try:\n                        converted = float(item)\n                        debug_print(f\"\ubb38\uc790\uc5f4 '{item}'\uc744 {converted}\ub85c \ubcc0\ud658\")\n                        numbers.append(converted)\n                    except ValueError:\n                        debug_print(f\"\ubcc0\ud658 \uc2e4\ud328: '{item}'\")\n                        continue\n                elif isinstance(item, (int, float)):\n                    numbers.append(item)\n                    debug_print(f\"\uc22b\uc790 \ucd94\uac00: {item}\")\n\n            debug_print(f\"\ucd5c\uc885 \uc22b\uc790 \ub9ac\uc2a4\ud2b8: {numbers}\")\n            return sum(numbers) / len(numbers) if numbers else 0\n\n        except Exception as e:\n            debug_print(f\"\uc608\uc678 \ubc1c\uc0dd: {e}\")\n            raise\n\n    # \ud14c\uc2a4\ud2b8\n    test_data = [\"10\", 20, \"hello\", 30.5, \"40\"]\n    result = process_data(test_data)\n    print(f\"\ucd5c\uc885 \uacb0\uacfc: {result}\")\n\nprint(\"=== Print \ub514\ubc84\uae45 \ud14c\uc2a4\ud2b8 ===\")\ndebug_with_print()\nprint(\"\\n=== \uc870\uac74\ubd80 \ub514\ubc84\uae45 \ud14c\uc2a4\ud2b8 ===\")\nimproved_function()\n</code></pre>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#52-assert","title":"5.2 assert\ub97c \uc774\uc6a9\ud55c \ub514\ubc84\uae45","text":"<pre><code>def debug_with_assert():\n    \"\"\"assert\ub97c \uc0ac\uc6a9\ud55c \ub514\ubc84\uae45\"\"\"\n\n    def validate_user_age(age):\n        \"\"\"\ub098\uc774 \uc720\ud6a8\uc131 \uac80\uc0ac \ud568\uc218\"\"\"\n        # \uc804\uc81c \uc870\uac74 \uac80\uc0ac\n        assert isinstance(age, int), f\"\ub098\uc774\ub294 \uc815\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4. \ubc1b\uc740 \ud0c0\uc785: {type(age)}\"\n        assert age &gt;= 0, f\"\ub098\uc774\ub294 0 \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ubc1b\uc740 \uac12: {age}\"\n        assert age &lt;= 150, f\"\ub098\uc774\ub294 150 \uc774\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4. \ubc1b\uc740 \uac12: {age}\"\n\n        return True\n\n    def calculate_life_stage(age):\n        \"\"\"\uc778\uc0dd \ub2e8\uacc4 \uacc4\uc0b0 \ud568\uc218\"\"\"\n        validate_user_age(age)\n\n        if age &lt; 13:\n            stage = \"child\"\n        elif age &lt; 20:\n            stage = \"teenager\"\n        elif age &lt; 60:\n            stage = \"adult\"\n        else:\n            stage = \"senior\"\n\n        # \ud6c4\uc81c \uc870\uac74 \uac80\uc0ac\n        assert stage in [\"child\", \"teenager\", \"adult\", \"senior\"], \\\n               f\"\uc608\uc0c1\uce58 \ubabb\ud55c \ub2e8\uacc4: {stage}\"\n\n        return stage\n\n    # \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\n    test_ages = [5, 15, 30, 70, -1, 200, \"25\"]\n\n    for age in test_ages:\n        try:\n            stage = calculate_life_stage(age)\n            print(f\"\u2713 \ub098\uc774 {age}: {stage}\")\n        except AssertionError as e:\n            print(f\"\u2717 \ub098\uc774 {age}: \uac80\uc99d \uc2e4\ud328 - {e}\")\n        except Exception as e:\n            print(f\"\u2717 \ub098\uc774 {age}: \uc624\ub958 - {type(e).__name__}: {e}\")\n\n# \ub514\ubc84\uadf8 \ubaa8\ub4dc\uc5d0\uc11c\ub9cc assert \ud65c\uc131\ud654\ndef debug_mode_assert():\n    \"\"\"\ub514\ubc84\uadf8 \ubaa8\ub4dc assert \uc608\uc81c\"\"\"\n\n    def complex_calculation(x, y, operation):\n        \"\"\"\ubcf5\uc7a1\ud55c \uacc4\uc0b0 \ud568\uc218\"\"\"\n        # \ub514\ubc84\uadf8 \ubaa8\ub4dc\uc5d0\uc11c\ub9cc \uc2e4\ud589\ub418\ub294 \uac80\uc99d\n        assert isinstance(x, (int, float)), \"x\ub294 \uc22b\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4\"\n        assert isinstance(y, (int, float)), \"y\ub294 \uc22b\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4\"\n        assert operation in [\"add\", \"subtract\", \"multiply\", \"divide\"], \\\n               f\"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uc5f0\uc0b0: {operation}\"\n\n        if operation == \"add\":\n            result = x + y\n        elif operation == \"subtract\":\n            result = x - y\n        elif operation == \"multiply\":\n            result = x * y\n        elif operation == \"divide\":\n            assert y != 0, \"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\"\n            result = x / y\n\n        # \uacb0\uacfc \uac80\uc99d\n        assert isinstance(result, (int, float)), \"\uacb0\uacfc\uac00 \uc22b\uc790\uac00 \uc544\ub2d9\ub2c8\ub2e4\"\n\n        return result\n\n    # \ud14c\uc2a4\ud2b8\n    operations = [\n        (10, 5, \"add\"),\n        (10, 5, \"divide\"),\n        (10, 0, \"divide\"),  # assert \uc2e4\ud328\n        (10, \"5\", \"multiply\")  # assert \uc2e4\ud328\n    ]\n\n    for x, y, op in operations:\n        try:\n            result = complex_calculation(x, y, op)\n            print(f\"\u2713 {x} {op} {y} = {result}\")\n        except AssertionError as e:\n            print(f\"\u2717 {x} {op} {y}: {e}\")\n        except Exception as e:\n            print(f\"\u2717 {x} {op} {y}: {type(e).__name__}: {e}\")\n\nprint(\"\\n=== Assert \ub514\ubc84\uae45 \ud14c\uc2a4\ud2b8 ===\")\ndebug_with_assert()\nprint(\"\\n=== \ub514\ubc84\uadf8 \ubaa8\ub4dc Assert \ud14c\uc2a4\ud2b8 ===\")\ndebug_mode_assert()\n</code></pre>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#53","title":"5.3 \ub85c\uae45\uc744 \uc774\uc6a9\ud55c \ub514\ubc84\uae45","text":"<pre><code>import logging\nfrom datetime import datetime\n\n# \ub85c\uae45 \uc124\uc815\ndef setup_logging():\n    \"\"\"\ub85c\uae45 \uc124\uc815 \ud568\uc218\"\"\"\n    # \uae30\ubcf8 \uc124\uc815\n    logging.basicConfig(\n        level=logging.DEBUG,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.StreamHandler(),  # \ucf58\uc194 \ucd9c\ub825\n        ]\n    )\n\ndef logging_debug_example():\n    \"\"\"\ub85c\uae45\uc744 \uc0ac\uc6a9\ud55c \ub514\ubc84\uae45 \uc608\uc81c\"\"\"\n\n    # \ub85c\uac70 \uc0dd\uc131\n    logger = logging.getLogger('CalculatorApp')\n\n    class AdvancedCalculator:\n        def __init__(self):\n            self.logger = logging.getLogger('CalculatorApp.Calculator')\n            self.history = []\n\n        def calculate(self, expression):\n            \"\"\"\uc218\uc2dd \uacc4\uc0b0 \ud568\uc218\"\"\"\n            self.logger.info(f\"\uacc4\uc0b0 \uc694\uccad: {expression}\")\n\n            try:\n                # \uc785\ub825 \uac80\uc99d\n                if not expression or not isinstance(expression, str):\n                    self.logger.warning(f\"\uc798\ubabb\ub41c \uc785\ub825: {expression}\")\n                    raise ValueError(\"\uc62c\ubc14\ub978 \uc218\uc2dd\uc744 \uc785\ub825\ud574\uc8fc\uc138\uc694\")\n\n                # \ubcf4\uc548 \uac80\uc0ac (\uac04\ub2e8\ud55c \uc608\uc81c)\n                dangerous_chars = ['import', 'exec', 'eval', '__']\n                for char in dangerous_chars:\n                    if char in expression.lower():\n                        self.logger.error(f\"\ubcf4\uc548 \uc704\ud5d8 \uac10\uc9c0: {char} in {expression}\")\n                        raise SecurityError(\"\uc704\ud5d8\ud55c \ubb38\uc790\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4\")\n\n                # \uacc4\uc0b0 \uc2e4\ud589\n                self.logger.debug(f\"\uc218\uc2dd \ud3c9\uac00 \uc2dc\uc791: {expression}\")\n                result = eval(expression)  # \uc2e4\uc81c\ub85c\ub294 \uc548\uc804\ud55c \ud30c\uc11c \uc0ac\uc6a9 \uad8c\uc7a5\n                self.logger.debug(f\"\uacc4\uc0b0 \uacb0\uacfc: {result}\")\n\n                # \ud788\uc2a4\ud1a0\ub9ac \uc800\uc7a5\n                calculation = {\n                    'expression': expression,\n                    'result': result,\n                    'timestamp': datetime.now()\n                }\n                self.history.append(calculation)\n                self.logger.info(f\"\ud788\uc2a4\ud1a0\ub9ac \uc800\uc7a5: {expression} = {result}\")\n\n                return result\n\n            except ZeroDivisionError:\n                self.logger.error(\"0\uc73c\ub85c \ub098\ub204\uae30 \uc624\ub958 \ubc1c\uc0dd\")\n                raise\n            except SyntaxError as e:\n                self.logger.error(f\"\uc218\uc2dd \uad6c\ubb38 \uc624\ub958: {e}\")\n                raise ValueError(\"\uc62c\ubc14\ub974\uc9c0 \uc54a\uc740 \uc218\uc2dd\uc785\ub2c8\ub2e4\")\n            except Exception as e:\n                self.logger.critical(f\"\uc608\uc0c1\uce58 \ubabb\ud55c \uc624\ub958: {e}\")\n                raise\n\n        def get_history(self):\n            \"\"\"\ud788\uc2a4\ud1a0\ub9ac \uc870\ud68c\"\"\"\n            self.logger.debug(f\"\ud788\uc2a4\ud1a0\ub9ac \uc870\ud68c: {len(self.history)}\uac1c \ud56d\ubaa9\")\n            return self.history\n\n    # \ud14c\uc2a4\ud2b8\n    calculator = AdvancedCalculator()\n    test_expressions = [\n        \"2 + 3\",\n        \"10 / 2\",\n        \"10 / 0\",  # \uc624\ub958\n        \"2 * 3 + 4\",\n        \"invalid expression\",  # \uad6c\ubb38 \uc624\ub958\n        \"import os\"  # \ubcf4\uc548 \uc704\ud5d8\n    ]\n\n    for expr in test_expressions:\n        try:\n            result = calculator.calculate(expr)\n            logger.info(f\"\uc131\uacf5: {expr} = {result}\")\n        except Exception as e:\n            logger.error(f\"\uc2e4\ud328: {expr} - {e}\")\n\n    # \ud788\uc2a4\ud1a0\ub9ac \ucd9c\ub825\n    history = calculator.get_history()\n    logger.info(f\"\ucd1d {len(history)}\uac1c\uc758 \uc131\uacf5\ud55c \uacc4\uc0b0\")\n\n# \ubcf4\uc548 \uc608\uc678 \ud074\ub798\uc2a4\nclass SecurityError(Exception):\n    pass\n\n# \ub85c\uae45 \ub808\ubca8\ubcc4 \uc608\uc81c\ndef logging_levels_example():\n    \"\"\"\ub85c\uae45 \ub808\ubca8\ubcc4 \uc0ac\uc6a9 \uc608\uc81c\"\"\"\n\n    logger = logging.getLogger('UserService')\n\n    def process_user_registration(username, email, password):\n        \"\"\"\uc0ac\uc6a9\uc790 \ub4f1\ub85d \ucc98\ub9ac\"\"\"\n        logger.debug(f\"\uc0ac\uc6a9\uc790 \ub4f1\ub85d \ucc98\ub9ac \uc2dc\uc791: {username}\")\n\n        # INFO: \uc77c\ubc18\uc801\uc778 \uc791\uc5c5 \uc9c4\ud589 \uc0c1\ud669\n        logger.info(f\"\uc0c8 \uc0ac\uc6a9\uc790 \ub4f1\ub85d \uc2dc\ub3c4: {username}\")\n\n        # WARNING: \uc8fc\uc758\ud560 \uc810\n        if len(password) &lt; 8:\n            logger.warning(f\"\uc57d\ud55c \ube44\ubc00\ubc88\ud638 \uc0ac\uc6a9: {username}\")\n\n        # ERROR: \ubcf5\uad6c \uac00\ub2a5\ud55c \uc624\ub958\n        if \"@\" not in email:\n            logger.error(f\"\uc798\ubabb\ub41c \uc774\uba54\uc77c \ud615\uc2dd: {email}\")\n            return False\n\n        # CRITICAL: \uc2ec\uac01\ud55c \uc624\ub958\n        if username in [\"admin\", \"root\", \"system\"]:\n            logger.critical(f\"\uc608\uc57d\ub41c \uc0ac\uc6a9\uc790\uba85 \uc0ac\uc6a9 \uc2dc\ub3c4: {username}\")\n            return False\n\n        logger.info(f\"\uc0ac\uc6a9\uc790 \ub4f1\ub85d \uc131\uacf5: {username}\")\n        return True\n\n    # \ud14c\uc2a4\ud2b8\n    users = [\n        (\"john\", \"john@email.com\", \"password123\"),\n        (\"jane\", \"jane@email.com\", \"123\"),  # \uc57d\ud55c \ube44\ubc00\ubc88\ud638\n        (\"bob\", \"invalid-email\", \"strongpass\"),  # \uc798\ubabb\ub41c \uc774\uba54\uc77c\n        (\"admin\", \"admin@email.com\", \"adminpass\")  # \uc608\uc57d\ub41c \uc774\ub984\n    ]\n\n    for username, email, password in users:\n        success = process_user_registration(username, email, password)\n        if success:\n            logger.info(f\"\u2713 {username} \ub4f1\ub85d \uc644\ub8cc\")\n        else:\n            logger.error(f\"\u2717 {username} \ub4f1\ub85d \uc2e4\ud328\")\n\n# \ud14c\uc2a4\ud2b8 \uc2e4\ud589\nprint(\"=== \ub85c\uae45 \ub514\ubc84\uae45 \ud14c\uc2a4\ud2b8 ===\")\nsetup_logging()\nlogging_debug_example()\nprint(\"\\n=== \ub85c\uae45 \ub808\ubca8\ubcc4 \ud14c\uc2a4\ud2b8 ===\")\nlogging_levels_example()\n</code></pre>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#6","title":"6. \uc2e4\uc6a9\uc801\uc778 \uc5d0\ub7ec \ucc98\ub9ac \ud328\ud134","text":""},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#61","title":"6.1 \uc785\ub825 \uac80\uc99d\uacfc \uc5d0\ub7ec \ucc98\ub9ac","text":"<pre><code>def input_validation_patterns():\n    \"\"\"\uc785\ub825 \uac80\uc99d \ud328\ud134 \uc608\uc81c\"\"\"\n\n    def validate_and_convert_input(user_input, expected_type, min_val=None, max_val=None):\n        \"\"\"\ubc94\uc6a9 \uc785\ub825 \uac80\uc99d \ud568\uc218\"\"\"\n        try:\n            # \ud0c0\uc785 \ubcc0\ud658\n            if expected_type == int:\n                value = int(user_input)\n            elif expected_type == float:\n                value = float(user_input)\n            elif expected_type == str:\n                value = str(user_input).strip()\n                if not value:\n                    raise ValueError(\"\ube48 \ubb38\uc790\uc5f4\uc740 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\")\n            else:\n                raise ValueError(f\"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud0c0\uc785: {expected_type}\")\n\n            # \ubc94\uc704 \uac80\uc99d\n            if min_val is not None and value &lt; min_val:\n                raise ValueError(f\"\uac12\uc774 \ucd5c\uc19f\uac12 {min_val}\ubcf4\ub2e4 \uc791\uc2b5\ub2c8\ub2e4: {value}\")\n            if max_val is not None and value &gt; max_val:\n                raise ValueError(f\"\uac12\uc774 \ucd5c\ub313\uac12 {max_val}\ubcf4\ub2e4 \ud07d\ub2c8\ub2e4: {value}\")\n\n            return value\n\n        except ValueError as e:\n            if \"invalid literal\" in str(e):\n                raise ValueError(f\"'{user_input}'\uc744 {expected_type.__name__}\ub85c \ubcc0\ud658\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n            raise\n\n    # \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc785\ub825 \uc608\uc81c\n    def get_user_info():\n        \"\"\"\uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc785\ub825 \ubc1b\uae30\"\"\"\n        user_inputs = [\n            (\"25\", int, 0, 120),        # \ub098\uc774\n            (\"75.5\", float, 0, 300),    # \uccb4\uc911\n            (\"John Doe\", str, None, None),  # \uc774\ub984\n            (\"-5\", int, 0, 120),        # \uc798\ubabb\ub41c \ub098\uc774\n            (\"hello\", int, 0, 120),     # \uc798\ubabb\ub41c \ud0c0\uc785\n            (\"\", str, None, None)       # \ube48 \ubb38\uc790\uc5f4\n        ]\n\n        field_names = [\"\ub098\uc774\", \"\uccb4\uc911\", \"\uc774\ub984\", \"\ub098\uc774(\uc74c\uc218)\", \"\ub098\uc774(\ubb38\uc790)\", \"\uc774\ub984(\ube48\uac12)\"]\n\n        results = {}\n        for (user_input, expected_type, min_val, max_val), field_name in zip(user_inputs, field_names):\n            try:\n                value = validate_and_convert_input(user_input, expected_type, min_val, max_val)\n                results[field_name] = value\n                print(f\"\u2713 {field_name}: '{user_input}' \u2192 {value}\")\n            except ValueError as e:\n                print(f\"\u2717 {field_name}: {e}\")\n\n        return results\n\n    return get_user_info()\n\n# \ud30c\uc77c \ucc98\ub9ac \uc5d0\ub7ec \ud328\ud134\ndef file_processing_patterns():\n    \"\"\"\ud30c\uc77c \ucc98\ub9ac \uc5d0\ub7ec \ud328\ud134\"\"\"\n\n    def safe_file_operation(filename, operation=\"read\", content=None):\n        \"\"\"\uc548\uc804\ud55c \ud30c\uc77c \uc791\uc5c5 \ud568\uc218\"\"\"\n        try:\n            if operation == \"read\":\n                # \ud30c\uc77c \uc874\uc7ac \ud655\uc778\n                import os\n                if not os.path.exists(filename):\n                    raise FileNotFoundError(f\"\ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {filename}\")\n\n                # \ud30c\uc77c \uc77d\uae30\n                with open(filename, 'r', encoding='utf-8') as file:\n                    content = file.read()\n                    print(f\"\u2713 \ud30c\uc77c \uc77d\uae30 \uc131\uacf5: {len(content)}\uc790\")\n                    return content\n\n            elif operation == \"write\":\n                if content is None:\n                    raise ValueError(\"\uc4f8 \ub0b4\uc6a9\uc774 \uc81c\uacf5\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4\")\n\n                # \ud30c\uc77c \uc4f0\uae30\n                with open(filename, 'w', encoding='utf-8') as file:\n                    file.write(content)\n                    print(f\"\u2713 \ud30c\uc77c \uc4f0\uae30 \uc131\uacf5: {len(content)}\uc790\")\n                    return True\n\n        except FileNotFoundError as e:\n            print(f\"\u2717 \ud30c\uc77c \uc5c6\uc74c: {e}\")\n            return None\n        except PermissionError as e:\n            print(f\"\u2717 \uad8c\ud55c \uc624\ub958: {e}\")\n            return None\n        except UnicodeDecodeError as e:\n            print(f\"\u2717 \uc778\ucf54\ub529 \uc624\ub958: {e}\")\n            return None\n        except Exception as e:\n            print(f\"\u2717 \uc608\uc0c1\uce58 \ubabb\ud55c \uc624\ub958: {type(e).__name__}: {e}\")\n            return None\n\n    # \ud14c\uc2a4\ud2b8\n    test_operations = [\n        (\"existing_file.txt\", \"read\", None),\n        (\"nonexistent.txt\", \"read\", None),\n        (\"output.txt\", \"write\", \"\uc548\ub155\ud558\uc138\uc694!\\n\ud14c\uc2a4\ud2b8 \ub0b4\uc6a9\uc785\ub2c8\ub2e4.\"),\n        (\"/root/protected.txt\", \"write\", \"\uad8c\ud55c \ud14c\uc2a4\ud2b8\")  # \uad8c\ud55c \uc624\ub958 (\uc2dc\ubbac\ub808\uc774\uc158)\n    ]\n\n    for filename, operation, content in test_operations:\n        print(f\"\\n\ud30c\uc77c \uc791\uc5c5: {filename} ({operation})\")\n        result = safe_file_operation(filename, operation, content)\n\n# \ub124\ud2b8\uc6cc\ud06c \uc694\uccad \uc5d0\ub7ec \ud328\ud134\ndef network_request_patterns():\n    \"\"\"\ub124\ud2b8\uc6cc\ud06c \uc694\uccad \uc5d0\ub7ec \ud328\ud134 (\uc2dc\ubbac\ub808\uc774\uc158)\"\"\"\n\n    import time\n    import random\n\n    class NetworkError(Exception):\n        pass\n\n    class TimeoutError(NetworkError):\n        pass\n\n    class ConnectionError(NetworkError):\n        pass\n\n    def simulate_network_request(url, timeout=5, max_retries=3):\n        \"\"\"\ub124\ud2b8\uc6cc\ud06c \uc694\uccad \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n\n        for attempt in range(max_retries):\n            try:\n                print(f\"  \uc2dc\ub3c4 {attempt + 1}/{max_retries}: {url}\")\n\n                # \ub79c\ub364\ud558\uac8c \ub2e4\uc591\ud55c \uc0c1\ud669 \uc2dc\ubbac\ub808\uc774\uc158\n                rand = random.random()\n                if rand &lt; 0.3:  # 30% \ud655\ub960\ub85c \uc5f0\uacb0 \uc624\ub958\n                    raise ConnectionError(\"\uc11c\ubc84\uc5d0 \uc5f0\uacb0\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n                elif rand &lt; 0.5:  # 20% \ud655\ub960\ub85c \ud0c0\uc784\uc544\uc6c3\n                    raise TimeoutError(\"\uc694\uccad \uc2dc\uac04\uc774 \ucd08\uacfc\ub418\uc5c8\uc2b5\ub2c8\ub2e4\")\n                elif rand &lt; 0.7:  # 20% \ud655\ub960\ub85c \uc77c\ubc18\uc801\uc778 \ub124\ud2b8\uc6cc\ud06c \uc624\ub958\n                    raise NetworkError(\"\ub124\ud2b8\uc6cc\ud06c \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4\")\n\n                # \uc131\uacf5\n                time.sleep(0.1)  # \uc2e4\uc81c \uc694\uccad \uc2dc\ubbac\ub808\uc774\uc158\n                return f\"\uc131\uacf5: {url}\uc5d0\uc11c \ub370\uc774\ud130\ub97c \ubc1b\uc558\uc2b5\ub2c8\ub2e4\"\n\n            except (ConnectionError, TimeoutError) as e:\n                print(f\"    \u2717 {e}\")\n                if attempt &lt; max_retries - 1:\n                    wait_time = (attempt + 1) * 2  # \uc7ac\uc2dc\ub3c4 \uac04\uaca9 \uc99d\uac00\n                    print(f\"    \u23f3 {wait_time}\ucd08 \ud6c4 \uc7ac\uc2dc\ub3c4...\")\n                    time.sleep(0.1)  # \uc2e4\uc81c\ub85c\ub294 time.sleep(wait_time)\n                else:\n                    print(f\"    \u2717 \ucd5c\ub300 \uc7ac\uc2dc\ub3c4 \ud69f\uc218 \ucd08\uacfc\")\n                    raise\n            except NetworkError as e:\n                print(f\"    \u2717 \ubcf5\uad6c \ubd88\uac00\ub2a5\ud55c \uc624\ub958: {e}\")\n                raise\n            except Exception as e:\n                print(f\"    \u2717 \uc608\uc0c1\uce58 \ubabb\ud55c \uc624\ub958: {e}\")\n                raise\n\n    # \ud14c\uc2a4\ud2b8\n    urls = [\n        \"https://api.example.com/data\",\n        \"https://api.example.com/users\",\n        \"https://api.example.com/products\"\n    ]\n\n    for url in urls:\n        try:\n            result = simulate_network_request(url)\n            print(f\"\u2713 {result}\")\n        except Exception as e:\n            print(f\"\u2717 \ucd5c\uc885 \uc2e4\ud328: {e}\")\n\nprint(\"=== \uc785\ub825 \uac80\uc99d \ud328\ud134 \ud14c\uc2a4\ud2b8 ===\")\ninput_validation_patterns()\n\nprint(\"\\n=== \ud30c\uc77c \ucc98\ub9ac \ud328\ud134 \ud14c\uc2a4\ud2b8 ===\")\nfile_processing_patterns()\n\nprint(\"\\n=== \ub124\ud2b8\uc6cc\ud06c \uc694\uccad \ud328\ud134 \ud14c\uc2a4\ud2b8 ===\")\nnetwork_request_patterns()\n</code></pre>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#7","title":"7. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#1_1","title":"\uc5f0\uc2b5 1: \uc548\uc804\ud55c \uc0ac\uc6a9\uc790 \uc785\ub825 \ucc98\ub9ac\uae30","text":"<p>\ub2e4\uc591\ud55c \ud0c0\uc785\uc758 \uc0ac\uc6a9\uc790 \uc785\ub825\uc744 \uc548\uc804\ud558\uac8c \ucc98\ub9ac\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#2","title":"\uc5f0\uc2b5 2: \ub85c\uadf8 \ud30c\uc77c \ubd84\uc11d\uae30","text":"<p>\ub85c\uadf8 \ud30c\uc77c\uc744 \uc77d\uc5b4\uc11c \uc5d0\ub7ec \ud328\ud134\uc744 \ubd84\uc11d\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#3-api","title":"\uc5f0\uc2b5 3: \uacac\uace0\ud55c API \ud074\ub77c\uc774\uc5b8\ud2b8","text":"<p>\ub124\ud2b8\uc6cc\ud06c \uc624\ub958\uc640 \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1\uc744 \ud3ec\ud568\ud55c API \ud074\ub77c\uc774\uc5b8\ud2b8\ub97c \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#4_1","title":"\uc5f0\uc2b5 4: \ub370\uc774\ud130 \uac80\uc99d \uc2dc\uc2a4\ud15c","text":"<p>\ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \uad6c\uc870\uc758 \uc720\ud6a8\uc131\uc744 \uac80\uc0ac\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4dc\uc138\uc694.</p>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\uc5d0\ub7ec\uc640 \uc608\uc678: \ubb38\ubc95 \uc5d0\ub7ec\uc640 \ub7f0\ud0c0\uc784 \uc5d0\ub7ec\uc758 \ucc28\uc774\uc810\uacfc \uc885\ub958</li> <li>try-except \ubb38: \uae30\ubcf8 \uc608\uc678 \ucc98\ub9ac\uc640 \ub2e4\uc591\ud55c \ud65c\uc6a9\ubc95</li> <li>else\uc640 finally: \uc608\uc678 \ucc98\ub9ac \ud750\ub984 \uc81c\uc5b4\uc640 \ub9ac\uc18c\uc2a4 \uc815\ub9ac</li> <li>\uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678: \ucee4\uc2a4\ud140 \uc608\uc678 \ud074\ub798\uc2a4\uc640 \uc608\uc678 \uccb4\uc778</li> <li>\ub514\ubc84\uae45 \uae30\ubc95: print, assert, \ub85c\uae45\uc744 \ud65c\uc6a9\ud55c \ub514\ubc84\uae45</li> <li>\uc2e4\uc6a9\uc801 \ud328\ud134: \uc785\ub825 \uac80\uc99d, \ud30c\uc77c \ucc98\ub9ac, \ub124\ud2b8\uc6cc\ud06c \uc694\uccad \ub4f1</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \ud30c\uc77c \uc785\ucd9c\ub825\uc744 \ud559\uc2b5\ud558\uc5ec \ub370\uc774\ud130 \uc800\uc7a5\uacfc \uc77d\uae30 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/beginner/chapter11_error_handling_debugging/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\uc608\uc678 \ucc98\ub9ac\ub294 \ud504\ub85c\uadf8\ub7a8\uc758 \uc548\uc815\uc131\uc744 \uc704\ud574 \ud544\uc218\uc801\uc785\ub2c8\ub2e4</li> <li>\uad6c\uccb4\uc801\uc778 \uc608\uc678 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\ud655\ud55c \ucc98\ub9ac\ub97c \ud558\uc138\uc694</li> <li>finally \ube14\ub85d\uc73c\ub85c \ub9ac\uc18c\uc2a4 \uc815\ub9ac\ub97c \ubcf4\uc7a5\ud558\uc138\uc694</li> <li>\uc801\uc808\ud55c \ub85c\uae45\uc73c\ub85c \ub514\ubc84\uae45\uacfc \ubaa8\ub2c8\ud130\ub9c1\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \ud558\uc138\uc694</li> <li>\uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678\ub85c \uc758\ubbf8\uc788\ub294 \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \uc81c\uacf5\ud558\uc138\uc694 </li> </ul>"},{"location":"tutorials/intermediate/","title":"\ud83d\udfe1 \uc911\uae09 \ud30c\uc774\uc36c \ud29c\ud1a0\ub9ac\uc5bc","text":"<p>\ucd08\uae09 \uacfc\uc815\uc744 \ub9c8\uce5c \ubd84\ub4e4\uc744 \uc704\ud55c \uc2e4\ubb34 \uc911\uc2ec\uc758 \ud30c\uc774\uc36c \ud559\uc2b5 \uacfc\uc815\uc785\ub2c8\ub2e4. \uc2e4\uc81c \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \ud65c\uc6a9\ud560 \uc218 \uc788\ub294 \uace0\uae09 \uae30\ubc95\ub4e4\uc744 \ubc30\uc6cc\ubcf4\uc138\uc694.</p>"},{"location":"tutorials/intermediate/#_2","title":"\ud83c\udfaf \uacfc\uc815 \ubaa9\ud45c","text":"<ul> <li>\uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d \ub9c8\uc2a4\ud130</li> <li>\ud30c\uc77c \ucc98\ub9ac \ubc0f \ub370\uc774\ud130 \ub2e4\ub8e8\uae30</li> <li>\uc6f9 \uac1c\ubc1c \ubc0f API \ud65c\uc6a9</li> <li>\uc2e4\ubb34\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uace0\uae09 \uae30\ubc95 \uc2b5\ub4dd</li> <li>\ud6a8\uc728\uc801\uc778 \ucf54\ub4dc \uc791\uc131 \ub2a5\ub825 \uac1c\ubc1c</li> </ul>"},{"location":"tutorials/intermediate/#_3","title":"\ud83d\udcda \ucc55\ud130 \ubaa9\ub85d","text":""},{"location":"tutorials/intermediate/#_4","title":"\uace0\uae09 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ubc95","text":"<ol> <li>\uace0\uae09 \ud568\uc218</li> <li>\ub78c\ub2e4 \ud568\uc218\uc640 \uace0\ucc28 \ud568\uc218</li> <li>\ud074\ub85c\uc800\uc640 \ub370\ucf54\ub808\uc774\ud130</li> <li> <p>\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d</p> </li> <li> <p>\ud30c\uc77c \ucc98\ub9ac\uc640 \ub370\uc774\ud130 \ud615\uc2dd</p> </li> <li>\ub2e4\uc591\ud55c \ud30c\uc77c \ud615\uc2dd \ucc98\ub9ac</li> <li>CSV, JSON, XML \ub2e4\ub8e8\uae30</li> <li> <p>\ub370\uc774\ud130 \ud30c\uc2f1\uacfc \ubcc0\ud658</p> </li> <li> <p>\uc815\uaddc\ud45c\ud604\uc2dd</p> </li> <li>\ud328\ud134 \ub9e4\uce6d\uacfc \ud14d\uc2a4\ud2b8 \ucc98\ub9ac</li> <li>\uc815\uaddc\uc2dd \ubb38\ubc95\uacfc \ud65c\uc6a9</li> <li>\uc2e4\ubb34 \uc608\uc81c\ub4e4</li> </ol>"},{"location":"tutorials/intermediate/#_5","title":"\uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d","text":"<ol> <li>\uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08</li> <li>\ud074\ub798\uc2a4\uc640 \uac1d\uccb4 \uac1c\ub150</li> <li>\ucea1\uc290\ud654\uc640 \uc815\ubcf4 \uc740\ub2c9</li> <li> <p>\uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790</p> </li> <li> <p>\uc0c1\uc18d\uacfc \ub2e4\ud615\uc131</p> </li> <li>\ud074\ub798\uc2a4 \uc0c1\uc18d \uad6c\uc870</li> <li>\uba54\uc11c\ub4dc \uc624\ubc84\ub77c\uc774\ub529</li> <li> <p>\ucd94\uc0c1 \ud074\ub798\uc2a4\uc640 \uc778\ud130\ud398\uc774\uc2a4</p> </li> <li> <p>\ub9e4\uc9c1 \uba54\uc11c\ub4dc</p> </li> <li>\ud2b9\uc218 \uba54\uc11c\ub4dc\ub4e4 \ud65c\uc6a9</li> <li>\uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529</li> <li>\ucee4\uc2a4\ud140 \uac1d\uccb4 \ub3d9\uc791 \uc815\uc758</li> </ol>"},{"location":"tutorials/intermediate/#_6","title":"\ubaa8\ub4c8\ud654\uc640 \ud328\ud0a4\uc9d5","text":"<ol> <li>\ubaa8\ub4c8\uacfc \ud328\ud0a4\uc9c0</li> <li>\ubaa8\ub4c8 \uc791\uc131\uacfc \uc784\ud3ec\ud2b8</li> <li>\ud328\ud0a4\uc9c0 \uad6c\uc870 \uc124\uacc4</li> <li> <p>\ub77c\uc774\ube0c\ub7ec\ub9ac \ubc30\ud3ec</p> </li> <li> <p>\uace0\uae09 \uc608\uc678 \ucc98\ub9ac</p> </li> <li>\ucee4\uc2a4\ud140 \uc608\uc678 \ud074\ub798\uc2a4</li> <li>\uc608\uc678 \uccb4\uc774\ub2dd</li> <li>\ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800</li> </ol>"},{"location":"tutorials/intermediate/#_7","title":"\uace0\uae09 \uae30\ub2a5\ub4e4","text":"<ol> <li>\uc774\ud130\ub808\uc774\ud130\uc640 \uc81c\ub108\ub808\uc774\ud130</li> <li>\ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4 \ub9cc\ub4e4\uae30</li> <li>\uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \ucc98\ub9ac</li> <li> <p>yield\uc640 \uc81c\ub108\ub808\uc774\ud130 \ud568\uc218</p> </li> <li> <p>\uba40\ud2f0\uc2a4\ub808\ub529\uacfc \ube44\ub3d9\uae30</p> <ul> <li>\ub3d9\uc2dc\uc131 \ud504\ub85c\uadf8\ub798\ubc0d</li> <li>\uc2a4\ub808\ub4dc\uc640 \ud504\ub85c\uc138\uc2a4</li> <li>asyncio\uc640 \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d</li> </ul> </li> <li> <p>\ud14c\uc2a4\ud305\uacfc \ub514\ubc84\uae45</p> <ul> <li>\ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uc791\uc131</li> <li>\ud14c\uc2a4\ud2b8 \uc8fc\ub3c4 \uac1c\ubc1c (TDD)</li> <li>\uace0\uae09 \ub514\ubc84\uae45 \uae30\ubc95</li> </ul> </li> </ol>"},{"location":"tutorials/intermediate/#_8","title":"\uc678\ubd80 \uc2dc\uc2a4\ud15c \uc5f0\ub3d9","text":"<ol> <li> <p>\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9</p> <ul> <li>SQLite, MySQL, PostgreSQL</li> <li>ORM \uc0ac\uc6a9\ubc95</li> <li>\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uacc4</li> </ul> </li> <li> <p>\uc6f9 \uc2a4\ud06c\ub798\ud551\uacfc API</p> <ul> <li>requests\uc640 BeautifulSoup</li> <li>RESTful API \ud65c\uc6a9</li> <li>\uc6f9 \ub370\uc774\ud130 \uc218\uc9d1</li> </ul> </li> <li> <p>GUI \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08</p> <ul> <li>tkinter\ub85c \ub370\uc2a4\ud06c\ud1b1 \uc571 \ub9cc\ub4e4\uae30</li> <li>\uc774\ubca4\ud2b8 \ucc98\ub9ac</li> <li>\uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4 \uc124\uacc4</li> </ul> </li> </ol>"},{"location":"tutorials/intermediate/#_9","title":"\ud83d\udcca \ud559\uc2b5 \uac00\uc774\ub4dc","text":""},{"location":"tutorials/intermediate/#_10","title":"\uad8c\uc7a5 \ud559\uc2b5 \uc21c\uc11c","text":"<ol> <li>\uae30\ubcf8\uae30 \ub2e4\uc9c0\uae30 (1-3\uc7a5): \uace0\uae09 \ubb38\ubc95 \uc775\ud788\uae30</li> <li>OOP \ub9c8\uc2a4\ud130 (4-6\uc7a5): \uac1d\uccb4\uc9c0\ud5a5 \uc644\uc804 \uc815\ubcf5</li> <li>\ubaa8\ub4c8\ud654 (7-8\uc7a5): \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ucf54\ub4dc \uc791\uc131</li> <li>\uace0\uae09 \uae30\ub2a5 (9-11\uc7a5): \ud6a8\uc728\uc801\uc778 \ud504\ub85c\uadf8\ub798\ubc0d</li> <li>\uc2e4\ubb34 \uc5f0\ub3d9 (12-14\uc7a5): \uc678\ubd80 \uc2dc\uc2a4\ud15c\uacfc\uc758 \uc5f0\ub3d9</li> </ol>"},{"location":"tutorials/intermediate/#_11","title":"\uc608\uc0c1 \ud559\uc2b5 \uc2dc\uac04","text":"<ul> <li>\uc804\uccb4 \uacfc\uc815: 6-8\uc8fc (\uc8fc 4-5\uc2dc\uac04 \ud559\uc2b5 \uae30\uc900)</li> <li>\ucc55\ud130\ub2f9: 4-6\uc2dc\uac04</li> <li>\ud504\ub85c\uc81d\ud2b8 \uc2e4\uc2b5: \uc8fc 2\uc2dc\uac04</li> </ul>"},{"location":"tutorials/intermediate/#_12","title":"\ud83d\udca1 \uc2e4\uc2b5 \ud504\ub85c\uc81d\ud2b8 \uc544\uc774\ub514\uc5b4","text":"<p>\uac01 \uc139\uc158 \uc644\ub8cc \ud6c4 \ub3c4\uc804\ud574\ubcfc \uc218 \uc788\ub294 \ud504\ub85c\uc81d\ud2b8\ub4e4:</p> <ul> <li>\uc6f9 \uc2a4\ud06c\ub798\ud37c: \ub274\uc2a4 \uc0ac\uc774\ud2b8\uc5d0\uc11c \uae30\uc0ac \uc218\uc9d1</li> <li>\ub370\uc774\ud130 \ubd84\uc11d \ub3c4\uad6c: CSV \ud30c\uc77c \ubd84\uc11d \ud504\ub85c\uadf8\ub7a8</li> <li>\uac04\ub2e8\ud55c \uc6f9 API: Flask\ub85c RESTful API \uad6c\ucd95</li> <li>GUI \uc560\ud50c\ub9ac\ucf00\uc774\uc158: \ud30c\uc77c \uad00\ub9ac\uc790 \ub610\ub294 \ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130</li> </ul>"},{"location":"tutorials/intermediate/#_13","title":"\ud83c\udf93 \uc644\ub8cc \ud6c4 \ub2e4\uc74c \ub2e8\uacc4","text":"<p>\uc911\uae09 \uacfc\uc815\uc744 \uc644\ub8cc\ud558\uba74: - \uace0\uae09 \ud29c\ud1a0\ub9ac\uc5bc\ub85c \uc9c4\ud589 - \uc2e4\ubb34 \ud504\ub85c\uc81d\ud2b8\uc5d0 \ubc14\ub85c \uc801\uc6a9 \uac00\ub2a5 - \ud30c\uc774\uc36c \uac1c\ubc1c\uc790\ub85c\uc11c \uae30\ubcf8 \uc5ed\ub7c9 \uc644\uc131</p> <p>\ucd08\uae09 \uacfc\uc815\uc744 \uc644\ub8cc\ud558\uc168\ub2e4\uba74 Chapter 1\ubd80\ud130 \uc2dc\uc791\ud574\ubcf4\uc138\uc694! \ud83d\ude80 </p>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/","title":"Chapter 1: \uace0\uae09 \ud568\uc218 \uae30\ubc95 (Advanced Function Techniques)","text":""},{"location":"tutorials/intermediate/chapter01_advanced_functions/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - args\uc640 *kwargs\ub97c \ud65c\uc6a9\ud55c \uc720\uc5f0\ud55c \ud568\uc218 \uc124\uacc4\ud558\uae30 - \ub78c\ub2e4 \ud568\uc218\uc758 \uc801\uc808\ud55c \ud65c\uc6a9\ubc95 \uc774\ud574\ud558\uae30 - \uace0\ucc28 \ud568\uc218(map, filter, reduce)\ub97c \uc774\uc6a9\ud55c \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ubc95 \uc775\ud788\uae30 - \ud568\uc218 \ub370\ucf54\ub808\uc774\ud130\ub97c \ub9cc\ub4e4\uace0 \ud65c\uc6a9\ud558\uae30 - \ud074\ub85c\uc800\uc640 \uc2a4\ucf54\ud504 \uaddc\uce59\uc744 \uc815\ud655\ud788 \uc774\ud574\ud558\uae30 - \uc7ac\uadc0 \ud568\uc218\ub97c \ud6a8\uacfc\uc801\uc73c\ub85c \uc124\uacc4\ud558\uace0 \uad6c\ud604\ud558\uae30 - Pythonic\ud55c \ud568\uc218 \uc791\uc131 \ud328\ud134 \uc2b5\ub4dd\ud558\uae30</p>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#1-args-kwargs","title":"1. \uac00\ubcc0 \uc778\uc218 (args\uc640 *kwargs)","text":""},{"location":"tutorials/intermediate/chapter01_advanced_functions/#11-args-","title":"1.1 *args - \uc704\uce58 \uc778\uc218 \ubc1b\uae30","text":"<pre><code>def basic_args_example(*args):\n    \"\"\"\uac00\ubcc0 \uc704\uce58 \uc778\uc218 \uae30\ubcf8 \uc608\uc81c\"\"\"\n    print(f\"\ubc1b\uc740 \uc778\uc218\ub4e4: {args}\")\n    print(f\"\uc778\uc218 \uac1c\uc218: {len(args)}\")\n    print(f\"\ud0c0\uc785: {type(args)}\")\n\n    for i, arg in enumerate(args):\n        print(f\"  {i}: {arg}\")\n\n# \ud14c\uc2a4\ud2b8\nprint(\"=== *args \uae30\ubcf8 \uc608\uc81c ===\")\nbasic_args_example(1, 2, 3)\nbasic_args_example(\"hello\", \"world\", 42, True)\nbasic_args_example()  # \uc778\uc218 \uc5c6\uc774\ub3c4 \ud638\ucd9c \uac00\ub2a5\n\n# \uc2e4\uc6a9\uc801\uc778 \ud65c\uc6a9 \uc608\uc81c\ndef calculate_sum(*numbers):\n    \"\"\"\uc5ec\ub7ec \uc22b\uc790\uc758 \ud569 \uacc4\uc0b0\"\"\"\n    if not numbers:\n        return 0\n\n    total = 0\n    for num in numbers:\n        if isinstance(num, (int, float)):\n            total += num\n        else:\n            print(f\"\uacbd\uace0: {num}\uc740 \uc22b\uc790\uac00 \uc544\ub2d9\ub2c8\ub2e4\")\n\n    return total\n\ndef find_maximum(*values):\n    \"\"\"\uc5ec\ub7ec \uac12 \uc911 \ucd5c\ub313\uac12 \ucc3e\uae30\"\"\"\n    if not values:\n        return None\n\n    max_val = values[0]\n    for val in values[1:]:\n        if val &gt; max_val:\n            max_val = val\n\n    return max_val\n\n# \ud65c\uc6a9 \uc608\uc81c\nprint(\"\\n=== *args \uc2e4\uc6a9 \uc608\uc81c ===\")\nprint(f\"\ud569\uacc4: {calculate_sum(1, 2, 3, 4, 5)}\")\nprint(f\"\ud569\uacc4: {calculate_sum(10.5, 20.3, 30.2)}\")\nprint(f\"\ucd5c\ub313\uac12: {find_maximum(45, 23, 67, 12, 89, 34)}\")\nprint(f\"\ucd5c\ub313\uac12: {find_maximum('apple', 'zebra', 'banana')}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#12-kwargs-","title":"1.2 **kwargs - \ud0a4\uc6cc\ub4dc \uc778\uc218 \ubc1b\uae30","text":"<pre><code>def basic_kwargs_example(**kwargs):\n    \"\"\"\uac00\ubcc0 \ud0a4\uc6cc\ub4dc \uc778\uc218 \uae30\ubcf8 \uc608\uc81c\"\"\"\n    print(f\"\ubc1b\uc740 \ud0a4\uc6cc\ub4dc \uc778\uc218\ub4e4: {kwargs}\")\n    print(f\"\ud0c0\uc785: {type(kwargs)}\")\n\n    for key, value in kwargs.items():\n        print(f\"  {key}: {value}\")\n\n# \ud14c\uc2a4\ud2b8\nprint(\"\\n=== **kwargs \uae30\ubcf8 \uc608\uc81c ===\")\nbasic_kwargs_example(name=\"Alice\", age=25, city=\"Seoul\")\nbasic_kwargs_example(x=10, y=20, operation=\"add\")\n\n# \uc2e4\uc6a9\uc801\uc778 \ud65c\uc6a9 \uc608\uc81c\ndef create_user_profile(name, email, **additional_info):\n    \"\"\"\uc0ac\uc6a9\uc790 \ud504\ub85c\ud544 \uc0dd\uc131\"\"\"\n    profile = {\n        'name': name,\n        'email': email,\n        'created_at': '2024-01-01'  # \uc2e4\uc81c\ub85c\ub294 \ud604\uc7ac \uc2dc\uac04\n    }\n\n    # \ucd94\uac00 \uc815\ubcf4 \ubcd1\ud569\n    profile.update(additional_info)\n\n    return profile\n\ndef format_message(template, **placeholders):\n    \"\"\"\ud15c\ud50c\ub9bf \uba54\uc2dc\uc9c0 \ud3ec\ub9f7\ud305\"\"\"\n    try:\n        return template.format(**placeholders)\n    except KeyError as e:\n        return f\"\uc624\ub958: \ud544\uc218 \ud50c\ub808\uc774\uc2a4\ud640\ub354 {e}\uac00 \uc5c6\uc2b5\ub2c8\ub2e4\"\n\n# \ud65c\uc6a9 \uc608\uc81c\nprint(\"\\n=== **kwargs \uc2e4\uc6a9 \uc608\uc81c ===\")\nuser1 = create_user_profile(\n    \"\uae40\ucca0\uc218\", \n    \"kim@email.com\",\n    age=30,\n    city=\"\ubd80\uc0b0\",\n    hobby=\"\ub3c5\uc11c\"\n)\nprint(f\"\uc0ac\uc6a9\uc790 \ud504\ub85c\ud544: {user1}\")\n\nmessage_template = \"\uc548\ub155\ud558\uc138\uc694 {name}\ub2d8! {product}\ub97c {discount}% \ud560\uc778\uac00\uc5d0 \uc81c\uacf5\ud569\ub2c8\ub2e4.\"\nformatted = format_message(\n    message_template,\n    name=\"\uc774\uc601\ud76c\",\n    product=\"\ub178\ud2b8\ubd81\",\n    discount=20\n)\nprint(f\"\ud3ec\ub9f7\ub41c \uba54\uc2dc\uc9c0: {formatted}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#13-args-kwargs","title":"1.3 args\uc640 *kwargs \uacb0\ud569 \ud65c\uc6a9","text":"<pre><code>def flexible_function(required_arg, *args, default_value=None, **kwargs):\n    \"\"\"\uc720\uc5f0\ud55c \ud568\uc218 \uc124\uacc4 \ud328\ud134\"\"\"\n    print(f\"\ud544\uc218 \uc778\uc218: {required_arg}\")\n    print(f\"\ucd94\uac00 \uc704\uce58 \uc778\uc218: {args}\")\n    print(f\"\uae30\ubcf8\uac12 \ub9e4\uac1c\ubcc0\uc218: {default_value}\")\n    print(f\"\ud0a4\uc6cc\ub4dc \uc778\uc218: {kwargs}\")\n\ndef advanced_calculator(operation, *numbers, **options):\n    \"\"\"\uace0\uae09 \uacc4\uc0b0\uae30 \uc608\uc81c\"\"\"\n    # \uc635\uc158 \ucc98\ub9ac\n    precision = options.get('precision', 2)\n    verbose = options.get('verbose', False)\n\n    if verbose:\n        print(f\"\uc5f0\uc0b0: {operation}, \uc22b\uc790\ub4e4: {numbers}\")\n\n    if operation == 'sum':\n        result = sum(numbers)\n    elif operation == 'multiply':\n        result = 1\n        for num in numbers:\n            result *= num\n    elif operation == 'average':\n        result = sum(numbers) / len(numbers) if numbers else 0\n    else:\n        result = None\n        print(f\"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uc5f0\uc0b0: {operation}\")\n\n    if result is not None:\n        return round(result, precision)\n    return result\n\n# \ud65c\uc6a9 \uc608\uc81c\nprint(\"\\n=== *args\uc640 **kwargs \uacb0\ud569 ===\")\nflexible_function(\"\ud544\uc218\uac12\", 1, 2, 3, default_value=\"\uc124\uc815\", key1=\"\uac121\", key2=\"\uac122\")\n\nprint(f\"\ud569\uacc4: {advanced_calculator('sum', 10, 20, 30, precision=1, verbose=True)}\")\nprint(f\"\uacf1\uc148: {advanced_calculator('multiply', 2, 3, 4, 5)}\")\nprint(f\"\ud3c9\uade0: {advanced_calculator('average', 85, 90, 78, 92, precision=1)}\")\n\n# \ud568\uc218 \ud638\ucd9c \uc2dc \uc5b8\ud328\ud0b9\ndef process_coordinates(x, y, z=0):\n    \"\"\"\uc88c\ud45c \ucc98\ub9ac \ud568\uc218\"\"\"\n    return f\"\uc88c\ud45c: ({x}, {y}, {z})\"\n\n# \ub9ac\uc2a4\ud2b8/\ud29c\ud50c \uc5b8\ud328\ud0b9\ncoords_2d = [10, 20]\ncoords_3d = (5, 15, 25)\ncoord_dict = {'x': 1, 'y': 2, 'z': 3}\n\nprint(\"\\n=== \uc778\uc218 \uc5b8\ud328\ud0b9 ===\")\nprint(process_coordinates(*coords_2d))\nprint(process_coordinates(*coords_3d))\nprint(process_coordinates(**coord_dict))\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#2-lambda-functions","title":"2. \ub78c\ub2e4 \ud568\uc218 (Lambda Functions)","text":""},{"location":"tutorials/intermediate/chapter01_advanced_functions/#21","title":"2.1 \ub78c\ub2e4 \ud568\uc218 \uae30\ubcf8 \uc0ac\uc6a9\ubc95","text":"<pre><code># \uae30\ubcf8 \ub78c\ub2e4 \ud568\uc218 \uc608\uc81c\nprint(\"=== \ub78c\ub2e4 \ud568\uc218 \uae30\ubcf8 ===\")\n\n# \uc77c\ubc18 \ud568\uc218 vs \ub78c\ub2e4 \ud568\uc218\ndef square_function(x):\n    return x * x\n\nsquare_lambda = lambda x: x * x\n\nprint(f\"\uc77c\ubc18 \ud568\uc218: {square_function(5)}\")\nprint(f\"\ub78c\ub2e4 \ud568\uc218: {square_lambda(5)}\")\n\n# \uc5ec\ub7ec \ub9e4\uac1c\ubcc0\uc218\ub97c \uac00\uc9c4 \ub78c\ub2e4\nadd = lambda x, y: x + y\nmultiply = lambda x, y, z: x * y * z\ngreet = lambda name, title=\"\ub2d8\": f\"\uc548\ub155\ud558\uc138\uc694, {name}{title}!\"\n\nprint(f\"\ub367\uc148: {add(10, 20)}\")\nprint(f\"\uacf1\uc148: {multiply(2, 3, 4)}\")\nprint(f\"\uc778\uc0ac: {greet('\uae40\ucca0\uc218')}\")\nprint(f\"\uc778\uc0ac: {greet('\uc774\uc601\ud76c', '\uc528')}\")\n\n# \uc870\uac74\ubd80 \ub78c\ub2e4 \ud568\uc218\nmax_value = lambda a, b: a if a &gt; b else b\nabsolute_value = lambda x: x if x &gt;= 0 else -x\ngrade_status = lambda score: \"pass\" if score &gt;= 60 else \"fail\"\n\nprint(f\"\ucd5c\ub313\uac12: {max_value(15, 23)}\")\nprint(f\"\uc808\ub313\uac12: {absolute_value(-7)}\")\nprint(f\"\uc131\uc801: {grade_status(75)}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#22","title":"2.2 \ub78c\ub2e4 \ud568\uc218\uc758 \uc2e4\uc6a9\uc801 \ud65c\uc6a9","text":"<pre><code># \uc815\ub82c\uc5d0\uc11c\uc758 \ub78c\ub2e4 \ud65c\uc6a9\nstudents = [\n    {'name': '\uae40\ucca0\uc218', 'age': 20, 'grade': 85},\n    {'name': '\uc774\uc601\ud76c', 'age': 19, 'grade': 92},\n    {'name': '\ubc15\ubbfc\uc218', 'age': 21, 'grade': 78},\n    {'name': '\ucd5c\uc9c0\uc6d0', 'age': 20, 'grade': 95}\n]\n\nprint(\"\\n=== \ub78c\ub2e4\ub97c \ud65c\uc6a9\ud55c \uc815\ub82c ===\")\nprint(\"\uc6d0\ubcf8 \ub370\uc774\ud130:\")\nfor student in students:\n    print(f\"  {student}\")\n\n# \uc774\ub984\uc21c \uc815\ub82c\nsorted_by_name = sorted(students, key=lambda x: x['name'])\nprint(\"\\n\uc774\ub984\uc21c \uc815\ub82c:\")\nfor student in sorted_by_name:\n    print(f\"  {student['name']}: {student['grade']}\")\n\n# \uc131\uc801\uc21c \uc815\ub82c (\ub0b4\ub9bc\ucc28\uc21c)\nsorted_by_grade = sorted(students, key=lambda x: x['grade'], reverse=True)\nprint(\"\\n\uc131\uc801\uc21c \uc815\ub82c (\ub192\uc740 \uc21c):\")\nfor student in sorted_by_grade:\n    print(f\"  {student['name']}: {student['grade']}\")\n\n# \ubcf5\ud569 \uc815\ub82c (\ub098\uc774 -&gt; \uc131\uc801 \uc21c)\nsorted_complex = sorted(students, key=lambda x: (x['age'], -x['grade']))\nprint(\"\\n\ub098\uc774\uc21c \uc815\ub82c (\uac19\uc740 \ub098\uc774\uba74 \uc131\uc801 \ub192\uc740 \uc21c):\")\nfor student in sorted_complex:\n    print(f\"  {student['name']}: \ub098\uc774 {student['age']}, \uc131\uc801 {student['grade']}\")\n\n# \ubb38\uc790\uc5f4 \ucc98\ub9ac\uc5d0\uc11c\uc758 \ub78c\ub2e4 \ud65c\uc6a9\nwords = ['Python', 'Java', 'JavaScript', 'C++', 'Go', 'Rust']\n\nprint(\"\\n=== \ubb38\uc790\uc5f4 \ucc98\ub9ac \ub78c\ub2e4 ===\")\nprint(f\"\uc6d0\ubcf8: {words}\")\nprint(f\"\uae38\uc774\uc21c: {sorted(words, key=lambda x: len(x))}\")\nprint(f\"\ub9c8\uc9c0\ub9c9 \uae00\uc790\uc21c: {sorted(words, key=lambda x: x[-1])}\")\nprint(f\"\uc18c\ubb38\uc790\ub85c \ubcc0\ud658 \ud6c4 \uc815\ub82c: {sorted(words, key=lambda x: x.lower())}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#3-higher-order-functions","title":"3. \uace0\ucc28 \ud568\uc218 (Higher-Order Functions)","text":""},{"location":"tutorials/intermediate/chapter01_advanced_functions/#31-map","title":"3.1 map() \ud568\uc218","text":"<pre><code># map() \uae30\ubcf8 \uc0ac\uc6a9\ubc95\nprint(\"=== map() \ud568\uc218 ===\")\n\n# \uae30\ubcf8 \uc608\uc81c\nnumbers = [1, 2, 3, 4, 5]\nsquared = list(map(lambda x: x ** 2, numbers))\nprint(f\"\uc6d0\ubcf8: {numbers}\")\nprint(f\"\uc81c\uacf1: {squared}\")\n\n# \ubb38\uc790\uc5f4 \ucc98\ub9ac\nwords = ['hello', 'world', 'python', 'programming']\ncapitalized = list(map(str.capitalize, words))\nlengths = list(map(len, words))\n\nprint(f\"\uc6d0\ubcf8: {words}\")\nprint(f\"\uccab \uae00\uc790 \ub300\ubb38\uc790: {capitalized}\")\nprint(f\"\uae38\uc774: {lengths}\")\n\n# \uc5ec\ub7ec iterable \ucc98\ub9ac\nnumbers1 = [1, 2, 3, 4]\nnumbers2 = [10, 20, 30, 40]\nsums = list(map(lambda x, y: x + y, numbers1, numbers2))\nproducts = list(map(lambda x, y: x * y, numbers1, numbers2))\n\nprint(f\"\ub9ac\uc2a4\ud2b81: {numbers1}\")\nprint(f\"\ub9ac\uc2a4\ud2b82: {numbers2}\")\nprint(f\"\ud569: {sums}\")\nprint(f\"\uacf1: {products}\")\n\n# \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c: \uc628\ub3c4 \ubcc0\ud658\ncelsius_temps = [0, 20, 30, 40, 100]\nfahrenheit_temps = list(map(lambda c: (c * 9/5) + 32, celsius_temps))\n\nprint(f\"\uc12d\uc528: {celsius_temps}\")\nprint(f\"\ud654\uc528: {fahrenheit_temps}\")\n\n# \ub515\uc154\ub108\ub9ac \ub370\uc774\ud130 \ucc98\ub9ac\nemployees = [\n    {'name': '\uae40\ucca0\uc218', 'salary': 3000000},\n    {'name': '\uc774\uc601\ud76c', 'salary': 3500000},\n    {'name': '\ubc15\ubbfc\uc218', 'salary': 4000000}\n]\n\n# \uc5f0\ubd09\uc744 \uc6d4\uae09\uc73c\ub85c \ubcc0\ud658\nmonthly_salaries = list(map(lambda emp: {\n    'name': emp['name'], \n    'monthly_salary': emp['salary'] // 12\n}, employees))\n\nprint(f\"\\n\uc6d4\uae09 \uc815\ubcf4:\")\nfor emp in monthly_salaries:\n    print(f\"  {emp['name']}: {emp['monthly_salary']:,}\uc6d0\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#32-filter","title":"3.2 filter() \ud568\uc218","text":"<pre><code>print(\"\\n=== filter() \ud568\uc218 ===\")\n\n# \uae30\ubcf8 \uc608\uc81c\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\nodd_numbers = list(filter(lambda x: x % 2 == 1, numbers))\nlarge_numbers = list(filter(lambda x: x &gt; 5, numbers))\n\nprint(f\"\uc6d0\ubcf8: {numbers}\")\nprint(f\"\uc9dd\uc218: {even_numbers}\")\nprint(f\"\ud640\uc218: {odd_numbers}\")\nprint(f\"5\ubcf4\ub2e4 \ud070 \uc218: {large_numbers}\")\n\n# \ubb38\uc790\uc5f4 \ud544\ud130\ub9c1\nwords = ['python', 'java', 'javascript', 'c++', 'go', 'rust', 'php']\nlong_words = list(filter(lambda w: len(w) &gt; 4, words))\nwords_with_a = list(filter(lambda w: 'a' in w, words))\nwords_starting_with_j = list(filter(lambda w: w.startswith('j'), words))\n\nprint(f\"\\n\uc5b8\uc5b4\ub4e4: {words}\")\nprint(f\"4\uae00\uc790 \ucd08\uacfc: {long_words}\")\nprint(f\"'a' \ud3ec\ud568: {words_with_a}\")\nprint(f\"'j'\ub85c \uc2dc\uc791: {words_starting_with_j}\")\n\n# \ubcf5\ud569 \ub370\uc774\ud130 \ud544\ud130\ub9c1\nproducts = [\n    {'name': '\ub178\ud2b8\ubd81', 'price': 1200000, 'category': '\uc804\uc790\uc81c\ud488'},\n    {'name': '\ub9c8\uc6b0\uc2a4', 'price': 25000, 'category': '\uc804\uc790\uc81c\ud488'},\n    {'name': '\ucc45\uc0c1', 'price': 150000, 'category': '\uac00\uad6c'},\n    {'name': '\uc758\uc790', 'price': 80000, 'category': '\uac00\uad6c'},\n    {'name': '\ud0a4\ubcf4\ub4dc', 'price': 70000, 'category': '\uc804\uc790\uc81c\ud488'}\n]\n\n# \uc870\uac74\ubcc4 \ud544\ud130\ub9c1\nexpensive_products = list(filter(lambda p: p['price'] &gt; 100000, products))\nelectronics = list(filter(lambda p: p['category'] == '\uc804\uc790\uc81c\ud488', products))\naffordable_electronics = list(filter(\n    lambda p: p['category'] == '\uc804\uc790\uc81c\ud488' and p['price'] &lt; 100000, \n    products\n))\n\nprint(f\"\\n\uace0\uac00 \uc81c\ud488:\")\nfor product in expensive_products:\n    print(f\"  {product['name']}: {product['price']:,}\uc6d0\")\n\nprint(f\"\\n\uc804\uc790\uc81c\ud488:\")\nfor product in electronics:\n    print(f\"  {product['name']}: {product['price']:,}\uc6d0\")\n\nprint(f\"\\n\uc800\ub834\ud55c \uc804\uc790\uc81c\ud488:\")\nfor product in affordable_electronics:\n    print(f\"  {product['name']}: {product['price']:,}\uc6d0\")\n\n# None \uac12 \uc81c\uac70\nmixed_data = [1, None, 2, '', 3, 0, 4, False, 5]\nclean_data = list(filter(None, mixed_data))  # Falsy \uac12 \uc81c\uac70\nnumbers_only = list(filter(lambda x: isinstance(x, int) and x &gt; 0, mixed_data))\n\nprint(f\"\\n\ud63c\ud569 \ub370\uc774\ud130: {mixed_data}\")\nprint(f\"Falsy \uac12 \uc81c\uac70: {clean_data}\")\nprint(f\"\uc591\uc758 \uc815\uc218\ub9cc: {numbers_only}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#33-reduce","title":"3.3 reduce() \ud568\uc218","text":"<pre><code>from functools import reduce\n\nprint(\"\\n=== reduce() \ud568\uc218 ===\")\n\n# \uae30\ubcf8 \uc608\uc81c\nnumbers = [1, 2, 3, 4, 5]\nsum_result = reduce(lambda x, y: x + y, numbers)\nproduct_result = reduce(lambda x, y: x * y, numbers)\nmax_result = reduce(lambda x, y: x if x &gt; y else y, numbers)\n\nprint(f\"\uc22b\uc790\ub4e4: {numbers}\")\nprint(f\"\ud569\uacc4: {sum_result}\")\nprint(f\"\uacf1\uc148: {product_result}\")\nprint(f\"\ucd5c\ub313\uac12: {max_result}\")\n\n# \ucd08\uae30\uac12 \uc0ac\uc6a9\nsum_with_initial = reduce(lambda x, y: x + y, numbers, 100)\nproduct_with_initial = reduce(lambda x, y: x * y, numbers, 2)\n\nprint(f\"\ucd08\uae30\uac12 100\uacfc \ud569\uacc4: {sum_with_initial}\")\nprint(f\"\ucd08\uae30\uac12 2\uc640 \uacf1\uc148: {product_with_initial}\")\n\n# \ubb38\uc790\uc5f4 \ucc98\ub9ac\nwords = ['Python', 'is', 'awesome', 'and', 'powerful']\nsentence = reduce(lambda x, y: x + ' ' + y, words)\nconcatenated = reduce(lambda x, y: x + y, words)\n\nprint(f\"\\n\ub2e8\uc5b4\ub4e4: {words}\")\nprint(f\"\ubb38\uc7a5: {sentence}\")\nprint(f\"\uc5f0\uacb0: {concatenated}\")\n\n# \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \ucc98\ub9ac\ntransactions = [\n    {'amount': 100, 'type': 'deposit'},\n    {'amount': 50, 'type': 'withdrawal'},\n    {'amount': 200, 'type': 'deposit'},\n    {'amount': 30, 'type': 'withdrawal'},\n    {'amount': 150, 'type': 'deposit'}\n]\n\n# \ucd5c\uc885 \uc794\uc561 \uacc4\uc0b0\ndef calculate_balance(current_balance, transaction):\n    if transaction['type'] == 'deposit':\n        return current_balance + transaction['amount']\n    else:\n        return current_balance - transaction['amount']\n\nfinal_balance = reduce(calculate_balance, transactions, 0)\nprint(f\"\\n\uac70\ub798 \ub0b4\uc5ed\uc73c\ub85c \ucd5c\uc885 \uc794\uc561: {final_balance}\")\n\n# \ub9ac\uc2a4\ud2b8\uc758 \ub9ac\uc2a4\ud2b8 \ud3c9\ud0c4\ud654\nnested_lists = [[1, 2], [3, 4], [5, 6, 7], [8, 9]]\nflattened = reduce(lambda x, y: x + y, nested_lists)\nprint(f\"\uc911\ucca9 \ub9ac\uc2a4\ud2b8: {nested_lists}\")\nprint(f\"\ud3c9\ud0c4\ud654: {flattened}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#4-function-decorators","title":"4. \ud568\uc218 \ub370\ucf54\ub808\uc774\ud130 (Function Decorators)","text":""},{"location":"tutorials/intermediate/chapter01_advanced_functions/#41","title":"4.1 \ub370\ucf54\ub808\uc774\ud130 \uae30\ubcf8 \uac1c\ub150","text":"<pre><code>print(\"=== \ub370\ucf54\ub808\uc774\ud130 \uae30\ubcf8 \uac1c\ub150 ===\")\n\n# \uae30\ubcf8 \ub370\ucf54\ub808\uc774\ud130 \uad6c\uc870\ndef simple_decorator(func):\n    \"\"\"\uac04\ub2e8\ud55c \ub370\ucf54\ub808\uc774\ud130\"\"\"\n    def wrapper():\n        print(\"\ud568\uc218 \uc2e4\ud589 \uc804\")\n        result = func()\n        print(\"\ud568\uc218 \uc2e4\ud589 \ud6c4\")\n        return result\n    return wrapper\n\n# \ub370\ucf54\ub808\uc774\ud130 \uc0ac\uc6a9\ubc95 1: @ \ubb38\ubc95\n@simple_decorator\ndef say_hello():\n    print(\"\uc548\ub155\ud558\uc138\uc694!\")\n    return \"greeting_complete\"\n\n# \ub370\ucf54\ub808\uc774\ud130 \uc0ac\uc6a9\ubc95 2: \uc9c1\uc811 \uc801\uc6a9\ndef say_goodbye():\n    print(\"\uc548\ub155\ud788 \uac00\uc138\uc694!\")\n    return \"farewell_complete\"\n\nsay_goodbye = simple_decorator(say_goodbye)\n\n# \ud14c\uc2a4\ud2b8\nprint(\"1. @\ub370\ucf54\ub808\uc774\ud130 \uc0ac\uc6a9:\")\nresult1 = say_hello()\nprint(f\"\ubc18\ud658\uac12: {result1}\")\n\nprint(\"\\n2. \uc9c1\uc811 \uc801\uc6a9:\")\nresult2 = say_goodbye()\nprint(f\"\ubc18\ud658\uac12: {result2}\")\n\n# \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub294 \ud568\uc218\ub97c \uc704\ud55c \ub370\ucf54\ub808\uc774\ud130\ndef args_decorator(func):\n    \"\"\"\ub9e4\uac1c\ubcc0\uc218\ub97c \ucc98\ub9ac\ud558\ub294 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n    def wrapper(*args, **kwargs):\n        print(f\"\ud568\uc218 {func.__name__} \ud638\ucd9c\ub428\")\n        print(f\"\uc704\uce58 \uc778\uc218: {args}\")\n        print(f\"\ud0a4\uc6cc\ub4dc \uc778\uc218: {kwargs}\")\n        result = func(*args, **kwargs)\n        print(f\"\ubc18\ud658\uac12: {result}\")\n        return result\n    return wrapper\n\n@args_decorator\ndef add_numbers(a, b, operation=\"add\"):\n    if operation == \"add\":\n        return a + b\n    elif operation == \"multiply\":\n        return a * b\n    else:\n        return None\n\nprint(\"\\n3. \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub294 \ud568\uc218:\")\nadd_numbers(10, 20)\nadd_numbers(5, 3, operation=\"multiply\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#42","title":"4.2 \uc2e4\uc6a9\uc801\uc778 \ub370\ucf54\ub808\uc774\ud130 \uc608\uc81c","text":"<pre><code>import time\nimport functools\n\n# \uc2e4\ud589 \uc2dc\uac04 \uce21\uc815 \ub370\ucf54\ub808\uc774\ud130\ndef timing_decorator(func):\n    \"\"\"\ud568\uc218 \uc2e4\ud589 \uc2dc\uac04\uc744 \uce21\uc815\ud558\ub294 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n    @functools.wraps(func)  # \uc6d0\ubcf8 \ud568\uc218\uc758 \uba54\ud0c0\ub370\uc774\ud130 \ubcf4\uc874\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        execution_time = end_time - start_time\n        print(f\"{func.__name__} \uc2e4\ud589 \uc2dc\uac04: {execution_time:.4f}\ucd08\")\n        return result\n    return wrapper\n\n# \ub85c\uae45 \ub370\ucf54\ub808\uc774\ud130\ndef logging_decorator(func):\n    \"\"\"\ud568\uc218 \ud638\ucd9c\uc744 \ub85c\uae45\ud558\ub294 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(f\"[LOG] {func.__name__} \ud568\uc218 \ud638\ucd9c \uc2dc\uc791\")\n        try:\n            result = func(*args, **kwargs)\n            print(f\"[LOG] {func.__name__} \ud568\uc218 \ud638\ucd9c \uc131\uacf5\")\n            return result\n        except Exception as e:\n            print(f\"[LOG] {func.__name__} \ud568\uc218 \ud638\ucd9c \uc2e4\ud328: {e}\")\n            raise\n    return wrapper\n\n# \uc785\ub825 \uac80\uc99d \ub370\ucf54\ub808\uc774\ud130\ndef validate_positive_numbers(func):\n    \"\"\"\uc591\uc218\ub9cc \ud5c8\uc6a9\ud558\ub294 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        for arg in args:\n            if isinstance(arg, (int, float)) and arg &lt; 0:\n                raise ValueError(f\"\uc74c\uc218\ub294 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4: {arg}\")\n\n        for key, value in kwargs.items():\n            if isinstance(value, (int, float)) and value &lt; 0:\n                raise ValueError(f\"\uc74c\uc218\ub294 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4: {key}={value}\")\n\n        return func(*args, **kwargs)\n    return wrapper\n\n# \ub370\ucf54\ub808\uc774\ud130 \uc801\uc6a9 \uc608\uc81c\n@timing_decorator\n@logging_decorator\n@validate_positive_numbers\ndef calculate_power(base, exponent):\n    \"\"\"\uac70\ub4ed\uc81c\uacf1 \uacc4\uc0b0 (\uc5ec\ub7ec \ub370\ucf54\ub808\uc774\ud130 \uc801\uc6a9)\"\"\"\n    time.sleep(0.1)  # \uc2dc\uac04 \uc18c\uc694 \uc2dc\ubbac\ub808\uc774\uc158\n    return base ** exponent\n\n@timing_decorator\ndef slow_calculation(n):\n    \"\"\"\ub290\ub9b0 \uacc4\uc0b0 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n    total = 0\n    for i in range(n):\n        total += i ** 2\n    return total\n\nprint(\"\\n=== \uc2e4\uc6a9\uc801\uc778 \ub370\ucf54\ub808\uc774\ud130 \uc608\uc81c ===\")\n\ntry:\n    result = calculate_power(2, 3)\n    print(f\"2^3 = {result}\")\n\n    result = calculate_power(-2, 3)  # ValueError \ubc1c\uc0dd\nexcept ValueError as e:\n    print(f\"\uc624\ub958: {e}\")\n\nprint(f\"\\n\ub290\ub9b0 \uacc4\uc0b0 \uacb0\uacfc: {slow_calculation(1000)}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#43","title":"4.3 \ub9e4\uac1c\ubcc0\uc218\ub97c \ubc1b\ub294 \ub370\ucf54\ub808\uc774\ud130","text":"<pre><code>def repeat_decorator(times):\n    \"\"\"\ud568\uc218\ub97c \uc5ec\ub7ec \ubc88 \uc2e4\ud589\ud558\ub294 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            results = []\n            for i in range(times):\n                print(f\"\uc2e4\ud589 {i+1}/{times}\")\n                result = func(*args, **kwargs)\n                results.append(result)\n            return results\n        return wrapper\n    return decorator\n\ndef cache_decorator(max_size=100):\n    \"\"\"\uac04\ub2e8\ud55c \uce90\uc2dc \ub370\ucf54\ub808\uc774\ud130\"\"\"\n    def decorator(func):\n        cache = {}\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            # \uce90\uc2dc \ud0a4 \uc0dd\uc131\n            key = str(args) + str(sorted(kwargs.items()))\n\n            if key in cache:\n                print(f\"\uce90\uc2dc\uc5d0\uc11c \ubc18\ud658: {func.__name__}\")\n                return cache[key]\n\n            if len(cache) &gt;= max_size:\n                # \uac00\uc7a5 \uc624\ub798\ub41c \ud56d\ubaa9 \uc81c\uac70 (\ub2e8\uc21c\ud654)\n                oldest_key = next(iter(cache))\n                del cache[oldest_key]\n\n            result = func(*args, **kwargs)\n            cache[key] = result\n            print(f\"\uce90\uc2dc\uc5d0 \uc800\uc7a5: {func.__name__}\")\n            return result\n        return wrapper\n    return decorator\n\n# \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub294 \ub370\ucf54\ub808\uc774\ud130 \uc0ac\uc6a9\n@repeat_decorator(3)\ndef greet_person(name):\n    \"\"\"\uc0ac\ub78c\uc5d0\uac8c \uc778\uc0ac\ud558\uae30\"\"\"\n    message = f\"\uc548\ub155\ud558\uc138\uc694, {name}\ub2d8!\"\n    print(message)\n    return message\n\n@cache_decorator(max_size=3)\ndef expensive_calculation(n):\n    \"\"\"\ube44\uc6a9\uc774 \ub9ce\uc774 \ub4dc\ub294 \uacc4\uc0b0\"\"\"\n    print(f\"\uacc4\uc0b0 \uc911... n={n}\")\n    time.sleep(0.1)  # \uc2dc\uac04 \uc18c\uc694 \uc2dc\ubbac\ub808\uc774\uc158\n    return n * n + 2 * n + 1\n\nprint(\"\\n=== \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub294 \ub370\ucf54\ub808\uc774\ud130 ===\")\n\nprint(\"1. \ubc18\ubcf5 \ub370\ucf54\ub808\uc774\ud130:\")\ngreet_person(\"\uae40\ucca0\uc218\")\n\nprint(\"\\n2. \uce90\uc2dc \ub370\ucf54\ub808\uc774\ud130:\")\nprint(f\"\uacb0\uacfc1: {expensive_calculation(5)}\")\nprint(f\"\uacb0\uacfc2: {expensive_calculation(3)}\")\nprint(f\"\uacb0\uacfc3: {expensive_calculation(5)}\")  # \uce90\uc2dc\uc5d0\uc11c \ubc18\ud658\nprint(f\"\uacb0\uacfc4: {expensive_calculation(7)}\")\nprint(f\"\uacb0\uacfc5: {expensive_calculation(3)}\")  # \uce90\uc2dc\uc5d0\uc11c \ubc18\ud658\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#5-closures","title":"5. \ud074\ub85c\uc800 (Closures)","text":""},{"location":"tutorials/intermediate/chapter01_advanced_functions/#51","title":"5.1 \ud074\ub85c\uc800 \uae30\ubcf8 \uac1c\ub150","text":"<pre><code>print(\"=== \ud074\ub85c\uc800 \uae30\ubcf8 \uac1c\ub150 ===\")\n\ndef outer_function(x):\n    \"\"\"\uc678\ubd80 \ud568\uc218\"\"\"\n    print(f\"\uc678\ubd80 \ud568\uc218: x = {x}\")\n\n    def inner_function(y):\n        \"\"\"\ub0b4\ubd80 \ud568\uc218 (\ud074\ub85c\uc800)\"\"\"\n        print(f\"\ub0b4\ubd80 \ud568\uc218: y = {y}\")\n        return x + y  # \uc678\ubd80 \ud568\uc218\uc758 \ubcc0\uc218 x\uc5d0 \uc811\uadfc\n\n    print(\"\ub0b4\ubd80 \ud568\uc218 \ubc18\ud658\")\n    return inner_function\n\n# \ud074\ub85c\uc800 \uc0dd\uc131\nclosure1 = outer_function(10)\nclosure2 = outer_function(20)\n\nprint(f\"\ud074\ub85c\uc8001 \ud0c0\uc785: {type(closure1)}\")\nprint(f\"\ud074\ub85c\uc8001 \uc774\ub984: {closure1.__name__}\")\n\n# \ud074\ub85c\uc800 \uc2e4\ud589\nresult1 = closure1(5)  # 10 + 5\nresult2 = closure2(5)  # 20 + 5\n\nprint(f\"\ud074\ub85c\uc8001 \uacb0\uacfc: {result1}\")\nprint(f\"\ud074\ub85c\uc8002 \uacb0\uacfc: {result2}\")\n\n# \ud074\ub85c\uc800\uac00 \ucea1\ucc98\ud55c \ubcc0\uc218 \ud655\uc778\nprint(f\"\ud074\ub85c\uc8001\uc774 \ucea1\ucc98\ud55c \ubcc0\uc218: {closure1.__closure__[0].cell_contents}\")\nprint(f\"\ud074\ub85c\uc8002\uac00 \ucea1\ucc98\ud55c \ubcc0\uc218: {closure2.__closure__[0].cell_contents}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#52","title":"5.2 \ud074\ub85c\uc800\uc758 \uc2e4\uc6a9\uc801 \ud65c\uc6a9","text":"<pre><code>def create_multiplier(factor):\n    \"\"\"\ubc30\uc218 \ud568\uc218 \uc0dd\uc131\uae30\"\"\"\n    def multiplier(number):\n        return number * factor\n    return multiplier\n\ndef create_validator(min_value, max_value):\n    \"\"\"\ubc94\uc704 \uac80\uc99d \ud568\uc218 \uc0dd\uc131\uae30\"\"\"\n    def validator(value):\n        if not isinstance(value, (int, float)):\n            return False, \"\uc22b\uc790\uac00 \uc544\ub2d9\ub2c8\ub2e4\"\n        if value &lt; min_value:\n            return False, f\"\ucd5c\uc19f\uac12 {min_value}\ubcf4\ub2e4 \uc791\uc2b5\ub2c8\ub2e4\"\n        if value &gt; max_value:\n            return False, f\"\ucd5c\ub313\uac12 {max_value}\ubcf4\ub2e4 \ud07d\ub2c8\ub2e4\"\n        return True, \"\uc720\ud6a8\ud55c \uac12\uc785\ub2c8\ub2e4\"\n    return validator\n\ndef create_counter(initial_value=0):\n    \"\"\"\uce74\uc6b4\ud130 \ud568\uc218 \uc0dd\uc131\uae30\"\"\"\n    count = initial_value\n\n    def counter(increment=1):\n        nonlocal count  # \uc678\ubd80 \ubcc0\uc218 \uc218\uc815 \ud5c8\uc6a9\n        count += increment\n        return count\n\n    def reset():\n        nonlocal count\n        count = initial_value\n        return count\n\n    def get_current():\n        return count\n\n    # \uc5ec\ub7ec \ud568\uc218\ub97c \uac00\uc9c4 \uac1d\uccb4\ucc98\ub7fc \uc0ac\uc6a9\n    counter.reset = reset\n    counter.get_current = get_current\n    return counter\n\nprint(\"\\n=== \ud074\ub85c\uc800 \uc2e4\uc6a9 \uc608\uc81c ===\")\n\n# \ubc30\uc218 \ud568\uc218\ub4e4\ndouble = create_multiplier(2)\ntriple = create_multiplier(3)\nten_times = create_multiplier(10)\n\nprint(\"\ubc30\uc218 \ud568\uc218\ub4e4:\")\nprint(f\"2\ubc30: {double(15)}\")\nprint(f\"3\ubc30: {triple(15)}\")\nprint(f\"10\ubc30: {ten_times(15)}\")\n\n# \uac80\uc99d \ud568\uc218\ub4e4\nage_validator = create_validator(0, 150)\nscore_validator = create_validator(0, 100)\n\nprint(\"\\n\uac80\uc99d \ud568\uc218\ub4e4:\")\ntest_values = [-5, 25, 150, 200]\nfor value in test_values:\n    is_valid, message = age_validator(value)\n    print(f\"\ub098\uc774 {value}: {'\u2713' if is_valid else '\u2717'} {message}\")\n\n# \uce74\uc6b4\ud130 \ud568\uc218\ub4e4\ncounter1 = create_counter()\ncounter2 = create_counter(100)\n\nprint(\"\\n\uce74\uc6b4\ud130 \ud568\uc218\ub4e4:\")\nprint(f\"\uce74\uc6b4\ud1301: {counter1()}\")  # 1\nprint(f\"\uce74\uc6b4\ud1301: {counter1(5)}\")  # 6\nprint(f\"\uce74\uc6b4\ud1301 \ud604\uc7ac\uac12: {counter1.get_current()}\")  # 6\n\nprint(f\"\uce74\uc6b4\ud1302: {counter2()}\")  # 101\nprint(f\"\uce74\uc6b4\ud1302: {counter2(10)}\")  # 111\nprint(f\"\uce74\uc6b4\ud1302 \ub9ac\uc14b: {counter2.reset()}\")  # 100\nprint(f\"\uce74\uc6b4\ud1302: {counter2()}\")  # 101\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#53","title":"5.3 \ud074\ub85c\uc800\uc640 \ub370\ucf54\ub808\uc774\ud130 \uc870\ud569","text":"<pre><code>def create_rate_limiter(max_calls, time_window):\n    \"\"\"\ud638\ucd9c \ud69f\uc218 \uc81c\ud55c \ub370\ucf54\ub808\uc774\ud130 \uc0dd\uc131\uae30\"\"\"\n    call_times = []\n\n    def rate_limiter(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            current_time = time.time()\n\n            # \uc2dc\uac04 \uc708\ub3c4\uc6b0\ub97c \ubc97\uc5b4\ub09c \ud638\ucd9c \uae30\ub85d \uc81c\uac70\n            while call_times and current_time - call_times[0] &gt; time_window:\n                call_times.pop(0)\n\n            # \ud638\ucd9c \ud69f\uc218 \ud655\uc778\n            if len(call_times) &gt;= max_calls:\n                remaining_time = time_window - (current_time - call_times[0])\n                raise Exception(f\"\ud638\ucd9c \uc81c\ud55c \ucd08\uacfc. {remaining_time:.1f}\ucd08 \ud6c4 \ub2e4\uc2dc \uc2dc\ub3c4\ud558\uc138\uc694.\")\n\n            # \ud638\ucd9c \uae30\ub85d \ucd94\uac00\n            call_times.append(current_time)\n            return func(*args, **kwargs)\n        return wrapper\n    return rate_limiter\n\ndef create_retry_decorator(max_attempts, delay=1):\n    \"\"\"\uc7ac\uc2dc\ub3c4 \ub370\ucf54\ub808\uc774\ud130 \uc0dd\uc131\uae30\"\"\"\n    def retry_decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            last_exception = None\n\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    last_exception = e\n                    if attempt &lt; max_attempts - 1:\n                        print(f\"\uc2dc\ub3c4 {attempt + 1} \uc2e4\ud328: {e}. {delay}\ucd08 \ud6c4 \uc7ac\uc2dc\ub3c4...\")\n                        time.sleep(delay)\n                    else:\n                        print(f\"\ubaa8\ub4e0 \uc2dc\ub3c4 \uc2e4\ud328. \ub9c8\uc9c0\ub9c9 \uc624\ub958: {e}\")\n\n            raise last_exception\n        return wrapper\n    return retry_decorator\n\n# \ud074\ub85c\uc800 \uae30\ubc18 \ub370\ucf54\ub808\uc774\ud130 \uc0ac\uc6a9\n@create_rate_limiter(max_calls=3, time_window=5)\ndef api_call(endpoint):\n    \"\"\"API \ud638\ucd9c \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n    print(f\"API \ud638\ucd9c: {endpoint}\")\n    return f\"\uc751\ub2f5 from {endpoint}\"\n\n@create_retry_decorator(max_attempts=3, delay=0.5)\ndef unstable_operation(success_rate=0.3):\n    \"\"\"\ubd88\uc548\uc815\ud55c \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n    import random\n    if random.random() &lt; success_rate:\n        return \"\uc791\uc5c5 \uc131\uacf5!\"\n    else:\n        raise Exception(\"\uc791\uc5c5 \uc2e4\ud328\")\n\nprint(\"\\n=== \ud074\ub85c\uc800 \uae30\ubc18 \ub370\ucf54\ub808\uc774\ud130 ===\")\n\n# \ub808\uc774\ud2b8 \ub9ac\ubbf8\ud130 \ud14c\uc2a4\ud2b8\ntry:\n    for i in range(5):\n        result = api_call(f\"endpoint_{i}\")\n        print(f\"\uacb0\uacfc: {result}\")\n        time.sleep(0.5)\nexcept Exception as e:\n    print(f\"\uc624\ub958: {e}\")\n\n# \uc7ac\uc2dc\ub3c4 \ub370\ucf54\ub808\uc774\ud130 \ud14c\uc2a4\ud2b8\nprint(\"\\n\uc7ac\uc2dc\ub3c4 \ud14c\uc2a4\ud2b8:\")\ntry:\n    result = unstable_operation(success_rate=0.7)\n    print(f\"\ucd5c\uc885 \uacb0\uacfc: {result}\")\nexcept Exception as e:\n    print(f\"\ucd5c\uc885 \uc2e4\ud328: {e}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#6-recursive-functions","title":"6. \uc7ac\uadc0 \ud568\uc218 (Recursive Functions)","text":""},{"location":"tutorials/intermediate/chapter01_advanced_functions/#61","title":"6.1 \uc7ac\uadc0 \ud568\uc218 \uae30\ubcf8 \uac1c\ub150","text":"<pre><code>print(\"=== \uc7ac\uadc0 \ud568\uc218 \uae30\ubcf8 ===\")\n\ndef factorial(n):\n    \"\"\"\ud329\ud1a0\ub9ac\uc5bc \uacc4\uc0b0 (\uae30\ubcf8 \uc7ac\uadc0)\"\"\"\n    # \uae30\uc800 \uc870\uac74 (Base Case)\n    if n &lt;= 1:\n        return 1\n\n    # \uc7ac\uadc0 \ud638\ucd9c\n    return n * factorial(n - 1)\n\ndef fibonacci(n):\n    \"\"\"\ud53c\ubcf4\ub098\uce58 \uc218\uc5f4 (\uae30\ubcf8 \uc7ac\uadc0)\"\"\"\n    if n &lt;= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef countdown(n):\n    \"\"\"\uce74\uc6b4\ud2b8\ub2e4\uc6b4 (\ub2e8\uc21c \uc7ac\uadc0)\"\"\"\n    if n &lt;= 0:\n        print(\"\ubc1c\uc0ac!\")\n        return\n\n    print(f\"{n}...\")\n    countdown(n - 1)\n\n# \uae30\ubcf8 \uc7ac\uadc0 \ud14c\uc2a4\ud2b8\nprint(\"\ud329\ud1a0\ub9ac\uc5bc:\")\nfor i in range(6):\n    print(f\"{i}! = {factorial(i)}\")\n\nprint(\"\\n\ud53c\ubcf4\ub098\uce58 \uc218\uc5f4:\")\nfor i in range(8):\n    print(f\"fib({i}) = {fibonacci(i)}\")\n\nprint(\"\\n\uce74\uc6b4\ud2b8\ub2e4\uc6b4:\")\ncountdown(5)\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#62","title":"6.2 \uc7ac\uadc0 \ud568\uc218 \ucd5c\uc801\ud654","text":"<pre><code># \uba54\ubaa8\uc774\uc81c\uc774\uc158\uc744 \ud65c\uc6a9\ud55c \ucd5c\uc801\ud654\ndef memoized_fibonacci():\n    \"\"\"\uba54\ubaa8\uc774\uc81c\uc774\uc158\uc744 \uc0ac\uc6a9\ud55c \ud53c\ubcf4\ub098\uce58\"\"\"\n    cache = {}\n\n    def fib(n):\n        if n in cache:\n            return cache[n]\n\n        if n &lt;= 1:\n            result = n\n        else:\n            result = fib(n - 1) + fib(n - 2)\n\n        cache[n] = result\n        return result\n\n    return fib\n\n# \ub0b4\uc7a5 \ub370\ucf54\ub808\uc774\ud130\ub97c \ud65c\uc6a9\ud55c \ucd5c\uc801\ud654\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef optimized_fibonacci(n):\n    \"\"\"lru_cache\ub97c \uc0ac\uc6a9\ud55c \ud53c\ubcf4\ub098\uce58\"\"\"\n    if n &lt;= 1:\n        return n\n    return optimized_fibonacci(n - 1) + optimized_fibonacci(n - 2)\n\ndef tail_recursive_factorial(n, accumulator=1):\n    \"\"\"\uaf2c\ub9ac \uc7ac\uadc0 \ud329\ud1a0\ub9ac\uc5bc\"\"\"\n    if n &lt;= 1:\n        return accumulator\n    return tail_recursive_factorial(n - 1, n * accumulator)\n\nprint(\"\\n=== \uc7ac\uadc0 \ud568\uc218 \ucd5c\uc801\ud654 ===\")\n\n# \uc131\ub2a5 \ube44\uad50\nimport time\n\ndef measure_time(func, *args):\n    start = time.time()\n    result = func(*args)\n    end = time.time()\n    return result, end - start\n\n# \ud53c\ubcf4\ub098\uce58 \uc131\ub2a5 \ube44\uad50\nn = 30\nmemo_fib = memoized_fibonacci()\n\nprint(f\"\ud53c\ubcf4\ub098\uce58({n}) \uc131\ub2a5 \ube44\uad50:\")\n\nresult1, time1 = measure_time(fibonacci, n)\nprint(f\"\uae30\ubcf8 \uc7ac\uadc0: {result1} ({time1:.4f}\ucd08)\")\n\nresult2, time2 = measure_time(memo_fib, n)\nprint(f\"\uba54\ubaa8\uc774\uc81c\uc774\uc158: {result2} ({time2:.4f}\ucd08)\")\n\nresult3, time3 = measure_time(optimized_fibonacci, n)\nprint(f\"lru_cache: {result3} ({time3:.4f}\ucd08)\")\n\n# \ud329\ud1a0\ub9ac\uc5bc \ube44\uad50\nn = 500\nresult4, time4 = measure_time(factorial, n)\nresult5, time5 = measure_time(tail_recursive_factorial, n)\n\nprint(f\"\\n\ud329\ud1a0\ub9ac\uc5bc({n}) \uc131\ub2a5 \ube44\uad50:\")\nprint(f\"\uae30\ubcf8 \uc7ac\uadc0: \uacc4\uc0b0 \uc644\ub8cc ({time4:.4f}\ucd08)\")\nprint(f\"\uaf2c\ub9ac \uc7ac\uadc0: \uacc4\uc0b0 \uc644\ub8cc ({time5:.4f}\ucd08)\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#63","title":"6.3 \uc7ac\uadc0 \ud568\uc218 \uace0\uae09 \ud65c\uc6a9","text":"<pre><code>def binary_search(arr, target, left=None, right=None):\n    \"\"\"\uc774\uc9c4 \ud0d0\uc0c9 (\uc7ac\uadc0)\"\"\"\n    if left is None:\n        left = 0\n    if right is None:\n        right = len(arr) - 1\n\n    if left &gt; right:\n        return -1  # \ucc3e\uc9c0 \ubabb\ud568\n\n    mid = (left + right) // 2\n\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] &gt; target:\n        return binary_search(arr, target, left, mid - 1)\n    else:\n        return binary_search(arr, target, mid + 1, right)\n\ndef quicksort(arr):\n    \"\"\"\ud035 \uc815\ub82c (\uc7ac\uadc0)\"\"\"\n    if len(arr) &lt;= 1:\n        return arr\n\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x &lt; pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x &gt; pivot]\n\n    return quicksort(left) + middle + quicksort(right)\n\ndef tree_traversal(node, traversal_type=\"inorder\"):\n    \"\"\"\uc774\uc9c4 \ud2b8\ub9ac \uc21c\ud68c (\uc7ac\uadc0)\"\"\"\n    if node is None:\n        return []\n\n    if traversal_type == \"preorder\":\n        return [node['value']] + tree_traversal(node.get('left')) + tree_traversal(node.get('right'))\n    elif traversal_type == \"inorder\":\n        return tree_traversal(node.get('left')) + [node['value']] + tree_traversal(node.get('right'))\n    elif traversal_type == \"postorder\":\n        return tree_traversal(node.get('left')) + tree_traversal(node.get('right')) + [node['value']]\n\ndef find_all_paths(graph, start, end, path=[]):\n    \"\"\"\uadf8\ub798\ud504\uc5d0\uc11c \ubaa8\ub4e0 \uacbd\ub85c \ucc3e\uae30 (\uc7ac\uadc0)\"\"\"\n    path = path + [start]\n\n    if start == end:\n        return [path]\n\n    if start not in graph:\n        return []\n\n    paths = []\n    for node in graph[start]:\n        if node not in path:  # \uc21c\ud658 \ubc29\uc9c0\n            new_paths = find_all_paths(graph, node, end, path)\n            paths.extend(new_paths)\n\n    return paths\n\nprint(\"\\n=== \uc7ac\uadc0 \ud568\uc218 \uace0\uae09 \ud65c\uc6a9 ===\")\n\n# \uc774\uc9c4 \ud0d0\uc0c9 \ud14c\uc2a4\ud2b8\nsorted_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\ntarget = 7\nindex = binary_search(sorted_numbers, target)\nprint(f\"\uc774\uc9c4 \ud0d0\uc0c9: {target}\uc740 \uc778\ub371\uc2a4 {index}\uc5d0 \uc788\uc2b5\ub2c8\ub2e4.\")\n\n# \ud035 \uc815\ub82c \ud14c\uc2a4\ud2b8\nunsorted = [64, 34, 25, 12, 22, 11, 90]\nsorted_arr = quicksort(unsorted)\nprint(f\"\ud035 \uc815\ub82c: {unsorted} \u2192 {sorted_arr}\")\n\n# \ud2b8\ub9ac \uc21c\ud68c \ud14c\uc2a4\ud2b8\ntree = {\n    'value': 1,\n    'left': {\n        'value': 2,\n        'left': {'value': 4, 'left': None, 'right': None},\n        'right': {'value': 5, 'left': None, 'right': None}\n    },\n    'right': {\n        'value': 3,\n        'left': {'value': 6, 'left': None, 'right': None},\n        'right': {'value': 7, 'left': None, 'right': None}\n    }\n}\n\nprint(f\"\uc804\uc704 \uc21c\ud68c: {tree_traversal(tree, 'preorder')}\")\nprint(f\"\uc911\uc704 \uc21c\ud68c: {tree_traversal(tree, 'inorder')}\")\nprint(f\"\ud6c4\uc704 \uc21c\ud68c: {tree_traversal(tree, 'postorder')}\")\n\n# \uadf8\ub798\ud504 \uacbd\ub85c \ucc3e\uae30 \ud14c\uc2a4\ud2b8\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': ['G'],\n    'E': ['G'],\n    'F': ['G'],\n    'G': []\n}\n\nall_paths = find_all_paths(graph, 'A', 'G')\nprint(f\"A\uc5d0\uc11c G\ub85c \uac00\ub294 \ubaa8\ub4e0 \uacbd\ub85c:\")\nfor i, path in enumerate(all_paths, 1):\n    print(f\"  \uacbd\ub85c {i}: {' \u2192 '.join(path)}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#7","title":"7. \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \ud328\ud134","text":""},{"location":"tutorials/intermediate/chapter01_advanced_functions/#71","title":"7.1 \uc21c\uc218 \ud568\uc218\uc640 \ubd80\uc791\uc6a9","text":"<pre><code># \uc21c\uc218 \ud568\uc218 vs \ube44\uc21c\uc218 \ud568\uc218\nprint(\"=== \uc21c\uc218 \ud568\uc218 vs \ube44\uc21c\uc218 \ud568\uc218 ===\")\n\n# \ube44\uc21c\uc218 \ud568\uc218 (\ubd80\uc791\uc6a9 \uc788\uc74c)\ncounter = 0\n\ndef impure_increment():\n    \"\"\"\ube44\uc21c\uc218 \ud568\uc218: \uc804\uc5ed \ubcc0\uc218 \uc218\uc815\"\"\"\n    global counter\n    counter += 1\n    return counter\n\ndef impure_add_to_list(lst, item):\n    \"\"\"\ube44\uc21c\uc218 \ud568\uc218: \uc785\ub825 \ub9e4\uac1c\ubcc0\uc218 \uc218\uc815\"\"\"\n    lst.append(item)\n    return lst\n\n# \uc21c\uc218 \ud568\uc218 (\ubd80\uc791\uc6a9 \uc5c6\uc74c)\ndef pure_increment(value):\n    \"\"\"\uc21c\uc218 \ud568\uc218: \uc785\ub825\uac12\ub9cc \uc0ac\uc6a9, \ubd80\uc791\uc6a9 \uc5c6\uc74c\"\"\"\n    return value + 1\n\ndef pure_add_to_list(lst, item):\n    \"\"\"\uc21c\uc218 \ud568\uc218: \uc0c8\ub85c\uc6b4 \ub9ac\uc2a4\ud2b8 \ubc18\ud658\"\"\"\n    return lst + [item]\n\ndef pure_calculate(a, b, operation):\n    \"\"\"\uc21c\uc218 \ud568\uc218: \uc785\ub825\uc5d0\ub9cc \uc758\uc874, \ub3d9\uc77c \uc785\ub825 -&gt; \ub3d9\uc77c \ucd9c\ub825\"\"\"\n    operations = {\n        'add': lambda x, y: x + y,\n        'multiply': lambda x, y: x * y,\n        'power': lambda x, y: x ** y\n    }\n    return operations.get(operation, lambda x, y: 0)(a, b)\n\n# \ud14c\uc2a4\ud2b8\nprint(\"\ube44\uc21c\uc218 \ud568\uc218:\")\nprint(f\"\ud638\ucd9c 1: {impure_increment()}\")  # 1\nprint(f\"\ud638\ucd9c 2: {impure_increment()}\")  # 2\nprint(f\"\uc804\uc5ed \ubcc0\uc218: {counter}\")\n\noriginal_list = [1, 2, 3]\nmodified_list = impure_add_to_list(original_list, 4)\nprint(f\"\uc6d0\ubcf8 \ub9ac\uc2a4\ud2b8 \uc218\uc815\ub428: {original_list}\")\n\nprint(\"\\n\uc21c\uc218 \ud568\uc218:\")\nvalue = 5\nprint(f\"\ud638\ucd9c 1: {pure_increment(value)}\")  # 6\nprint(f\"\ud638\ucd9c 2: {pure_increment(value)}\")  # 6\nprint(f\"\uc6d0\ubcf8 \uac12: {value}\")  # 5 (\ubcc0\uacbd\ub418\uc9c0 \uc54a\uc74c)\n\noriginal_list = [1, 2, 3]\nnew_list = pure_add_to_list(original_list, 4)\nprint(f\"\uc6d0\ubcf8 \ub9ac\uc2a4\ud2b8: {original_list}\")  # [1, 2, 3]\nprint(f\"\uc0c8 \ub9ac\uc2a4\ud2b8: {new_list}\")  # [1, 2, 3, 4]\n\nprint(f\"\uacc4\uc0b0 \uacb0\uacfc: {pure_calculate(2, 3, 'power')}\")  # 8\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#72-function-composition","title":"7.2 \ud568\uc218 \ud569\uc131 (Function Composition)","text":"<pre><code>def compose(*functions):\n    \"\"\"\ud568\uc218 \ud569\uc131: f(g(h(x)))\ub97c compose(f, g, h)(x)\ub85c \uc0ac\uc6a9\"\"\"\n    def composed_function(x):\n        result = x\n        for func in reversed(functions):\n            result = func(result)\n        return result\n    return composed_function\n\ndef pipe(*functions):\n    \"\"\"\ud30c\uc774\ud504: h(g(f(x)))\ub97c pipe(f, g, h)(x)\ub85c \uc0ac\uc6a9\"\"\"\n    def piped_function(x):\n        result = x\n        for func in functions:\n            result = func(result)\n        return result\n    return piped_function\n\n# \uae30\ubcf8 \ubcc0\ud658 \ud568\uc218\ub4e4\ndef add_ten(x):\n    return x + 10\n\ndef multiply_by_two(x):\n    return x * 2\n\ndef to_string(x):\n    return str(x)\n\ndef add_exclamation(s):\n    return s + \"!\"\n\nprint(\"\\n=== \ud568\uc218 \ud569\uc131 ===\")\n\n# \ud568\uc218 \ud569\uc131 \uc608\uc81c\ntransform1 = compose(add_exclamation, to_string, multiply_by_two, add_ten)\ntransform2 = pipe(add_ten, multiply_by_two, to_string, add_exclamation)\n\nnumber = 5\nresult1 = transform1(number)  # ((5 + 10) * 2) -&gt; \"30\" -&gt; \"30!\"\nresult2 = transform2(number)  # \uac19\uc740 \uacb0\uacfc\n\nprint(f\"\uc785\ub825: {number}\")\nprint(f\"compose \uacb0\uacfc: {result1}\")\nprint(f\"pipe \uacb0\uacfc: {result2}\")\n\n# \uc2e4\uc6a9\uc801\uc778 \ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\ndef clean_text(text):\n    \"\"\"\ud14d\uc2a4\ud2b8 \uc815\ub9ac\"\"\"\n    return text.strip().lower()\n\ndef remove_punctuation(text):\n    \"\"\"\uad6c\ub450\uc810 \uc81c\uac70\"\"\"\n    import string\n    return text.translate(str.maketrans('', '', string.punctuation))\n\ndef split_words(text):\n    \"\"\"\ub2e8\uc5b4 \ubd84\ud560\"\"\"\n    return text.split()\n\ndef filter_short_words(words):\n    \"\"\"\uc9e7\uc740 \ub2e8\uc5b4 \uc81c\uac70\"\"\"\n    return [word for word in words if len(word) &gt; 2]\n\ndef count_words(words):\n    \"\"\"\ub2e8\uc5b4 \uac1c\uc218 \uacc4\uc0b0\"\"\"\n    return len(words)\n\n# \ud14d\uc2a4\ud2b8 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\ntext_processor = pipe(\n    clean_text,\n    remove_punctuation,\n    split_words,\n    filter_short_words,\n    count_words\n)\n\nsample_text = \"  Hello, World! This is a Sample Text.  \"\nword_count = text_processor(sample_text)\nprint(f\"\\n\ud14d\uc2a4\ud2b8: '{sample_text}'\")\nprint(f\"\uae34 \ub2e8\uc5b4 \uac1c\uc218: {word_count}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#73-currying","title":"7.3 \ucee4\ub9c1 (Currying)","text":"<pre><code>def curry(func):\n    \"\"\"\ud568\uc218\ub97c \ucee4\ub9c1\uc73c\ub85c \ubcc0\ud658\"\"\"\n    def curried(*args, **kwargs):\n        if len(args) + len(kwargs) &gt;= func.__code__.co_argcount:\n            return func(*args, **kwargs)\n        return lambda *more_args, **more_kwargs: curried(*(args + more_args), **{**kwargs, **more_kwargs})\n    return curried\n\ndef manual_curry_add(a):\n    \"\"\"\uc218\ub3d9 \ucee4\ub9c1 \uc608\uc81c\"\"\"\n    def add_b(b):\n        def add_c(c):\n            return a + b + c\n        return add_c\n    return add_b\n\n# \ucee4\ub9c1 \uc801\uc6a9\n@curry\ndef add_three_numbers(a, b, c):\n    return a + b + c\n\n@curry\ndef multiply_three(a, b, c):\n    return a * b * c\n\n@curry\ndef power_with_base(base, exponent):\n    return base ** exponent\n\nprint(\"\\n=== \ucee4\ub9c1 (Currying) ===\")\n\n# \uc218\ub3d9 \ucee4\ub9c1 \uc0ac\uc6a9\nmanual_result = manual_curry_add(1)(2)(3)\nprint(f\"\uc218\ub3d9 \ucee4\ub9c1: {manual_result}\")\n\n# \uc790\ub3d9 \ucee4\ub9c1 \uc0ac\uc6a9\nauto_result = add_three_numbers(1)(2)(3)\nprint(f\"\uc790\ub3d9 \ucee4\ub9c1: {auto_result}\")\n\n# \ubd80\ubd84 \uc801\uc6a9 (Partial Application)\nadd_to_100 = add_three_numbers(100)\nadd_to_100_and_10 = add_to_100(10)\nfinal_result = add_to_100_and_10(5)\nprint(f\"\ubd80\ubd84 \uc801\uc6a9: {final_result}\")\n\n# \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c\nsquare = power_with_base(2)  # \uc81c\uacf1 \ud568\uc218\ncube = power_with_base(3)    # \uc138\uc81c\uacf1 \ud568\uc218\n\nnumbers = [1, 2, 3, 4, 5]\nsquared_numbers = list(map(square, numbers))\ncubed_numbers = list(map(cube, numbers))\n\nprint(f\"\uc6d0\ubcf8: {numbers}\")\nprint(f\"\uc81c\uacf1: {squared_numbers}\")\nprint(f\"\uc138\uc81c\uacf1: {cubed_numbers}\")\n\n# \uc124\uc815 \uac00\ub2a5\ud55c \ud568\uc218\ub4e4\ndouble = multiply_three(2)\ntriple = multiply_three(3)\n\ndouble_and_multiply_by_5 = double(5)  # 2 * 5 * x\ntriple_and_multiply_by_2 = triple(2)  # 3 * 2 * x\n\ntest_value = 4\nprint(f\"\\n{test_value}\uc5d0 \ub300\ud55c \uc5f0\uc0b0:\")\nprint(f\"2 * 5 * {test_value} = {double_and_multiply_by_5(test_value)}\")\nprint(f\"3 * 2 * {test_value} = {triple_and_multiply_by_2(test_value)}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#8","title":"8. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter01_advanced_functions/#1","title":"\uc5f0\uc2b5 1: \uace0\uae09 \ub370\ucf54\ub808\uc774\ud130 \ub9cc\ub4e4\uae30","text":"<p>\ud568\uc218 \ud638\ucd9c \ud69f\uc218\ub97c \ucd94\uc801\ud558\uace0, \uc2e4\ud589 \uc2dc\uac04\uc744 \uce21\uc815\ud558\uba70, \uacb0\uacfc\ub97c \uce90\uc2f1\ud558\ub294 \uc885\ud569 \ub370\ucf54\ub808\uc774\ud130\ub97c \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#2","title":"\uc5f0\uc2b5 2: \ud568\uc218\ud615 \ub370\uc774\ud130 \ucc98\ub9ac","text":"<p>map, filter, reduce\ub97c \uc870\ud569\ud558\uc5ec \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \ubcc0\ud658 \ud30c\uc774\ud504\ub77c\uc778\uc744 \uad6c\ud604\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#3","title":"\uc5f0\uc2b5 3: \uc7ac\uadc0\uc801 \ud30c\uc77c \ud0d0\uc0c9\uae30","text":"<p>\uc8fc\uc5b4\uc9c4 \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c \ud2b9\uc815 \ud655\uc7a5\uc790\uc758 \ud30c\uc77c\uc744 \uc7ac\uadc0\uc801\uc73c\ub85c \ucc3e\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#4","title":"\uc5f0\uc2b5 4: \ud074\ub85c\uc800 \uae30\ubc18 \uc0c1\ud0dc \uad00\ub9ac","text":"<p>\ud074\ub85c\uc800\ub97c \ud65c\uc6a9\ud558\uc5ec \uac04\ub2e8\ud55c \uc0c1\ud0dc \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\uac00\ubcc0 \uc778\uc218: args\uc640 *kwargs\ub97c \ud65c\uc6a9\ud55c \uc720\uc5f0\ud55c \ud568\uc218 \uc124\uacc4</li> <li>\ub78c\ub2e4 \ud568\uc218: \uac04\uacb0\ud55c \uc775\uba85 \ud568\uc218 \uc791\uc131\uacfc \ud65c\uc6a9</li> <li>\uace0\ucc28 \ud568\uc218: map, filter, reduce\ub97c \uc774\uc6a9\ud55c \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d</li> <li>\ub370\ucf54\ub808\uc774\ud130: \ud568\uc218\uc758 \ub3d9\uc791\uc744 \ud655\uc7a5\ud558\ub294 \ud328\ud134</li> <li>\ud074\ub85c\uc800: \uc678\ubd80 \ubcc0\uc218\ub97c \ucea1\ucc98\ud558\ub294 \ub0b4\ubd80 \ud568\uc218</li> <li>\uc7ac\uadc0 \ud568\uc218: \uc790\uae30 \uc790\uc2e0\uc744 \ud638\ucd9c\ud558\ub294 \ud568\uc218\uc640 \ucd5c\uc801\ud654 \uae30\ubc95</li> <li>\ud568\uc218\ud615 \ud328\ud134: \uc21c\uc218 \ud568\uc218, \ud568\uc218 \ud569\uc131, \ucee4\ub9c1 \ub4f1</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \ud30c\uc77c \ucc98\ub9ac\uc640 \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ud615\uc2dd\uc744 \ub2e4\ub8e8\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud558\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter01_advanced_functions/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ud568\uc218\ub294 \uc77c\uae09 \uac1d\uccb4\ub85c\uc11c \ub2e4\uc591\ud55c \ubc29\uc2dd\uc73c\ub85c \uc870\uc791\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\ub370\ucf54\ub808\uc774\ud130\ub294 \ucf54\ub4dc\uc758 \uc7ac\uc0ac\uc6a9\uc131\uacfc \uac00\ub3c5\uc131\uc744 \ub192\uc785\ub2c8\ub2e4</li> <li>\ud074\ub85c\uc800\ub294 \uc0c1\ud0dc\ub97c \ucea1\ucc98\ud558\ub294 \uac15\ub825\ud55c \ub3c4\uad6c\uc785\ub2c8\ub2e4</li> <li>\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \ud328\ud134\uc73c\ub85c \ub354 \uc548\uc804\ud558\uace0 \uc608\uce21 \uac00\ub2a5\ud55c \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\uc801\uc808\ud55c \ucd94\uc0c1\ud654\ub294 \ucf54\ub4dc\uc758 \uc720\uc9c0\ubcf4\uc218\uc131\uc744 \ud06c\uac8c \ud5a5\uc0c1\uc2dc\ud0b5\ub2c8\ub2e4 </li> </ul>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/","title":"Chapter 2: \ud30c\uc77c \ucc98\ub9ac\uc640 \ub370\uc774\ud130 \ud615\uc2dd (File Processing and Data Formats)","text":""},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - JSON \ub370\uc774\ud130\ub97c \ud30c\uc774\uc36c \uac1d\uccb4\ub85c \ubcc0\ud658\ud558\uace0 \ucc98\ub9ac\ud558\uae30 - CSV \ud30c\uc77c\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uc77d\uace0 \uc4f0\uba70 \ubd84\uc11d\ud558\uae30 - XML \ubb38\uc11c\ub97c \ud30c\uc2f1\ud558\uace0 \uc870\uc791\ud558\uae30 - \ubc14\uc774\ub108\ub9ac \ud30c\uc77c\uc744 \uc548\uc804\ud558\uac8c \ucc98\ub9ac\ud558\uae30 - \uc555\ucd95 \ud30c\uc77c(ZIP, TAR)\uc744 \uc0dd\uc131\ud558\uace0 \ud574\uc81c\ud558\uae30 - \uc124\uc815 \ud30c\uc77c\uc744 \uad00\ub9ac\ud558\uace0 \ud65c\uc6a9\ud558\uae30 - \ud30c\uc77c \uc2dc\uc2a4\ud15c\uc744 \ud0d0\uc0c9\ud558\uace0 \uad00\ub9ac\ud558\uae30 - \ub370\uc774\ud130 \uc9c1\ub82c\ud654/\uc5ed\uc9c1\ub82c\ud654 \uac1c\ub150 \uc774\ud574\ud558\uae30</p>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#1-json","title":"1. JSON \ud30c\uc77c \ucc98\ub9ac","text":""},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#11-json","title":"1.1 JSON \uae30\ubcf8 \uac1c\ub150\uacfc \ucc98\ub9ac","text":"<pre><code>import json\nimport datetime\nfrom decimal import Decimal\n\nprint(\"=== JSON \uae30\ubcf8 \ucc98\ub9ac ===\")\n\n# \ud30c\uc774\uc36c \uac1d\uccb4\ub97c JSON\uc73c\ub85c \ubcc0\ud658\ndata = {\n    \"name\": \"\uae40\ucca0\uc218\",\n    \"age\": 30,\n    \"city\": \"\uc11c\uc6b8\",\n    \"hobbies\": [\"\ub3c5\uc11c\", \"\uc601\ud654\uac10\uc0c1\", \"\ud504\ub85c\uadf8\ub798\ubc0d\"],\n    \"is_student\": False,\n    \"grades\": {\n        \"math\": 85,\n        \"english\": 92,\n        \"science\": 78\n    }\n}\n\n# JSON \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\njson_string = json.dumps(data, ensure_ascii=False, indent=2)\nprint(\"JSON \ubb38\uc790\uc5f4:\")\nprint(json_string)\n\n# JSON \ubb38\uc790\uc5f4\uc744 \ud30c\uc774\uc36c \uac1d\uccb4\ub85c \ubcc0\ud658\nparsed_data = json.loads(json_string)\nprint(f\"\\n\ud30c\uc2f1\ub41c \ub370\uc774\ud130: {parsed_data}\")\nprint(f\"\uc774\ub984: {parsed_data['name']}\")\nprint(f\"\ucde8\ubbf8\ub4e4: {', '.join(parsed_data['hobbies'])}\")\n\n# JSON \ud30c\uc77c \uc4f0\uae30\nwith open('student_data.json', 'w', encoding='utf-8') as file:\n    json.dump(data, file, ensure_ascii=False, indent=2)\n\nprint(\"\\nJSON \ud30c\uc77c\uc774 \uc800\uc7a5\ub418\uc5c8\uc2b5\ub2c8\ub2e4: student_data.json\")\n\n# JSON \ud30c\uc77c \uc77d\uae30\nwith open('student_data.json', 'r', encoding='utf-8') as file:\n    loaded_data = json.load(file)\n\nprint(f\"\ud30c\uc77c\uc5d0\uc11c \uc77d\uc740 \ub370\uc774\ud130: {loaded_data}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#12-json","title":"1.2 \ubcf5\ud569 JSON \ub370\uc774\ud130 \ucc98\ub9ac","text":"<pre><code># \ubcf5\uc7a1\ud55c JSON \ub370\uc774\ud130 \uc608\uc81c\ncomplex_data = {\n    \"metadata\": {\n        \"version\": \"1.0\",\n        \"created_at\": \"2024-01-01T10:00:00Z\",\n        \"author\": \"Python Tutorial\"\n    },\n    \"students\": [\n        {\n            \"id\": 1,\n            \"name\": \"\uae40\ucca0\uc218\",\n            \"courses\": [\n                {\"name\": \"\ud30c\uc774\uc36c \ud504\ub85c\uadf8\ub798\ubc0d\", \"grade\": 'A', \"credits\": 3},\n                {\"name\": \"\ub370\uc774\ud130 \uad6c\uc870\", \"grade\": 'B+', \"credits\": 3}\n            ],\n            \"contact\": {\n                \"email\": \"kim@email.com\",\n                \"phone\": \"010-1234-5678\"\n            }\n        },\n        {\n            \"id\": 2,\n            \"name\": \"\uc774\uc601\ud76c\",\n            \"courses\": [\n                {\"name\": \"\ud30c\uc774\uc36c \ud504\ub85c\uadf8\ub798\ubc0d\", \"grade\": 'A+', \"credits\": 3},\n                {\"name\": \"\uc54c\uace0\ub9ac\uc998\", \"grade\": 'A', \"credits\": 4}\n            ],\n            \"contact\": {\n                \"email\": \"lee@email.com\",\n                \"phone\": \"010-9876-5432\"\n            }\n        }\n    ]\n}\n\nprint(\"\\n=== \ubcf5\ud569 JSON \ub370\uc774\ud130 \ucc98\ub9ac ===\")\n\n# JSON \ud30c\uc77c\ub85c \uc800\uc7a5\nwith open('school_data.json', 'w', encoding='utf-8') as file:\n    json.dump(complex_data, file, ensure_ascii=False, indent=2)\n\n# \ub370\uc774\ud130 \ubd84\uc11d \ud568\uc218\ub4e4\ndef analyze_student_data(data):\n    \"\"\"\ud559\uc0dd \ub370\uc774\ud130 \ubd84\uc11d\"\"\"\n    students = data['students']\n\n    print(f\"\ucd1d \ud559\uc0dd \uc218: {len(students)}\")\n\n    # \uac01 \ud559\uc0dd\uc758 \ucd1d \ud559\uc810 \uacc4\uc0b0\n    for student in students:\n        total_credits = sum(course['credits'] for course in student['courses'])\n        print(f\"{student['name']}: {total_credits}\ud559\uc810\")\n\n    # \uacfc\ubaa9\ubcc4 \uc218\uac15 \ud559\uc0dd \uc218\n    course_count = {}\n    for student in students:\n        for course in student['courses']:\n            course_name = course['name']\n            course_count[course_name] = course_count.get(course_name, 0) + 1\n\n    print(\"\\n\uacfc\ubaa9\ubcc4 \uc218\uac15 \ud559\uc0dd \uc218:\")\n    for course, count in course_count.items():\n        print(f\"  {course}: {count}\uba85\")\n\ndef find_student_by_id(data, student_id):\n    \"\"\"ID\ub85c \ud559\uc0dd \ucc3e\uae30\"\"\"\n    for student in data['students']:\n        if student['id'] == student_id:\n            return student\n    return None\n\n# \ub370\uc774\ud130 \ubd84\uc11d \uc2e4\ud589\nanalyze_student_data(complex_data)\n\n# \ud2b9\uc815 \ud559\uc0dd \ucc3e\uae30\nstudent = find_student_by_id(complex_data, 1)\nif student:\n    print(f\"\\n\ud559\uc0dd \uc815\ubcf4: {student['name']}\")\n    print(f\"\uc774\uba54\uc77c: {student['contact']['email']}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#13-json","title":"1.3 JSON \uc9c1\ub82c\ud654 \uace0\uae09 \uae30\ubc95","text":"<pre><code>import json\nfrom datetime import datetime, date\nfrom decimal import Decimal\n\nclass DateTimeEncoder(json.JSONEncoder):\n    \"\"\"\ub0a0\uc9dc/\uc2dc\uac04 \uac1d\uccb4\ub97c JSON\uc73c\ub85c \uc9c1\ub82c\ud654\ud558\ub294 \ucee4\uc2a4\ud140 \uc778\ucf54\ub354\"\"\"\n    def default(self, obj):\n        if isinstance(obj, (datetime, date)):\n            return obj.isoformat()\n        elif isinstance(obj, Decimal):\n            return float(obj)\n        return super().default(obj)\n\nclass Person:\n    \"\"\"\uc0ac\uc6a9\uc790 \uc815\uc758 \ud074\ub798\uc2a4\"\"\"\n    def __init__(self, name, birth_date, salary):\n        self.name = name\n        self.birth_date = birth_date\n        self.salary = salary\n\n    def to_dict(self):\n        \"\"\"\uac1d\uccb4\ub97c \ub515\uc154\ub108\ub9ac\ub85c \ubcc0\ud658\"\"\"\n        return {\n            'name': self.name,\n            'birth_date': self.birth_date,\n            'salary': self.salary\n        }\n\n    @classmethod\n    def from_dict(cls, data):\n        \"\"\"\ub515\uc154\ub108\ub9ac\uc5d0\uc11c \uac1d\uccb4 \uc0dd\uc131\"\"\"\n        return cls(\n            data['name'],\n            datetime.fromisoformat(data['birth_date']).date(),\n            Decimal(str(data['salary']))\n        )\n\nprint(\"\\n=== JSON \uc9c1\ub82c\ud654 \uace0\uae09 \uae30\ubc95 ===\")\n\n# \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \ud0c0\uc785\uc744 \ud3ec\ud568\ud55c \uac1d\uccb4\nperson = Person(\n    \"\uae40\ucca0\uc218\",\n    date(1990, 5, 15),\n    Decimal('3500000.50')\n)\n\n# \ucee4\uc2a4\ud140 \uc778\ucf54\ub354 \uc0ac\uc6a9\nperson_dict = person.to_dict()\njson_data = json.dumps(person_dict, cls=DateTimeEncoder, ensure_ascii=False, indent=2)\nprint(\"\uc9c1\ub82c\ud654\ub41c \ub370\uc774\ud130:\")\nprint(json_data)\n\n# \uc5ed\uc9c1\ub82c\ud654\nloaded_dict = json.loads(json_data)\nrestored_person = Person.from_dict(loaded_dict)\n\nprint(f\"\\n\ubcf5\uc6d0\ub41c \uac1d\uccb4:\")\nprint(f\"\uc774\ub984: {restored_person.name}\")\nprint(f\"\uc0dd\ub144\uc6d4\uc77c: {restored_person.birth_date}\")\nprint(f\"\uae09\uc5ec: {restored_person.salary}\")\n\n# JSON \uc2a4\ud0a4\ub9c8 \uac80\uc99d \ud568\uc218\ndef validate_json_structure(data, schema):\n    \"\"\"\uac04\ub2e8\ud55c JSON \uc2a4\ud0a4\ub9c8 \uac80\uc99d\"\"\"\n    def check_type(value, expected_type):\n        if expected_type == 'string':\n            return isinstance(value, str)\n        elif expected_type == 'number':\n            return isinstance(value, (int, float))\n        elif expected_type == 'boolean':\n            return isinstance(value, bool)\n        elif expected_type == 'array':\n            return isinstance(value, list)\n        elif expected_type == 'object':\n            return isinstance(value, dict)\n        return False\n\n    for key, expected_type in schema.items():\n        if key not in data:\n            return False, f\"\ud544\uc218 \ud544\ub4dc '{key}'\uac00 \uc5c6\uc2b5\ub2c8\ub2e4\"\n\n        if not check_type(data[key], expected_type):\n            return False, f\"\ud544\ub4dc '{key}'\uc758 \ud0c0\uc785\uc774 \uc798\ubabb\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc608\uc0c1: {expected_type}\"\n\n    return True, \"\uc720\ud6a8\ud55c \uad6c\uc870\uc785\ub2c8\ub2e4\"\n\n# \uc2a4\ud0a4\ub9c8 \uac80\uc99d \uc608\uc81c\nuser_schema = {\n    'name': 'string',\n    'age': 'number',\n    'email': 'string',\n    'is_active': 'boolean'\n}\n\nvalid_user = {\n    'name': '\uae40\ucca0\uc218',\n    'age': 30,\n    'email': 'kim@email.com',\n    'is_active': True\n}\n\ninvalid_user = {\n    'name': '\uc774\uc601\ud76c',\n    'age': '25',  # \ubb38\uc790\uc5f4\uc774\uc9c0\ub9cc \uc22b\uc790\uc5ec\uc57c \ud568\n    'email': 'lee@email.com'\n    # is_active \ud544\ub4dc \ub204\ub77d\n}\n\nprint(f\"\\n=== JSON \uc2a4\ud0a4\ub9c8 \uac80\uc99d ===\")\nis_valid, message = validate_json_structure(valid_user, user_schema)\nprint(f\"\uc720\ud6a8\ud55c \uc0ac\uc6a9\uc790: {is_valid} - {message}\")\n\nis_valid, message = validate_json_structure(invalid_user, user_schema)\nprint(f\"\ubb34\ud6a8\ud55c \uc0ac\uc6a9\uc790: {is_valid} - {message}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#2-csv","title":"2. CSV \ud30c\uc77c \ucc98\ub9ac","text":""},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#21-csv","title":"2.1 CSV \uae30\ubcf8 \ucc98\ub9ac","text":"<pre><code>import csv\nfrom io import StringIO\n\nprint(\"\\n=== CSV \uae30\ubcf8 \ucc98\ub9ac ===\")\n\n# CSV \ub370\uc774\ud130 \uc0dd\uc131\nstudents_data = [\n    ['\uc774\ub984', '\ub098\uc774', '\ub3c4\uc2dc', '\uc131\uc801'],\n    ['\uae40\ucca0\uc218', 25, '\uc11c\uc6b8', 85],\n    ['\uc774\uc601\ud76c', 23, '\ubd80\uc0b0', 92],\n    ['\ubc15\ubbfc\uc218', 24, '\ub300\uad6c', 78],\n    ['\ucd5c\uc9c0\uc6d0', 22, '\uc778\ucc9c', 95]\n]\n\n# CSV \ud30c\uc77c \uc4f0\uae30\nwith open('students.csv', 'w', newline='', encoding='utf-8') as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerows(students_data)\n\nprint(\"CSV \ud30c\uc77c\uc774 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4: students.csv\")\n\n# CSV \ud30c\uc77c \uc77d\uae30\nwith open('students.csv', 'r', encoding='utf-8') as csvfile:\n    reader = csv.reader(csvfile)\n\n    print(\"\\nCSV \ud30c\uc77c \ub0b4\uc6a9:\")\n    for row_num, row in enumerate(reader):\n        if row_num == 0:\n            print(f\"\ud5e4\ub354: {row}\")\n        else:\n            print(f\"\ud559\uc0dd {row_num}: {row}\")\n\n# DictReader\uc640 DictWriter \uc0ac\uc6a9\nprint(\"\\n=== DictReader\uc640 DictWriter ===\")\n\n# DictWriter\ub85c \uc4f0\uae30\nfieldnames = ['name', 'age', 'city', 'grade']\nstudents_dict = [\n    {'name': '\uae40\ucca0\uc218', 'age': 25, 'city': '\uc11c\uc6b8', 'grade': 85},\n    {'name': '\uc774\uc601\ud76c', 'age': 23, 'city': '\ubd80\uc0b0', 'grade': 92},\n    {'name': '\ubc15\ubbfc\uc218', 'age': 24, 'city': '\ub300\uad6c', 'grade': 78},\n    {'name': '\ucd5c\uc9c0\uc6d0', 'age': 22, 'city': '\uc778\ucc9c', 'grade': 95}\n]\n\nwith open('students_dict.csv', 'w', newline='', encoding='utf-8') as csvfile:\n    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n    writer.writeheader()\n    writer.writerows(students_dict)\n\n# DictReader\ub85c \uc77d\uae30\nwith open('students_dict.csv', 'r', encoding='utf-8') as csvfile:\n    reader = csv.DictReader(csvfile)\n\n    print(\"DictReader\ub85c \uc77d\uc740 \ub370\uc774\ud130:\")\n    for row in reader:\n        print(f\"{row['name']}: {row['age']}\uc138, {row['city']}, \uc131\uc801 {row['grade']}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#22-csv","title":"2.2 CSV \ub370\uc774\ud130 \ubd84\uc11d \ubc0f \ucc98\ub9ac","text":"<pre><code>import csv\nimport statistics\nfrom collections import defaultdict, Counter\n\ndef create_sample_sales_data():\n    \"\"\"\uc0d8\ud50c \ud310\ub9e4 \ub370\uc774\ud130 \uc0dd\uc131\"\"\"\n    sales_data = [\n        ['date', 'product', 'category', 'quantity', 'price', 'salesperson'],\n        ['2024-01-01', '\ub178\ud2b8\ubd81', '\uc804\uc790\uc81c\ud488', 2, 1200000, '\uae40\ucca0\uc218'],\n        ['2024-01-02', '\ub9c8\uc6b0\uc2a4', '\uc804\uc790\uc81c\ud488', 5, 25000, '\uc774\uc601\ud76c'],\n        ['2024-01-03', '\ud0a4\ubcf4\ub4dc', '\uc804\uc790\uc81c\ud488', 3, 80000, '\uae40\ucca0\uc218'],\n        ['2024-01-04', '\ubaa8\ub2c8\ud130', '\uc804\uc790\uc81c\ud488', 1, 300000, '\ubc15\ubbfc\uc218'],\n        ['2024-01-05', '\ud5e4\ub4dc\ud3f0', '\uc804\uc790\uc81c\ud488', 4, 150000, '\uc774\uc601\ud76c'],\n        ['2024-01-06', '\uc2a4\ud53c\ucee4', '\uc804\uc790\uc81c\ud488', 2, 200000, '\uae40\ucca0\uc218'],\n        ['2024-01-07', '\uc6f9\ucea0', '\uc804\uc790\uc81c\ud488', 6, 100000, '\ubc15\ubbfc\uc218'],\n        ['2024-01-08', '\ud0dc\ube14\ub9bf', '\uc804\uc790\uc81c\ud488', 1, 800000, '\uc774\uc601\ud76c'],\n    ]\n\n    with open('sales_data.csv', 'w', newline='', encoding='utf-8') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerows(sales_data)\n\ndef analyze_sales_data():\n    \"\"\"\ud310\ub9e4 \ub370\uc774\ud130 \ubd84\uc11d\"\"\"\n    print(\"\\n=== CSV \ub370\uc774\ud130 \ubd84\uc11d ===\")\n\n    # \ub370\uc774\ud130 \uc77d\uae30 \ubc0f \ubcc0\ud658\n    sales_records = []\n    with open('sales_data.csv', 'r', encoding='utf-8') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            # \ub370\uc774\ud130 \ud0c0\uc785 \ubcc0\ud658\n            record = {\n                'date': row['date'],\n                'product': row['product'],\n                'category': row['category'],\n                'quantity': int(row['quantity']),\n                'price': int(row['price']),\n                'salesperson': row['salesperson']\n            }\n            record['total_sales'] = record['quantity'] * record['price']\n            sales_records.append(record)\n\n    # \ucd1d \ub9e4\ucd9c \uacc4\uc0b0\n    total_revenue = sum(record['total_sales'] for record in sales_records)\n    print(f\"\ucd1d \ub9e4\ucd9c: {total_revenue:,}\uc6d0\")\n\n    # \ud310\ub9e4\uc6d0\ubcc4 \ub9e4\ucd9c\n    salesperson_sales = defaultdict(int)\n    for record in sales_records:\n        salesperson_sales[record['salesperson']] += record['total_sales']\n\n    print(\"\\n\ud310\ub9e4\uc6d0\ubcc4 \ub9e4\ucd9c:\")\n    for person, sales in sorted(salesperson_sales.items(), key=lambda x: x[1], reverse=True):\n        print(f\"  {person}: {sales:,}\uc6d0\")\n\n    # \uc81c\ud488\ubcc4 \ud310\ub9e4 \uc218\ub7c9\n    product_quantity = defaultdict(int)\n    for record in sales_records:\n        product_quantity[record['product']] += record['quantity']\n\n    print(\"\\n\uc81c\ud488\ubcc4 \ud310\ub9e4 \uc218\ub7c9:\")\n    for product, quantity in sorted(product_quantity.items(), key=lambda x: x[1], reverse=True):\n        print(f\"  {product}: {quantity}\uac1c\")\n\n    # \ud3c9\uade0 \ub2e8\uac00 \uacc4\uc0b0\n    prices = [record['price'] for record in sales_records]\n    avg_price = statistics.mean(prices)\n    median_price = statistics.median(prices)\n\n    print(f\"\\n\uac00\uaca9 \ud1b5\uacc4:\")\n    print(f\"  \ud3c9\uade0 \ub2e8\uac00: {avg_price:,.0f}\uc6d0\")\n    print(f\"  \uc911\uac04 \ub2e8\uac00: {median_price:,}\uc6d0\")\n    print(f\"  \ucd5c\uace0 \ub2e8\uac00: {max(prices):,}\uc6d0\")\n    print(f\"  \ucd5c\uc800 \ub2e8\uac00: {min(prices):,}\uc6d0\")\n\ndef export_analysis_results():\n    \"\"\"\ubd84\uc11d \uacb0\uacfc\ub97c \uc0c8\ub85c\uc6b4 CSV \ud30c\uc77c\ub85c \ub0b4\ubcf4\ub0b4\uae30\"\"\"\n    # \ud310\ub9e4\uc6d0\ubcc4 \uc694\uc57d \ub370\uc774\ud130 \uc0dd\uc131\n    with open('sales_data.csv', 'r', encoding='utf-8') as csvfile:\n        reader = csv.DictReader(csvfile)\n\n        salesperson_stats = defaultdict(lambda: {\n            'total_sales': 0,\n            'total_quantity': 0,\n            'products_sold': set()\n        })\n\n        for row in reader:\n            person = row['salesperson']\n            quantity = int(row['quantity'])\n            price = int(row['price'])\n\n            salesperson_stats[person]['total_sales'] += quantity * price\n            salesperson_stats[person]['total_quantity'] += quantity\n            salesperson_stats[person]['products_sold'].add(row['product'])\n\n    # \uc694\uc57d \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\n    summary_data = []\n    for person, stats in salesperson_stats.items():\n        summary_data.append({\n            'salesperson': person,\n            'total_sales': stats['total_sales'],\n            'total_quantity': stats['total_quantity'],\n            'unique_products': len(stats['products_sold']),\n            'avg_sale_amount': stats['total_sales'] // stats['total_quantity']\n        })\n\n    # CSV \ud30c\uc77c\ub85c \uc800\uc7a5\n    with open('sales_summary.csv', 'w', newline='', encoding='utf-8') as csvfile:\n        fieldnames = ['salesperson', 'total_sales', 'total_quantity', 'unique_products', 'avg_sale_amount']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerows(summary_data)\n\n    print(\"\\n\ud310\ub9e4\uc6d0 \uc694\uc57d \ub9ac\ud3ec\ud2b8\uac00 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4: sales_summary.csv\")\n\n# \uc0d8\ud50c \ub370\uc774\ud130 \uc0dd\uc131 \ubc0f \ubd84\uc11d \uc2e4\ud589\ncreate_sample_sales_data()\nanalyze_sales_data()\nexport_analysis_results()\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#23-csv","title":"2.3 CSV \ud30c\uc77c \uace0\uae09 \ucc98\ub9ac \uae30\ubc95","text":"<pre><code>import csv\nfrom datetime import datetime\nimport re\n\nclass CSVProcessor:\n    \"\"\"CSV \ud30c\uc77c \ucc98\ub9ac\ub97c \uc704\ud55c \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, filename, delimiter=',', quotechar='\"'):\n        self.filename = filename\n        self.delimiter = delimiter\n        self.quotechar = quotechar\n        self.data = []\n        self.headers = []\n\n    def load_data(self):\n        \"\"\"CSV \ud30c\uc77c \ub370\uc774\ud130 \ub85c\ub4dc\"\"\"\n        try:\n            with open(self.filename, 'r', encoding='utf-8') as csvfile:\n                # \uad6c\ubd84\uc790 \uc790\ub3d9 \uac10\uc9c0\n                sample = csvfile.read(1024)\n                csvfile.seek(0)\n\n                sniffer = csv.Sniffer()\n                dialect = sniffer.sniff(sample)\n\n                reader = csv.DictReader(csvfile, dialect=dialect)\n                self.headers = reader.fieldnames\n                self.data = list(reader)\n\n            print(f\"\u2713 {len(self.data)}\uac1c\uc758 \ub808\ucf54\ub4dc\ub97c \ub85c\ub4dc\ud588\uc2b5\ub2c8\ub2e4.\")\n            return True\n\n        except FileNotFoundError:\n            print(f\"\u2717 \ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {self.filename}\")\n            return False\n        except Exception as e:\n            print(f\"\u2717 \ud30c\uc77c \ub85c\ub4dc \uc911 \uc624\ub958 \ubc1c\uc0dd: {e}\")\n            return False\n\n    def validate_data(self, validation_rules):\n        \"\"\"\ub370\uc774\ud130 \uac80\uc99d\"\"\"\n        errors = []\n\n        for row_num, row in enumerate(self.data, 1):\n            for field, rule in validation_rules.items():\n                if field not in row:\n                    continue\n\n                value = row[field].strip()\n\n                # \ud544\uc218 \ud544\ub4dc \uccb4\ud06c\n                if rule.get('required', False) and not value:\n                    errors.append(f\"\ud589 {row_num}: '{field}' \ud544\ub4dc\uac00 \ube44\uc5b4\uc788\uc2b5\ub2c8\ub2e4.\")\n                    continue\n\n                # \ub370\uc774\ud130 \ud0c0\uc785 \uccb4\ud06c\n                if value and 'type' in rule:\n                    if rule['type'] == 'int':\n                        try:\n                            int(value)\n                        except ValueError:\n                            errors.append(f\"\ud589 {row_num}: '{field}'\ub294 \uc815\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4. (\ud604\uc7ac: {value})\")\n\n                    elif rule['type'] == 'float':\n                        try:\n                            float(value)\n                        except ValueError:\n                            errors.append(f\"\ud589 {row_num}: '{field}'\ub294 \uc22b\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4. (\ud604\uc7ac: {value})\")\n\n                    elif rule['type'] == 'email':\n                        email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n                        if not re.match(email_pattern, value):\n                            errors.append(f\"\ud589 {row_num}: '{field}'\ub294 \uc720\ud6a8\ud55c \uc774\uba54\uc77c \ud615\uc2dd\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4. (\ud604\uc7ac: {value})\")\n\n                # \ubc94\uc704 \uccb4\ud06c\n                if value and 'range' in rule:\n                    try:\n                        num_value = float(value)\n                        min_val, max_val = rule['range']\n                        if not (min_val &lt;= num_value &lt;= max_val):\n                            errors.append(f\"\ud589 {row_num}: '{field}'\ub294 {min_val}~{max_val} \ubc94\uc704\uc5ec\uc57c \ud569\ub2c8\ub2e4. (\ud604\uc7ac: {value})\")\n                    except ValueError:\n                        pass  # \ud0c0\uc785 \uccb4\ud06c\uc5d0\uc11c \uc774\ubbf8 \ucc98\ub9ac\ub428\n\n        return errors\n\n    def filter_data(self, conditions):\n        \"\"\"\uc870\uac74\uc5d0 \ub530\ub978 \ub370\uc774\ud130 \ud544\ud130\ub9c1\"\"\"\n        filtered_data = []\n\n        for row in self.data:\n            match = True\n\n            for field, condition in conditions.items():\n                if field not in row:\n                    match = False\n                    break\n\n                value = row[field].strip()\n                operator = condition.get('operator', '==')\n                target = condition.get('value')\n\n                try:\n                    # \uc22b\uc790 \ube44\uad50\n                    if isinstance(target, (int, float)):\n                        value = float(value)\n                        if operator == '==' and value != target:\n                            match = False\n                        elif operator == '&gt;' and value &lt;= target:\n                            match = False\n                        elif operator == '&lt;' and value &gt;= target:\n                            match = False\n                        elif operator == '&gt;=' and value &lt; target:\n                            match = False\n                        elif operator == '&lt;=' and value &gt; target:\n                            match = False\n\n                    # \ubb38\uc790\uc5f4 \ube44\uad50\n                    else:\n                        if operator == '==' and value != target:\n                            match = False\n                        elif operator == 'contains' and target not in value:\n                            match = False\n                        elif operator == 'startswith' and not value.startswith(target):\n                            match = False\n\n                except ValueError:\n                    match = False\n\n                if not match:\n                    break\n\n            if match:\n                filtered_data.append(row)\n\n        return filtered_data\n\n    def save_data(self, data, output_filename):\n        \"\"\"\ub370\uc774\ud130\ub97c CSV \ud30c\uc77c\ub85c \uc800\uc7a5\"\"\"\n        if not data:\n            print(\"\uc800\uc7a5\ud560 \ub370\uc774\ud130\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n            return False\n\n        try:\n            with open(output_filename, 'w', newline='', encoding='utf-8') as csvfile:\n                writer = csv.DictWriter(csvfile, fieldnames=self.headers)\n                writer.writeheader()\n                writer.writerows(data)\n\n            print(f\"\u2713 {len(data)}\uac1c\uc758 \ub808\ucf54\ub4dc\uac00 {output_filename}\uc5d0 \uc800\uc7a5\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n            return True\n\n        except Exception as e:\n            print(f\"\u2717 \ud30c\uc77c \uc800\uc7a5 \uc911 \uc624\ub958 \ubc1c\uc0dd: {e}\")\n            return False\n\n# CSV \ud504\ub85c\uc138\uc11c \uc0ac\uc6a9 \uc608\uc81c\nprint(\"\\n=== CSV \uace0\uae09 \ucc98\ub9ac \uc608\uc81c ===\")\n\n# \uc0d8\ud50c \uc9c1\uc6d0 \ub370\uc774\ud130 \uc0dd\uc131\nemployee_data = [\n    ['name', 'age', 'department', 'salary', 'email'],\n    ['\uae40\ucca0\uc218', '28', 'IT', '3500000', 'kim@company.com'],\n    ['\uc774\uc601\ud76c', '32', 'HR', '4000000', 'lee@company.com'],\n    ['\ubc15\ubbfc\uc218', '', 'IT', '3200000', 'park@company.com'],  # \ub098\uc774 \ub204\ub77d\n    ['\ucd5c\uc9c0\uc6d0', '29', 'Sales', '3800000', 'choi-invalid-email'],  # \uc798\ubabb\ub41c \uc774\uba54\uc77c\n    ['\uc815\ud604\uc6b0', '35', 'IT', 'invalid', 'jung@company.com'],  # \uc798\ubabb\ub41c \uae09\uc5ec\n    ['\ud55c\ubbf8\uc601', '27', 'Marketing', '3600000', 'han@company.com']\n]\n\nwith open('employees.csv', 'w', newline='', encoding='utf-8') as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerows(employee_data)\n\n# CSV \ud504\ub85c\uc138\uc11c \uc0ac\uc6a9\nprocessor = CSVProcessor('employees.csv')\n\nif processor.load_data():\n    # \ub370\uc774\ud130 \uac80\uc99d \uaddc\uce59 \uc815\uc758\n    validation_rules = {\n        'name': {'required': True},\n        'age': {'required': True, 'type': 'int', 'range': (18, 65)},\n        'salary': {'required': True, 'type': 'int', 'range': (2000000, 10000000)},\n        'email': {'required': True, 'type': 'email'}\n    }\n\n    # \ub370\uc774\ud130 \uac80\uc99d\n    errors = processor.validate_data(validation_rules)\n    if errors:\n        print(\"\\n\ub370\uc774\ud130 \uac80\uc99d \uc624\ub958:\")\n        for error in errors:\n            print(f\"  \u2022 {error}\")\n    else:\n        print(\"\\n\u2713 \ubaa8\ub4e0 \ub370\uc774\ud130\uac00 \uc720\ud6a8\ud569\ub2c8\ub2e4.\")\n\n    # \ub370\uc774\ud130 \ud544\ud130\ub9c1 (IT \ubd80\uc11c, \uae09\uc5ec 3500000 \uc774\uc0c1)\n    filtered_data = processor.filter_data({\n        'department': {'operator': '==', 'value': 'IT'},\n        'salary': {'operator': '&gt;=', 'value': 3500000}\n    })\n\n    print(f\"\\n\ud544\ud130\ub9c1 \uacb0\uacfc: {len(filtered_data)}\uac1c\uc758 \ub808\ucf54\ub4dc\")\n    for record in filtered_data:\n        print(f\"  {record['name']}: {record['department']}, {record['salary']}\uc6d0\")\n\n    # \ud544\ud130\ub9c1\ub41c \ub370\uc774\ud130 \uc800\uc7a5\n    if filtered_data:\n        processor.save_data(filtered_data, 'it_high_salary.csv')\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#3-xml","title":"3. XML \ud30c\uc77c \ucc98\ub9ac","text":""},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#31-xml","title":"3.1 XML \uae30\ubcf8 \ud30c\uc2f1","text":"<pre><code>import xml.etree.ElementTree as ET\nfrom xml.dom import minidom\n\nprint(\"\\n=== XML \uae30\ubcf8 \ucc98\ub9ac ===\")\n\n# XML \ubb38\uc11c \uc0dd\uc131\ndef create_sample_xml():\n    \"\"\"\uc0d8\ud50c XML \ub370\uc774\ud130 \uc0dd\uc131\"\"\"\n    root = ET.Element(\"library\")\n\n    # \ucc45 1\n    book1 = ET.SubElement(root, \"book\", id=\"1\")\n    ET.SubElement(book1, \"title\").text = \"\ud30c\uc774\uc36c \ud504\ub85c\uadf8\ub798\ubc0d\"\n    ET.SubElement(book1, \"author\").text = \"\uae40\ucca0\uc218\"\n    ET.SubElement(book1, \"year\").text = \"2023\"\n    ET.SubElement(book1, \"price\").text = \"25000\"\n    ET.SubElement(book1, \"category\").text = \"programming\"\n\n    # \ucc45 2\n    book2 = ET.SubElement(root, \"book\", id=\"2\")\n    ET.SubElement(book2, \"title\").text = \"\ub370\uc774\ud130 \uc0ac\uc774\uc5b8\uc2a4\"\n    ET.SubElement(book2, \"author\").text = \"\uc774\uc601\ud76c\"\n    ET.SubElement(book2, \"year\").text = \"2024\"\n    ET.SubElement(book2, \"price\").text = \"30000\"\n    ET.SubElement(book2, \"category\").text = \"data-science\"\n\n    # \ucc45 3\n    book3 = ET.SubElement(root, \"book\", id=\"3\")\n    ET.SubElement(book3, \"title\").text = \"\uc6f9 \uac1c\ubc1c\"\n    ET.SubElement(book3, \"author\").text = \"\ubc15\ubbfc\uc218\"\n    ET.SubElement(book3, \"year\").text = \"2023\"\n    ET.SubElement(book3, \"price\").text = \"28000\"\n    ET.SubElement(book3, \"category\").text = \"web-development\"\n\n    return root\n\n# XML \ud30c\uc77c \uc0dd\uc131 \ubc0f \uc800\uc7a5\nxml_root = create_sample_xml()\n\n# \uc608\uc058\uac8c \ud3ec\ub9f7\ud305\ud558\uc5ec \uc800\uc7a5\ndef prettify_xml(element):\n    \"\"\"XML\uc744 \ubcf4\uae30 \uc88b\uac8c \ud3ec\ub9f7\ud305\"\"\"\n    rough_string = ET.tostring(element, encoding='unicode')\n    reparsed = minidom.parseString(rough_string)\n    return reparsed.toprettyxml(indent=\"  \")\n\nwith open('library.xml', 'w', encoding='utf-8') as f:\n    f.write(prettify_xml(xml_root))\n\nprint(\"XML \ud30c\uc77c\uc774 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4: library.xml\")\n\n# XML \ud30c\uc77c \uc77d\uae30 \ubc0f \ud30c\uc2f1\ntree = ET.parse('library.xml')\nroot = tree.getroot()\n\nprint(f\"\\n\ub8e8\ud2b8 \uc5d8\ub9ac\uba3c\ud2b8: {root.tag}\")\n\n# \ubaa8\ub4e0 \ucc45 \uc815\ubcf4 \ucd9c\ub825\nprint(\"\\n\ubaa8\ub4e0 \ucc45 \uc815\ubcf4:\")\nfor book in root.findall('book'):\n    book_id = book.get('id')\n    title = book.find('title').text\n    author = book.find('author').text\n    year = book.find('year').text\n    price = book.find('price').text\n    category = book.find('category').text\n\n    print(f\"  \ucc45 ID {book_id}: {title}\")\n    print(f\"    \uc800\uc790: {author}\")\n    print(f\"    \ucd9c\ud310\uc5f0\ub3c4: {year}\")\n    print(f\"    \uac00\uaca9: {price}\uc6d0\")\n    print(f\"    \uce74\ud14c\uace0\ub9ac: {category}\")\n    print()\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#32-xml","title":"3.2 XML \uace0\uae09 \uc870\uc791","text":"<pre><code>import xml.etree.ElementTree as ET\nfrom datetime import datetime\n\nclass XMLLibraryManager:\n    \"\"\"XML \ub3c4\uc11c\uad00 \uad00\ub9ac \uc2dc\uc2a4\ud15c\"\"\"\n\n    def __init__(self, xml_file):\n        self.xml_file = xml_file\n        try:\n            self.tree = ET.parse(xml_file)\n            self.root = self.tree.getroot()\n        except FileNotFoundError:\n            # \ud30c\uc77c\uc774 \uc5c6\uc73c\uba74 \uc0c8\ub85c \uc0dd\uc131\n            self.root = ET.Element(\"library\")\n            self.tree = ET.ElementTree(self.root)\n            self.save()\n\n    def add_book(self, title, author, year, price, category):\n        \"\"\"\uc0c8 \ucc45 \ucd94\uac00\"\"\"\n        # \uc0c8\ub85c\uc6b4 ID \uc0dd\uc131\n        existing_ids = [int(book.get('id', 0)) for book in self.root.findall('book')]\n        new_id = max(existing_ids, default=0) + 1\n\n        # \uc0c8 \ucc45 \uc5d8\ub9ac\uba3c\ud2b8 \uc0dd\uc131\n        book = ET.SubElement(self.root, \"book\", id=str(new_id))\n        ET.SubElement(book, \"title\").text = title\n        ET.SubElement(book, \"author\").text = author\n        ET.SubElement(book, \"year\").text = str(year)\n        ET.SubElement(book, \"price\").text = str(price)\n        ET.SubElement(book, \"category\").text = category\n        ET.SubElement(book, \"added_date\").text = datetime.now().isoformat()\n\n        self.save()\n        print(f\"\u2713 \ucc45\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4: {title} (ID: {new_id})\")\n        return new_id\n\n    def find_books_by_author(self, author):\n        \"\"\"\uc800\uc790\ubcc4 \ucc45 \uac80\uc0c9\"\"\"\n        books = []\n        for book in self.root.findall('book'):\n            if book.find('author').text == author:\n                books.append(self._book_to_dict(book))\n        return books\n\n    def find_books_by_category(self, category):\n        \"\"\"\uce74\ud14c\uace0\ub9ac\ubcc4 \ucc45 \uac80\uc0c9\"\"\"\n        books = []\n        for book in self.root.findall('book'):\n            if book.find('category').text == category:\n                books.append(self._book_to_dict(book))\n        return books\n\n    def find_books_by_price_range(self, min_price, max_price):\n        \"\"\"\uac00\uaca9 \ubc94\uc704\ub85c \ucc45 \uac80\uc0c9\"\"\"\n        books = []\n        for book in self.root.findall('book'):\n            price = int(book.find('price').text)\n            if min_price &lt;= price &lt;= max_price:\n                books.append(self._book_to_dict(book))\n        return books\n\n    def update_book_price(self, book_id, new_price):\n        \"\"\"\ucc45 \uac00\uaca9 \uc5c5\ub370\uc774\ud2b8\"\"\"\n        book = self.root.find(f\".//book[@id='{book_id}']\")\n        if book is not None:\n            book.find('price').text = str(new_price)\n            # \uc218\uc815\uc77c \ucd94\uac00\n            updated_date = book.find('updated_date')\n            if updated_date is None:\n                updated_date = ET.SubElement(book, 'updated_date')\n            updated_date.text = datetime.now().isoformat()\n\n            self.save()\n            print(f\"\u2713 \ucc45 ID {book_id}\uc758 \uac00\uaca9\uc774 {new_price}\uc6d0\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n            return True\n        else:\n            print(f\"\u2717 \ucc45 ID {book_id}\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n            return False\n\n    def delete_book(self, book_id):\n        \"\"\"\ucc45 \uc0ad\uc81c\"\"\"\n        book = self.root.find(f\".//book[@id='{book_id}']\")\n        if book is not None:\n            title = book.find('title').text\n            self.root.remove(book)\n            self.save()\n            print(f\"\u2713 \ucc45\uc774 \uc0ad\uc81c\ub418\uc5c8\uc2b5\ub2c8\ub2e4: {title} (ID: {book_id})\")\n            return True\n        else:\n            print(f\"\u2717 \ucc45 ID {book_id}\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n            return False\n\n    def get_statistics(self):\n        \"\"\"\ub3c4\uc11c\uad00 \ud1b5\uacc4\"\"\"\n        books = self.root.findall('book')\n        total_books = len(books)\n\n        if total_books == 0:\n            return {\"total_books\": 0}\n\n        # \uce74\ud14c\uace0\ub9ac\ubcc4 \ucc45 \uc218\n        categories = {}\n        total_value = 0\n        years = []\n\n        for book in books:\n            category = book.find('category').text\n            categories[category] = categories.get(category, 0) + 1\n\n            price = int(book.find('price').text)\n            total_value += price\n\n            year = int(book.find('year').text)\n            years.append(year)\n\n        return {\n            \"total_books\": total_books,\n            \"categories\": categories,\n            \"total_value\": total_value,\n            \"average_price\": total_value // total_books,\n            \"newest_year\": max(years),\n            \"oldest_year\": min(years)\n        }\n\n    def _book_to_dict(self, book_element):\n        \"\"\"XML \uc5d8\ub9ac\uba3c\ud2b8\ub97c \ub515\uc154\ub108\ub9ac\ub85c \ubcc0\ud658\"\"\"\n        return {\n            'id': book_element.get('id'),\n            'title': book_element.find('title').text,\n            'author': book_element.find('author').text,\n            'year': int(book_element.find('year').text),\n            'price': int(book_element.find('price').text),\n            'category': book_element.find('category').text\n        }\n\n    def save(self):\n        \"\"\"XML \ud30c\uc77c \uc800\uc7a5\"\"\"\n        # \uc608\uc058\uac8c \ud3ec\ub9f7\ud305\ud558\uc5ec \uc800\uc7a5\n        with open(self.xml_file, 'w', encoding='utf-8') as f:\n            f.write(prettify_xml(self.root))\n\n# XML \ub3c4\uc11c\uad00 \uad00\ub9ac \uc2dc\uc2a4\ud15c \uc0ac\uc6a9 \uc608\uc81c\nprint(\"\\n=== XML \ub3c4\uc11c\uad00 \uad00\ub9ac \uc2dc\uc2a4\ud15c ===\")\n\n# \ub3c4\uc11c\uad00 \ub9e4\ub2c8\uc800 \uc0dd\uc131\nlibrary = XMLLibraryManager('library.xml')\n\n# \uc0c8 \ucc45 \ucd94\uac00\nlibrary.add_book(\"\uba38\uc2e0\ub7ec\ub2dd \uae30\ucd08\", \"\uc815\ud604\uc6b0\", 2024, 35000, \"machine-learning\")\nlibrary.add_book(\"\uc54c\uace0\ub9ac\uc998 \uc124\uacc4\", \"\ud55c\ubbf8\uc601\", 2023, 32000, \"programming\")\n\n# \uc800\uc790\ubcc4 \uac80\uc0c9\nprint(\"\\n\uae40\ucca0\uc218\uac00 \uc4f4 \ucc45:\")\nkim_books = library.find_books_by_author(\"\uae40\ucca0\uc218\")\nfor book in kim_books:\n    print(f\"  {book['title']} ({book['year']}) - {book['price']:,}\uc6d0\")\n\n# \uce74\ud14c\uace0\ub9ac\ubcc4 \uac80\uc0c9\nprint(\"\\n\ud504\ub85c\uadf8\ub798\ubc0d \uad00\ub828 \ucc45:\")\nprogramming_books = library.find_books_by_category(\"programming\")\nfor book in programming_books:\n    print(f\"  {book['title']} by {book['author']} - {book['price']:,}\uc6d0\")\n\n# \uac00\uaca9 \ubc94\uc704 \uac80\uc0c9\nprint(\"\\n25,000\uc6d0 ~ 30,000\uc6d0 \ucc45:\")\nmid_price_books = library.find_books_by_price_range(25000, 30000)\nfor book in mid_price_books:\n    print(f\"  {book['title']} - {book['price']:,}\uc6d0\")\n\n# \uac00\uaca9 \uc5c5\ub370\uc774\ud2b8\nlibrary.update_book_price(\"1\", 27000)\n\n# \ud1b5\uacc4 \ucd9c\ub825\nstats = library.get_statistics()\nprint(f\"\\n=== \ub3c4\uc11c\uad00 \ud1b5\uacc4 ===\")\nprint(f\"\ucd1d \ucc45 \uc218: {stats['total_books']}\uad8c\")\nprint(f\"\ucd1d \uac00\uce58: {stats['total_value']:,}\uc6d0\")\nprint(f\"\ud3c9\uade0 \uac00\uaca9: {stats['average_price']:,}\uc6d0\")\nprint(f\"\ucd9c\ud310 \uc5f0\ub3c4: {stats['oldest_year']} ~ {stats['newest_year']}\")\nprint(\"\uce74\ud14c\uace0\ub9ac\ubcc4 \ubd84\ud3ec:\")\nfor category, count in stats['categories'].items():\n    print(f\"  {category}: {count}\uad8c\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#33-xml","title":"3.3 XML \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ucc98\ub9ac","text":"<pre><code>import xml.etree.ElementTree as ET\n\n# \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uac00 \uc788\ub294 XML \ubb38\uc11c \uc0dd\uc131\ndef create_namespaced_xml():\n    \"\"\"\ub124\uc784\uc2a4\ud398\uc774\uc2a4\uac00 \uc788\ub294 XML \ubb38\uc11c \uc0dd\uc131\"\"\"\n    namespaces = {\n        '': 'http://example.com/library',\n        'meta': 'http://example.com/metadata',\n        'auth': 'http://example.com/author'\n    }\n\n    # \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ub4f1\ub85d\n    for prefix, uri in namespaces.items():\n        ET.register_namespace(prefix, uri)\n\n    root = ET.Element(\"{http://example.com/library}library\")\n    root.set(\"{http://www.w3.org/2001/XMLSchema-instance}schemaLocation\", \n             \"http://example.com/library library.xsd\")\n\n    # \uba54\ud0c0\ub370\uc774\ud130\n    metadata = ET.SubElement(root, \"{http://example.com/metadata}metadata\")\n    ET.SubElement(metadata, \"{http://example.com/metadata}version\").text = \"1.0\"\n    ET.SubElement(metadata, \"{http://example.com/metadata}created\").text = \"2024-01-01\"\n\n    # \ucc45 \uc815\ubcf4\n    book = ET.SubElement(root, \"{http://example.com/library}book\")\n    book.set(\"id\", \"1\")\n\n    ET.SubElement(book, \"{http://example.com/library}title\").text = \"Python Programming\"\n\n    # \uc800\uc790 \uc815\ubcf4 (\ub2e4\ub978 \ub124\uc784\uc2a4\ud398\uc774\uc2a4)\n    author = ET.SubElement(book, \"{http://example.com/author}author\")\n    ET.SubElement(author, \"{http://example.com/author}name\").text = \"\uae40\ucca0\uc218\"\n    ET.SubElement(author, \"{http://example.com/author}email\").text = \"kim@email.com\"\n\n    return root\n\nprint(\"\\n=== XML \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ucc98\ub9ac ===\")\n\n# \ub124\uc784\uc2a4\ud398\uc774\uc2a4 XML \uc0dd\uc131\nns_root = create_namespaced_xml()\n\n# \ud30c\uc77c\ub85c \uc800\uc7a5\nwith open('library_ns.xml', 'wb') as f:\n    ET.ElementTree(ns_root).write(f, encoding='utf-8', xml_declaration=True)\n\nprint(\"\ub124\uc784\uc2a4\ud398\uc774\uc2a4 XML \ud30c\uc77c\uc774 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4: library_ns.xml\")\n\n# \ub124\uc784\uc2a4\ud398\uc774\uc2a4 XML \uc77d\uae30\ntree = ET.parse('library_ns.xml')\nroot = tree.getroot()\n\n# \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uc815\uc758\nnamespaces = {\n    'lib': 'http://example.com/library',\n    'meta': 'http://example.com/metadata',\n    'auth': 'http://example.com/author'\n}\n\nprint(\"\\n\ub124\uc784\uc2a4\ud398\uc774\uc2a4 XML \ud30c\uc2f1:\")\n\n# \uba54\ud0c0\ub370\uc774\ud130 \uc77d\uae30\nmetadata = root.find('meta:metadata', namespaces)\nif metadata is not None:\n    version = metadata.find('meta:version', namespaces).text\n    created = metadata.find('meta:created', namespaces).text\n    print(f\"\ubc84\uc804: {version}, \uc0dd\uc131\uc77c: {created}\")\n\n# \ucc45 \uc815\ubcf4 \uc77d\uae30\nbook = root.find('lib:book', namespaces)\nif book is not None:\n    title = book.find('lib:title', namespaces).text\n    print(f\"\ucc45 \uc81c\ubaa9: {title}\")\n\n    # \uc800\uc790 \uc815\ubcf4 \uc77d\uae30\n    author = book.find('auth:author', namespaces)\n    if author is not None:\n        name = author.find('auth:name', namespaces).text\n        email = author.find('auth:email', namespaces).text\n        print(f\"\uc800\uc790: {name} ({email})\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#4","title":"4. \ubc14\uc774\ub108\ub9ac \ud30c\uc77c \ucc98\ub9ac","text":""},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#41","title":"4.1 \ubc14\uc774\ub108\ub9ac \ud30c\uc77c \uae30\ubcf8 \ucc98\ub9ac","text":"<pre><code>import struct\nimport os\nfrom datetime import datetime\n\nprint(\"\\n=== \ubc14\uc774\ub108\ub9ac \ud30c\uc77c \ucc98\ub9ac ===\")\n\n# \ubc14\uc774\ub108\ub9ac \ub370\uc774\ud130 \uc0dd\uc131 \ubc0f \uc800\uc7a5\ndef create_binary_data():\n    \"\"\"\ubc14\uc774\ub108\ub9ac \ub370\uc774\ud130 \ud30c\uc77c \uc0dd\uc131\"\"\"\n    # \ud559\uc0dd \ub808\ucf54\ub4dc \uad6c\uc870: ID(4\ubc14\uc774\ud2b8), \uc774\ub984(20\ubc14\uc774\ud2b8), \ub098\uc774(1\ubc14\uc774\ud2b8), \uc131\uc801(4\ubc14\uc774\ud2b8 float)\n    students = [\n        (1, \"\uae40\ucca0\uc218\", 25, 85.5),\n        (2, \"\uc774\uc601\ud76c\", 23, 92.0),\n        (3, \"\ubc15\ubbfc\uc218\", 24, 78.5),\n        (4, \"\ucd5c\uc9c0\uc6d0\", 22, 95.0)\n    ]\n\n    with open('students.bin', 'wb') as f:\n        for student_id, name, age, grade in students:\n            # \ub370\uc774\ud130 \ud328\ud0b9: I=unsigned int, 20s=20\ubc14\uc774\ud2b8 \ubb38\uc790\uc5f4, B=unsigned char, f=float\n            name_bytes = name.encode('utf-8')[:20].ljust(20, b'\\x00')\n            packed_data = struct.pack('I20sBf', student_id, name_bytes, age, grade)\n            f.write(packed_data)\n\n    print(\"\ubc14\uc774\ub108\ub9ac \ud30c\uc77c\uc774 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4: students.bin\")\n    return len(students)\n\ndef read_binary_data():\n    \"\"\"\ubc14\uc774\ub108\ub9ac \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30\"\"\"\n    print(\"\\n\ubc14\uc774\ub108\ub9ac \ud30c\uc77c \uc77d\uae30:\")\n\n    record_size = struct.calcsize('I20sBf')  # \ub808\ucf54\ub4dc \ud06c\uae30 \uacc4\uc0b0\n\n    with open('students.bin', 'rb') as f:\n        record_num = 1\n        while True:\n            data = f.read(record_size)\n            if not data:\n                break\n\n            # \ub370\uc774\ud130 \uc5b8\ud328\ud0b9\n            student_id, name_bytes, age, grade = struct.unpack('I20sBf', data)\n            name = name_bytes.rstrip(b'\\x00').decode('utf-8')\n\n            print(f\"\ud559\uc0dd {record_num}: ID={student_id}, \uc774\ub984={name}, \ub098\uc774={age}, \uc131\uc801={grade:.1f}\")\n            record_num += 1\n\ndef update_binary_record(record_index, new_grade):\n    \"\"\"\ud2b9\uc815 \ub808\ucf54\ub4dc\uc758 \uc131\uc801 \uc5c5\ub370\uc774\ud2b8\"\"\"\n    record_size = struct.calcsize('I20sBf')\n\n    # \ud30c\uc77c\uc744 \uc77d\uae30/\uc4f0\uae30 \ubaa8\ub4dc\ub85c \uc5f4\uae30\n    with open('students.bin', 'r+b') as f:\n        # \ud574\ub2f9 \ub808\ucf54\ub4dc \uc704\uce58\ub85c \uc774\ub3d9\n        f.seek(record_index * record_size)\n\n        # \uae30\uc874 \ub370\uc774\ud130 \uc77d\uae30\n        data = f.read(record_size)\n        if data:\n            student_id, name_bytes, age, old_grade = struct.unpack('I20sBf', data)\n\n            # \uc131\uc801\ub9cc \ubcc0\uacbd\ud558\uc5ec \ub2e4\uc2dc \ud328\ud0b9\n            new_data = struct.pack('I20sBf', student_id, name_bytes, age, new_grade)\n\n            # \ud30c\uc77c \ud3ec\uc778\ud130\ub97c \ub2e4\uc2dc \ud574\ub2f9 \uc704\uce58\ub85c \uc774\ub3d9\n            f.seek(record_index * record_size)\n            f.write(new_data)\n\n            name = name_bytes.rstrip(b'\\x00').decode('utf-8')\n            print(f\"\u2713 {name}\uc758 \uc131\uc801\uc774 {old_grade:.1f}\uc5d0\uc11c {new_grade:.1f}\ub85c \uc5c5\ub370\uc774\ud2b8\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n        else:\n            print(\"\u2717 \ud574\ub2f9 \ub808\ucf54\ub4dc\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n\n# \ubc14\uc774\ub108\ub9ac \ud30c\uc77c \ucc98\ub9ac \uc2e4\ud589\nstudent_count = create_binary_data()\nread_binary_data()\n\n# \ub450 \ubc88\uc9f8 \ud559\uc0dd(\uc778\ub371\uc2a4 1)\uc758 \uc131\uc801 \uc5c5\ub370\uc774\ud2b8\nupdate_binary_record(1, 95.5)\n\nprint(\"\\n\uc5c5\ub370\uc774\ud2b8 \ud6c4 \ub370\uc774\ud130:\")\nread_binary_data()\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#42","title":"4.2 \uc774\ubbf8\uc9c0 \ud30c\uc77c \uba54\ud0c0\ub370\uc774\ud130 \ucc98\ub9ac","text":"<pre><code>import struct\nimport os\n\ndef read_bmp_header(filename):\n    \"\"\"BMP \ud30c\uc77c \ud5e4\ub354 \uc77d\uae30\"\"\"\n    try:\n        with open(filename, 'rb') as f:\n            # BMP \ud30c\uc77c \uc2dc\uadf8\ub2c8\ucc98 \ud655\uc778\n            signature = f.read(2)\n            if signature != b'BM':\n                print(\"\u2717 BMP \ud30c\uc77c\uc774 \uc544\ub2d9\ub2c8\ub2e4.\")\n                return None\n\n            # \ud30c\uc77c \ud06c\uae30\n            file_size = struct.unpack('&lt;I', f.read(4))[0]\n\n            # \uc608\uc57d \ud544\ub4dc \uac74\ub108\ub6f0\uae30\n            f.read(4)\n\n            # \uc774\ubbf8\uc9c0 \ub370\uc774\ud130 \uc624\ud504\uc14b\n            data_offset = struct.unpack('&lt;I', f.read(4))[0]\n\n            # DIB \ud5e4\ub354 \ud06c\uae30\n            dib_header_size = struct.unpack('&lt;I', f.read(4))[0]\n\n            # \uc774\ubbf8\uc9c0 \ud06c\uae30\n            width = struct.unpack('&lt;I', f.read(4))[0]\n            height = struct.unpack('&lt;I', f.read(4))[0]\n\n            # \uc0c9\uc0c1 \ud3c9\uba74 \uc218\n            color_planes = struct.unpack('&lt;H', f.read(2))[0]\n\n            # \ube44\ud2b8 per \ud53d\uc140\n            bits_per_pixel = struct.unpack('&lt;H', f.read(2))[0]\n\n            return {\n                'file_size': file_size,\n                'width': width,\n                'height': height,\n                'bits_per_pixel': bits_per_pixel,\n                'data_offset': data_offset\n            }\n\n    except FileNotFoundError:\n        print(f\"\u2717 \ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {filename}\")\n        return None\n    except Exception as e:\n        print(f\"\u2717 \ud30c\uc77c \uc77d\uae30 \uc624\ub958: {e}\")\n        return None\n\ndef create_simple_bmp():\n    \"\"\"\uac04\ub2e8\ud55c BMP \ud30c\uc77c \uc0dd\uc131 (2x2 \ud53d\uc140, \ube68\uac04\uc0c9)\"\"\"\n    # BMP \ud5e4\ub354 \uc0dd\uc131\n    width, height = 2, 2\n    bits_per_pixel = 24\n\n    # \ud55c \ud589\uc758 \ubc14\uc774\ud2b8 \uc218 (4\ubc14\uc774\ud2b8 \uacbd\uacc4\ub85c \uc815\ub82c)\n    row_size = ((width * bits_per_pixel + 31) // 32) * 4\n    pixel_data_size = row_size * height\n    file_size = 54 + pixel_data_size  # 54\ub294 \ud5e4\ub354 \ud06c\uae30\n\n    with open('simple.bmp', 'wb') as f:\n        # BMP \ud30c\uc77c \ud5e4\ub354 (14\ubc14\uc774\ud2b8)\n        f.write(b'BM')  # \uc2dc\uadf8\ub2c8\ucc98\n        f.write(struct.pack('&lt;I', file_size))  # \ud30c\uc77c \ud06c\uae30\n        f.write(struct.pack('&lt;I', 0))  # \uc608\uc57d \ud544\ub4dc\n        f.write(struct.pack('&lt;I', 54))  # \ub370\uc774\ud130 \uc624\ud504\uc14b\n\n        # DIB \ud5e4\ub354 (40\ubc14\uc774\ud2b8)\n        f.write(struct.pack('&lt;I', 40))  # DIB \ud5e4\ub354 \ud06c\uae30\n        f.write(struct.pack('&lt;I', width))  # \ub108\ube44\n        f.write(struct.pack('&lt;I', height))  # \ub192\uc774\n        f.write(struct.pack('&lt;H', 1))  # \uc0c9\uc0c1 \ud3c9\uba74\n        f.write(struct.pack('&lt;H', bits_per_pixel))  # \ube44\ud2b8/\ud53d\uc140\n        f.write(struct.pack('&lt;I', 0))  # \uc555\ucd95 \ubc29\uc2dd\n        f.write(struct.pack('&lt;I', pixel_data_size))  # \uc774\ubbf8\uc9c0 \ud06c\uae30\n        f.write(struct.pack('&lt;I', 2835))  # X \ud574\uc0c1\ub3c4\n        f.write(struct.pack('&lt;I', 2835))  # Y \ud574\uc0c1\ub3c4\n        f.write(struct.pack('&lt;I', 0))  # \uc0c9\uc0c1 \uc218\n        f.write(struct.pack('&lt;I', 0))  # \uc911\uc694\ud55c \uc0c9\uc0c1 \uc218\n\n        # \ud53d\uc140 \ub370\uc774\ud130 (BGR \uc21c\uc11c, \uc544\ub798\ucabd\ubd80\ud130)\n        for y in range(height):\n            for x in range(width):\n                # \ube68\uac04\uc0c9 \ud53d\uc140 (BGR: 0, 0, 255)\n                f.write(struct.pack('BBB', 0, 0, 255))\n\n            # \ud589 \ud328\ub529\n            padding = row_size - (width * 3)\n            f.write(b'\\x00' * padding)\n\n    print(\"\uac04\ub2e8\ud55c BMP \ud30c\uc77c\uc774 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4: simple.bmp\")\n\nprint(\"\\n=== \uc774\ubbf8\uc9c0 \ud30c\uc77c \uba54\ud0c0\ub370\uc774\ud130 \ucc98\ub9ac ===\")\n\n# \uac04\ub2e8\ud55c BMP \ud30c\uc77c \uc0dd\uc131\ncreate_simple_bmp()\n\n# BMP \ud30c\uc77c \ud5e4\ub354 \uc77d\uae30\nbmp_info = read_bmp_header('simple.bmp')\nif bmp_info:\n    print(\"\\nBMP \ud30c\uc77c \uc815\ubcf4:\")\n    print(f\"  \ud30c\uc77c \ud06c\uae30: {bmp_info['file_size']:,} \ubc14\uc774\ud2b8\")\n    print(f\"  \uc774\ubbf8\uc9c0 \ud06c\uae30: {bmp_info['width']} x {bmp_info['height']} \ud53d\uc140\")\n    print(f\"  \uc0c9\uc0c1 \uae4a\uc774: {bmp_info['bits_per_pixel']} \ube44\ud2b8/\ud53d\uc140\")\n    print(f\"  \ub370\uc774\ud130 \uc624\ud504\uc14b: {bmp_info['data_offset']} \ubc14\uc774\ud2b8\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#5","title":"5. \uc555\ucd95 \ud30c\uc77c \ucc98\ub9ac","text":""},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#51-zip","title":"5.1 ZIP \ud30c\uc77c \ucc98\ub9ac","text":"<pre><code>import zipfile\nimport os\nfrom datetime import datetime\n\nprint(\"\\n=== ZIP \ud30c\uc77c \ucc98\ub9ac ===\")\n\ndef create_sample_files():\n    \"\"\"\uc555\ucd95\ud560 \uc0d8\ud50c \ud30c\uc77c\ub4e4 \uc0dd\uc131\"\"\"\n    # \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\n    os.makedirs('sample_project', exist_ok=True)\n    os.makedirs('sample_project/src', exist_ok=True)\n    os.makedirs('sample_project/docs', exist_ok=True)\n\n    # Python \uc18c\uc2a4 \ud30c\uc77c\n    with open('sample_project/src/main.py', 'w', encoding='utf-8') as f:\n        f.write('''#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\n\uba54\uc778 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ubaa8\ub4c8\n\"\"\"\n\ndef main():\n    print(\"Hello, World!\")\n    return 0\n\nif __name__ == \"__main__\":\n    main()\n''')\n\n    # \uc124\uc815 \ud30c\uc77c\n    with open('sample_project/config.json', 'w', encoding='utf-8') as f:\n        f.write('''{\n  \"app_name\": \"Sample App\",\n  \"version\": \"1.0.0\",\n  \"debug\": true,\n  \"database\": {\n    \"host\": \"localhost\",\n    \"port\": 5432\n  }\n}''')\n\n    # README \ud30c\uc77c\n    with open('sample_project/README.md', 'w', encoding='utf-8') as f:\n        f.write('''# Sample Project\n\n\uc774\uac83\uc740 \uc0d8\ud50c \ud504\ub85c\uc81d\ud2b8\uc785\ub2c8\ub2e4.\n\n## \uc124\uce58 \ubc29\ubc95\n\n1. Python 3.8 \uc774\uc0c1 \uc124\uce58\n2. \uc758\uc874\uc131 \uc124\uce58: `pip install -r requirements.txt`\n3. \uc2e4\ud589: `python src/main.py`\n\n## \ub77c\uc774\uc120\uc2a4\n\nMIT License\n''')\n\n    # \ubb38\uc11c \ud30c\uc77c\n    with open('sample_project/docs/api.md', 'w', encoding='utf-8') as f:\n        f.write('''# API \ubb38\uc11c\n\n## \ud568\uc218 \ubaa9\ub85d\n\n### main()\n- \uc124\uba85: \uba54\uc778 \ud568\uc218\n- \ubc18\ud658\uac12: int (0: \uc131\uacf5, 1: \uc2e4\ud328)\n''')\n\n    print(\"\uc0d8\ud50c \ud30c\uc77c\ub4e4\uc774 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n\ndef create_zip_archive():\n    \"\"\"ZIP \uc555\ucd95 \ud30c\uc77c \uc0dd\uc131\"\"\"\n    with zipfile.ZipFile('sample_project.zip', 'w', zipfile.ZIP_DEFLATED) as zipf:\n        # \ub514\ub809\ud1a0\ub9ac\ub97c \uc7ac\uadc0\uc801\uc73c\ub85c \uc555\ucd95\n        for root, dirs, files in os.walk('sample_project'):\n            for file in files:\n                file_path = os.path.join(root, file)\n                archive_path = os.path.relpath(file_path, '.')\n                zipf.write(file_path, archive_path)\n                print(f\"\uc555\ucd95\ub428: {archive_path}\")\n\n    print(\"\\n\u2713 ZIP \ud30c\uc77c\uc774 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4: sample_project.zip\")\n\ndef analyze_zip_archive(zip_filename):\n    \"\"\"ZIP \ud30c\uc77c \ubd84\uc11d\"\"\"\n    print(f\"\\n=== {zip_filename} \ubd84\uc11d ===\")\n\n    with zipfile.ZipFile(zip_filename, 'r') as zipf:\n        file_list = zipf.filelist\n\n        print(f\"\ucd1d \ud30c\uc77c \uc218: {len(file_list)}\")\n\n        total_compressed = 0\n        total_uncompressed = 0\n\n        print(\"\\n\ud30c\uc77c \ubaa9\ub85d:\")\n        for file_info in file_list:\n            total_compressed += file_info.compress_size\n            total_uncompressed += file_info.file_size\n\n            # \uc555\ucd95\ub960 \uacc4\uc0b0\n            if file_info.file_size &gt; 0:\n                compression_ratio = (1 - file_info.compress_size / file_info.file_size) * 100\n            else:\n                compression_ratio = 0\n\n            # \uc218\uc815 \uc2dc\uac04\n            date_time = datetime(*file_info.date_time)\n\n            print(f\"  {file_info.filename}\")\n            print(f\"    \ud06c\uae30: {file_info.file_size:,} \u2192 {file_info.compress_size:,} \ubc14\uc774\ud2b8 ({compression_ratio:.1f}% \uc555\ucd95)\")\n            print(f\"    \uc218\uc815\uc77c: {date_time.strftime('%Y-%m-%d %H:%M:%S')}\")\n\n        overall_compression = (1 - total_compressed / total_uncompressed) * 100 if total_uncompressed &gt; 0 else 0\n        print(f\"\\n\uc804\uccb4 \uc555\ucd95\ub960: {overall_compression:.1f}%\")\n        print(f\"\uc555\ucd95 \uc804 \ud06c\uae30: {total_uncompressed:,} \ubc14\uc774\ud2b8\")\n        print(f\"\uc555\ucd95 \ud6c4 \ud06c\uae30: {total_compressed:,} \ubc14\uc774\ud2b8\")\n\ndef extract_zip_archive(zip_filename, extract_path='extracted'):\n    \"\"\"ZIP \ud30c\uc77c \uc555\ucd95 \ud574\uc81c\"\"\"\n    os.makedirs(extract_path, exist_ok=True)\n\n    with zipfile.ZipFile(zip_filename, 'r') as zipf:\n        print(f\"\\n{zip_filename}\uc744 {extract_path}\uc5d0 \uc555\ucd95 \ud574\uc81c \uc911...\")\n\n        for file_info in zipf.filelist:\n            zipf.extract(file_info, extract_path)\n            print(f\"  \ucd94\ucd9c\ub428: {file_info.filename}\")\n\n        print(\"\u2713 \uc555\ucd95 \ud574\uc81c \uc644\ub8cc\")\n\ndef create_selective_zip():\n    \"\"\"\uc870\uac74\ubd80 \ud30c\uc77c \uc555\ucd95\"\"\"\n    with zipfile.ZipFile('python_files.zip', 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for root, dirs, files in os.walk('sample_project'):\n            for file in files:\n                # Python \ud30c\uc77c\uacfc \ub9c8\ud06c\ub2e4\uc6b4 \ud30c\uc77c\ub9cc \uc555\ucd95\n                if file.endswith(('.py', '.md')):\n                    file_path = os.path.join(root, file)\n                    archive_path = os.path.relpath(file_path, '.')\n                    zipf.write(file_path, archive_path)\n                    print(f\"\uc120\ud0dd\uc801 \uc555\ucd95: {archive_path}\")\n\n    print(\"\\n\u2713 Python \ubc0f Markdown \ud30c\uc77c\ub9cc \uc555\ucd95\ub418\uc5c8\uc2b5\ub2c8\ub2e4: python_files.zip\")\n\n# ZIP \ud30c\uc77c \ucc98\ub9ac \uc2e4\ud589\ncreate_sample_files()\ncreate_zip_archive()\nanalyze_zip_archive('sample_project.zip')\nextract_zip_archive('sample_project.zip')\ncreate_selective_zip()\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#52-tar","title":"5.2 TAR \ud30c\uc77c \ucc98\ub9ac","text":"<pre><code>import tarfile\nimport os\nimport gzip\nimport time\n\nprint(\"\\n=== TAR \ud30c\uc77c \ucc98\ub9ac ===\")\n\ndef create_tar_archive():\n    \"\"\"TAR \uc555\ucd95 \ud30c\uc77c \uc0dd\uc131 (\ub2e4\uc591\ud55c \uc555\ucd95 \ubc29\uc2dd)\"\"\"\n\n    # \uc77c\ubc18 TAR \ud30c\uc77c\n    with tarfile.open('sample_project.tar', 'w') as tar:\n        tar.add('sample_project', arcname='sample_project')\n    print(\"\u2713 TAR \ud30c\uc77c \uc0dd\uc131: sample_project.tar\")\n\n    # GZIP \uc555\ucd95 TAR \ud30c\uc77c\n    with tarfile.open('sample_project.tar.gz', 'w:gz') as tar:\n        tar.add('sample_project', arcname='sample_project')\n    print(\"\u2713 TAR.GZ \ud30c\uc77c \uc0dd\uc131: sample_project.tar.gz\")\n\n    # BZIP2 \uc555\ucd95 TAR \ud30c\uc77c\n    with tarfile.open('sample_project.tar.bz2', 'w:bz2') as tar:\n        tar.add('sample_project', arcname='sample_project')\n    print(\"\u2713 TAR.BZ2 \ud30c\uc77c \uc0dd\uc131: sample_project.tar.bz2\")\n\ndef analyze_tar_archive(tar_filename):\n    \"\"\"TAR \ud30c\uc77c \ubd84\uc11d\"\"\"\n    print(f\"\\n=== {tar_filename} \ubd84\uc11d ===\")\n\n    with tarfile.open(tar_filename, 'r') as tar:\n        members = tar.getmembers()\n\n        print(f\"\ucd1d \ud56d\ubaa9 \uc218: {len(members)}\")\n\n        file_count = 0\n        dir_count = 0\n        total_size = 0\n\n        print(\"\\n\ub0b4\uc6a9 \ubaa9\ub85d:\")\n        for member in members:\n            if member.isfile():\n                file_count += 1\n                total_size += member.size\n                print(f\"  \ud83d\udcc4 {member.name} ({member.size:,} \ubc14\uc774\ud2b8)\")\n            elif member.isdir():\n                dir_count += 1\n                print(f\"  \ud83d\udcc1 {member.name}/\")\n\n            # \uad8c\ud55c \uc815\ubcf4\n            mode = oct(member.mode)[-3:]\n            mtime = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(member.mtime))\n            print(f\"      \uad8c\ud55c: {mode}, \uc218\uc815\uc77c: {mtime}\")\n\n        print(f\"\\n\uc694\uc57d:\")\n        print(f\"  \ud30c\uc77c: {file_count}\uac1c\")\n        print(f\"  \ub514\ub809\ud1a0\ub9ac: {dir_count}\uac1c\")\n        print(f\"  \ucd1d \ud06c\uae30: {total_size:,} \ubc14\uc774\ud2b8\")\n\ndef extract_specific_files(tar_filename, pattern='*.py'):\n    \"\"\"\ud2b9\uc815 \ud328\ud134\uc758 \ud30c\uc77c\ub9cc \ucd94\ucd9c\"\"\"\n    import fnmatch\n\n    extract_path = 'tar_extracted'\n    os.makedirs(extract_path, exist_ok=True)\n\n    with tarfile.open(tar_filename, 'r') as tar:\n        members = tar.getmembers()\n\n        extracted_files = []\n        for member in members:\n            if member.isfile() and fnmatch.fnmatch(member.name, pattern):\n                tar.extract(member, extract_path)\n                extracted_files.append(member.name)\n\n        print(f\"\\n'{pattern}' \ud328\ud134\uc5d0 \ub9de\ub294 \ud30c\uc77c\ub4e4\uc774 \ucd94\ucd9c\ub418\uc5c8\uc2b5\ub2c8\ub2e4:\")\n        for filename in extracted_files:\n            print(f\"  {filename}\")\n\ndef create_incremental_backup():\n    \"\"\"\uc99d\ubd84 \ubc31\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n    # \uccab \ubc88\uc9f8 \ubc31\uc5c5 (\uc804\uccb4)\n    backup_name = f\"backup_full_{datetime.now().strftime('%Y%m%d_%H%M%S')}.tar.gz\"\n    with tarfile.open(backup_name, 'w:gz') as tar:\n        tar.add('sample_project', arcname='sample_project')\n    print(f\"\u2713 \uc804\uccb4 \ubc31\uc5c5 \uc0dd\uc131: {backup_name}\")\n\n    # \ud30c\uc77c \uc218\uc815 \uc2dc\ubbac\ub808\uc774\uc158\n    with open('sample_project/src/main.py', 'a', encoding='utf-8') as f:\n        f.write('\\n# \uc218\uc815\ub41c \ub0b4\uc6a9\\nprint(\"Updated!\")\\n')\n\n    # \uc0c8 \ud30c\uc77c \ucd94\uac00\n    with open('sample_project/new_file.txt', 'w', encoding='utf-8') as f:\n        f.write('\uc0c8\ub85c \ucd94\uac00\ub41c \ud30c\uc77c\uc785\ub2c8\ub2e4.')\n\n    # \uc218\uc815\ub41c \ud30c\uc77c\ub4e4\ub9cc \ubc31\uc5c5 (\uac04\ub2e8\ud55c \uc99d\ubd84 \ubc31\uc5c5)\n    incremental_name = f\"backup_incremental_{datetime.now().strftime('%Y%m%d_%H%M%S')}.tar.gz\"\n\n    with tarfile.open(incremental_name, 'w:gz') as tar:\n        # \uc2e4\uc81c\ub85c\ub294 \ub354 \ubcf5\uc7a1\ud55c \ub85c\uc9c1\uc774 \ud544\uc694\ud558\uc9c0\ub9cc, \uc5ec\uae30\uc11c\ub294 \ub2e8\uc21c\ud654\n        for root, dirs, files in os.walk('sample_project'):\n            for file in files:\n                file_path = os.path.join(root, file)\n                # \ucd5c\uadfc \uc218\uc815\ub41c \ud30c\uc77c\ub4e4\ub9cc \ud3ec\ud568 (\uc608: \ucd5c\uadfc 1\uc2dc\uac04 \uc774\ub0b4)\n                stat = os.stat(file_path)\n                if time.time() - stat.st_mtime &lt; 3600:  # 1\uc2dc\uac04 = 3600\ucd08\n                    archive_path = os.path.relpath(file_path, '.')\n                    tar.add(file_path, arcname=archive_path)\n\n    print(f\"\u2713 \uc99d\ubd84 \ubc31\uc5c5 \uc0dd\uc131: {incremental_name}\")\n\n# TAR \ud30c\uc77c \ucc98\ub9ac \uc2e4\ud589\ncreate_tar_archive()\n\n# \ud30c\uc77c \ud06c\uae30 \ube44\uad50\narchives = ['sample_project.tar', 'sample_project.tar.gz', 'sample_project.tar.bz2']\nprint(\"\\n\uc555\ucd95 \ubc29\uc2dd\ubcc4 \ud30c\uc77c \ud06c\uae30 \ube44\uad50:\")\nfor archive in archives:\n    if os.path.exists(archive):\n        size = os.path.getsize(archive)\n        print(f\"  {archive}: {size:,} \ubc14\uc774\ud2b8\")\n\nanalyze_tar_archive('sample_project.tar.gz')\nextract_specific_files('sample_project.tar.gz', '*.py')\ncreate_incremental_backup()\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#6","title":"6. \uc124\uc815 \ud30c\uc77c \uad00\ub9ac","text":""},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#61-configparser","title":"6.1 ConfigParser \uc0ac\uc6a9","text":"<pre><code>import configparser\nimport os\nfrom datetime import datetime\n\nprint(\"\\n=== \uc124\uc815 \ud30c\uc77c \uad00\ub9ac ===\")\n\ndef create_sample_config():\n    \"\"\"\uc0d8\ud50c \uc124\uc815 \ud30c\uc77c \uc0dd\uc131\"\"\"\n    config = configparser.ConfigParser()\n\n    # \uae30\ubcf8 \uc139\uc158 \uc124\uc815\n    config['DEFAULT'] = {\n        'debug': 'False',\n        'log_level': 'INFO',\n        'max_connections': '100'\n    }\n\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\n    config['database'] = {\n        'host': 'localhost',\n        'port': '5432',\n        'username': 'admin',\n        'password': 'secret123',\n        'database_name': 'myapp'\n    }\n\n    # \uc6f9 \uc11c\ubc84 \uc124\uc815\n    config['webserver'] = {\n        'host': '0.0.0.0',\n        'port': '8080',\n        'workers': '4',\n        'timeout': '30'\n    }\n\n    # \ub85c\uae45 \uc124\uc815\n    config['logging'] = {\n        'log_file': '/var/log/myapp.log',\n        'max_size': '10MB',\n        'backup_count': '5',\n        'log_level': 'DEBUG'  # DEFAULT\uc758 log_level\uc744 \uc624\ubc84\ub77c\uc774\ub4dc\n    }\n\n    # \ud30c\uc77c\ub85c \uc800\uc7a5\n    with open('app_config.ini', 'w') as configfile:\n        config.write(configfile)\n\n    print(\"\u2713 \uc124\uc815 \ud30c\uc77c\uc774 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4: app_config.ini\")\n\ndef read_config():\n    \"\"\"\uc124\uc815 \ud30c\uc77c \uc77d\uae30\"\"\"\n    config = configparser.ConfigParser()\n    config.read('app_config.ini')\n\n    print(\"\\n\uc124\uc815 \ud30c\uc77c \ub0b4\uc6a9:\")\n\n    # \ubaa8\ub4e0 \uc139\uc158 \ucd9c\ub825\n    for section_name in config.sections():\n        print(f\"\\n[{section_name}]\")\n        for key, value in config[section_name].items():\n            print(f\"  {key} = {value}\")\n\n    # \ud2b9\uc815 \uac12 \uc811\uadfc\n    print(f\"\\n\ud2b9\uc815 \uc124\uc815 \uac12 \uc811\uadfc:\")\n    print(f\"  \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud638\uc2a4\ud2b8: {config['database']['host']}\")\n    print(f\"  \uc6f9 \uc11c\ubc84 \ud3ec\ud2b8: {config.getint('webserver', 'port')}\")\n    print(f\"  \ub514\ubc84\uadf8 \ubaa8\ub4dc: {config.getboolean('database', 'debug')}\")  # DEFAULT\uc5d0\uc11c \uc0c1\uc18d\n    print(f\"  \ub85c\uadf8 \ub808\ubca8: {config['logging']['log_level']}\")  # \uc624\ubc84\ub77c\uc774\ub4dc\ub41c \uac12\n\nclass AppConfig:\n    \"\"\"\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uc815 \uad00\ub9ac \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, config_file='app_config.ini'):\n        self.config_file = config_file\n        self.config = configparser.ConfigParser()\n        self.load_config()\n\n    def load_config(self):\n        \"\"\"\uc124\uc815 \ud30c\uc77c \ub85c\ub4dc\"\"\"\n        if os.path.exists(self.config_file):\n            self.config.read(self.config_file)\n            print(f\"\u2713 \uc124\uc815 \ud30c\uc77c \ub85c\ub4dc\ub428: {self.config_file}\")\n        else:\n            print(f\"\u26a0 \uc124\uc815 \ud30c\uc77c\uc774 \uc5c6\uc2b5\ub2c8\ub2e4: {self.config_file}\")\n            self.create_default_config()\n\n    def create_default_config(self):\n        \"\"\"\uae30\ubcf8 \uc124\uc815 \uc0dd\uc131\"\"\"\n        self.config['DEFAULT'] = {\n            \"created_at\": datetime.now().isoformat(),\n            \"version\": \"1.0.0\"\n        }\n\n        self.config['app'] = {\n            'name': 'MyApplication',\n            'debug': 'False'\n        }\n\n        self.save_config()\n        print(\"\u2713 \uae30\ubcf8 \uc124\uc815 \ud30c\uc77c\uc774 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n\n    def get(self, section, key, fallback=None):\n        \"\"\"\uc124\uc815 \uac12 \uac00\uc838\uc624\uae30\"\"\"\n        try:\n            return self.config.get(section, key, fallback=fallback)\n        except (configparser.NoSectionError, configparser.NoOptionError):\n            return fallback\n\n    def getint(self, section, key, fallback=0):\n        \"\"\"\uc815\uc218 \uc124\uc815 \uac12 \uac00\uc838\uc624\uae30\"\"\"\n        try:\n            return self.config.getint(section, key, fallback=fallback)\n        except (configparser.NoSectionError, configparser.NoOptionError, ValueError):\n            return fallback\n\n    def getboolean(self, section, key, fallback=False):\n        \"\"\"\ubd88\ub9b0 \uc124\uc815 \uac12 \uac00\uc838\uc624\uae30\"\"\"\n        try:\n            return self.config.getboolean(section, key, fallback=fallback)\n        except (configparser.NoSectionError, configparser.NoOptionError, ValueError):\n            return fallback\n\n    def set(self, section, key, value):\n        \"\"\"\uc124\uc815 \uac12 \ubcc0\uacbd\"\"\"\n        if not self.config.has_section(section):\n            self.config.add_section(section)\n\n        self.config.set(section, key, str(value))\n        print(f\"\uc124\uc815 \ubcc0\uacbd: [{section}] {key} = {value}\")\n\n    def save_config(self):\n        \"\"\"\uc124\uc815 \ud30c\uc77c \uc800\uc7a5\"\"\"\n        with open(self.config_file, 'w') as configfile:\n            self.config.write(configfile)\n        print(f\"\u2713 \uc124\uc815\uc774 \uc800\uc7a5\ub418\uc5c8\uc2b5\ub2c8\ub2e4: {self.config_file}\")\n\n    def list_all_settings(self):\n        \"\"\"\ubaa8\ub4e0 \uc124\uc815 \ub098\uc5f4\"\"\"\n        print(\"\\n\ud604\uc7ac \uc124\uc815:\")\n        for section_name in self.config.sections():\n            print(f\"\\n[{section_name}]\")\n            for key in self.config[section_name]:\n                value = self.config[section_name][key]\n                print(f\"  {key} = {value}\")\n\n# \uc124\uc815 \uad00\ub9ac \ud074\ub798\uc2a4 \uc0ac\uc6a9 \uc608\uc81c\nprint(\"\\n=== \uc124\uc815 \uad00\ub9ac \ud074\ub798\uc2a4 \uc0ac\uc6a9 ===\")\n\ncreate_sample_config()\nread_config()\n\n# \uc124\uc815 \uad00\ub9ac \ud074\ub798\uc2a4 \uc0ac\uc6a9\napp_config = AppConfig('my_app.ini')\n\n# \uc124\uc815 \uac12 \uc77d\uae30\napp_name = app_config.get('app', 'name', 'Unknown App')\ndebug_mode = app_config.getboolean('app', 'debug', False)\n\nprint(f\"\\n\uc560\ud50c\ub9ac\ucf00\uc774\uc158: {app_name}\")\nprint(f\"\ub514\ubc84\uadf8 \ubaa8\ub4dc: {debug_mode}\")\n\n# \uc124\uc815 \uac12 \ubcc0\uacbd\napp_config.set('app', 'debug', True)\napp_config.set('app', 'last_updated', datetime.now().isoformat())\napp_config.set('performance', 'cache_enabled', True)\n\n# \uc124\uc815 \uc800\uc7a5\napp_config.save_config()\n\n# \ubaa8\ub4e0 \uc124\uc815 \ucd9c\ub825\napp_config.list_all_settings()\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#62-json-yaml","title":"6.2 JSON\uacfc YAML \uc124\uc815 \ud30c\uc77c","text":"<pre><code>import json\nimport os\nfrom datetime import datetime\n\n# YAML\uc740 \uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ubbc0\ub85c try-except\ub85c \ucc98\ub9ac\ntry:\n    import yaml\n    YAML_AVAILABLE = True\nexcept ImportError:\n    YAML_AVAILABLE = False\n    print(\"\u26a0 PyYAML\uc774 \uc124\uce58\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. YAML \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\ub824\uba74 'pip install PyYAML'\uc744 \uc2e4\ud589\ud558\uc138\uc694.\")\n\nclass ConfigManager:\n    \"\"\"\ub2e4\uc591\ud55c \ud615\uc2dd\uc758 \uc124\uc815 \ud30c\uc77c \uad00\ub9ac\"\"\"\n\n    def __init__(self, config_file):\n        self.config_file = config_file\n        self.config_data = {}\n        self.file_format = self._detect_format()\n        self.load()\n\n    def _detect_format(self):\n        \"\"\"\ud30c\uc77c \ud655\uc7a5\uc790\ub85c \ud615\uc2dd \uac10\uc9c0\"\"\"\n        _, ext = os.path.splitext(self.config_file)\n        ext = ext.lower()\n\n        if ext == '.json':\n            return 'json'\n        elif ext in ['.yml', '.yaml'] and YAML_AVAILABLE:\n            return 'yaml'\n        elif ext == '.ini':\n            return 'ini'\n        else:\n            return 'json'  # \uae30\ubcf8\uac12\n\n    def load(self):\n        \"\"\"\uc124\uc815 \ud30c\uc77c \ub85c\ub4dc\"\"\"\n        if not os.path.exists(self.config_file):\n            self.create_default_config()\n            return\n\n        try:\n            with open(self.config_file, 'r', encoding='utf-8') as f:\n                if self.file_format == 'json':\n                    self.config_data = json.load(f)\n                elif self.file_format == 'yaml':\n                    self.config_data = yaml.safe_load(f)\n\n            print(f\"\u2713 \uc124\uc815 \ud30c\uc77c \ub85c\ub4dc\ub428: {self.config_file} ({self.file_format.upper()})\")\n\n        except Exception as e:\n            print(f\"\u2717 \uc124\uc815 \ud30c\uc77c \ub85c\ub4dc \uc2e4\ud328: {e}\")\n            self.create_default_config()\n\n    def create_default_config(self):\n        \"\"\"\uae30\ubcf8 \uc124\uc815 \uc0dd\uc131\"\"\"\n        self.config_data = {\n            \"application\": {\n                \"name\": \"MyApp\",\n                \"version\": \"1.0.0\",\n                \"debug\": False,\n                \"created_at\": datetime.now().isoformat()\n            },\n            \"database\": {\n                \"type\": \"postgresql\",\n                \"host\": \"localhost\",\n                \"port\": 5432,\n                \"name\": \"myapp_db\",\n                \"connection_pool\": {\n                    \"min_connections\": 1,\n                    \"max_connections\": 20\n                }\n            },\n            \"logging\": {\n                \"level\": \"INFO\",\n                \"handlers\": [\n                    {\n                        \"type\": \"file\",\n                        \"filename\": \"app.log\",\n                        \"max_size\": \"10MB\",\n                        \"backup_count\": 5\n                    },\n                    {\n                        \"type\": \"console\",\n                        \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n                    }\n                ]\n            },\n            \"features\": {\n                \"email_notifications\": True,\n                \"api_rate_limit\": 1000,\n                \"allowed_file_types\": [\"jpg\", \"png\", \"pdf\", \"txt\"],\n                \"maintenance_mode\": False\n            }\n        }\n        self.save()\n        print(f\"\u2713 \uae30\ubcf8 \uc124\uc815 \ud30c\uc77c \uc0dd\uc131\ub428: {self.config_file}\")\n\n    def get(self, path, default=None):\n        \"\"\"\uc810 \ud45c\uae30\ubc95\uc73c\ub85c \uc124\uc815 \uac12 \uac00\uc838\uc624\uae30 (\uc608: 'database.host')\"\"\"\n        keys = path.split('.')\n        current = self.config_data\n\n        try:\n            for key in keys:\n                current = current[key]\n            return current\n        except (KeyError, TypeError):\n            return default\n\n    def set(self, path, value):\n        \"\"\"\uc810 \ud45c\uae30\ubc95\uc73c\ub85c \uc124\uc815 \uac12 \ubcc0\uacbd\"\"\"\n        keys = path.split('.')\n        current = self.config_data\n\n        # \uc911\uac04 \ub515\uc154\ub108\ub9ac\ub4e4\uc744 \uc0dd\uc131\n        for key in keys[:-1]:\n            if key not in current or not isinstance(current[key], dict):\n                current[key] = {}\n            current = current[key]\n\n        # \ub9c8\uc9c0\ub9c9 \ud0a4\uc5d0 \uac12 \uc124\uc815\n        current[keys[-1]] = value\n        print(f\"\uc124\uc815 \ubcc0\uacbd: {path} = {value}\")\n\n    def delete(self, path):\n        \"\"\"\uc124\uc815 \uc0ad\uc81c\"\"\"\n        keys = path.split('.')\n        current = self.config_data\n\n        try:\n            for key in keys[:-1]:\n                current = current[key]\n\n            if keys[-1] in current:\n                del current[keys[-1]]\n                print(f\"\uc124\uc815 \uc0ad\uc81c: {path}\")\n                return True\n            else:\n                print(f\"\uc124\uc815\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {path}\")\n                return False\n        except (KeyError, TypeError):\n            print(f\"\uc124\uc815\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {path}\")\n            return False\n\n    def save(self):\n        \"\"\"\uc124\uc815 \ud30c\uc77c \uc800\uc7a5\"\"\"\n        try:\n            with open(self.config_file, 'w', encoding='utf-8') as f:\n                if self.file_format == 'json':\n                    json.dump(self.config_data, f, ensure_ascii=False, indent=2)\n                elif self.file_format == 'yaml':\n                    yaml.dump(self.config_data, f, default_flow_style=False, allow_unicode=True)\n\n            print(f\"\u2713 \uc124\uc815 \uc800\uc7a5\ub428: {self.config_file}\")\n\n        except Exception as e:\n            print(f\"\u2717 \uc124\uc815 \uc800\uc7a5 \uc2e4\ud328: {e}\")\n            return False\n\n# CSV \ud504\ub85c\uc138\uc11c \uc0ac\uc6a9 \uc608\uc81c\nprint(\"\\n=== CSV \uace0\uae09 \ucc98\ub9ac \uc608\uc81c ===\")\n\n# \uc0d8\ud50c \uc9c1\uc6d0 \ub370\uc774\ud130 \uc0dd\uc131\nemployee_data = [\n    ['name', 'age', 'department', 'salary', 'email'],\n    ['\uae40\ucca0\uc218', '28', 'IT', '3500000', 'kim@company.com'],\n    ['\uc774\uc601\ud76c', '32', 'HR', '4000000', 'lee@company.com'],\n    ['\ubc15\ubbfc\uc218', '', 'IT', '3200000', 'park@company.com'],  # \ub098\uc774 \ub204\ub77d\n    ['\ucd5c\uc9c0\uc6d0', '29', 'Sales', '3800000', 'choi-invalid-email'],  # \uc798\ubabb\ub41c \uc774\uba54\uc77c\n    ['\uc815\ud604\uc6b0', '35', 'IT', 'invalid', 'jung@company.com'],  # \uc798\ubabb\ub41c \uae09\uc5ec\n    ['\ud55c\ubbf8\uc601', '27', 'Marketing', '3600000', 'han@company.com']\n]\n\nwith open('employees.csv', 'w', newline='', encoding='utf-8') as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerows(employee_data)\n\n# CSV \ud504\ub85c\uc138\uc11c \uc0ac\uc6a9\nprocessor = CSVProcessor('employees.csv')\n\nif processor.load_data():\n    # \ub370\uc774\ud130 \uac80\uc99d \uaddc\uce59 \uc815\uc758\n    validation_rules = {\n        'name': {'required': True},\n        'age': {'required': True, 'type': 'int', 'range': (18, 65)},\n        'salary': {'required': True, 'type': 'int', 'range': (2000000, 10000000)},\n        'email': {'required': True, 'type': 'email'}\n    }\n\n    # \ub370\uc774\ud130 \uac80\uc99d\n    errors = processor.validate_data(validation_rules)\n    if errors:\n        print(\"\\n\ub370\uc774\ud130 \uac80\uc99d \uc624\ub958:\")\n        for error in errors:\n            print(f\"  \u2022 {error}\")\n    else:\n        print(\"\\n\u2713 \ubaa8\ub4e0 \ub370\uc774\ud130\uac00 \uc720\ud6a8\ud569\ub2c8\ub2e4.\")\n\n    # \ub370\uc774\ud130 \ud544\ud130\ub9c1 (IT \ubd80\uc11c, \uae09\uc5ec 3500000 \uc774\uc0c1)\n    filtered_data = processor.filter_data({\n        'department': {'operator': '==', 'value': 'IT'},\n        'salary': {'operator': '&gt;=', 'value': 3500000}\n    })\n\n    print(f\"\\n\ud544\ud130\ub9c1 \uacb0\uacfc: {len(filtered_data)}\uac1c\uc758 \ub808\ucf54\ub4dc\")\n    for record in filtered_data:\n        print(f\"  {record['name']}: {record['department']}, {record['salary']}\uc6d0\")\n\n    # \ud544\ud130\ub9c1\ub41c \ub370\uc774\ud130 \uc800\uc7a5\n    if filtered_data:\n        processor.save_data(filtered_data, 'it_high_salary.csv')\n</code></pre>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#7","title":"7. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#1","title":"\uc5f0\uc2b5 1: \ub85c\uadf8 \ud30c\uc77c \ubd84\uc11d\uae30","text":"<p>\uc6f9 \uc11c\ubc84 \ub85c\uadf8 \ud30c\uc77c\uc744 \ubd84\uc11d\ud558\uc5ec \uc811\uadfc \ud1b5\uacc4\ub97c \uc0dd\uc131\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#2","title":"\uc5f0\uc2b5 2: \uc124\uc815 \ud30c\uc77c \ubcc0\ud658\uae30","text":"<p>INI \ud615\uc2dd\uc758 \uc124\uc815 \ud30c\uc77c\uc744 JSON\uc774\ub098 YAML \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \ub3c4\uad6c\ub97c \ub9cc\ub4dc\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#3","title":"\uc5f0\uc2b5 3: \ud30c\uc77c \ubc31\uc5c5 \uc2dc\uc2a4\ud15c","text":"<p>\uc9c0\uc815\ub41c \ub514\ub809\ud1a0\ub9ac\ub97c \uc8fc\uae30\uc801\uc73c\ub85c \ubc31\uc5c5\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#4_1","title":"\uc5f0\uc2b5 4: \ub370\uc774\ud130 \ud3ec\ub9f7 \ubcc0\ud658\uae30","text":"<p>CSV \ud30c\uc77c\uc744 JSON\uc774\ub098 XML \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>JSON \ucc98\ub9ac: \ud30c\uc774\uc36c \uac1d\uccb4\uc640 JSON \uac04\uc758 \uc9c1\ub82c\ud654/\uc5ed\uc9c1\ub82c\ud654</li> <li>CSV \ucc98\ub9ac: \uccb4\uacc4\uc801\uc778 \ub370\uc774\ud130 \ubd84\uc11d\uacfc \ucc98\ub9ac \uae30\ubc95</li> <li>XML \ucc98\ub9ac: DOM \ubc29\uc2dd\uc758 XML \ubb38\uc11c \uc870\uc791</li> <li>\ubc14\uc774\ub108\ub9ac \ud30c\uc77c: \uad6c\uc870\ud654\ub41c \ubc14\uc774\ub108\ub9ac \ub370\uc774\ud130 \ucc98\ub9ac</li> <li>\uc555\ucd95 \ud30c\uc77c: ZIP\uacfc TAR \ud615\uc2dd\uc758 \uc555\ucd95/\ud574\uc81c</li> <li>\uc124\uc815 \ud30c\uc77c: \ub2e4\uc591\ud55c \ud615\uc2dd\uc758 \uc124\uc815 \uad00\ub9ac \ud328\ud134</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \uc815\uaddc\ud45c\ud604\uc2dd\uc744 \ud65c\uc6a9\ud55c \uace0\uae09 \ud14d\uc2a4\ud2b8 \ucc98\ub9ac \uae30\ubc95\uc744 \ud559\uc2b5\ud558\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter02_file_processing_data_formats/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ub370\uc774\ud130 \ud615\uc2dd\uc5d0 \ub9de\ub294 \uc801\uc808\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \uc120\ud0dd\uc774 \uc911\uc694\ud569\ub2c8\ub2e4</li> <li>\uc608\uc678 \ucc98\ub9ac\ub97c \ud1b5\ud55c \uc548\uc804\ud55c \ud30c\uc77c \ucc98\ub9ac\uac00 \ud544\uc218\uc785\ub2c8\ub2e4</li> <li>\uba54\ubaa8\ub9ac \ud6a8\uc728\uc131\uc744 \uace0\ub824\ud55c \ub300\uc6a9\ub7c9 \ud30c\uc77c \ucc98\ub9ac \uae30\ubc95\uc744 \uc775\ud600\uc57c \ud569\ub2c8\ub2e4</li> <li>\uc124\uc815 \uad00\ub9ac\ub294 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uc720\uc9c0\ubcf4\uc218\uc131\uc744 \ud06c\uac8c \uc88c\uc6b0\ud569\ub2c8\ub2e4</li> <li>\uc555\ucd95 \ud30c\uc77c\uc740 \uc800\uc7a5 \uacf5\uac04\uacfc \uc804\uc1a1 \ud6a8\uc728\uc131\uc744 \ub192\uc774\ub294 \uc911\uc694\ud55c \ub3c4\uad6c\uc785\ub2c8\ub2e4  </li> </ul>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/","title":"Chapter 3: \uc815\uaddc\ud45c\ud604\uc2dd (Regular Expressions)","text":""},{"location":"tutorials/intermediate/chapter03_regular_expressions/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \uc815\uaddc\ud45c\ud604\uc2dd\uc758 \uae30\ubcf8 \ubb38\ubc95\uacfc \ud328\ud134\uc744 \uc774\ud574\ud558\uae30 - re \ubaa8\ub4c8\uc758 \ub2e4\uc591\ud55c \ud568\uc218 \ud65c\uc6a9\ud558\uae30 - \uba54\ud0c0 \ubb38\uc790\uc640 \ud2b9\uc218 \ubb38\uc790 \uc0ac\uc6a9\ud558\uae30 - \uadf8\ub8f9\ud654\uc640 \ucea1\ucc98\ub97c \ud1b5\ud55c \uace0\uae09 \ud328\ud134 \ub9e4\uce6d - \uc2e4\ubb34\uc5d0\uc11c \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 \uc815\uaddc\ud45c\ud604\uc2dd \ud328\ud134 \uc791\uc131\ud558\uae30 - \ud14d\uc2a4\ud2b8 \uac80\uc0c9, \ucd94\ucd9c, \uce58\ud658 \uc791\uc5c5 \uc790\ub3d9\ud654\ud558\uae30</p>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#1","title":"1. \uc815\uaddc\ud45c\ud604\uc2dd \uae30\ucd08","text":""},{"location":"tutorials/intermediate/chapter03_regular_expressions/#11","title":"1.1 \uc815\uaddc\ud45c\ud604\uc2dd\uc774\ub780?","text":"<p>\uc815\uaddc\ud45c\ud604\uc2dd(Regular Expression, RegEx)\uc740 \ubb38\uc790\uc5f4\uc5d0\uc11c \ud2b9\uc815 \ud328\ud134\uc744 \ucc3e\uac70\ub098 \ub9e4\uce6d\ud558\uae30 \uc704\ud55c \uac15\ub825\ud55c \ub3c4\uad6c\uc785\ub2c8\ub2e4. \ubcf5\uc7a1\ud55c \ubb38\uc790\uc5f4 \ucc98\ub9ac \uc791\uc5c5\uc744 \uac04\ub2e8\ud558\uace0 \ud6a8\uc728\uc801\uc73c\ub85c \uc218\ud589\ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4.</p> <pre><code>import re\n\nprint(\"=== \uc815\uaddc\ud45c\ud604\uc2dd \uae30\ubcf8 \uac1c\ub150 ===\")\n\n# \uac04\ub2e8\ud55c \ud328\ud134 \ub9e4\uce6d \uc608\uc81c\ntext = \"Python\uc740 2024\ub144 \ud604\uc7ac \uac00\uc7a5 \uc778\uae30 \uc788\ub294 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc785\ub2c8\ub2e4.\"\n\n# 'Python' \ubb38\uc790\uc5f4 \ucc3e\uae30\npattern = \"Python\"\nmatch = re.search(pattern, text)\n\nif match:\n    print(f\"'{pattern}' \ud328\ud134\uc744 \ucc3e\uc558\uc2b5\ub2c8\ub2e4!\")\n    print(f\"\uc704\uce58: {match.start()} ~ {match.end()}\")\n    print(f\"\ub9e4\uce6d\ub41c \ubb38\uc790\uc5f4: '{match.group()}'\")\nelse:\n    print(f\"'{pattern}' \ud328\ud134\uc744 \ucc3e\uc9c0 \ubabb\ud588\uc2b5\ub2c8\ub2e4.\")\n\n# \uc22b\uc790 \ud328\ud134 \ucc3e\uae30\nnumber_pattern = r\"\\d+\"  # \\d\ub294 \uc22b\uc790, +\ub294 1\uac1c \uc774\uc0c1\nnumber_match = re.search(number_pattern, text)\n\nif number_match:\n    print(f\"\\n\uc22b\uc790 \ud328\ud134 \ubc1c\uacac: {number_match.group()}\")\n\n# \ubaa8\ub4e0 \ud55c\uae00 \ubb38\uc790 \ucc3e\uae30\nkorean_pattern = r\"[\uac00-\ud7a3]+\"\nkorean_matches = re.findall(korean_pattern, text)\nprint(f\"\\n\ud55c\uae00 \ub2e8\uc5b4\ub4e4: {korean_matches}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#12","title":"1.2 \uae30\ubcf8 \ubb38\ubc95\uacfc \uba54\ud0c0 \ubb38\uc790","text":"<pre><code>print(\"\\n=== \uc815\uaddc\ud45c\ud604\uc2dd \uae30\ubcf8 \ubb38\ubc95 ===\")\n\n# \uae30\ubcf8 \uba54\ud0c0 \ubb38\uc790\ub4e4\ntest_strings = [\n    \"hello world\",\n    \"Hello World\",\n    \"HELLO WORLD\",\n    \"hello123\",\n    \"test@email.com\",\n    \"010-1234-5678\",\n    \"2024-01-15\",\n    \"   spaces   \"\n]\n\npatterns = {\n    r\"hello\": \"\uc815\ud655\ud55c \ubb38\uc790\uc5f4 \ub9e4\uce6d\",\n    r\"hello|hi\": \"OR \uc5f0\uc0b0 (hello \ub610\ub294 hi)\",\n    r\"^hello\": \"\ubb38\uc790\uc5f4 \uc2dc\uc791\uc774 hello\",\n    r\"world$\": \"\ubb38\uc790\uc5f4 \ub05d\uc774 world\",\n    r\"h.llo\": \". (\uc784\uc758\uc758 \ud55c \ubb38\uc790)\",\n    r\"hello*\": \"* (0\uac1c \uc774\uc0c1 \ubc18\ubcf5)\",\n    r\"hello+\": \"+ (1\uac1c \uc774\uc0c1 \ubc18\ubcf5)\",\n    r\"hello?\": \"? (0\uac1c \ub610\ub294 1\uac1c)\",\n    r\"hello{2}\": \"{n} (\uc815\ud655\ud788 n\ubc88)\",\n    r\"[aeiou]\": \"[] (\ubb38\uc790 \ud074\ub798\uc2a4)\",\n    r\"[^aeiou]\": \"[^] (\ubd80\uc815 \ubb38\uc790 \ud074\ub798\uc2a4)\",\n    r\"\\d\": \"\\\\d (\uc22b\uc790)\",\n    r\"\\w\": \"\\\\w (\ub2e8\uc5b4 \ubb38\uc790: \uc54c\ud30c\ubcb3, \uc22b\uc790, _)\",\n    r\"\\s\": \"\\\\s (\uacf5\ubc31 \ubb38\uc790)\"\n}\n\nfor pattern, description in patterns.items():\n    print(f\"\\n\ud328\ud134: {pattern} - {description}\")\n    for text in test_strings:\n        match = re.search(pattern, text)\n        if match:\n            print(f\"  '{text}' -&gt; \ub9e4\uce6d: '{match.group()}'\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#13","title":"1.3 \ubb38\uc790 \ud074\ub798\uc2a4\uc640 \ubc94\uc704","text":"<pre><code>print(\"\\n=== \ubb38\uc790 \ud074\ub798\uc2a4\uc640 \ubc94\uc704 ===\")\n\n# \ub2e4\uc591\ud55c \ubb38\uc790 \ud074\ub798\uc2a4 \uc608\uc81c\ntext_samples = [\n    \"abc123XYZ\",\n    \"Hello World!\",\n    \"test@domain.com\",\n    \"2024-12-25\",\n    \"\uac00\ub098\ub2e4ABC123\",\n    \"\ud2b9\uc218\ubb38\uc790!@#$%\"\n]\n\ncharacter_classes = {\n    r\"[a-z]\": \"\uc18c\ubb38\uc790\",\n    r\"[A-Z]\": \"\ub300\ubb38\uc790\", \n    r\"[0-9]\": \"\uc22b\uc790\",\n    r\"[a-zA-Z]\": \"\ubaa8\ub4e0 \uc601\ubb38\uc790\",\n    r\"[a-zA-Z0-9]\": \"\uc601\ubb38\uc790\uc640 \uc22b\uc790\",\n    r\"[\uac00-\ud7a3]\": \"\ud55c\uae00\",\n    r\"[!@#$%^&amp;*]\": \"\ud2b9\uc218\ubb38\uc790\",\n    r\"[^0-9]\": \"\uc22b\uc790\uac00 \uc544\ub2cc \ubb38\uc790\",\n    r\"\\w\": \"\ub2e8\uc5b4 \ubb38\uc790 (\uc54c\ud30c\ubcb3, \uc22b\uc790, _)\",\n    r\"\\W\": \"\ub2e8\uc5b4 \ubb38\uc790\uac00 \uc544\ub2cc \ubb38\uc790\",\n    r\"\\d\": \"\uc22b\uc790\",\n    r\"\\D\": \"\uc22b\uc790\uac00 \uc544\ub2cc \ubb38\uc790\",\n    r\"\\s\": \"\uacf5\ubc31\",\n    r\"\\S\": \"\uacf5\ubc31\uc774 \uc544\ub2cc \ubb38\uc790\"\n}\n\nfor pattern, description in character_classes.items():\n    print(f\"\\n{description} \ud328\ud134: {pattern}\")\n    for text in text_samples:\n        matches = re.findall(pattern, text)\n        if matches:\n            print(f\"  '{text}' -&gt; {matches}\")\n\n# \uc2e4\uc6a9\uc801\uc778 \ubb38\uc790 \ud074\ub798\uc2a4 \uc608\uc81c\nprint(\"\\n=== \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c ===\")\n\n# \uc774\uba54\uc77c\uc5d0\uc11c \ub3c4\uba54\uc778 \ucd94\ucd9c\nemail = \"user@example.com\"\ndomain_pattern = r\"@([a-zA-Z0-9.-]+)\"\ndomain_match = re.search(domain_pattern, email)\nif domain_match:\n    print(f\"\uc774\uba54\uc77c \ub3c4\uba54\uc778: {domain_match.group(1)}\")\n\n# \ud55c\uad6d \uc804\ud654\ubc88\ud638 \ud328\ud134\nphone_numbers = [\"010-1234-5678\", \"02-123-4567\", \"031-123-4567\"]\nphone_pattern = r\"\\d{2,3}-\\d{3,4}-\\d{4}\"\n\nfor phone in phone_numbers:\n    if re.match(phone_pattern, phone):\n        print(f\"\uc720\ud6a8\ud55c \uc804\ud654\ubc88\ud638: {phone}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#2-re","title":"2. re \ubaa8\ub4c8 \uc8fc\uc694 \ud568\uc218","text":""},{"location":"tutorials/intermediate/chapter03_regular_expressions/#21","title":"2.1 \uae30\ubcf8 \ub9e4\uce6d \ud568\uc218\ub4e4","text":"<pre><code>print(\"\\n=== re \ubaa8\ub4c8 \uc8fc\uc694 \ud568\uc218\ub4e4 ===\")\n\nsample_text = \"\"\"\nPython 3.12\ub294 2024\ub144\uc5d0 \ucd9c\uc2dc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n\uc774\uba54\uc77c: admin@python.org, support@example.com\n\uc804\ud654\ubc88\ud638: 010-1234-5678, 02-987-6543\n\uc6f9\uc0ac\uc774\ud2b8: https://python.org, http://example.com\n\"\"\"\n\n# re.search() - \uccab \ubc88\uc9f8 \ub9e4\uce6d \ucc3e\uae30\nprint(\"1. re.search() - \uccab \ubc88\uc9f8 \ub9e4\uce6d\")\nemail_pattern = r\"\\w+@\\w+\\.\\w+\"\nfirst_email = re.search(email_pattern, sample_text)\nif first_email:\n    print(f\"\uccab \ubc88\uc9f8 \uc774\uba54\uc77c: {first_email.group()}\")\n\n# re.match() - \ubb38\uc790\uc5f4 \uc2dc\uc791\ubd80\ud130 \ub9e4\uce6d\nprint(\"\\n2. re.match() - \ubb38\uc790\uc5f4 \uc2dc\uc791\ubd80\ud130 \ub9e4\uce6d\")\nstart_match = re.match(r\"Python\", sample_text.strip())\nif start_match:\n    print(f\"\uc2dc\uc791 \ub9e4\uce6d: {start_match.group()}\")\n\n# re.findall() - \ubaa8\ub4e0 \ub9e4\uce6d \ucc3e\uae30\nprint(\"\\n3. re.findall() - \ubaa8\ub4e0 \ub9e4\uce6d \ucc3e\uae30\")\nall_emails = re.findall(email_pattern, sample_text)\nprint(f\"\ubaa8\ub4e0 \uc774\uba54\uc77c: {all_emails}\")\n\nall_numbers = re.findall(r\"\\d+\", sample_text)\nprint(f\"\ubaa8\ub4e0 \uc22b\uc790: {all_numbers}\")\n\n# re.finditer() - \ub9e4\uce6d \uac1d\uccb4\ub4e4\uc758 \uc774\ud130\ub808\uc774\ud130\nprint(\"\\n4. re.finditer() - \ub9e4\uce6d \uac1d\uccb4 \uc774\ud130\ub808\uc774\ud130\")\nfor match in re.finditer(email_pattern, sample_text):\n    print(f\"\uc774\uba54\uc77c: {match.group()}, \uc704\uce58: {match.start()}-{match.end()}\")\n\n# re.split() - \ud328\ud134\uc73c\ub85c \ubd84\ud560\nprint(\"\\n5. re.split() - \ud328\ud134\uc73c\ub85c \ubd84\ud560\")\ntext_to_split = \"apple,banana;orange:grape\"\nfruits = re.split(r\"[,;:]\", text_to_split)\nprint(f\"\uacfc\uc77c\ub4e4: {fruits}\")\n\n# \ubcf5\uc7a1\ud55c \ubd84\ud560 \uc608\uc81c\nsentences = \"\uccab \ubc88\uc9f8 \ubb38\uc7a5\uc785\ub2c8\ub2e4. \ub450 \ubc88\uc9f8 \ubb38\uc7a5\uc774\uc5d0\uc694! \uc138 \ubc88\uc9f8 \ubb38\uc7a5\uc778\uac00\uc694?\"\nsentence_list = re.split(r\"[.!?]+\", sentences)\nsentence_list = [s.strip() for s in sentence_list if s.strip()]\nprint(f\"\ubb38\uc7a5\ub4e4: {sentence_list}\")\n\n# re.sub() - \ud328\ud134 \uce58\ud658\nprint(\"\\n6. re.sub() - \ud328\ud134 \uce58\ud658\")\nphone_text = \"\uc5f0\ub77d\ucc98: 010-1234-5678, \uc0ac\ubb34\uc2e4: 02-987-6543\"\nmasked_phones = re.sub(r\"\\d{3,4}-\\d{4}\", \"***-****\", phone_text)\nprint(f\"\uc804\ud654\ubc88\ud638 \ub9c8\uc2a4\ud0b9: {masked_phones}\")\n\n# \uace0\uae09 \uce58\ud658 - \ud568\uc218 \uc0ac\uc6a9\ndef mask_email(match):\n    email = match.group()\n    username, domain = email.split('@')\n    masked_username = username[0] + '*' * (len(username) - 1)\n    return f\"{masked_username}@{domain}\"\n\ntext_with_emails = \"\uc5f0\ub77d\ucc98: john@example.com, jane@test.org\"\nmasked_emails = re.sub(email_pattern, mask_email, text_with_emails)\nprint(f\"\uc774\uba54\uc77c \ub9c8\uc2a4\ud0b9: {masked_emails}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#22","title":"2.2 \ucef4\ud30c\uc77c\ub41c \ud328\ud134 \uac1d\uccb4","text":"<pre><code>print(\"\\n=== \ucef4\ud30c\uc77c\ub41c \ud328\ud134 \uac1d\uccb4 ===\")\n\n# \ud328\ud134\uc744 \ubbf8\ub9ac \ucef4\ud30c\uc77c\ud558\uba74 \uc131\ub2a5 \ud5a5\uc0c1\nemail_regex = re.compile(r\"([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\")\nphone_regex = re.compile(r\"(\\d{2,3})-(\\d{3,4})-(\\d{4})\")\nurl_regex = re.compile(r\"(https?://)([a-zA-Z0-9.-]+)(/[a-zA-Z0-9./?=&amp;_-]*)?\")\n\n# \uc5ec\ub7ec \ud14d\uc2a4\ud2b8\uc5d0\uc11c \ubc18\ubcf5 \uc0ac\uc6a9\ntexts = [\n    \"Contact: user@domain.com, phone: 010-1234-5678\",\n    \"Website: https://example.com, email: admin@site.org\",\n    \"Office: 02-123-4567, https://company.co.kr\"\n]\n\nprint(\"\ucef4\ud30c\uc77c\ub41c \ud328\ud134\uc73c\ub85c \ub9e4\uce6d:\")\nfor i, text in enumerate(texts, 1):\n    print(f\"\\n\ud14d\uc2a4\ud2b8 {i}: {text}\")\n\n    # \uc774\uba54\uc77c \ucd94\ucd9c\n    email_matches = email_regex.findall(text)\n    for username, domain in email_matches:\n        print(f\"  \uc774\uba54\uc77c: {username}@{domain}\")\n\n    # \uc804\ud654\ubc88\ud638 \ucd94\ucd9c\n    phone_matches = phone_regex.findall(text)\n    for area, middle, last in phone_matches:\n        print(f\"  \uc804\ud654\ubc88\ud638: {area}-{middle}-{last}\")\n\n    # URL \ucd94\ucd9c\n    url_matches = url_regex.findall(text)\n    for protocol, domain, path in url_matches:\n        print(f\"  URL: {protocol}{domain}{path}\")\n\n# \ud50c\ub798\uadf8 \uc0ac\uc6a9\nprint(\"\\n=== \uc815\uaddc\ud45c\ud604\uc2dd \ud50c\ub798\uadf8 ===\")\n\ncase_sensitive_text = \"Python python PYTHON\"\n\n# \ub300\uc18c\ubb38\uc790 \uad6c\ubd84 \uc5c6\uc774 \ub9e4\uce6d\ncase_insensitive = re.compile(r\"python\", re.IGNORECASE)\nall_pythons = case_insensitive.findall(case_sensitive_text)\nprint(f\"\ub300\uc18c\ubb38\uc790 \ubb34\uc2dc\ud558\uace0 \ucc3e\uae30: {all_pythons}\")\n\n# \uc5ec\ub7ec \uc904 \ubaa8\ub4dc\nmultiline_text = \"\"\"\uccab \ubc88\uc9f8 \uc904\n\ub450 \ubc88\uc9f8 \uc904\n\uc138 \ubc88\uc9f8 \uc904\"\"\"\n\n# ^ \ud328\ud134\uc774 \uac01 \uc904\uc758 \uc2dc\uc791\uc5d0 \ub9e4\uce6d\nline_starts = re.findall(r\"^.+\", multiline_text, re.MULTILINE)\nprint(f\"\uac01 \uc904\uc758 \uc2dc\uc791: {line_starts}\")\n\n# DOTALL \ud50c\ub798\uadf8 - . \uc774 \uac1c\ud589\ubb38\uc790\ub3c4 \ub9e4\uce6d\ndotall_pattern = re.compile(r\"\uccab.*\uc138\", re.DOTALL)\nmultiline_match = dotall_pattern.search(multiline_text)\nif multiline_match:\n    print(f\"\uc5ec\ub7ec \uc904 \ub9e4\uce6d: {repr(multiline_match.group())}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#3","title":"3. \uadf8\ub8f9\ud654\uc640 \ucea1\ucc98","text":""},{"location":"tutorials/intermediate/chapter03_regular_expressions/#31","title":"3.1 \uae30\ubcf8 \uadf8\ub8f9\ud654","text":"<pre><code>print(\"\\n=== \uadf8\ub8f9\ud654\uc640 \ucea1\ucc98 ===\")\n\n# \uae30\ubcf8 \uadf8\ub8f9\ud654\nlog_entry = \"2024-01-15 14:30:25 [INFO] User login successful\"\n\n# \ub0a0\uc9dc, \uc2dc\uac04, \ub85c\uadf8 \ub808\ubca8, \uba54\uc2dc\uc9c0 \ucd94\ucd9c\nlog_pattern = r\"(\\d{4}-\\d{2}-\\d{2}) (\\d{2}:\\d{2}:\\d{2}) \\[(\\w+)\\] (.+)\"\nlog_match = re.match(log_pattern, log_entry)\n\nif log_match:\n    print(\"\ub85c\uadf8 \ubd84\uc11d \uacb0\uacfc:\")\n    print(f\"  \uc804\uccb4 \ub9e4\uce6d: {log_match.group(0)}\")  # group(0)\uc740 \uc804\uccb4 \ub9e4\uce6d\n    print(f\"  \ub0a0\uc9dc: {log_match.group(1)}\")\n    print(f\"  \uc2dc\uac04: {log_match.group(2)}\")\n    print(f\"  \ub808\ubca8: {log_match.group(3)}\")\n    print(f\"  \uba54\uc2dc\uc9c0: {log_match.group(4)}\")\n\n    # \ud29c\ud50c\ub85c \ubaa8\ub4e0 \uadf8\ub8f9 \uac00\uc838\uc624\uae30\n    all_groups = log_match.groups()\n    print(f\"  \ubaa8\ub4e0 \uadf8\ub8f9: {all_groups}\")\n\n# \uc774\uba54\uc77c \uc8fc\uc18c \ubd84\uc11d\nemail_addresses = [\n    \"john.doe@company.com\",\n    \"jane_smith@university.edu\",\n    \"admin@sub.domain.org\"\n]\n\nemail_pattern = r\"([a-zA-Z0-9._-]+)@([a-zA-Z0-9.-]+)\\.([a-zA-Z]{2,})\"\n\nprint(\"\\n\uc774\uba54\uc77c \uc8fc\uc18c \ubd84\uc11d:\")\nfor email in email_addresses:\n    match = re.match(email_pattern, email)\n    if match:\n        username, domain, tld = match.groups()\n        print(f\"  {email}\")\n        print(f\"    \uc0ac\uc6a9\uc790\uba85: {username}\")\n        print(f\"    \ub3c4\uba54\uc778: {domain}\")\n        print(f\"    \ucd5c\uc0c1\uc704 \ub3c4\uba54\uc778: {tld}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#32-named-groups","title":"3.2 \uba85\uba85\ub41c \uadf8\ub8f9 (Named Groups)","text":"<pre><code>print(\"\\n=== \uba85\uba85\ub41c \uadf8\ub8f9 ===\")\n\n# \uba85\uba85\ub41c \uadf8\ub8f9 \uc0ac\uc6a9\nphone_pattern = r\"(?P&lt;area&gt;\\d{2,3})-(?P&lt;exchange&gt;\\d{3,4})-(?P&lt;number&gt;\\d{4})\"\nphone_number = \"010-1234-5678\"\n\nphone_match = re.match(phone_pattern, phone_number)\nif phone_match:\n    print(\"\uc804\ud654\ubc88\ud638 \ubd84\uc11d (\uba85\uba85\ub41c \uadf8\ub8f9):\")\n    print(f\"  \uc9c0\uc5ed\ubc88\ud638: {phone_match.group('area')}\")\n    print(f\"  \uad50\ud658\ubc88\ud638: {phone_match.group('exchange')}\")\n    print(f\"  \ubc88\ud638: {phone_match.group('number')}\")\n\n    # groupdict()\ub85c \ub515\uc154\ub108\ub9ac \ud615\ud0dc\ub85c \uac00\uc838\uc624\uae30\n    phone_dict = phone_match.groupdict()\n    print(f\"  \ub515\uc154\ub108\ub9ac: {phone_dict}\")\n\n# URL \ubd84\uc11d\nurl_pattern = r\"(?P&lt;protocol&gt;https?)://(?P&lt;domain&gt;[a-zA-Z0-9.-]+)(?P&lt;path&gt;/[a-zA-Z0-9./?=&amp;_-]*)?\"\nurls = [\n    \"https://www.python.org/docs/\",\n    \"http://example.com\",\n    \"https://github.com/python/cpython\"\n]\n\nprint(\"\\nURL \ubd84\uc11d:\")\nfor url in urls:\n    match = re.match(url_pattern, url)\n    if match:\n        print(f\"  {url}\")\n        url_parts = match.groupdict()\n        for key, value in url_parts.items():\n            if value:  # None\uc774 \uc544\ub2cc \uacbd\uc6b0\ub9cc \ucd9c\ub825\n                print(f\"    {key}: {value}\")\n\n# \ubcf5\uc7a1\ud55c \ud328\ud134 - \ud55c\uad6d\uc5b4 \uc8fc\uc18c\naddress_pattern = r\"(?P&lt;city&gt;[\uac00-\ud7a3]+\uc2dc)\\s+(?P&lt;district&gt;[\uac00-\ud7a3]+\uad6c)\\s+(?P&lt;dong&gt;[\uac00-\ud7a3]+\ub3d9)\\s+(?P&lt;detail&gt;.*)\"\naddresses = [\n    \"\uc11c\uc6b8\uc2dc \uac15\ub0a8\uad6c \uc5ed\uc0bc\ub3d9 123-45\",\n    \"\ubd80\uc0b0\uc2dc \ud574\uc6b4\ub300\uad6c \uc6b0\ub3d9 567-89 \ud14c\ud06c\ub178\ube4c\ub529 10\uce35\"\n]\n\nprint(\"\\n\uc8fc\uc18c \ubd84\uc11d:\")\nfor address in addresses:\n    match = re.match(address_pattern, address)\n    if match:\n        print(f\"  {address}\")\n        addr_parts = match.groupdict()\n        for key, value in addr_parts.items():\n            print(f\"    {key}: {value}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#33","title":"3.3 \ube44\ucea1\ucc98 \uadf8\ub8f9\uacfc \ub8e9\uc5b4\ud5e4\ub4dc/\ub8e9\ube44\ud558\uc778\ub4dc","text":"<pre><code>print(\"\\n=== \uace0\uae09 \uadf8\ub8f9 \uae30\ubc95 ===\")\n\n# \ube44\ucea1\ucc98 \uadf8\ub8f9 (?:...)\ntext_with_units = \"5kg, 10m, 3.5cm, 100g\"\n\n# \ucea1\ucc98 \uadf8\ub8f9 \uc0ac\uc6a9\ncapture_pattern = r\"(\\d+(?:\\.\\d+)?)(kg|g|m|cm)\"\ncapture_matches = re.findall(capture_pattern, text_with_units)\nprint(\"\ucea1\ucc98 \uadf8\ub8f9 \uacb0\uacfc:\", capture_matches)\n\n# \ube44\ucea1\ucc98 \uadf8\ub8f9 \uc0ac\uc6a9\nnon_capture_pattern = r\"\\d+(?:\\.\\d+)?(?:kg|g|m|cm)\"\nnon_capture_matches = re.findall(non_capture_pattern, text_with_units)\nprint(\"\ube44\ucea1\ucc98 \uadf8\ub8f9 \uacb0\uacfc:\", non_capture_matches)\n\n# \uae0d\uc815\uc801 \ub8e9\uc5b4\ud5e4\ub4dc (?=...)\nprint(\"\\n\uae0d\uc815\uc801 \ub8e9\uc5b4\ud5e4\ub4dc:\")\npassword_text = \"password123, secretword, mypass456\"\n\n# \uc22b\uc790\uac00 \ub4a4\ub530\ub974\ub294 \ub2e8\uc5b4\ub9cc \ucc3e\uae30\nlookahead_pattern = r\"\\w+(?=\\d)\"\nwords_before_numbers = re.findall(lookahead_pattern, password_text)\nprint(f\"\uc22b\uc790 \uc55e\uc758 \ub2e8\uc5b4\ub4e4: {words_before_numbers}\")\n\n# \ubd80\uc815\uc801 \ub8e9\uc5b4\ud5e4\ub4dc (?!...)\nnegative_lookahead_pattern = r\"\\w+(?!\\d)\"\nwords_not_before_numbers = re.findall(negative_lookahead_pattern, password_text)\nprint(f\"\uc22b\uc790 \uc55e\uc774 \uc544\ub2cc \ub2e8\uc5b4\ub4e4: {words_not_before_numbers}\")\n\n# \uae0d\uc815\uc801 \ub8e9\ube44\ud558\uc778\ub4dc (?&lt;=...)\nprint(\"\\n\uae0d\uc815\uc801 \ub8e9\ube44\ud558\uc778\ub4dc:\")\nprice_text = \"$100, \u20ac200, \u00a5300, 400\uc6d0\"\n\n# \ud1b5\ud654 \uae30\ud638 \ub4a4\uc758 \uc22b\uc790\ub9cc \ucc3e\uae30\nlookbehind_pattern = r\"(?&lt;=[$\u20ac\u00a5])\\d+\"\ncurrency_numbers = re.findall(lookbehind_pattern, price_text)\nprint(f\"\ud1b5\ud654 \uae30\ud638 \ub4a4\uc758 \uc22b\uc790\ub4e4: {currency_numbers}\")\n\n# \ubcf5\ud569 \uc608\uc81c - \ube44\ubc00\ubc88\ud638 \uac80\uc99d\nprint(\"\\n\ube44\ubc00\ubc88\ud638 \uac80\uc99d \uc608\uc81c:\")\npasswords = [\n    \"weak\",           # \ub108\ubb34 \uc9e7\uc74c\n    \"password123\",    # \uc77c\ubc18\uc801\uc778 \ub2e8\uc5b4 \ud3ec\ud568\n    \"MyP@ssw0rd\",     # \uac15\ud55c \ube44\ubc00\ubc88\ud638\n    \"12345678\",       # \uc22b\uc790\ub9cc\n    \"ABCDabcd\",       # \ud2b9\uc218\ubb38\uc790 \uc5c6\uc74c\n    \"Str0ng!P@ss\"     # \uac15\ud55c \ube44\ubc00\ubc88\ud638\n]\n\n# \uac15\ud55c \ube44\ubc00\ubc88\ud638 \uc870\uac74:\n# - 8\uc790 \uc774\uc0c1\n# - \ub300\ubb38\uc790 \ud3ec\ud568\n# - \uc18c\ubb38\uc790 \ud3ec\ud568  \n# - \uc22b\uc790 \ud3ec\ud568\n# - \ud2b9\uc218\ubb38\uc790 \ud3ec\ud568\nstrong_password_pattern = r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&amp;*])[A-Za-z\\d!@#$%^&amp;*]{8,}$\"\n\nfor password in passwords:\n    if re.match(strong_password_pattern, password):\n        print(f\"  \u2713 {password} - \uac15\ud55c \ube44\ubc00\ubc88\ud638\")\n    else:\n        print(f\"  \u2717 {password} - \uc57d\ud55c \ube44\ubc00\ubc88\ud638\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#4","title":"4. \uc2e4\uc6a9\uc801\uc778 \uc815\uaddc\ud45c\ud604\uc2dd \ud328\ud134","text":""},{"location":"tutorials/intermediate/chapter03_regular_expressions/#41","title":"4.1 \ub370\uc774\ud130 \uac80\uc99d \ud328\ud134","text":"<pre><code>print(\"\\n=== \ub370\uc774\ud130 \uac80\uc99d \ud328\ud134 ===\")\n\nclass DataValidator:\n    \"\"\"\uc815\uaddc\ud45c\ud604\uc2dd\uc744 \uc0ac\uc6a9\ud55c \ub370\uc774\ud130 \uac80\uc99d \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        # \ubbf8\ub9ac \ucef4\ud30c\uc77c\ub41c \ud328\ud134\ub4e4\n        self.patterns = {\n            'email': re.compile(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'),\n            'phone_kr': re.compile(r'^(\\d{2,3})-(\\d{3,4})-(\\d{4})$'),\n            'phone_mobile': re.compile(r'^01[016789]-\\d{3,4}-\\d{4}$'),\n            'credit_card': re.compile(r'^\\d{4}-\\d{4}-\\d{4}-\\d{4}$'),\n            'zipcode_kr': re.compile(r'^\\d{5}$'),\n            'ipv4': re.compile(r'^(\\d{1,3}\\.){3}\\d{1,3}$'),\n            'url': re.compile(r'^https?://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(/.*)?$'),\n            'korean_name': re.compile(r'^[\uac00-\ud7a3]{2,5}$'),\n            'username': re.compile(r'^[a-zA-Z0-9_]{3,20}$'),\n            'strong_password': re.compile(r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&amp;*])[A-Za-z\\d!@#$%^&amp;*]{8,}$')\n        }\n\n    def validate(self, data_type, value):\n        \"\"\"\ub370\uc774\ud130 \ud0c0\uc785\uc5d0 \ub530\ub978 \uac80\uc99d\"\"\"\n        if data_type not in self.patterns:\n            return False, f\"\uc54c \uc218 \uc5c6\ub294 \ub370\uc774\ud130 \ud0c0\uc785: {data_type}\"\n\n        pattern = self.patterns[data_type]\n        if pattern.match(value):\n            return True, \"\uc720\ud6a8\ud55c \ud615\uc2dd\uc785\ub2c8\ub2e4.\"\n        else:\n            return False, f\"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 {data_type} \ud615\uc2dd\uc785\ub2c8\ub2e4.\"\n\n    def extract_info(self, data_type, value):\n        \"\"\"\uac12\uc5d0\uc11c \uc815\ubcf4 \ucd94\ucd9c\"\"\"\n        if data_type == 'email':\n            match = self.patterns['email'].match(value)\n            if match:\n                username, domain = value.split('@')\n                return {'username': username, 'domain': domain}\n\n        elif data_type == 'phone_kr':\n            match = self.patterns['phone_kr'].match(value)\n            if match:\n                area, exchange, number = match.groups()\n                return {'area': area, 'exchange': exchange, 'number': number}\n\n        return None\n\n# \uac80\uc99d\uae30 \uc0ac\uc6a9 \uc608\uc81c\nvalidator = DataValidator()\n\ntest_data = [\n    ('email', 'user@example.com'),\n    ('email', 'invalid-email'),\n    ('phone_kr', '02-123-4567'),\n    ('phone_mobile', '010-1234-5678'),\n    ('phone_mobile', '010-12-345'),\n    ('credit_card', '1234-5678-9012-3456'),\n    ('ipv4', '192.168.1.1'),\n    ('ipv4', '256.256.256.256'),\n    ('korean_name', '\ud64d\uae38\ub3d9'),\n    ('korean_name', 'hong'),\n    ('strong_password', 'MyStr0ng!P@ss'),\n    ('strong_password', 'weak')\n]\n\nprint(\"\ub370\uc774\ud130 \uac80\uc99d \uacb0\uacfc:\")\nfor data_type, value in test_data:\n    is_valid, message = validator.validate(data_type, value)\n    status = \"\u2713\" if is_valid else \"\u2717\"\n    print(f\"  {status} {data_type}: '{value}' - {message}\")\n\n    # \uc720\ud6a8\ud55c \uacbd\uc6b0 \uc815\ubcf4 \ucd94\ucd9c\n    if is_valid and data_type in ['email', 'phone_kr']:\n        info = validator.extract_info(data_type, value)\n        if info:\n            print(f\"    \ucd94\ucd9c\ub41c \uc815\ubcf4: {info}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#42","title":"4.2 \ud14d\uc2a4\ud2b8 \ucc98\ub9ac\uc640 \uc815\ub9ac","text":"<pre><code>print(\"\\n=== \ud14d\uc2a4\ud2b8 \ucc98\ub9ac\uc640 \uc815\ub9ac ===\")\n\nclass TextProcessor:\n    \"\"\"\uc815\uaddc\ud45c\ud604\uc2dd\uc744 \uc0ac\uc6a9\ud55c \ud14d\uc2a4\ud2b8 \ucc98\ub9ac \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        # \ub2e4\uc591\ud55c \uc815\ub9ac \ud328\ud134\ub4e4\n        self.cleanup_patterns = {\n            'extra_spaces': re.compile(r'\\s+'),\n            'html_tags': re.compile(r'&lt;[^&gt;]+&gt;'),\n            'special_chars': re.compile(r'[^\\w\\s\uac00-\ud7a3]'),\n            'numbers': re.compile(r'\\d+'),\n            'urls': re.compile(r'https?://[^\\s]+'),\n            'emails': re.compile(r'\\S+@\\S+\\.\\S+'),\n            'phone_numbers': re.compile(r'\\d{2,3}-\\d{3,4}-\\d{4}'),\n            'hashtags': re.compile(r'#\\w+'),\n            'mentions': re.compile(r'@\\w+')\n        }\n\n    def clean_text(self, text, operations=None):\n        \"\"\"\ud14d\uc2a4\ud2b8 \uc815\ub9ac\"\"\"\n        if operations is None:\n            operations = ['extra_spaces']\n\n        result = text\n        for operation in operations:\n            if operation == 'extra_spaces':\n                result = self.cleanup_patterns['extra_spaces'].sub(' ', result)\n                result = result.strip()\n            elif operation == 'remove_html':\n                result = self.cleanup_patterns['html_tags'].sub('', result)\n            elif operation == 'remove_special':\n                result = self.cleanup_patterns['special_chars'].sub(' ', result)\n            elif operation == 'remove_numbers':\n                result = self.cleanup_patterns['numbers'].sub('', result)\n            elif operation == 'remove_urls':\n                result = self.cleanup_patterns['urls'].sub('', result)\n\n        return result\n\n    def extract_entities(self, text):\n        \"\"\"\ud14d\uc2a4\ud2b8\uc5d0\uc11c \uc5d4\ud2f0\ud2f0 \ucd94\ucd9c\"\"\"\n        entities = {}\n\n        entities['urls'] = self.cleanup_patterns['urls'].findall(text)\n        entities['emails'] = self.cleanup_patterns['emails'].findall(text)\n        entities['phones'] = self.cleanup_patterns['phone_numbers'].findall(text)\n        entities['hashtags'] = self.cleanup_patterns['hashtags'].findall(text)\n        entities['mentions'] = self.cleanup_patterns['mentions'].findall(text)\n\n        return entities\n\n    def mask_sensitive_info(self, text):\n        \"\"\"\ubbfc\uac10\ud55c \uc815\ubcf4 \ub9c8\uc2a4\ud0b9\"\"\"\n        # \uc774\uba54\uc77c \ub9c8\uc2a4\ud0b9\n        def mask_email(match):\n            email = match.group()\n            username, domain = email.split('@')\n            masked_username = username[0] + '*' * (len(username) - 1)\n            return f\"{masked_username}@{domain}\"\n\n        # \uc804\ud654\ubc88\ud638 \ub9c8\uc2a4\ud0b9\n        def mask_phone(match):\n            return re.sub(r'\\d', '*', match.group())\n\n        result = self.cleanup_patterns['emails'].sub(mask_email, text)\n        result = self.cleanup_patterns['phone_numbers'].sub(mask_phone, result)\n\n        return result\n\n    def word_frequency(self, text):\n        \"\"\"\ub2e8\uc5b4 \ube48\ub3c4 \ubd84\uc11d\"\"\"\n        # \ud14d\uc2a4\ud2b8 \uc815\ub9ac\n        clean_text = self.clean_text(text, ['remove_special', 'extra_spaces'])\n        clean_text = clean_text.lower()\n\n        # \ub2e8\uc5b4 \ucd94\ucd9c (\ud55c\uae00\uacfc \uc601\ubb38)\n        words = re.findall(r'[\uac00-\ud7a3]+|[a-zA-Z]+', clean_text)\n\n        # \ube48\ub3c4 \uacc4\uc0b0\n        from collections import Counter\n        return Counter(words)\n\n# \ud14d\uc2a4\ud2b8 \ucc98\ub9ac\uae30 \uc0ac\uc6a9 \uc608\uc81c\nprocessor = TextProcessor()\n\nsample_texts = [\n    \"\"\"\n    &lt;p&gt;\uc548\ub155\ud558\uc138\uc694!   \uc800\ub294   \ud64d\uae38\ub3d9\uc785\ub2c8\ub2e4.&lt;/p&gt;\n    \uc5f0\ub77d\ucc98: hong@email.com, 010-1234-5678\n    \uc6f9\uc0ac\uc774\ud2b8: https://example.com\n    #python #programming @developer\n    \"\"\",\n\n    \"\"\"\n    \uc5ec\ub7ec    \uacf5\ubc31\uc774    \uc788\ub294    \ud14d\uc2a4\ud2b8\uc785\ub2c8\ub2e4!!!\n    \ud2b9\uc218\ubb38\uc790@#$%\uac00 \ub9ce\uc774 \uc788\ub124\uc694...\n    \uc22b\uc790123\ub3c4 456\uc788\uc2b5\ub2c8\ub2e4.\n    \"\"\",\n\n    \"\"\"\n    \uc18c\uc15c\ubbf8\ub514\uc5b4 \ud14d\uc2a4\ud2b8 \uc608\uc81c\uc785\ub2c8\ub2e4. #\ub370\uc774\ud130\ubd84\uc11d #\uba38\uc2e0\ub7ec\ub2dd\n    @\uce5c\uad6c1 @\uce5c\uad6c2 \uc548\ub155\ud558\uc138\uc694!\n    \uc800\uc758 \ube14\ub85c\uadf8: https://myblog.com\n    \uc774\uba54\uc77c\ub85c \uc5f0\ub77d\uc8fc\uc138\uc694: contact@domain.org\n    \"\"\"\n]\n\nprint(\"\ud14d\uc2a4\ud2b8 \ucc98\ub9ac \uc608\uc81c:\")\nfor i, text in enumerate(sample_texts, 1):\n    print(f\"\\n--- \ud14d\uc2a4\ud2b8 {i} ---\")\n    print(f\"\uc6d0\ubcf8: {repr(text.strip())}\")\n\n    # \uae30\ubcf8 \uc815\ub9ac\n    cleaned = processor.clean_text(text, ['extra_spaces', 'remove_html'])\n    print(f\"\uc815\ub9ac\ub428: {repr(cleaned)}\")\n\n    # \uc5d4\ud2f0\ud2f0 \ucd94\ucd9c\n    entities = processor.extract_entities(text)\n    for entity_type, entity_list in entities.items():\n        if entity_list:\n            print(f\"{entity_type}: {entity_list}\")\n\n    # \ubbfc\uac10 \uc815\ubcf4 \ub9c8\uc2a4\ud0b9\n    masked = processor.mask_sensitive_info(text)\n    print(f\"\ub9c8\uc2a4\ud0b9: {repr(masked.strip())}\")\n\n    # \ub2e8\uc5b4 \ube48\ub3c4 (\ud55c\uae00 \ud14d\uc2a4\ud2b8\uac00 \uc788\ub294 \uacbd\uc6b0\ub9cc)\n    if any(re.search(r'[\uac00-\ud7a3]', text)):\n        word_freq = processor.word_frequency(text)\n        if word_freq:\n            print(f\"\ub2e8\uc5b4 \ube48\ub3c4: {dict(word_freq.most_common(5))}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#43","title":"4.3 \ub85c\uadf8 \ubd84\uc11d\uacfc \ud30c\uc2f1","text":"<pre><code>print(\"\\n=== \ub85c\uadf8 \ubd84\uc11d\uacfc \ud30c\uc2f1 ===\")\n\nclass LogAnalyzer:\n    \"\"\"\ub85c\uadf8 \ud30c\uc77c \ubd84\uc11d\uc744 \uc704\ud55c \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        # \ub2e4\uc591\ud55c \ub85c\uadf8 \ud615\uc2dd \ud328\ud134\n        self.log_patterns = {\n            'apache_combined': re.compile(\n                r'(?P&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+) - - \\[(?P&lt;timestamp&gt;[^\\]]+)\\] '\n                r'\"(?P&lt;method&gt;\\w+) (?P&lt;path&gt;[^\\s]+) HTTP/1\\.[01]\" '\n                r'(?P&lt;status&gt;\\d+) (?P&lt;size&gt;\\d+|-) \"(?P&lt;referer&gt;[^\"]*)\" \"(?P&lt;user_agent&gt;[^\"]*)\"'\n            ),\n            'nginx_access': re.compile(\n                r'(?P&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+) - (?P&lt;user&gt;[^\\s]+) \\[(?P&lt;timestamp&gt;[^\\]]+)\\] '\n                r'\"(?P&lt;request&gt;[^\"]+)\" (?P&lt;status&gt;\\d+) (?P&lt;size&gt;\\d+) '\n                r'\"(?P&lt;referer&gt;[^\"]*)\" \"(?P&lt;user_agent&gt;[^\"]*)\"'\n            ),\n            'python_logging': re.compile(\n                r'(?P&lt;timestamp&gt;\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3}) - '\n                r'(?P&lt;name&gt;[^\\s]+) - (?P&lt;level&gt;\\w+) - (?P&lt;message&gt;.*)'\n            ),\n            'syslog': re.compile(\n                r'(?P&lt;timestamp&gt;\\w{3}\\s+\\d{1,2} \\d{2}:\\d{2}:\\d{2}) '\n                r'(?P&lt;hostname&gt;[^\\s]+) (?P&lt;program&gt;[^\\s]+): (?P&lt;message&gt;.*)'\n            )\n        }\n\n    def parse_log_line(self, line, log_format='apache_combined'):\n        \"\"\"\ub85c\uadf8 \ub77c\uc778 \ud30c\uc2f1\"\"\"\n        if log_format not in self.log_patterns:\n            return None\n\n        pattern = self.log_patterns[log_format]\n        match = pattern.match(line)\n\n        if match:\n            return match.groupdict()\n        return None\n\n    def analyze_access_logs(self, log_lines):\n        \"\"\"\uc561\uc138\uc2a4 \ub85c\uadf8 \ubd84\uc11d\"\"\"\n        stats = {\n            'total_requests': 0,\n            'status_codes': {},\n            'top_ips': {},\n            'top_paths': {},\n            'user_agents': {},\n            'error_logs': []\n        }\n\n        for line in log_lines:\n            parsed = self.parse_log_line(line.strip())\n            if not parsed:\n                continue\n\n            stats['total_requests'] += 1\n\n            # \uc0c1\ud0dc \ucf54\ub4dc \ud1b5\uacc4\n            status = parsed.get('status', '000')\n            stats['status_codes'][status] = stats['status_codes'].get(status, 0) + 1\n\n            # IP \uc8fc\uc18c \ud1b5\uacc4\n            ip = parsed.get('ip', 'unknown')\n            stats['top_ips'][ip] = stats['top_ips'].get(ip, 0) + 1\n\n            # \uacbd\ub85c \ud1b5\uacc4\n            path = parsed.get('path', 'unknown')\n            stats['top_paths'][path] = stats['top_paths'].get(path, 0) + 1\n\n            # User Agent \ud1b5\uacc4\n            ua = parsed.get('user_agent', 'unknown')\n            stats['user_agents'][ua] = stats['user_agents'].get(ua, 0) + 1\n\n            # \uc5d0\ub7ec \ub85c\uadf8 \uc218\uc9d1 (4xx, 5xx)\n            if status.startswith(('4', '5')):\n                stats['error_logs'].append(parsed)\n\n        return stats\n\n    def find_security_issues(self, log_lines):\n        \"\"\"\ubcf4\uc548 \uc774\uc288 \ud0d0\uc9c0\"\"\"\n        security_patterns = {\n            'sql_injection': re.compile(r\"(union|select|insert|delete|drop|script)\", re.IGNORECASE),\n            'xss_attempt': re.compile(r\"(&lt;script|javascript:|&lt;iframe)\", re.IGNORECASE),\n            'path_traversal': re.compile(r\"\\.\\./\"),\n            'brute_force': re.compile(r\"(admin|login|wp-admin)\", re.IGNORECASE)\n        }\n\n        security_issues = []\n\n        for line in log_lines:\n            parsed = self.parse_log_line(line.strip())\n            if not parsed:\n                continue\n\n            path = parsed.get('path', '')\n            user_agent = parsed.get('user_agent', '')\n\n            for issue_type, pattern in security_patterns.items():\n                if pattern.search(path) or pattern.search(user_agent):\n                    security_issues.append({\n                        'type': issue_type,\n                        'ip': parsed.get('ip'),\n                        'path': path,\n                        'timestamp': parsed.get('timestamp'),\n                        'user_agent': user_agent\n                    })\n\n        return security_issues\n\n# \ub85c\uadf8 \ubd84\uc11d\uae30 \uc0ac\uc6a9 \uc608\uc81c\nanalyzer = LogAnalyzer()\n\n# \uc0d8\ud50c \ub85c\uadf8 \ub370\uc774\ud130\nsample_logs = [\n    '192.168.1.100 - - [01/Jan/2024:12:00:00 +0000] \"GET /index.html HTTP/1.1\" 200 1234 \"-\" \"Mozilla/5.0\"',\n    '192.168.1.101 - - [01/Jan/2024:12:01:00 +0000] \"POST /login HTTP/1.1\" 302 0 \"http://example.com/\" \"Mozilla/5.0\"',\n    '192.168.1.102 - - [01/Jan/2024:12:02:00 +0000] \"GET /admin HTTP/1.1\" 404 500 \"-\" \"curl/7.68.0\"',\n    '10.0.0.1 - - [01/Jan/2024:12:03:00 +0000] \"GET /api/users?id=1 UNION SELECT * FROM users-- HTTP/1.1\" 400 0 \"-\" \"sqlmap/1.0\"',\n    '192.168.1.100 - - [01/Jan/2024:12:04:00 +0000] \"GET /search?q=&lt;script&gt;alert(1)&lt;/script&gt; HTTP/1.1\" 200 800 \"-\" \"Mozilla/5.0\"'\n]\n\nprint(\"\ub85c\uadf8 \ubd84\uc11d \uacb0\uacfc:\")\n\n# \uae30\ubcf8 \ubd84\uc11d\nstats = analyzer.analyze_access_logs(sample_logs)\nprint(f\"\\n\ucd1d \uc694\uccad \uc218: {stats['total_requests']}\")\nprint(f\"\uc0c1\ud0dc \ucf54\ub4dc \ubd84\ud3ec: {stats['status_codes']}\")\nprint(f\"\uc0c1\uc704 IP: {sorted(stats['top_ips'].items(), key=lambda x: x[1], reverse=True)[:3]}\")\n\n# \ubcf4\uc548 \uc774\uc288 \ud0d0\uc9c0\nsecurity_issues = analyzer.find_security_issues(sample_logs)\nprint(f\"\\n\ubcf4\uc548 \uc774\uc288 {len(security_issues)}\uac1c \ubc1c\uacac:\")\nfor issue in security_issues:\n    print(f\"  {issue['type']}: {issue['ip']} -&gt; {issue['path']}\")\n\n# \uac1c\ubcc4 \ub85c\uadf8 \ub77c\uc778 \ud30c\uc2f1 \uc608\uc81c\nprint(\"\\n\uac1c\ubcc4 \ub85c\uadf8 \ud30c\uc2f1:\")\nfor i, log_line in enumerate(sample_logs[:3], 1):\n    print(f\"\\n\ub85c\uadf8 {i}: {log_line}\")\n    parsed = analyzer.parse_log_line(log_line)\n    if parsed:\n        for key, value in parsed.items():\n            print(f\"  {key}: {value}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#5","title":"5. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter03_regular_expressions/#1_1","title":"\uc5f0\uc2b5 1: \uc2e0\uc6a9\uce74\ub4dc \ubc88\ud638 \uac80\uc99d\uae30","text":"<p>\ub2e4\uc591\ud55c \uc2e0\uc6a9\uce74\ub4dc \ud68c\uc0ac\uc758 \ubc88\ud638 \ud615\uc2dd\uc744 \uac80\uc99d\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#2-html","title":"\uc5f0\uc2b5 2: HTML \ud0dc\uadf8 \uc81c\uac70\uae30","text":"<p>HTML \ubb38\uc11c\uc5d0\uc11c \ubaa8\ub4e0 \ud0dc\uadf8\ub97c \uc81c\uac70\ud558\uace0 \ud14d\uc2a4\ud2b8\ub9cc \ucd94\ucd9c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \ub9cc\ub4dc\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#3_1","title":"\uc5f0\uc2b5 3: \ube44\ubc00\ubc88\ud638 \uac15\ub3c4 \uac80\uc0ac\uae30","text":"<p>\ube44\ubc00\ubc88\ud638\uc758 \uac15\ub3c4\ub97c \uac80\uc0ac\ud558\uace0 \uac1c\uc120 \uc0ac\ud56d\uc744 \uc81c\uc548\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#4_1","title":"\uc5f0\uc2b5 4: \ub85c\uadf8 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c","text":"<p>\uc2e4\uc2dc\uac04\uc73c\ub85c \ub85c\uadf8 \ud30c\uc77c\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud558\uc5ec \ud2b9\uc815 \ud328\ud134\uc744 \uac10\uc9c0\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\uc815\uaddc\ud45c\ud604\uc2dd \uae30\ucd08: \uae30\ubcf8 \ubb38\ubc95\uacfc \uba54\ud0c0 \ubb38\uc790 \uc0ac\uc6a9\ubc95</li> <li>re \ubaa8\ub4c8: search, match, findall, sub \ub4f1\uc758 \ud568\uc218 \ud65c\uc6a9</li> <li>\uadf8\ub8f9\ud654: \ud328\ud134 \uadf8\ub8f9\ud654\uc640 \uba85\uba85\ub41c \uadf8\ub8f9 \uc0ac\uc6a9\ubc95</li> <li>\uace0\uae09 \uae30\ubc95: \ub8e9\uc5b4\ud5e4\ub4dc/\ub8e9\ube44\ud558\uc778\ub4dc, \ube44\ucea1\ucc98 \uadf8\ub8f9</li> <li>\uc2e4\uc6a9 \ud328\ud134: \ub370\uc774\ud130 \uac80\uc99d, \ud14d\uc2a4\ud2b8 \ucc98\ub9ac, \ub85c\uadf8 \ubd84\uc11d</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uae30\ucd08\ub97c \ud559\uc2b5\ud558\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter03_regular_expressions/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\uc815\uaddc\ud45c\ud604\uc2dd\uc740 \uac15\ub825\ud558\uc9c0\ub9cc \ubcf5\uc7a1\ud574\uc9c8 \uc218 \uc788\uc73c\ubbc0\ub85c \uac00\ub3c5\uc131\uc744 \uace0\ub824\ud574\uc57c \ud569\ub2c8\ub2e4</li> <li>\ud328\ud134\uc744 \ubbf8\ub9ac \ucef4\ud30c\uc77c\ud558\uba74 \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\uba85\uba85\ub41c \uadf8\ub8f9\uc744 \uc0ac\uc6a9\ud558\uba74 \ucf54\ub4dc\uc758 \uac00\ub3c5\uc131\uc774 \ud06c\uac8c \uac1c\uc120\ub429\ub2c8\ub2e4</li> <li>\uc2e4\ubb34\uc5d0\uc11c\ub294 \uac80\uc99d, \ud30c\uc2f1, \uce58\ud658 \uc791\uc5c5\uc5d0 \uc790\uc8fc \uc0ac\uc6a9\ub429\ub2c8\ub2e4</li> <li>\ubcf4\uc548 \uce21\uba74\uc5d0\uc11c \uc0ac\uc6a9\uc790 \uc785\ub825\uc744 \uac80\uc99d\ud560 \ub54c \ub9e4\uc6b0 \uc720\uc6a9\ud569\ub2c8\ub2e4 </li> </ul>"},{"location":"tutorials/intermediate/chapter04_oop_basics/","title":"Chapter 4: \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08 (Object-Oriented Programming Basics)","text":""},{"location":"tutorials/intermediate/chapter04_oop_basics/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uae30\ubcf8 \uac1c\ub150 \uc774\ud574\ud558\uae30 - \ud074\ub798\uc2a4\uc640 \uac1d\uccb4\uc758 \ucc28\uc774\uc810 \uad6c\ubd84\ud558\uae30 - \uc18d\uc131(attribute)\uacfc \uba54\uc11c\ub4dc(method) \uc815\uc758\ud558\uace0 \uc0ac\uc6a9\ud558\uae30 - \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uc758 \uc5ed\ud560 \uc774\ud574\ud558\uae30 - \uc778\uc2a4\ud134\uc2a4/\ud074\ub798\uc2a4 \ubcc0\uc218 \uad6c\ubcc4\ud558\uae30 - \ud30c\uc774\uc36c\uc5d0\uc11c\uc758 \uc811\uadfc \uc81c\uc5b4 \ubc29\ubc95 \uc774\ud574\ud558\uae30 - \uc2e4\uc6a9\uc801\uc778 \ud074\ub798\uc2a4 \uc124\uacc4\uc640 \uad6c\ud604\ud558\uae30</p>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#1","title":"1. \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d \uac1c\ub150","text":""},{"location":"tutorials/intermediate/chapter04_oop_basics/#11","title":"1.1 \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d\uc774\ub780?","text":"<p>\uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d(OOP)\uc740 \ud604\uc2e4 \uc138\uacc4\uc758 \uc0ac\ubb3c\uc744 \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c \uac1d\uccb4\ub85c \ubaa8\ub378\ub9c1\ud558\ub294 \ud328\ub7ec\ub2e4\uc784\uc785\ub2c8\ub2e4. \ub370\uc774\ud130\uc640 \uadf8 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\ub294 \ud568\uc218\ub4e4\uc744 \ud558\ub098\ub85c \ubb36\uc5b4\uc11c \uad00\ub9ac\ud569\ub2c8\ub2e4.</p> <pre><code>print(\"=== \uc808\ucc28\uc801 \ud504\ub85c\uadf8\ub798\ubc0d vs \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d ===\")\n\n# \uc808\ucc28\uc801 \ud504\ub85c\uadf8\ub798\ubc0d \ubc29\uc2dd\nprint(\"\\n1. \uc808\ucc28\uc801 \ud504\ub85c\uadf8\ub798\ubc0d \ubc29\uc2dd:\")\n\n# \ud559\uc0dd \ub370\uc774\ud130\ub97c \ub515\uc154\ub108\ub9ac\ub85c \uad00\ub9ac\nstudent1 = {\"name\": \"\ud64d\uae38\ub3d9\", \"age\": 20, \"grade\": 85}\nstudent2 = {\"name\": \"\uae40\uc601\ud76c\", \"age\": 19, \"grade\": 92}\n\ndef calculate_letter_grade(score):\n    \"\"\"\uc810\uc218\ub97c \ubb38\uc790 \ub4f1\uae09\uc73c\ub85c \ubcc0\ud658\"\"\"\n    if score &gt;= 90:\n        return 'A'\n    elif score &gt;= 80:\n        return 'B'\n    elif score &gt;= 70:\n        return 'C'\n    elif score &gt;= 60:\n        return 'D'\n    else:\n        return 'F'\n\ndef print_student_info(student):\n    \"\"\"\ud559\uc0dd \uc815\ubcf4 \ucd9c\ub825\"\"\"\n    letter_grade = calculate_letter_grade(student[\"grade\"])\n    print(f\"\uc774\ub984: {student['name']}, \ub098\uc774: {student['age']}, \uc131\uc801: {student['grade']} ({letter_grade})\")\n\nprint_student_info(student1)\nprint_student_info(student2)\n\n# \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d \ubc29\uc2dd\nprint(\"\\n2. \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d \ubc29\uc2dd:\")\n\nclass Student:\n    \"\"\"\ud559\uc0dd\uc744 \ub098\ud0c0\ub0b4\ub294 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, name, age, grade):\n        \"\"\"\uc0dd\uc131\uc790: \uac1d\uccb4 \ucd08\uae30\ud654\"\"\"\n        self.name = name\n        self.age = age\n        self.grade = grade\n\n    def get_letter_grade(self):\n        \"\"\"\uc810\uc218\ub97c \ubb38\uc790 \ub4f1\uae09\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \uba54\uc11c\ub4dc\"\"\"\n        if self.grade &gt;= 90:\n            return 'A'\n        elif self.grade &gt;= 80:\n            return 'B'\n        elif self.grade &gt;= 70:\n            return 'C'\n        elif self.grade &gt;= 60:\n            return 'D'\n        else:\n            return 'F'\n\n    def print_info(self):\n        \"\"\"\ud559\uc0dd \uc815\ubcf4\ub97c \ucd9c\ub825\ud558\ub294 \uba54\uc11c\ub4dc\"\"\"\n        letter_grade = self.get_letter_grade()\n        print(f\"\uc774\ub984: {self.name}, \ub098\uc774: {self.age}, \uc131\uc801: {self.grade} ({letter_grade})\")\n\n# \uac1d\uccb4 \uc0dd\uc131 \ubc0f \uc0ac\uc6a9\nstudent3 = Student(\"\ud64d\uae38\ub3d9\", 20, 85)\nstudent4 = Student(\"\uae40\uc601\ud76c\", 19, 92)\n\nstudent3.print_info()\nstudent4.print_info()\n\nprint(\"\\n=== \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uc7a5\uc810 ===\")\nprint(\"1. \ucea1\uc290\ud654: \ub370\uc774\ud130\uc640 \uae30\ub2a5\uc774 \ud558\ub098\ub85c \ubb36\uc784\")\nprint(\"2. \uc7ac\uc0ac\uc6a9\uc131: \ud074\ub798\uc2a4\ub97c \ud1b5\ud574 \uc5ec\ub7ec \uac1d\uccb4 \uc0dd\uc131 \uac00\ub2a5\")\nprint(\"3. \uc720\uc9c0\ubcf4\uc218\uc131: \ucf54\ub4dc \uad6c\uc870\uac00 \uba85\ud655\ud558\uace0 \uc218\uc815\uc774 \uc6a9\uc774\")\nprint(\"4. \ud655\uc7a5\uc131: \uc0c1\uc18d\uc744 \ud1b5\ud574 \uae30\ub2a5 \ud655\uc7a5 \uac00\ub2a5\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#12","title":"1.2 \ud074\ub798\uc2a4\uc640 \uac1d\uccb4\uc758 \uad00\uacc4","text":"<pre><code>print(\"\\n=== \ud074\ub798\uc2a4\uc640 \uac1d\uccb4\uc758 \uad00\uacc4 ===\")\n\n# \ud074\ub798\uc2a4\ub294 '\uc124\uacc4\ub3c4', \uac1d\uccb4\ub294 '\uc2e4\uc81c \uc0dd\uc131\ub41c \uac83'\nclass Car:\n    \"\"\"\uc790\ub3d9\ucc28 \ud074\ub798\uc2a4 - \uc124\uacc4\ub3c4 \uc5ed\ud560\"\"\"\n\n    def __init__(self, brand, model, year):\n        self.brand = brand\n        self.model = model\n        self.year = year\n        self.mileage = 0\n        self.is_running = False\n\n    def start_engine(self):\n        \"\"\"\uc5d4\uc9c4 \uc2dc\ub3d9\"\"\"\n        if not self.is_running:\n            self.is_running = True\n            return f\"{self.brand} {self.model} \uc5d4\uc9c4\uc774 \uc2dc\ub3d9\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        else:\n            return \"\uc774\ubbf8 \uc5d4\uc9c4\uc774 \uc2dc\ub3d9\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\"\n\n    def stop_engine(self):\n        \"\"\"\uc5d4\uc9c4 \uc815\uc9c0\"\"\"\n        if self.is_running:\n            self.is_running = False\n            return f\"{self.brand} {self.model} \uc5d4\uc9c4\uc774 \uc815\uc9c0\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        else:\n            return \"\uc5d4\uc9c4\uc774 \uc774\ubbf8 \uc815\uc9c0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\"\n\n    def drive(self, distance):\n        \"\"\"\uc8fc\ud589\"\"\"\n        if self.is_running:\n            self.mileage += distance\n            return f\"{distance}km \uc8fc\ud589\ud588\uc2b5\ub2c8\ub2e4. \ucd1d \uc8fc\ud589\uac70\ub9ac: {self.mileage}km\"\n        else:\n            return \"\uba3c\uc800 \uc5d4\uc9c4\uc744 \uc2dc\ub3d9\ud558\uc138\uc694.\"\n\n    def get_info(self):\n        \"\"\"\ucc28\ub7c9 \uc815\ubcf4 \ubc18\ud658\"\"\"\n        status = \"\uc6b4\ud589\uc911\" if self.is_running else \"\uc815\uc9c0\"\n        return f\"{self.year}\ub144 {self.brand} {self.model} - \uc8fc\ud589\uac70\ub9ac: {self.mileage}km, \uc0c1\ud0dc: {status}\"\n\n# \uac19\uc740 \ud074\ub798\uc2a4\ub85c \uc5ec\ub7ec \uac1c\uc758 \uc11c\ub85c \ub2e4\ub978 \uac1d\uccb4 \uc0dd\uc131\nprint(\"\ud074\ub798\uc2a4\ub85c\ubd80\ud130 \uac1d\uccb4\ub4e4 \uc0dd\uc131:\")\ncar1 = Car(\"\ud604\ub300\", \"\uc18c\ub098\ud0c0\", 2023)\ncar2 = Car(\"\uae30\uc544\", \"K5\", 2022)\ncar3 = Car(\"BMW\", \"3\uc2dc\ub9ac\uc988\", 2024)\n\nprint(f\"car1: {car1.get_info()}\")\nprint(f\"car2: {car2.get_info()}\")\nprint(f\"car3: {car3.get_info()}\")\n\nprint(\"\\n\uac01 \uac1d\uccb4\ub294 \ub3c5\ub9bd\uc801\uc73c\ub85c \ub3d9\uc791:\")\n# car1 \uc870\uc791\nprint(f\"car1: {car1.start_engine()}\")\nprint(f\"car1: {car1.drive(100)}\")\n\n# car2 \uc870\uc791\nprint(f\"car2: {car2.start_engine()}\")\nprint(f\"car2: {car2.drive(50)}\")\n\nprint(\"\\n\uac01 \uac1d\uccb4\uc758 \ud604\uc7ac \uc0c1\ud0dc:\")\nprint(f\"car1: {car1.get_info()}\")\nprint(f\"car2: {car2.get_info()}\")\nprint(f\"car3: {car3.get_info()}\")  # car3\ub294 \uac74\ub4dc\ub9ac\uc9c0 \uc54a\uc74c\n\n# \uac1d\uccb4\uc758 \uc815\uccb4\uc131 \ud655\uc778\nprint(f\"\\ncar1\uacfc car2\ub294 \uac19\uc740 \uac1d\uccb4\uc778\uac00? {car1 is car2}\")\nprint(f\"car1\uc758 \ud0c0\uc785: {type(car1)}\")\nprint(f\"car1\uc774 Car \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\uc778\uac00? {isinstance(car1, Car)}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#2","title":"2. \ud074\ub798\uc2a4 \uc815\uc758\uc640 \uae30\ubcf8 \uad6c\uc870","text":""},{"location":"tutorials/intermediate/chapter04_oop_basics/#21","title":"2.1 \ud074\ub798\uc2a4 \uc815\uc758 \ubb38\ubc95","text":"<pre><code>print(\"\\n=== \ud074\ub798\uc2a4 \uc815\uc758\uc640 \uae30\ubcf8 \uad6c\uc870 ===\")\n\nclass BankAccount:\n    \"\"\"\uc740\ud589 \uacc4\uc88c \ud074\ub798\uc2a4\"\"\"\n\n    # \ud074\ub798\uc2a4 \ubcc0\uc218 (\ubaa8\ub4e0 \uc778\uc2a4\ud134\uc2a4\uac00 \uacf5\uc720)\n    bank_name = \"Python Bank\"\n    interest_rate = 0.03\n\n    def __init__(self, account_number, owner_name, initial_balance=0):\n        \"\"\"\n        \uc0dd\uc131\uc790 \uba54\uc11c\ub4dc: \uac1d\uccb4\uac00 \uc0dd\uc131\ub420 \ub54c \uc790\ub3d9\uc73c\ub85c \ud638\ucd9c\n\n        Args:\n            account_number (str): \uacc4\uc88c\ubc88\ud638\n            owner_name (str): \uacc4\uc88c\uc8fc \uc774\ub984\n            initial_balance (float): \ucd08\uae30 \uc794\uc561 (\uae30\ubcf8\uac12: 0)\n        \"\"\"\n        # \uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218 (\uac01 \uac1d\uccb4\ub9c8\ub2e4 \uace0\uc720)\n        self.account_number = account_number\n        self.owner_name = owner_name\n        self.balance = initial_balance\n        self.transaction_history = []\n\n        # \uac70\ub798 \uae30\ub85d \ucd94\uac00\n        if initial_balance &gt; 0:\n            self.transaction_history.append(f\"\uacc4\uc88c \uac1c\uc124: +{initial_balance:,}\uc6d0\")\n\n    def deposit(self, amount):\n        \"\"\"\uc785\uae08 \uba54\uc11c\ub4dc\"\"\"\n        if amount &lt;= 0:\n            return \"\uc785\uae08\uc561\uc740 0\uc6d0\ubcf4\ub2e4 \ucee4\uc57c \ud569\ub2c8\ub2e4.\"\n\n        self.balance += amount\n        self.transaction_history.append(f\"\uc785\uae08: +{amount:,}\uc6d0\")\n        return f\"{amount:,}\uc6d0\uc774 \uc785\uae08\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud604\uc7ac \uc794\uc561: {self.balance:,}\uc6d0\"\n\n    def withdraw(self, amount):\n        \"\"\"\ucd9c\uae08 \uba54\uc11c\ub4dc\"\"\"\n        if amount &lt;= 0:\n            return \"\ucd9c\uae08\uc561\uc740 0\uc6d0\ubcf4\ub2e4 \ucee4\uc57c \ud569\ub2c8\ub2e4.\"\n\n        if amount &gt; self.balance:\n            return f\"\uc794\uc561\uc774 \ubd80\uc871\ud569\ub2c8\ub2e4. \ud604\uc7ac \uc794\uc561: {self.balance:,}\uc6d0\"\n\n        self.balance -= amount\n        self.transaction_history.append(f\"\ucd9c\uae08: -{amount:,}\uc6d0\")\n        return f\"{amount:,}\uc6d0\uc774 \ucd9c\uae08\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud604\uc7ac \uc794\uc561: {self.balance:,}\uc6d0\"\n\n    def get_balance(self):\n        \"\"\"\uc794\uc561 \uc870\ud68c \uba54\uc11c\ub4dc\"\"\"\n        return f\"\ud604\uc7ac \uc794\uc561: {self.balance:,}\uc6d0\"\n\n    def get_info(self):\n        \"\"\"\uacc4\uc88c \uc815\ubcf4 \uc870\ud68c \uba54\uc11c\ub4dc\"\"\"\n        return f\"\"\"\n=== {self.bank_name} \uacc4\uc88c \uc815\ubcf4 ===\n\uacc4\uc88c\ubc88\ud638: {self.account_number}\n\uacc4\uc88c\uc8fc: {self.owner_name}\n\ud604\uc7ac \uc794\uc561: {self.balance:,}\uc6d0\n\uc774\uc790\uc728: {self.interest_rate * 100}%\n        \"\"\".strip()\n\n    def get_transaction_history(self, limit=5):\n        \"\"\"\uac70\ub798 \ub0b4\uc5ed \uc870\ud68c \uba54\uc11c\ub4dc\"\"\"\n        if not self.transaction_history:\n            return \"\uac70\ub798 \ub0b4\uc5ed\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\"\n\n        recent_transactions = self.transaction_history[-limit:]\n        history = f\"=== {self.owner_name}\ub2d8\uc758 \ucd5c\uadfc \uac70\ub798 \ub0b4\uc5ed ===\\n\"\n        for i, transaction in enumerate(recent_transactions, 1):\n            history += f\"{i}. {transaction}\\n\"\n\n        return history.strip()\n\n# \ud074\ub798\uc2a4 \uc0ac\uc6a9 \uc608\uc81c\nprint(\"\uc740\ud589 \uacc4\uc88c \uc2dc\uc2a4\ud15c \uc608\uc81c:\")\n\n# \uacc4\uc88c \uc0dd\uc131\naccount1 = BankAccount(\"123-456-789\", \"\ud64d\uae38\ub3d9\", 100000)\naccount2 = BankAccount(\"987-654-321\", \"\uae40\uc601\ud76c\")\n\nprint(\"=== \uacc4\uc88c \uc815\ubcf4 ===\")\nprint(account1.get_info())\nprint()\nprint(account2.get_info())\n\nprint(\"\\n=== \uac70\ub798 \uc2e4\ud589 ===\")\n# account1 \uac70\ub798\nprint(account1.deposit(50000))\nprint(account1.withdraw(30000))\nprint(account1.withdraw(200000))  # \uc794\uc561 \ubd80\uc871\n\nprint()\n\n# account2 \uac70\ub798\nprint(account2.deposit(75000))\nprint(account2.deposit(25000))\nprint(account2.withdraw(20000))\n\nprint(\"\\n=== \uac70\ub798 \ub0b4\uc5ed ===\")\nprint(account1.get_transaction_history())\nprint()\nprint(account2.get_transaction_history())\n</code></pre>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#22","title":"2.2 \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790","text":"<pre><code>print(\"\\n=== \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790 ===\")\n\nclass FileManager:\n    \"\"\"\ud30c\uc77c \uad00\ub9ac \ud074\ub798\uc2a4 - \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790 \uc608\uc81c\"\"\"\n\n    # \ud074\ub798\uc2a4 \ubcc0\uc218\ub85c \uc0dd\uc131\ub41c \uac1d\uccb4 \uc218 \ucd94\uc801\n    total_instances = 0\n\n    def __init__(self, filename):\n        \"\"\"\n        \uc0dd\uc131\uc790: \uac1d\uccb4 \uc0dd\uc131 \uc2dc \ud638\ucd9c\n        - \uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218 \ucd08\uae30\ud654\n        - \ud544\uc694\ud55c \uc124\uc815 \uc791\uc5c5 \uc218\ud589\n        \"\"\"\n        self.filename = filename\n        self.is_open = False\n        self.content = \"\"\n\n        # \ud074\ub798\uc2a4 \ubcc0\uc218 \uc99d\uac00\n        FileManager.total_instances += 1\n        self.instance_id = FileManager.total_instances\n\n        print(f\"[\uc0dd\uc131\uc790] FileManager \uc778\uc2a4\ud134\uc2a4 #{self.instance_id} \uc0dd\uc131\ub428 (\ud30c\uc77c: {filename})\")\n\n        # \ud30c\uc77c \uc5f4\uae30 \uc2dc\ub3c4\n        try:\n            self.open_file()\n        except Exception as e:\n            print(f\"[\uacbd\uace0] \ud30c\uc77c \uc5f4\uae30 \uc2e4\ud328: {e}\")\n\n    def __del__(self):\n        \"\"\"\n        \uc18c\uba78\uc790: \uac1d\uccb4\uac00 \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc81c\uac70\ub420 \ub54c \ud638\ucd9c\n        - \ub9ac\uc18c\uc2a4 \uc815\ub9ac \uc791\uc5c5 \uc218\ud589\n        - \ud30c\uc77c \ub2eb\uae30, \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0 \ud574\uc81c \ub4f1\n        \"\"\"\n        if hasattr(self, 'instance_id'):  # \ucd08\uae30\ud654\uac00 \uc644\ub8cc\ub41c \uacbd\uc6b0\ub9cc\n            print(f\"[\uc18c\uba78\uc790] FileManager \uc778\uc2a4\ud134\uc2a4 #{self.instance_id} \uc18c\uba78\ub428\")\n            if hasattr(self, 'is_open') and self.is_open:\n                self.close_file()\n\n    def open_file(self):\n        \"\"\"\ud30c\uc77c \uc5f4\uae30\"\"\"\n        if not self.is_open:\n            # \uc2e4\uc81c\ub85c\ub294 \ud30c\uc77c\uc744 \uc5f4\uc9c0 \uc54a\uace0 \uc2dc\ubbac\ub808\uc774\uc158\n            self.is_open = True\n            self.content = f\"\ud30c\uc77c '{self.filename}'\uc758 \ub0b4\uc6a9\uc785\ub2c8\ub2e4.\"\n            print(f\"[FileManager #{self.instance_id}] \ud30c\uc77c '{self.filename}' \uc5f4\ub9bc\")\n        else:\n            print(f\"[FileManager #{self.instance_id}] \ud30c\uc77c\uc774 \uc774\ubbf8 \uc5f4\ub824\uc788\uc2b5\ub2c8\ub2e4.\")\n\n    def close_file(self):\n        \"\"\"\ud30c\uc77c \ub2eb\uae30\"\"\"\n        if self.is_open:\n            self.is_open = False\n            print(f\"[FileManager #{self.instance_id}] \ud30c\uc77c '{self.filename}' \ub2eb\ud798\")\n        else:\n            print(f\"[FileManager #{self.instance_id}] \ud30c\uc77c\uc774 \uc774\ubbf8 \ub2eb\ud600\uc788\uc2b5\ub2c8\ub2e4.\")\n\n    def read_content(self):\n        \"\"\"\ud30c\uc77c \ub0b4\uc6a9 \uc77d\uae30\"\"\"\n        if self.is_open:\n            return self.content\n        else:\n            return \"\ud30c\uc77c\uc774 \uc5f4\ub824\uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\"\n\n    @classmethod\n    def get_total_instances(cls):\n        \"\"\"\uc0dd\uc131\ub41c \ucd1d \uc778\uc2a4\ud134\uc2a4 \uc218 \ubc18\ud658\"\"\"\n        return cls.total_instances\n\n# \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790 \ub3d9\uc791 \ud655\uc778\nprint(\"1. \uac1d\uccb4 \uc0dd\uc131\uacfc \uc0ac\uc6a9:\")\nfile1 = FileManager(\"document1.txt\")\nprint(f\"\ucd1d \uc778\uc2a4\ud134\uc2a4 \uc218: {FileManager.get_total_instances()}\")\n\nfile2 = FileManager(\"document2.txt\")\nprint(f\"\ucd1d \uc778\uc2a4\ud134\uc2a4 \uc218: {FileManager.get_total_instances()}\")\n\nprint(f\"\\n\ud30c\uc77c1 \ub0b4\uc6a9: {file1.read_content()}\")\nprint(f\"\ud30c\uc77c2 \ub0b4\uc6a9: {file2.read_content()}\")\n\nprint(\"\\n2. \uba85\uc2dc\uc801\uc73c\ub85c \uac1d\uccb4 \uc0ad\uc81c:\")\ndel file1  # \uba85\uc2dc\uc801 \uc0ad\uc81c\n\nprint(\"\\n3. \ud568\uc218 \uc2a4\ucf54\ud504\uc5d0\uc11c \uac1d\uccb4 \uc0dd\uc131:\")\ndef create_temp_file():\n    temp_file = FileManager(\"temp.txt\")\n    print(f\"\ud568\uc218 \ub0b4\uc5d0\uc11c: {temp_file.read_content()}\")\n    # \ud568\uc218 \uc885\ub8cc \uc2dc temp_file \uc790\ub3d9 \uc0ad\uc81c\n\ncreate_temp_file()\n\nprint(\"\\n4. \ud504\ub85c\uadf8\ub7a8 \uc885\ub8cc \uc2dc \ub0a8\uc740 \uac1d\uccb4\ub4e4 \uc790\ub3d9 \uc0ad\uc81c:\")\n# file2\ub294 \ud504\ub85c\uadf8\ub7a8 \uc885\ub8cc \uc2dc \uc790\ub3d9\uc73c\ub85c \uc0ad\uc81c\ub428\n</code></pre>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#3","title":"3. \uc18d\uc131\uacfc \uba54\uc11c\ub4dc","text":""},{"location":"tutorials/intermediate/chapter04_oop_basics/#31","title":"3.1 \uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218\uc640 \ud074\ub798\uc2a4 \ubcc0\uc218","text":"<pre><code>print(\"\\n=== \uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218\uc640 \ud074\ub798\uc2a4 \ubcc0\uc218 ===\")\n\nclass Employee:\n    \"\"\"\uc9c1\uc6d0 \ud074\ub798\uc2a4 - \uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218\uc640 \ud074\ub798\uc2a4 \ubcc0\uc218 \uad6c\ubd84\"\"\"\n\n    # \ud074\ub798\uc2a4 \ubcc0\uc218: \ubaa8\ub4e0 \uc778\uc2a4\ud134\uc2a4\uac00 \uacf5\uc720\n    company_name = \"Python Corporation\"\n    employee_count = 0\n    salary_raise_percentage = 1.05  # 5% \uc778\uc0c1\uc728\n\n    def __init__(self, name, position, salary):\n        \"\"\"\uc0dd\uc131\uc790: \uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218 \ucd08\uae30\ud654\"\"\"\n        # \uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218: \uac01 \uac1d\uccb4\ub9c8\ub2e4 \uace0\uc720\n        self.name = name\n        self.position = position\n        self.salary = salary\n        self.employee_id = Employee.employee_count + 1\n\n        # \ud074\ub798\uc2a4 \ubcc0\uc218 \uc218\uc815\n        Employee.employee_count += 1\n\n        print(f\"\uc0c8 \uc9c1\uc6d0 \ub4f1\ub85d: {self.name} (ID: {self.employee_id})\")\n\n    def get_info(self):\n        \"\"\"\uc9c1\uc6d0 \uc815\ubcf4 \ubc18\ud658\"\"\"\n        return f\"\"\"\n\uc9c1\uc6d0 \uc815\ubcf4:\n- \uc774\ub984: {self.name}\n- \uc0ac\ubc88: {self.employee_id}\n- \uc9c1\ucc45: {self.position}\n- \uae09\uc5ec: {self.salary:,}\uc6d0\n- \ud68c\uc0ac: {self.company_name}\n        \"\"\".strip()\n\n    def raise_salary(self):\n        \"\"\"\uae09\uc5ec \uc778\uc0c1\"\"\"\n        old_salary = self.salary\n        self.salary = int(self.salary * self.salary_raise_percentage)\n        increase = self.salary - old_salary\n        return f\"{self.name}\ub2d8\uc758 \uae09\uc5ec\uac00 {increase:,}\uc6d0 \uc778\uc0c1\ub418\uc5c8\uc2b5\ub2c8\ub2e4. (\uae30\uc874: {old_salary:,}\uc6d0 -&gt; \ud604\uc7ac: {self.salary:,}\uc6d0)\"\n\n    @classmethod\n    def get_company_info(cls):\n        \"\"\"\ud074\ub798\uc2a4 \uba54\uc11c\ub4dc: \ud68c\uc0ac \uc815\ubcf4 \ubc18\ud658\"\"\"\n        return f\"\ud68c\uc0ac\uba85: {cls.company_name}, \ucd1d \uc9c1\uc6d0 \uc218: {cls.employee_count}\uba85\"\n\n    @classmethod\n    def set_company_name(cls, new_name):\n        \"\"\"\ud074\ub798\uc2a4 \uba54\uc11c\ub4dc: \ud68c\uc0ac\uba85 \ubcc0\uacbd\"\"\"\n        old_name = cls.company_name\n        cls.company_name = new_name\n        print(f\"\ud68c\uc0ac\uba85\uc774 '{old_name}'\uc5d0\uc11c '{new_name}'\uc73c\ub85c \ubcc0\uacbd\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n\n    @classmethod\n    def set_raise_percentage(cls, percentage):\n        \"\"\"\ud074\ub798\uc2a4 \uba54\uc11c\ub4dc: \uc778\uc0c1\uc728 \ubcc0\uacbd\"\"\"\n        cls.salary_raise_percentage = 1 + (percentage / 100)\n        print(f\"\uae09\uc5ec \uc778\uc0c1\uc728\uc774 {percentage}%\ub85c \uc124\uc815\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n\n    @staticmethod\n    def calculate_annual_salary(monthly_salary):\n        \"\"\"\uc815\uc801 \uba54\uc11c\ub4dc: \uc5f0\ubd09 \uacc4\uc0b0 (\ud074\ub798\uc2a4\ub098 \uc778\uc2a4\ud134\uc2a4\uc640 \ubb34\uad00\ud55c \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218)\"\"\"\n        return monthly_salary * 12\n\n# \uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218\uc640 \ud074\ub798\uc2a4 \ubcc0\uc218 \uc0ac\uc6a9 \uc608\uc81c\nprint(\"1. \uc9c1\uc6d0 \uac1d\uccb4\ub4e4 \uc0dd\uc131:\")\nemp1 = Employee(\"\uae40\ucca0\uc218\", \"\uac1c\ubc1c\uc790\", 4000000)\nemp2 = Employee(\"\uc774\uc601\ud76c\", \"\ub514\uc790\uc774\ub108\", 3500000)\nemp3 = Employee(\"\ubc15\ubbfc\uc218\", \"\uae30\ud68d\uc790\", 3800000)\n\nprint(f\"\\n{Employee.get_company_info()}\")\n\nprint(\"\\n2. \uac01 \uc9c1\uc6d0\uc758 \uc815\ubcf4:\")\nprint(emp1.get_info())\nprint()\nprint(emp2.get_info())\n\nprint(\"\\n3. \ud074\ub798\uc2a4 \ubcc0\uc218 vs \uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218:\")\nprint(f\"emp1\uc758 \ud68c\uc0ac\uba85 (\uc778\uc2a4\ud134\uc2a4\ub97c \ud1b5\ud55c \uc811\uadfc): {emp1.company_name}\")\nprint(f\"Employee\uc758 \ud68c\uc0ac\uba85 (\ud074\ub798\uc2a4\ub97c \ud1b5\ud55c \uc811\uadfc): {Employee.company_name}\")\nprint(f\"emp1\uc758 \uae09\uc5ec (\uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218): {emp1.salary:,}\uc6d0\")\n\nprint(\"\\n4. \ud074\ub798\uc2a4 \ubcc0\uc218 \ubcc0\uacbd\uc758 \uc601\ud5a5:\")\nEmployee.set_company_name(\"Advanced Python Corp\")\nprint(f\"\ubcc0\uacbd \ud6c4 emp1\uc758 \ud68c\uc0ac\uba85: {emp1.company_name}\")\nprint(f\"\ubcc0\uacbd \ud6c4 emp2\uc758 \ud68c\uc0ac\uba85: {emp2.company_name}\")\n\nprint(\"\\n5. \uae09\uc5ec \uc778\uc0c1:\")\nEmployee.set_raise_percentage(10)  # 10% \uc778\uc0c1\uc73c\ub85c \ubcc0\uacbd\nprint(emp1.raise_salary())\nprint(emp2.raise_salary())\n\nprint(\"\\n6. \uc815\uc801 \uba54\uc11c\ub4dc \uc0ac\uc6a9:\")\nmonthly_salary = 4000000\nannual_salary = Employee.calculate_annual_salary(monthly_salary)\nprint(f\"\uc6d4\uae09 {monthly_salary:,}\uc6d0\uc758 \uc5f0\ubd09: {annual_salary:,}\uc6d0\")\n\nprint(\"\\n7. \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ud655\uc778:\")\nprint(f\"Employee \ud074\ub798\uc2a4\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4: {Employee.__dict__.keys()}\")\nprint(f\"emp1 \uc778\uc2a4\ud134\uc2a4\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4: {emp1.__dict__.keys()}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#32","title":"3.2 \uba54\uc11c\ub4dc\uc758 \uc885\ub958","text":"<pre><code>print(\"\\n=== \uba54\uc11c\ub4dc\uc758 \uc885\ub958 ===\")\n\nclass MathUtility:\n    \"\"\"\uc218\ud559 \uc720\ud2f8\ub9ac\ud2f0 \ud074\ub798\uc2a4 - \ub2e4\uc591\ud55c \uba54\uc11c\ub4dc \ud0c0\uc785 \uc608\uc81c\"\"\"\n\n    # \ud074\ub798\uc2a4 \ubcc0\uc218\n    pi = 3.14159\n    calculation_count = 0\n\n    def __init__(self, name=\"Calculator\"):\n        \"\"\"\uc778\uc2a4\ud134\uc2a4 \uba54\uc11c\ub4dc - \uc0dd\uc131\uc790\"\"\"\n        self.name = name\n        self.history = []\n\n    def add_to_history(self, operation, result):\n        \"\"\"\uc778\uc2a4\ud134\uc2a4 \uba54\uc11c\ub4dc - \uacc4\uc0b0 \uae30\ub85d \ucd94\uac00\"\"\"\n        self.history.append(f\"{operation} = {result}\")\n        MathUtility.calculation_count += 1\n\n    def circle_area(self, radius):\n        \"\"\"\uc778\uc2a4\ud134\uc2a4 \uba54\uc11c\ub4dc - \uc6d0\uc758 \ub113\uc774 \uacc4\uc0b0\"\"\"\n        area = self.pi * radius ** 2\n        operation = f\"\u03c0 \u00d7 {radius}\u00b2\"\n        self.add_to_history(operation, f\"{area:.2f}\")\n        return area\n\n    def rectangle_area(self, width, height):\n        \"\"\"\uc778\uc2a4\ud134\uc2a4 \uba54\uc11c\ub4dc - \uc9c1\uc0ac\uac01\ud615 \ub113\uc774 \uacc4\uc0b0\"\"\"\n        area = width * height\n        operation = f\"{width} \u00d7 {height}\"\n        self.add_to_history(operation, area)\n        return area\n\n    def get_history(self):\n        \"\"\"\uc778\uc2a4\ud134\uc2a4 \uba54\uc11c\ub4dc - \uacc4\uc0b0 \uae30\ub85d \uc870\ud68c\"\"\"\n        if not self.history:\n            return f\"{self.name}: \uacc4\uc0b0 \uae30\ub85d\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\"\n\n        result = f\"=== {self.name} \uacc4\uc0b0 \uae30\ub85d ===\\n\"\n        for i, record in enumerate(self.history, 1):\n            result += f\"{i}. {record}\\n\"\n        return result.strip()\n\n    @classmethod\n    def get_total_calculations(cls):\n        \"\"\"\ud074\ub798\uc2a4 \uba54\uc11c\ub4dc - \uc804\uccb4 \uacc4\uc0b0 \ud69f\uc218 \uc870\ud68c\"\"\"\n        return f\"\uc804\uccb4 \uacc4\uc0b0 \ud69f\uc218: {cls.calculation_count}\ud68c\"\n\n    @classmethod\n    def create_scientific_calculator(cls):\n        \"\"\"\ud074\ub798\uc2a4 \uba54\uc11c\ub4dc - \ud329\ud1a0\ub9ac \uba54\uc11c\ub4dc (\ud2b9\ubcc4\ud55c \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131)\"\"\"\n        calculator = cls(\"Scientific Calculator\")\n        calculator.pi = 3.141592653589793  # \ub354 \uc815\ud655\ud55c pi \uac12\n        return calculator\n\n    @classmethod\n    def reset_calculation_count(cls):\n        \"\"\"\ud074\ub798\uc2a4 \uba54\uc11c\ub4dc - \uacc4\uc0b0 \ud69f\uc218 \ucd08\uae30\ud654\"\"\"\n        cls.calculation_count = 0\n        print(\"\uc804\uccb4 \uacc4\uc0b0 \ud69f\uc218\uac00 \ucd08\uae30\ud654\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n\n    @staticmethod\n    def is_prime(n):\n        \"\"\"\uc815\uc801 \uba54\uc11c\ub4dc - \uc18c\uc218 \ud310\ubcc4 (\ud074\ub798\uc2a4\uc640 \ub3c5\ub9bd\uc801\uc778 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218)\"\"\"\n        if n &lt; 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    @staticmethod\n    def factorial(n):\n        \"\"\"\uc815\uc801 \uba54\uc11c\ub4dc - \ud329\ud1a0\ub9ac\uc5bc \uacc4\uc0b0\"\"\"\n        if n &lt; 0:\n            raise ValueError(\"\uc74c\uc218\uc758 \ud329\ud1a0\ub9ac\uc5bc\uc740 \uc815\uc758\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\")\n        if n == 0 or n == 1:\n            return 1\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n\n    @staticmethod\n    def gcd(a, b):\n        \"\"\"\uc815\uc801 \uba54\uc11c\ub4dc - \ucd5c\ub300\uacf5\uc57d\uc218 \uacc4\uc0b0 (\uc720\ud074\ub9ac\ub4dc \ud638\uc81c\ubc95)\"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n# \uba54\uc11c\ub4dc \uc0ac\uc6a9 \uc608\uc81c\nprint(\"1. \uc77c\ubc18 \uacc4\uc0b0\uae30 \uc0dd\uc131 \ubc0f \uc0ac\uc6a9:\")\ncalc1 = MathUtility(\"\uc77c\ubc18 \uacc4\uc0b0\uae30\")\ncalc2 = MathUtility(\"\uacf5\ud559 \uacc4\uc0b0\uae30\")\n\n# \uc778\uc2a4\ud134\uc2a4 \uba54\uc11c\ub4dc \uc0ac\uc6a9\narea1 = calc1.circle_area(5)\narea2 = calc1.rectangle_area(10, 20)\nprint(f\"\uc6d0\uc758 \ub113\uc774: {area1:.2f}\")\nprint(f\"\uc9c1\uc0ac\uac01\ud615 \ub113\uc774: {area2}\")\n\narea3 = calc2.circle_area(3)\nprint(f\"\ub2e4\ub978 \uacc4\uc0b0\uae30\ub85c \uc6d0\uc758 \ub113\uc774: {area3:.2f}\")\n\nprint(\"\\n2. \uacc4\uc0b0 \uae30\ub85d \uc870\ud68c:\")\nprint(calc1.get_history())\nprint()\nprint(calc2.get_history())\n\nprint(\"\\n3. \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc \uc0ac\uc6a9:\")\nprint(MathUtility.get_total_calculations())\n\n# \ud329\ud1a0\ub9ac \uba54\uc11c\ub4dc\ub85c \ud2b9\ubcc4\ud55c \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\nscientific_calc = MathUtility.create_scientific_calculator()\narea4 = scientific_calc.circle_area(5)\nprint(f\"\uacfc\ud559 \uacc4\uc0b0\uae30\ub85c \uc6d0\uc758 \ub113\uc774 (\ub354 \uc815\ud655\ud55c \u03c0): {area4:.6f}\")\n\nprint(f\"\\n{MathUtility.get_total_calculations()}\")\n\nprint(\"\\n4. \uc815\uc801 \uba54\uc11c\ub4dc \uc0ac\uc6a9 (\ud074\ub798\uc2a4\ub098 \uc778\uc2a4\ud134\uc2a4 \uc5c6\uc774\ub3c4 \ud638\ucd9c \uac00\ub2a5):\")\n# \ud074\ub798\uc2a4\ub97c \ud1b5\ud574 \ud638\ucd9c\nprint(f\"17\uc740 \uc18c\uc218\uc778\uac00? {MathUtility.is_prime(17)}\")\nprint(f\"20\uc740 \uc18c\uc218\uc778\uac00? {MathUtility.is_prime(20)}\")\nprint(f\"5\uc758 \ud329\ud1a0\ub9ac\uc5bc: {MathUtility.factorial(5)}\")\nprint(f\"48\uacfc 18\uc758 \ucd5c\ub300\uacf5\uc57d\uc218: {MathUtility.gcd(48, 18)}\")\n\n# \uc778\uc2a4\ud134\uc2a4\ub97c \ud1b5\ud574\uc11c\ub3c4 \ud638\ucd9c \uac00\ub2a5 (\uad8c\uc7a5\ud558\uc9c0 \uc54a\uc74c)\nprint(f\"calc1\uc744 \ud1b5\ud574 6\uc758 \ud329\ud1a0\ub9ac\uc5bc: {calc1.factorial(6)}\")\n\nprint(\"\\n5. \uba54\uc11c\ub4dc \ud0c0\uc785 \uc815\ub9ac:\")\nprint(\"- \uc778\uc2a4\ud134\uc2a4 \uba54\uc11c\ub4dc: self\ub97c \uccab \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc74c, \uc778\uc2a4\ud134\uc2a4 \ub370\uc774\ud130 \uc870\uc791\")\nprint(\"- \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc: cls\ub97c \uccab \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc74c, \ud074\ub798\uc2a4 \ub370\uc774\ud130 \uc870\uc791\")\nprint(\"- \uc815\uc801 \uba54\uc11c\ub4dc: \ud2b9\ubcc4\ud55c \ub9e4\uac1c\ubcc0\uc218 \uc5c6\uc74c, \ub3c5\ub9bd\uc801\uc778 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#4-access-control","title":"4. \uc811\uadfc \uc81c\uc5b4 (Access Control)","text":""},{"location":"tutorials/intermediate/chapter04_oop_basics/#41","title":"4.1 \ud30c\uc774\uc36c\uc758 \uc811\uadfc \uc81c\uc5b4 \uaddc\uce59","text":"<pre><code>print(\"\\n=== \ud30c\uc774\uc36c\uc758 \uc811\uadfc \uc81c\uc5b4 ===\")\n\nclass BankAccount:\n    \"\"\"\uc740\ud589 \uacc4\uc88c \ud074\ub798\uc2a4 - \uc811\uadfc \uc81c\uc5b4 \uc608\uc81c\"\"\"\n\n    def __init__(self, account_number, owner_name, initial_balance=0):\n        # Public \uc18d\uc131 (\uc678\ubd80\uc5d0\uc11c \uc790\uc720\ub86d\uac8c \uc811\uadfc \uac00\ub2a5)\n        self.account_number = account_number\n        self.owner_name = owner_name\n\n        # Protected \uc18d\uc131 (\ub0b4\ubd80 \ubc0f \uc11c\ube0c\ud074\ub798\uc2a4\uc5d0\uc11c\ub9cc \uc0ac\uc6a9 \uad8c\uc7a5)\n        self._balance = initial_balance\n        self._transaction_fee = 500\n\n        # Private \uc18d\uc131 (\ud074\ub798\uc2a4 \ub0b4\ubd80\uc5d0\uc11c\ub9cc \uc811\uadfc \uac00\ub2a5)\n        self.__pin = self._generate_pin()\n        self.__is_locked = False\n\n        print(f\"\uacc4\uc88c \uc0dd\uc131 \uc644\ub8cc: {account_number} ({owner_name})\")\n\n    def _generate_pin(self):\n        \"\"\"Protected \uba54\uc11c\ub4dc - PIN \uc0dd\uc131\"\"\"\n        import random\n        return f\"{random.randint(1000, 9999)}\"\n\n    def __validate_pin(self, entered_pin):\n        \"\"\"Private \uba54\uc11c\ub4dc - PIN \uac80\uc99d\"\"\"\n        return entered_pin == self.__pin\n\n    def __lock_account(self):\n        \"\"\"Private \uba54\uc11c\ub4dc - \uacc4\uc88c \uc7a0\uae08\"\"\"\n        self.__is_locked = True\n        print(\"\u26a0\ufe0f \uacc4\uc88c\uac00 \uc7a0\uacbc\uc2b5\ub2c8\ub2e4. \uc740\ud589\uc5d0 \ubb38\uc758\ud558\uc138\uc694.\")\n\n    def __unlock_account(self):\n        \"\"\"Private \uba54\uc11c\ub4dc - \uacc4\uc88c \uc7a0\uae08 \ud574\uc81c\"\"\"\n        self.__is_locked = False\n        print(\"\u2705 \uacc4\uc88c \uc7a0\uae08\uc774 \ud574\uc81c\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n\n    def deposit(self, amount):\n        \"\"\"Public \uba54\uc11c\ub4dc - \uc785\uae08\"\"\"\n        if self.__is_locked:\n            return \"\u274c \uacc4\uc88c\uac00 \uc7a0\uaca8\uc788\uc2b5\ub2c8\ub2e4.\"\n\n        if amount &lt;= 0:\n            return \"\u274c \uc785\uae08\uc561\uc740 0\uc6d0\ubcf4\ub2e4 \ucee4\uc57c \ud569\ub2c8\ub2e4.\"\n\n        self._balance += amount\n        self.transaction_history.append(f\"\uc785\uae08: +{amount:,}\uc6d0\")\n        return f\"\u2705 {amount:,}\uc6d0\uc774 \uc785\uae08\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud604\uc7ac \uc794\uc561: {self._balance:,}\uc6d0\"\n\n    def withdraw(self, amount, pin):\n        \"\"\"Public \uba54\uc11c\ub4dc - \ucd9c\uae08 (PIN \ud544\uc694)\"\"\"\n        if self.__is_locked:\n            return \"\u274c \uacc4\uc88c\uac00 \uc7a0\uaca8\uc788\uc2b5\ub2c8\ub2e4.\"\n\n        # PIN \uac80\uc99d\n        if not self.__validate_pin(pin):\n            self.__lock_account()\n            return \"\u274c PIN\uc774 \ud2c0\ub838\uc2b5\ub2c8\ub2e4. \uacc4\uc88c\uac00 \uc7a0\uacbc\uc2b5\ub2c8\ub2e4.\"\n\n        if amount &lt;= 0:\n            return \"\u274c \ucd9c\uae08\uc561\uc740 0\uc6d0\ubcf4\ub2e4 \ucee4\uc57c \ud569\ub2c8\ub2e4.\"\n\n        total_amount = amount + self._transaction_fee\n        if total_amount &gt; self._balance:\n            return f\"\u274c \uc794\uc561\uc774 \ubd80\uc871\ud569\ub2c8\ub2e4. (\ucd9c\uae08\uc561: {amount:,}\uc6d0 + \uc218\uc218\ub8cc: {self._transaction_fee:,}\uc6d0)\"\n\n        self._balance -= total_amount\n        self.transaction_history.append(f\"\ucd9c\uae08: -{amount:,}\uc6d0\")\n        return f\"\u2705 {amount:,}\uc6d0\uc774 \ucd9c\uae08\ub418\uc5c8\uc2b5\ub2c8\ub2e4. (\uc218\uc218\ub8cc: {self._transaction_fee:,}\uc6d0 \ucc28\uac10) \uc794\uc561: {self._balance:,}\uc6d0\"\n\n    def get_balance(self, pin):\n        \"\"\"Public \uba54\uc11c\ub4dc - \uc794\uc561 \uc870\ud68c (PIN \ud544\uc694)\"\"\"\n        if self.__is_locked:\n            return \"\u274c \uacc4\uc88c\uac00 \uc7a0\uaca8\uc788\uc2b5\ub2c8\ub2e4.\"\n\n        if not self.__validate_pin(pin):\n            self.__lock_account()\n            return \"\u274c PIN\uc774 \ud2c0\ub838\uc2b5\ub2c8\ub2e4. \uacc4\uc88c\uac00 \uc7a0\uacbc\uc2b5\ub2c8\ub2e4.\"\n\n        return f\"\ud83d\udcb0 \ud604\uc7ac \uc794\uc561: {self._balance:,}\uc6d0\"\n\n    def admin_unlock(self, admin_code=\"ADMIN2024\"):\n        \"\"\"\uad00\ub9ac\uc790\uc6a9 \uacc4\uc88c \uc7a0\uae08 \ud574\uc81c\"\"\"\n        if admin_code == \"ADMIN2024\":\n            self.__unlock_account()\n            return \"\u2705 \uad00\ub9ac\uc790 \uad8c\ud55c\uc73c\ub85c \uacc4\uc88c \uc7a0\uae08\uc774 \ud574\uc81c\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        else:\n            return \"\u274c \uad00\ub9ac\uc790 \ucf54\ub4dc\uac00 \ud2c0\ub838\uc2b5\ub2c8\ub2e4.\"\n\n    def get_pin_hint(self):\n        \"\"\"PIN \ud78c\ud2b8 \uc81c\uacf5 (\ud14c\uc2a4\ud2b8\uc6a9)\"\"\"\n        return f\"\ud83d\udca1 PIN \ud78c\ud2b8: {self.__pin[:2]}**\"\n\n    def get_account_info(self):\n        \"\"\"\uacc4\uc88c \uc815\ubcf4 \uc870\ud68c\"\"\"\n        status = \"\ud83d\udd12 \uc7a0\uae40\" if self.__is_locked else \"\ud83d\udd13 \uc815\uc0c1\"\n        return f\"\"\"\n=== \uacc4\uc88c \uc815\ubcf4 ===\n\uacc4\uc88c\ubc88\ud638: {self.account_number}\n\uc608\uae08\uc8fc: {self.owner_name}\n\uc0c1\ud0dc: {status}\n\uc218\uc218\ub8cc: {self._transaction_fee:,}\uc6d0\n        \"\"\".strip()\n\n# \uc811\uadfc \uc81c\uc5b4 \ud14c\uc2a4\ud2b8\nprint(\"1. \uacc4\uc88c \uc0dd\uc131:\")\naccount = BankAccount(\"123-456-789\", \"\ud64d\uae38\ub3d9\", 100000)\n\nprint(\"\\n2. Public \uc18d\uc131/\uba54\uc11c\ub4dc \uc811\uadfc:\")\nprint(f\"\uacc4\uc88c\ubc88\ud638 (public): {account.account_number}\")\nprint(f\"\uc608\uae08\uc8fc (public): {account.owner_name}\")\nprint(account.get_account_info())\n\nprint(\"\\n3. Protected \uc18d\uc131 \uc811\uadfc (\uc678\ubd80\uc5d0\uc11c\ub294 \uad8c\uc7a5\ud558\uc9c0 \uc54a\uc74c):\")\nprint(f\"\uc794\uc561 (protected): {account._balance:,}\uc6d0\")\nprint(f\"\uc218\uc218\ub8cc (protected): {account._transaction_fee:,}\uc6d0\")\n\nprint(\"\\n4. Private \uc18d\uc131 \uc811\uadfc \uc2dc\ub3c4:\")\ntry:\n    print(f\"PIN (private): {account.__pin}\")  # \uc5d0\ub7ec \ubc1c\uc0dd\nexcept AttributeError as e:\n    print(f\"\u274c Private \uc18d\uc131 \uc811\uadfc \ubd88\uac00: {e}\")\n\n# \uc2e4\uc81c\ub85c\ub294 name mangling\uc73c\ub85c \uc811\uadfc \uac00\ub2a5\ud558\uc9c0\ub9cc \uad8c\uc7a5\ud558\uc9c0 \uc54a\uc74c\nprint(f\"Name mangling\uc73c\ub85c \uc811\uadfc (\uad8c\uc7a5\ud558\uc9c0 \uc54a\uc74c): {account._BankAccount__pin}\")\n\nprint(\"\\n5. \uc815\uc0c1\uc801\uc778 \uac70\ub798:\")\npin_hint = account.get_pin_hint()\nprint(f\"PIN \ud78c\ud2b8: {pin_hint}\")\n\n# \uc2e4\uc81c PIN \uc0ac\uc6a9 (\ud14c\uc2a4\ud2b8\ub97c \uc704\ud574 private \uc18d\uc131\uc5d0 \uc811\uadfc)\ncorrect_pin = account._BankAccount__pin\nprint(f\"\uc2e4\uc81c PIN: {correct_pin}\")\n\nprint(account.deposit(50000))\nprint(account.get_balance(correct_pin))\nprint(account.withdraw(30000, correct_pin))\n\nprint(\"\\n6. \uc798\ubabb\ub41c PIN \uc0ac\uc6a9:\")\nprint(account.withdraw(10000, \"0000\"))  # \ud2c0\ub9b0 PIN\nprint(account.get_balance(correct_pin))  # \uacc4\uc88c\uac00 \uc7a0\uae40\n\nprint(\"\\n7. \uad00\ub9ac\uc790 \uc7a0\uae08 \ud574\uc81c:\")\nprint(account.admin_unlock())\nprint(account.get_balance(correct_pin))  # \uc774\uc81c \uc811\uadfc \uac00\ub2a5\n</code></pre>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#42-property","title":"4.2 \ud504\ub85c\ud37c\ud2f0 (Property) \uc0ac\uc6a9","text":"<pre><code>print(\"\\n=== \ud504\ub85c\ud37c\ud2f0 (Property) \uc0ac\uc6a9 ===\")\n\nclass Temperature:\n    \"\"\"\uc628\ub3c4 \ud074\ub798\uc2a4 - \ud504\ub85c\ud37c\ud2f0\ub97c \uc774\uc6a9\ud55c \ub370\uc774\ud130 \uac80\uc99d\"\"\"\n\n    def __init__(self, celsius=0):\n        \"\"\"\uc0dd\uc131\uc790\"\"\"\n        self._celsius = 0  # private \ubcc0\uc218\n        self.celsius = celsius  # \ud504\ub85c\ud37c\ud2f0\ub97c \ud1b5\ud574 \ucd08\uae30\ud654\n\n    @property\n    def celsius(self):\n        \"\"\"\uc12d\uc528 \uc628\ub3c4 getter\"\"\"\n        return self._celsius\n\n    @celsius.setter\n    def celsius(self, value):\n        \"\"\"\uc12d\uc528 \uc628\ub3c4 setter - \uc720\ud6a8\uc131 \uac80\uc99d\"\"\"\n        if not isinstance(value, (int, float)):\n            raise TypeError(\"\uc628\ub3c4\ub294 \uc22b\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n\n        if value &lt; -273.15:\n            raise ValueError(\"\uc808\ub300 \uc601\ub3c4\ubcf4\ub2e4 \ub0ae\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n\n        self._celsius = float(value)\n\n    @property\n    def fahrenheit(self):\n        \"\"\"\ud654\uc528 \uc628\ub3c4 getter (\uacc4\uc0b0\ub41c \ud504\ub85c\ud37c\ud2f0)\"\"\"\n        return self._celsius * 9/5 + 32\n\n    @fahrenheit.setter\n    def fahrenheit(self, value):\n        \"\"\"\ud654\uc528 \uc628\ub3c4 setter\"\"\"\n        if not isinstance(value, (int, float)):\n            raise TypeError(\"\uc628\ub3c4\ub294 \uc22b\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n\n        celsius_value = (value - 32) * 5/9\n        if celsius_value &lt; -273.15:\n            raise ValueError(\"\uc808\ub300 \uc601\ub3c4\ubcf4\ub2e4 \ub0ae\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n\n        self._celsius = celsius_value\n\n    @property\n    def kelvin(self):\n        \"\"\"\ucf08\ube48 \uc628\ub3c4 getter (\uacc4\uc0b0\ub41c \ud504\ub85c\ud37c\ud2f0)\"\"\"\n        return self._celsius + 273.15\n\n    @kelvin.setter\n    def kelvin(self, value):\n        \"\"\"\ucf08\ube48 \uc628\ub3c4 setter\"\"\"\n        if not isinstance(value, (int, float)):\n            raise TypeError(\"\uc628\ub3c4\ub294 \uc22b\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n\n        if value &lt; 0:\n            raise ValueError(\"\ucf08\ube48 \uc628\ub3c4\ub294 0\ubcf4\ub2e4 \uc791\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n\n        self._celsius = value - 273.15\n\n    @property\n    def description(self):\n        \"\"\"\uc628\ub3c4 \uc124\uba85 getter (\uc77d\uae30 \uc804\uc6a9 \ud504\ub85c\ud37c\ud2f0)\"\"\"\n        celsius = self._celsius\n\n        if celsius &lt; 0:\n            return \"\ube59\uc810 \uc774\ud558\"\n        elif celsius == 0:\n            return \"\ube59\uc810\"\n        elif celsius &lt; 25:\n            return \"\uc2dc\uc6d0\ud568\"\n        elif celsius &lt; 35:\n            return \"\ub530\ub73b\ud568\"\n        else:\n            return \"\ub354\uc6c0\"\n\n    def __str__(self):\n        \"\"\"\ubb38\uc790\uc5f4 \ud45c\ud604\"\"\"\n        return f\"{self._celsius:.1f}\u00b0C ({self.fahrenheit:.1f}\u00b0F, {self.kelvin:.1f}K) - {self.description}\"\n\nclass Rectangle:\n    \"\"\"\uc9c1\uc0ac\uac01\ud615 \ud074\ub798\uc2a4 - \ud504\ub85c\ud37c\ud2f0\ub97c \uc774\uc6a9\ud55c \uacc4\uc0b0\ub41c \uc18d\uc131\"\"\"\n\n    def __init__(self, width=1, height=1):\n        self._width = 0\n        self._height = 0\n        self.width = width    # \ud504\ub85c\ud37c\ud2f0\ub97c \ud1b5\ud574 \uc124\uc815\n        self.height = height  # \ud504\ub85c\ud37c\ud2f0\ub97c \ud1b5\ud574 \uc124\uc815\n\n    @property\n    def width(self):\n        \"\"\"\ub108\ube44 getter\"\"\"\n        return self._width\n\n    @width.setter\n    def width(self, value):\n        \"\"\"\ub108\ube44 setter - \uc591\uc218\ub9cc \ud5c8\uc6a9\"\"\"\n        if not isinstance(value, (int, float)):\n            raise TypeError(\"\ub108\ube44\ub294 \uc22b\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n        if value &lt;= 0:\n            raise ValueError(\"\ub108\ube44\ub294 \uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n        self._width = float(value)\n\n    @property\n    def height(self):\n        \"\"\"\ub192\uc774 getter\"\"\"\n        return self._height\n\n    @height.setter\n    def height(self, value):\n        \"\"\"\ub192\uc774 setter - \uc591\uc218\ub9cc \ud5c8\uc6a9\"\"\"\n        if not isinstance(value, (int, float)):\n            raise TypeError(\"\ub192\uc774\ub294 \uc22b\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n        if value &lt;= 0:\n            raise ValueError(\"\ub192\uc774\ub294 \uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n        self._height = float(value)\n\n    @property\n    def area(self):\n        \"\"\"\ub113\uc774 \uacc4\uc0b0 (\uc77d\uae30 \uc804\uc6a9)\"\"\"\n        return self._width * self._height\n\n    @property\n    def perimeter(self):\n        \"\"\"\ub458\ub808 \uacc4\uc0b0 (\uc77d\uae30 \uc804\uc6a9)\"\"\"\n        return 2 * (self._width + self._height)\n\n    @property\n    def diagonal(self):\n        \"\"\"\ub300\uac01\uc120 \uae38\uc774 \uacc4\uc0b0 (\uc77d\uae30 \uc804\uc6a9)\"\"\"\n        return (self._width ** 2 + self._height ** 2) ** 0.5\n\n    @property\n    def is_square(self):\n        \"\"\"\uc815\uc0ac\uac01\ud615 \uc5ec\ubd80 (\uc77d\uae30 \uc804\uc6a9)\"\"\"\n        return self._width == self._height\n\n    def __str__(self):\n        shape_type = \"\uc815\uc0ac\uac01\ud615\" if self.is_square else \"\uc9c1\uc0ac\uac01\ud615\"\n        return f\"{shape_type} ({self._width}\u00d7{self._height}) - \ub113\uc774: {self.area}, \ub458\ub808: {self.perimeter:.2f}\"\n\n# \ud504\ub85c\ud37c\ud2f0 \uc0ac\uc6a9 \uc608\uc81c\nprint(\"1. \uc628\ub3c4 \ud074\ub798\uc2a4 \ud14c\uc2a4\ud2b8:\")\ntemp = Temperature(25)\nprint(f\"\ucd08\uae30 \uc628\ub3c4: {temp}\")\n\nprint(\"\\n2. \uc12d\uc528 \uc628\ub3c4 \ubcc0\uacbd:\")\ntemp.celsius = 0\nprint(f\"\ube59\uc810: {temp}\")\n\ntemp.celsius = 100\nprint(f\"\ub053\ub294\uc810: {temp}\")\n\nprint(\"\\n3. \ud654\uc528 \uc628\ub3c4\ub85c \uc124\uc815:\")\ntemp.fahrenheit = 68\nprint(f\"\ud654\uc528 68\ub3c4: {temp}\")\n\nprint(\"\\n4. \ucf08\ube48 \uc628\ub3c4\ub85c \uc124\uc815:\")\ntemp.kelvin = 300\nprint(f\"\ucf08\ube48 300\ub3c4: {temp}\")\n\nprint(\"\\n5. \uc798\ubabb\ub41c \uac12 \uc124\uc815 \uc2dc\ub3c4:\")\ntry:\n    temp.celsius = -300  # \uc808\ub300 \uc601\ub3c4\ubcf4\ub2e4 \ub0ae\uc74c\nexcept ValueError as e:\n    print(f\"\u274c \uc624\ub958: {e}\")\n\ntry:\n    temp.celsius = \"hot\"  # \ubb38\uc790\uc5f4\nexcept TypeError as e:\n    print(f\"\u274c \uc624\ub958: {e}\")\n\nprint(\"\\n6. \uc9c1\uc0ac\uac01\ud615 \ud074\ub798\uc2a4 \ud14c\uc2a4\ud2b8:\")\nrect = Rectangle(10, 5)\nprint(f\"\ucd08\uae30 \uc9c1\uc0ac\uac01\ud615: {rect}\")\n\nprint(\"\\n7. \ud06c\uae30 \ubcc0\uacbd:\")\nrect.width = 8\nrect.height = 8\nprint(f\"\ubcc0\uacbd \ud6c4: {rect}\")\n\nprint(f\"\ub113\uc774: {rect.area}\")\nprint(f\"\ub458\ub808: {rect.perimeter}\")\nprint(f\"\ub300\uac01\uc120: {rect.diagonal:.2f}\")\nprint(f\"\uc815\uc0ac\uac01\ud615\uc778\uac00? {rect.is_square}\")\n\nprint(\"\\n8. \uc798\ubabb\ub41c \uac12 \uc124\uc815 \uc2dc\ub3c4:\")\ntry:\n    rect.width = -5  # \uc74c\uc218\nexcept ValueError as e:\n    print(f\"\u274c \uc624\ub958: {e}\")\n\ntry:\n    rect.area = 100  # \uc77d\uae30 \uc804\uc6a9 \ud504\ub85c\ud37c\ud2f0 \ubcc0\uacbd \uc2dc\ub3c4\nexcept AttributeError as e:\n    print(f\"\u274c \uc624\ub958: {e}\")\n\nprint(\"\\n9. \ud504\ub85c\ud37c\ud2f0\uc758 \uc7a5\uc810:\")\nprint(\"- \uc18d\uc131\ucc98\ub7fc \uc0ac\uc6a9\ud558\uba74\uc11c\ub3c4 \uba54\uc11c\ub4dc\uc758 \uae30\ub2a5 \uc81c\uacf5\")\nprint(\"- \ub370\uc774\ud130 \uac80\uc99d\uacfc \uacc4\uc0b0\uc744 \ud22c\uba85\ud558\uac8c \ucc98\ub9ac\")\nprint(\"- \uae30\uc874 \ucf54\ub4dc\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\uace0 \ub0b4\ubd80 \uad6c\ud604 \ubcc0\uacbd \uac00\ub2a5\")\nprint(\"- \uc77d\uae30 \uc804\uc6a9 \uc18d\uc131 \uad6c\ud604 \uac00\ub2a5\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#5","title":"5. \uc2e4\uc6a9\uc801\uc778 \ud074\ub798\uc2a4 \uc124\uacc4","text":""},{"location":"tutorials/intermediate/chapter04_oop_basics/#51","title":"5.1 \ub3c4\uc11c\uad00 \uad00\ub9ac \uc2dc\uc2a4\ud15c","text":"<pre><code>print(\"\\n=== \uc2e4\uc6a9\uc801\uc778 \ud074\ub798\uc2a4 \uc124\uacc4: \ub3c4\uc11c\uad00 \uad00\ub9ac \uc2dc\uc2a4\ud15c ===\")\n\nfrom datetime import datetime, timedelta\nfrom typing import List, Optional\n\nclass Book:\n    \"\"\"\ub3c4\uc11c \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, isbn, title, author, publisher, year, copies=1):\n        self.isbn = isbn\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n        self.year = year\n        self.total_copies = copies\n        self.available_copies = copies\n        self._borrowers = []  # \ud604\uc7ac \ub300\ucd9c\uc790 \ubaa9\ub85d\n\n    def __str__(self):\n        return f\"\u300a{self.title}\u300b - {self.author} ({self.year})\"\n\n    def __repr__(self):\n        return f\"Book('{self.isbn}', '{self.title}', '{self.author}')\"\n\n    def borrow(self, member_id):\n        \"\"\"\ub3c4\uc11c \ub300\ucd9c\"\"\"\n        if self.available_copies &gt; 0:\n            self.available_copies -= 1\n            self._borrowers.append(member_id)\n            return True\n        return False\n\n    def return_book(self, member_id):\n        \"\"\"\ub3c4\uc11c \ubc18\ub0a9\"\"\"\n        if member_id in self._borrowers:\n            self.available_copies += 1\n            self._borrowers.remove(member_id)\n            return True\n        return False\n\n    def is_available(self):\n        \"\"\"\ub300\ucd9c \uac00\ub2a5 \uc5ec\ubd80\"\"\"\n        return self.available_copies &gt; 0\n\n    def get_availability_info(self):\n        \"\"\"\ub300\ucd9c \ud604\ud669 \uc815\ubcf4\"\"\"\n        return f\"{self.available_copies}/{self.total_copies} \uad8c \ub300\ucd9c \uac00\ub2a5\"\n\nclass Member:\n    \"\"\"\ub3c4\uc11c\uad00 \ud68c\uc6d0 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, member_id, name, email, phone):\n        self.member_id = member_id\n        self.name = name\n        self.email = email\n        self.phone = phone\n        self.borrowed_books = []  # \ud604\uc7ac \ub300\ucd9c \uc911\uc778 \ub3c4\uc11c \ubaa9\ub85d\n        self.borrowing_history = []  # \ub300\ucd9c \uc774\ub825\n        self.join_date = datetime.now()\n        self.is_active = True\n\n    def __str__(self):\n        return f\"\ud68c\uc6d0 {self.name} (ID: {self.member_id})\"\n\n    def __repr__(self):\n        return f\"Member('{self.member_id}', '{self.name}')\"\n\n    def get_borrowed_count(self):\n        \"\"\"\ud604\uc7ac \ub300\ucd9c \uc911\uc778 \ub3c4\uc11c \uc218\"\"\"\n        return len(self.borrowed_books)\n\n    def can_borrow_more(self, max_books=5):\n        \"\"\"\ucd94\uac00 \ub300\ucd9c \uac00\ub2a5 \uc5ec\ubd80\"\"\"\n        return self.is_active and self.get_borrowed_count() &lt; max_books\n\n    def add_borrowed_book(self, book_info):\n        \"\"\"\ub300\ucd9c \ub3c4\uc11c \ucd94\uac00\"\"\"\n        self.borrowed_books.append(book_info)\n\n    def remove_borrowed_book(self, isbn):\n        \"\"\"\ubc18\ub0a9 \ub3c4\uc11c \uc81c\uac70\"\"\"\n        self.borrowed_books = [book for book in self.borrowed_books if book['isbn'] != isbn]\n\n    def get_member_info(self):\n        \"\"\"\ud68c\uc6d0 \uc815\ubcf4 \uc870\ud68c\"\"\"\n        status = \"\ud65c\uc131\" if self.is_active else \"\ube44\ud65c\uc131\"\n        return f\"\"\"\n=== \ud68c\uc6d0 \uc815\ubcf4 ===\n\uc774\ub984: {self.name}\n\ud68c\uc6d0\ubc88\ud638: {self.member_id}\n\uc774\uba54\uc77c: {self.email}\n\uc804\ud654\ubc88\ud638: {self.phone}\n\uac00\uc785\uc77c: {self.join_date.strftime('%Y-%m-%d')}\n\uc0c1\ud0dc: {status}\n\ud604\uc7ac \ub300\ucd9c: {self.get_borrowed_count()}\uad8c\n        \"\"\".strip()\n\nclass Library:\n    \"\"\"\ub3c4\uc11c\uad00 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, name=\"Python \ub3c4\uc11c\uad00\"):\n        self.name = name\n        self.books = {}  # ISBN\uc744 \ud0a4\ub85c \ud558\ub294 \ub3c4\uc11c \ub515\uc154\ub108\ub9ac\n        self.members = {}  # \ud68c\uc6d0\ubc88\ud638\ub97c \ud0a4\ub85c \ud558\ub294 \ud68c\uc6d0 \ub515\uc154\ub108\ub9ac\n        self.loan_period_days = 14  # \ub300\ucd9c \uae30\uac04 (\uc77c)\n        self.max_books_per_member = 5  # \ud68c\uc6d0\ub2f9 \ucd5c\ub300 \ub300\ucd9c \uad8c\uc218\n        self.next_member_id = 1001\n\n    def add_book(self, isbn, title, author, publisher, year, copies=1):\n        \"\"\"\ub3c4\uc11c \ucd94\uac00\"\"\"\n        if isbn in self.books:\n            # \uae30\uc874 \ub3c4\uc11c\uc758 \uc0ac\ubcf8 \uc218 \uc99d\uac00\n            self.books[isbn].total_copies += copies\n            self.books[isbn].available_copies += copies\n            return f\"\ub3c4\uc11c \u300a{title}\u300b\uc758 \uc0ac\ubcf8 {copies}\uad8c\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        else:\n            # \uc0c8 \ub3c4\uc11c \ucd94\uac00\n            book = Book(isbn, title, author, publisher, year, copies)\n            self.books[isbn] = book\n            return f\"\uc0c8 \ub3c4\uc11c \u300a{title}\u300b\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n\n    def register_member(self, name, email, phone):\n        \"\"\"\ud68c\uc6d0 \ub4f1\ub85d\"\"\"\n        member_id = f\"M{self.next_member_id:04d}\"\n        member = Member(member_id, name, email, phone)\n        self.members[member_id] = member\n        self.next_member_id += 1\n        return member_id, f\"\ud68c\uc6d0 {name}\ub2d8\uc774 \ub4f1\ub85d\ub418\uc5c8\uc2b5\ub2c8\ub2e4. (\ud68c\uc6d0\ubc88\ud638: {member_id})\"\n\n    def search_books(self, keyword):\n        \"\"\"\ub3c4\uc11c \uac80\uc0c9 (\uc81c\ubaa9, \uc800\uc790, \ucd9c\ud310\uc0ac\uc5d0\uc11c \uac80\uc0c9)\"\"\"\n        results = []\n        keyword_lower = keyword.lower()\n\n        for book in self.books.values():\n            if (keyword_lower in book.title.lower() or \n                keyword_lower in book.author.lower() or \n                keyword_lower in book.publisher.lower()):\n                results.append(book)\n\n        return results\n\n    def borrow_book(self, member_id, isbn):\n        \"\"\"\ub3c4\uc11c \ub300\ucd9c\"\"\"\n        # \ud68c\uc6d0 \ud655\uc778\n        if member_id not in self.members:\n            return False, \"\ub4f1\ub85d\ub418\uc9c0 \uc54a\uc740 \ud68c\uc6d0\uc785\ub2c8\ub2e4.\"\n\n        member = self.members[member_id]\n        if not member.is_active:\n            return False, \"\ube44\ud65c\uc131 \ud68c\uc6d0\uc740 \ub300\ucd9c\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\"\n\n        # \ub300\ucd9c \uad8c\uc218 \ud655\uc778\n        if not member.can_borrow_more(self.max_books_per_member):\n            return False, f\"\ucd5c\ub300 \ub300\ucd9c \uad8c\uc218({self.max_books_per_member}\uad8c)\ub97c \ucd08\uacfc\ud588\uc2b5\ub2c8\ub2e4.\"\n\n        # \ub3c4\uc11c \ud655\uc778\n        if isbn not in self.books:\n            return False, \"\uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \ub3c4\uc11c\uc785\ub2c8\ub2e4.\"\n\n        book = self.books[isbn]\n        if not book.is_available():\n            return False, \"\ud604\uc7ac \ub300\ucd9c \uac00\ub2a5\ud55c \uc0ac\ubcf8\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\"\n\n        # \ub300\ucd9c \ucc98\ub9ac\n        if book.borrow(member_id):\n            due_date = datetime.now() + timedelta(days=self.loan_period_days)\n\n            # \ud68c\uc6d0\uc758 \ub300\ucd9c \ubaa9\ub85d\uc5d0 \ucd94\uac00\n            loan_info = {\n                'isbn': isbn,\n                'title': book.title,\n                'author': book.author,\n                'borrow_date': datetime.now(),\n                'due_date': due_date\n            }\n            member.add_borrowed_book(loan_info)\n            member.borrowing_history.append(loan_info.copy())\n\n            return True, f\"\u300a{book.title}\u300b\uc744 \ub300\ucd9c\ud588\uc2b5\ub2c8\ub2e4. \ubc18\ub0a9\uc77c: {due_date.strftime('%Y-%m-%d')}\"\n\n        return False, \"\ub300\ucd9c \ucc98\ub9ac \uc911 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4.\"\n\n    def return_book(self, member_id, isbn):\n        \"\"\"\ub3c4\uc11c \ubc18\ub0a9\"\"\"\n        # \ud68c\uc6d0 \ud655\uc778\n        if member_id not in self.members:\n            return False, \"\ub4f1\ub85d\ub418\uc9c0 \uc54a\uc740 \ud68c\uc6d0\uc785\ub2c8\ub2e4.\"\n\n        member = self.members[member_id]\n\n        # \ub3c4\uc11c \ud655\uc778\n        if isbn not in self.books:\n            return False, \"\uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \ub3c4\uc11c\uc785\ub2c8\ub2e4.\"\n\n        book = self.books[isbn]\n\n        # \ub300\ucd9c \uae30\ub85d \ud655\uc778\n        borrowed_book = None\n        for book_info in member.borrowed_books:\n            if book_info['isbn'] == isbn:\n                borrowed_book = book_info\n                break\n\n        if not borrowed_book:\n            return False, \"\ud574\ub2f9 \ub3c4\uc11c\ub97c \ub300\ucd9c\ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.\"\n\n        # \ubc18\ub0a9 \ucc98\ub9ac\n        if book.return_book(member_id):\n            member.remove_borrowed_book(isbn)\n\n            # \uc5f0\uccb4 \ud655\uc778\n            days_overdue = (datetime.now() - borrowed_book['due_date']).days\n            if days_overdue &gt; 0:\n                return True, f\"\u300a{book.title}\u300b\uc744 \ubc18\ub0a9\ud588\uc2b5\ub2c8\ub2e4. (\uc5f0\uccb4: {days_overdue}\uc77c)\"\n            else:\n                return True, f\"\u300a{book.title}\u300b\uc744 \ubc18\ub0a9\ud588\uc2b5\ub2c8\ub2e4.\"\n\n        return False, \"\ubc18\ub0a9 \ucc98\ub9ac \uc911 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4.\"\n\n    def get_member_borrowed_books(self, member_id):\n        \"\"\"\ud68c\uc6d0\uc758 \ub300\ucd9c \ud604\ud669 \uc870\ud68c\"\"\"\n        if member_id not in self.members:\n            return None\n\n        member = self.members[member_id]\n        if not member.borrowed_books:\n            return f\"{member.name}\ub2d8\uc740 \ud604\uc7ac \ub300\ucd9c \uc911\uc778 \ub3c4\uc11c\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\"\n\n        result = f\"=== {member.name}\ub2d8\uc758 \ub300\ucd9c \ud604\ud669 ===\\n\"\n        for i, book_info in enumerate(member.borrowed_books, 1):\n            due_date = book_info['due_date']\n            days_until_due = (due_date - datetime.now()).days\n\n            if days_until_due &lt; 0:\n                status = f\"\uc5f0\uccb4 {abs(days_until_due)}\uc77c\"\n            elif days_until_due == 0:\n                status = \"\uc624\ub298 \ubc18\ub0a9\"\n            else:\n                status = f\"{days_until_due}\uc77c \ub0a8\uc74c\"\n\n            result += f\"{i}. \u300a{book_info['title']}\u300b - {book_info['author']}\\n\"\n            result += f\"   \ub300\ucd9c\uc77c: {book_info['borrow_date'].strftime('%Y-%m-%d')}\\n\"\n            result += f\"   \ubc18\ub0a9\uc77c: {due_date.strftime('%Y-%m-%d')} ({status})\\n\"\n\n        return result.strip()\n\n    def get_library_stats(self):\n        \"\"\"\ub3c4\uc11c\uad00 \ud1b5\uacc4\"\"\"\n        total_books = sum(book.total_copies for book in self.books.values())\n        available_books = sum(book.available_copies for book in self.books.values())\n        borrowed_books = total_books - available_books\n\n        active_members = sum(1 for member in self.members.values() if member.is_active)\n\n        return f\"\"\"\n=== {self.name} \ud1b5\uacc4 ===\n\ub4f1\ub85d \ub3c4\uc11c: {len(self.books)}\uc885 {total_books}\uad8c\n\ub300\ucd9c \uac00\ub2a5: {available_books}\uad8c\n\ub300\ucd9c \uc911: {borrowed_books}\uad8c\n\ub4f1\ub85d \ud68c\uc6d0: {len(self.members)}\uba85 (\ud65c\uc131: {active_members}\uba85)\n        \"\"\".strip()\n\n# \ub3c4\uc11c\uad00 \uc2dc\uc2a4\ud15c \uc0ac\uc6a9 \uc608\uc81c\nprint(\"1. \ub3c4\uc11c\uad00 \uc2dc\uc2a4\ud15c \ucd08\uae30\ud654:\")\nlibrary = Library(\"\uc911\uc559 \ub3c4\uc11c\uad00\")\n\nprint(\"\\n2. \ub3c4\uc11c \ucd94\uac00:\")\nprint(library.add_book(\"978-89-123-4567\", \"\ud30c\uc774\uc36c \ud504\ub85c\uadf8\ub798\ubc0d\", \"\uae40\ud30c\uc774\", \"\ud504\ub85c\uadf8\ub7a8 \ucd9c\ud310\uc0ac\", 2023, 3))\nprint(library.add_book(\"978-89-123-4568\", \"\ub370\uc774\ud130 \uad6c\uc870\uc640 \uc54c\uace0\ub9ac\uc998\", \"\uc774\uc54c\uace0\", \"\ucef4\ud4e8\ud130 \ucd9c\ud310\uc0ac\", 2022, 2))\nprint(library.add_book(\"978-89-123-4569\", \"\uc6f9 \uac1c\ubc1c \uc785\ubb38\", \"\ubc15\uc6f9\", \"\uc6f9 \ucd9c\ud310\uc0ac\", 2023, 2))\n\nprint(\"\\n3. \ud68c\uc6d0 \ub4f1\ub85d:\")\nmember1_id, msg1 = library.register_member(\"\ud64d\uae38\ub3d9\", \"hong@email.com\", \"010-1234-5678\")\nprint(msg1)\nmember2_id, msg2 = library.register_member(\"\uae40\uc601\ud76c\", \"kim@email.com\", \"010-2345-6789\")\nprint(msg2)\n\nprint(\"\\n4. \ub3c4\uc11c \uac80\uc0c9:\")\nsearch_results = library.search_books(\"\ud30c\uc774\uc36c\")\nprint(f\"'\ud30c\uc774\uc36c' \uac80\uc0c9 \uacb0\uacfc: {len(search_results)}\uad8c\")\nfor book in search_results:\n    print(f\"  - {book} [{book.get_availability_info()}]\")\n\nprint(\"\\n5. \ub3c4\uc11c \ub300\ucd9c:\")\nsuccess, message = library.borrow_book(member1_id, \"978-89-123-4567\")\nprint(f\"\ub300\ucd9c \uacb0\uacfc: {message}\")\n\nsuccess, message = library.borrow_book(member2_id, \"978-89-123-4567\")\nprint(f\"\ub300\ucd9c \uacb0\uacfc: {message}\")\n\nsuccess, message = library.borrow_book(member1_id, \"978-89-123-4568\")\nprint(f\"\ub300\ucd9c \uacb0\uacfc: {message}\")\n\nprint(\"\\n6. \ub300\ucd9c \ud604\ud669 \uc870\ud68c:\")\nborrowed_info = library.get_member_borrowed_books(member1_id)\nprint(borrowed_info)\n\nprint(\"\\n7. \ub3c4\uc11c\uad00 \ud1b5\uacc4:\")\nprint(library.get_library_stats())\n\nprint(\"\\n8. \ub3c4\uc11c \ubc18\ub0a9:\")\nsuccess, message = library.return_book(member1_id, \"978-89-123-4567\")\nprint(f\"\ubc18\ub0a9 \uacb0\uacfc: {message}\")\n\nprint(\"\\n9. \ubc18\ub0a9 \ud6c4 \ud1b5\uacc4:\")\nprint(library.get_library_stats())\n</code></pre>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#6","title":"6. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter04_oop_basics/#1_1","title":"\uc5f0\uc2b5 1: \uac8c\uc784 \uce90\ub9ad\ud130 \ud074\ub798\uc2a4","text":"<p>RPG \uac8c\uc784\uc758 \uce90\ub9ad\ud130\ub97c \ub098\ud0c0\ub0b4\ub294 \ud074\ub798\uc2a4\ub97c \uc124\uacc4\ud558\uc138\uc694. \uccb4\ub825, \ub9c8\ub098, \ub808\ubca8, \uacbd\ud5d8\uce58 \ub4f1\uc758 \uc18d\uc131\uacfc \uacf5\uaca9, \ubc29\uc5b4, \ub808\ubca8\uc5c5 \ub4f1\uc758 \uba54\uc11c\ub4dc\ub97c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#2_1","title":"\uc5f0\uc2b5 2: \uc628\ub77c\uc778 \uc1fc\ud551\ubab0 \uc2dc\uc2a4\ud15c","text":"<p>\uc0c1\ud488, \uc7a5\ubc14\uad6c\ub2c8, \uc8fc\ubb38 \ud074\ub798\uc2a4\ub97c \uc124\uacc4\ud558\uc5ec \uac04\ub2e8\ud55c \uc628\ub77c\uc778 \uc1fc\ud551\ubab0 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#3_1","title":"\uc5f0\uc2b5 3: \ud559\uc0dd \uc131\uc801 \uad00\ub9ac \uc2dc\uc2a4\ud15c","text":"<p>\ud559\uc0dd, \uacfc\ubaa9, \uc131\uc801 \ud074\ub798\uc2a4\ub97c \uc124\uacc4\ud558\uc5ec \ud559\uad50\uc758 \uc131\uc801 \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#4","title":"\uc5f0\uc2b5 4: \uc740\ud589 \uacc4\uc88c \uc2dc\uc2a4\ud15c \ud655\uc7a5","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ub9cc\ub4e0 \uc740\ud589 \uacc4\uc88c \uc2dc\uc2a4\ud15c\uc744 \ud655\uc7a5\ud558\uc5ec \uc815\uae30\uc608\uae08, \ub300\ucd9c \ub4f1\uc758 \uae30\ub2a5\uc744 \ucd94\uac00\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\uac1d\uccb4\uc9c0\ud5a5 \uac1c\ub150: \ud074\ub798\uc2a4\uc640 \uac1d\uccb4\uc758 \uad00\uacc4, OOP\uc758 \uc7a5\uc810</li> <li>\ud074\ub798\uc2a4 \uc815\uc758: \uae30\ubcf8 \ubb38\ubc95, \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790</li> <li>\uc18d\uc131\uacfc \uba54\uc11c\ub4dc: \uc778\uc2a4\ud134\uc2a4/\ud074\ub798\uc2a4 \ubcc0\uc218, \ub2e4\uc591\ud55c \uba54\uc11c\ub4dc \ud0c0\uc785</li> <li>\uc811\uadfc \uc81c\uc5b4: public, protected, private \uac1c\ub150\uacfc \ud504\ub85c\ud37c\ud2f0</li> <li>\uc2e4\uc6a9\uc801 \uc124\uacc4: \uc2e4\uc81c \ub3c4\uba54\uc778\uc744 \uc798 \ubaa8\ub378\ub9c1\ud558\ub294 \ubc29\ubc95</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \uc0c1\uc18d\uacfc \ub2e4\ud615\uc131\uc744 \ud559\uc2b5\ud558\uc5ec \ub354\uc6b1 \uac15\ub825\ud558\uace0 \uc720\uc5f0\ud55c \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6b0\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter04_oop_basics/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ud074\ub798\uc2a4\ub294 \ub370\uc774\ud130\uc640 \uae30\ub2a5\uc744 \ud568\uaed8 \ubb36\uc5b4\uc11c \uad00\ub9ac\ud558\ub294 \uc124\uacc4\ub3c4\uc785\ub2c8\ub2e4</li> <li>\uac1d\uccb4\ub294 \ud074\ub798\uc2a4\ub85c\ubd80\ud130 \uc0dd\uc131\ub41c \uc2e4\uc81c \uc778\uc2a4\ud134\uc2a4\uc785\ub2c8\ub2e4</li> <li>\ucea1\uc290\ud654\ub97c \ud1b5\ud574 \ub370\uc774\ud130\ub97c \ubcf4\ud638\ud558\uace0 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uba85\ud655\ud788 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\ud504\ub85c\ud37c\ud2f0\ub97c \uc0ac\uc6a9\ud558\uba74 \ub370\uc774\ud130 \uac80\uc99d\uacfc \uacc4\uc0b0\uc744 \ud22c\uba85\ud558\uac8c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\uc2e4\uc6a9\uc801\uc778 \ud074\ub798\uc2a4 \uc124\uacc4 \uc2dc \uc2e4\uc81c \ub3c4\uba54\uc778\uc744 \uc798 \ubaa8\ub378\ub9c1\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4 </li> </ul>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/","title":"Chapter 5: \uc0c1\uc18d\uacfc \ub2e4\ud615\uc131 (Inheritance and Polymorphism)","text":""},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \uc0c1\uc18d\uc758 \uac1c\ub150\uacfc \ud544\uc694\uc131 \uc774\ud574\ud558\uae30 - \ub2e8\uc77c \uc0c1\uc18d\uacfc \ub2e4\uc911 \uc0c1\uc18d \uad6c\ud604\ud558\uae30 - super() \ud568\uc218\ub97c \ud65c\uc6a9\ud55c \ubd80\ubaa8 \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc \ud638\ucd9c\ud558\uae30 - \uba54\uc11c\ub4dc \uc624\ubc84\ub77c\uc774\ub529\uc744 \ud1b5\ud55c \uae30\ub2a5 \ud655\uc7a5\ud558\uae30 - \ucd94\uc0c1 \ud074\ub798\uc2a4\uc640 \uc778\ud130\ud398\uc774\uc2a4 \uac1c\ub150 \uc774\ud574\ud558\uae30 - \ub2e4\ud615\uc131\uc744 \ud65c\uc6a9\ud55c \uc720\uc5f0\ud55c \ud504\ub85c\uadf8\ub798\ubc0d\ud558\uae30 - MRO(Method Resolution Order) \uc774\ud574\ud558\uae30</p>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#1","title":"1. \uc0c1\uc18d\uc758 \uae30\ubcf8 \uac1c\ub150","text":""},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#11","title":"1.1 \uc0c1\uc18d\uc774\ub780?","text":"<p>\uc0c1\uc18d(Inheritance)\uc740 \uae30\uc874 \ud074\ub798\uc2a4\uc758 \uc18d\uc131\uacfc \uba54\uc11c\ub4dc\ub97c \uc0c8\ub85c\uc6b4 \ud074\ub798\uc2a4\uac00 \ubb3c\ub824\ubc1b\uc544 \uc0ac\uc6a9\ud558\ub294 \uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \ud575\uc2ec \uac1c\ub150\uc785\ub2c8\ub2e4. \ucf54\ub4dc \uc7ac\uc0ac\uc6a9\uc131\uc744 \ub192\uc774\uace0 \uacc4\uce35\uc801 \uad6c\uc870\ub97c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>print(\"=== \uc0c1\uc18d\uc758 \uae30\ubcf8 \uac1c\ub150 ===\")\n\n# \ubd80\ubaa8 \ud074\ub798\uc2a4 (\uae30\ubcf8 \ud074\ub798\uc2a4, \uc288\ud37c \ud074\ub798\uc2a4)\nclass Animal:\n    \"\"\"\ub3d9\ubb3c \uae30\ubcf8 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n        self.is_alive = True\n\n    def breathe(self):\n        \"\"\"\ud638\ud761\ud558\uae30\"\"\"\n        return f\"{self.name}\uc774(\uac00) \uc228\uc744 \uc27d\ub2c8\ub2e4.\"\n\n    def eat(self, food):\n        \"\"\"\uba39\uae30\"\"\"\n        return f\"{self.name}\uc774(\uac00) {food}\uc744(\ub97c) \uba39\uc2b5\ub2c8\ub2e4.\"\n\n    def sleep(self):\n        \"\"\"\uc7a0\uc790\uae30\"\"\"\n        return f\"{self.name}\uc774(\uac00) \uc7a0\uc744 \uc7a1\ub2c8\ub2e4.\"\n\n    def make_sound(self):\n        \"\"\"\uc18c\ub9ac\ub0b4\uae30 - \uae30\ubcf8 \uad6c\ud604\"\"\"\n        return f\"{self.name}\uc774(\uac00) \uc18c\ub9ac\ub97c \ub0c5\ub2c8\ub2e4.\"\n\n    def get_info(self):\n        \"\"\"\ub3d9\ubb3c \uc815\ubcf4\"\"\"\n        status = \"\uc0b4\uc544\uc788\uc74c\" if self.is_alive else \"\uc8fd\uc74c\"\n        return f\"\uc774\ub984: {self.name}, \uc885: {self.species}, \uc0c1\ud0dc: {status}\"\n\n# \uc790\uc2dd \ud074\ub798\uc2a4 (\ud30c\uc0dd \ud074\ub798\uc2a4, \uc11c\ube0c \ud074\ub798\uc2a4)\nclass Dog(Animal):\n    \"\"\"\uac1c \ud074\ub798\uc2a4 - Animal\uc744 \uc0c1\uc18d\ubc1b\uc74c\"\"\"\n\n    def __init__(self, name, breed):\n        # \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790 \ud638\ucd9c\n        super().__init__(name, \"\uac1c\")\n        self.breed = breed  # \ucd94\uac00 \uc18d\uc131\n        self.is_trained = False\n\n    def make_sound(self):\n        \"\"\"\uc18c\ub9ac\ub0b4\uae30 - \uba54\uc11c\ub4dc \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        return f\"{self.name}\uc774(\uac00) \uba4d\uba4d \uc9d6\uc2b5\ub2c8\ub2e4.\"\n\n    def wag_tail(self):\n        \"\"\"\uaf2c\ub9ac \ud754\ub4e4\uae30 - \uc0c8\ub85c\uc6b4 \uba54\uc11c\ub4dc\"\"\"\n        return f\"{self.name}\uc774(\uac00) \uaf2c\ub9ac\ub97c \ud754\ub4ed\ub2c8\ub2e4.\"\n\n    def fetch(self, item=\"\uacf5\"):\n        \"\"\"\ubb3c\uc5b4\uc624\uae30\"\"\"\n        return f\"{self.name}\uc774(\uac00) {item}\uc744(\ub97c) \ubb3c\uc5b4\uc635\ub2c8\ub2e4.\"\n\n    def train(self, command):\n        \"\"\"\ud6c8\ub828\ud558\uae30\"\"\"\n        self.is_trained = True\n        return f\"{self.name}\uc774(\uac00) '{command}' \uba85\ub839\uc744 \ubc30\uc6e0\uc2b5\ub2c8\ub2e4.\"\n\nclass Cat(Animal):\n    \"\"\"\uace0\uc591\uc774 \ud074\ub798\uc2a4 - Animal\uc744 \uc0c1\uc18d\ubc1b\uc74c\"\"\"\n\n    def __init__(self, name, color):\n        super().__init__(name, \"\uace0\uc591\uc774\")\n        self.color = color\n        self.lives_remaining = 9  # \uace0\uc591\uc774\ub294 9\uac1c\uc758 \ubaa9\uc228\n\n    def make_sound(self):\n        \"\"\"\uc18c\ub9ac\ub0b4\uae30 - \uba54\uc11c\ub4dc \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        return f\"{self.name}\uc774(\uac00) \uc57c\uc639 \uc6c1\ub2c8\ub2e4.\"\n\n    def purr(self):\n        \"\"\"\uadf8\ub974\ub801\uac70\ub9ac\uae30 - \uc0c8\ub85c\uc6b4 \uba54\uc11c\ub4dc\"\"\"\n        return f\"{self.name}\uc774(\uac00) \uadf8\ub974\ub801\uac70\ub9bd\ub2c8\ub2e4.\"\n\n    def climb_tree(self):\n        \"\"\"\ub098\ubb34 \uc62c\ub77c\uac00\uae30\"\"\"\n        return f\"{self.name}\uc774(\uac00) \ub098\ubb34\ub97c \uc62c\ub77c\uac11\ub2c8\ub2e4.\"\n\n    def lose_life(self):\n        \"\"\"\ubaa9\uc228 \uc783\uae30\"\"\"\n        if self.lives_remaining &gt; 0:\n            self.lives_remaining -= 1\n            if self.lives_remaining == 0:\n                self.is_alive = False\n            return f\"{self.name}\uc758 \ub0a8\uc740 \ubaa9\uc228: {self.lives_remaining}\uac1c\"\n        return f\"{self.name}\uc740(\ub294) \uc774\ubbf8 \uc8fd\uc5c8\uc2b5\ub2c8\ub2e4.\"\n\n# \uc0c1\uc18d \uc0ac\uc6a9 \uc608\uc81c\nprint(\"1. \uae30\ubcf8 \ub3d9\ubb3c:\")\nanimal = Animal(\"\ub3d9\ubb3c\", \"\ud3ec\uc720\ub958\")\nprint(animal.get_info())\nprint(animal.make_sound())\nprint(animal.breathe())\n\nprint(\"\\n2. \uac1c:\")\ndog = Dog(\"\uba4d\uba4d\uc774\", \"\uace8\ub4e0 \ub9ac\ud2b8\ub9ac\ubc84\")\nprint(dog.get_info())\nprint(dog.make_sound())  # \uc624\ubc84\ub77c\uc774\ub529\ub41c \uba54\uc11c\ub4dc\nprint(dog.breathe())     # \uc0c1\uc18d\ubc1b\uc740 \uba54\uc11c\ub4dc\nprint(dog.wag_tail())    # \uc0c8\ub85c\uc6b4 \uba54\uc11c\ub4dc\nprint(dog.fetch(\"\ud504\ub9ac\uc2a4\ube44\"))\nprint(dog.train(\"\uc549\uc544\"))\n\nprint(\"\\n3. \uace0\uc591\uc774:\")\ncat = Cat(\"\uc57c\uc639\uc774\", \"\ud770\uc0c9\")\nprint(cat.get_info())\nprint(cat.make_sound())  # \uc624\ubc84\ub77c\uc774\ub529\ub41c \uba54\uc11c\ub4dc\nprint(cat.purr())        # \uc0c8\ub85c\uc6b4 \uba54\uc11c\ub4dc\nprint(cat.climb_tree())\nprint(cat.lose_life())\n\nprint(\"\\n4. \uc0c1\uc18d \uad00\uacc4 \ud655\uc778:\")\nprint(f\"dog\ub294 Dog \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4: {isinstance(dog, Dog)}\")\nprint(f\"dog\ub294 Animal \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4: {isinstance(dog, Animal)}\")\nprint(f\"Dog\ub294 Animal\uc758 \uc11c\ube0c\ud074\ub798\uc2a4: {issubclass(Dog, Animal)}\")\nprint(f\"Animal\uc740 Dog\uc758 \uc11c\ube0c\ud074\ub798\uc2a4: {issubclass(Animal, Dog)}\")\n\nprint(\"\\n5. \uc0c1\uc18d\ub41c \uc18d\uc131\uacfc \uba54\uc11c\ub4dc:\")\nprint(f\"Dog \ud074\ub798\uc2a4\uc758 MRO: {Dog.__mro__}\")\nprint(f\"dog \uac1d\uccb4\uac00 \uac00\uc9c4 \uc18d\uc131\ub4e4: {[attr for attr in dir(dog) if not attr.startswith('_')]}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#12-super","title":"1.2 super() \ud568\uc218 \ud65c\uc6a9","text":"<pre><code>print(\"\\n=== super() \ud568\uc218 \ud65c\uc6a9 ===\")\n\nclass Vehicle:\n    \"\"\"\uad50\ud1b5\uc218\ub2e8 \uae30\ubcf8 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, brand, model, year):\n        self.brand = brand\n        self.model = model\n        self.year = year\n        self.is_running = False\n        self.fuel_level = 100\n        print(f\"Vehicle \uc0dd\uc131\uc790 \ud638\ucd9c: {brand} {model}\")\n\n    def start(self):\n        \"\"\"\uc2dc\ub3d9 \uac78\uae30\"\"\"\n        if not self.is_running:\n            self.is_running = True\n            return f\"{self.brand} {self.model} \uc2dc\ub3d9\uc774 \uac78\ub838\uc2b5\ub2c8\ub2e4.\"\n        return \"\uc774\ubbf8 \uc2dc\ub3d9\uc774 \uac78\ub824\uc788\uc2b5\ub2c8\ub2e4.\"\n\n    def stop(self):\n        \"\"\"\uc2dc\ub3d9 \ub044\uae30\"\"\"\n        if self.is_running:\n            self.is_running = False\n            return f\"{self.brand} {self.model} \uc2dc\ub3d9\uc774 \uaebc\uc84c\uc2b5\ub2c8\ub2e4.\"\n        return \"\uc774\ubbf8 \uc2dc\ub3d9\uc774 \uaebc\uc838\uc788\uc2b5\ub2c8\ub2e4.\"\n\n    def get_info(self):\n        \"\"\"\ucc28\ub7c9 \uc815\ubcf4\"\"\"\n        status = \"\uc2dc\ub3d9\ub428\" if self.is_running else \"\uc815\uc9c0\ub428\"\n        return f\"{self.year}\ub144 {self.brand} {self.model} - \uc0c1\ud0dc: {status}, \uc5f0\ub8cc: {self.fuel_level}%\"\n\nclass Car(Vehicle):\n    \"\"\"\uc790\ub3d9\ucc28 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, brand, model, year, num_doors):\n        # \ubd80\ubaa8 \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 \ud638\ucd9c\n        super().__init__(brand, model, year)\n        self.num_doors = num_doors\n        self.trunk_open = False\n        print(f\"Car \uc0dd\uc131\uc790 \ud638\ucd9c: {num_doors}\ub3c4\uc5b4\")\n\n    def open_trunk(self):\n        \"\"\"\ud2b8\ub801\ud06c \uc5f4\uae30\"\"\"\n        if not self.trunk_open:\n            self.trunk_open = True\n            return \"\ud2b8\ub801\ud06c\uac00 \uc5f4\ub838\uc2b5\ub2c8\ub2e4.\"\n        return \"\ud2b8\ub801\ud06c\uac00 \uc774\ubbf8 \uc5f4\ub824\uc788\uc2b5\ub2c8\ub2e4.\"\n\n    def start(self):\n        \"\"\"\uc2dc\ub3d9 \uac78\uae30 - \uae30\ub2a5 \ud655\uc7a5\"\"\"\n        # \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 start() \uba54\uc11c\ub4dc \ud638\ucd9c\n        result = super().start()\n        if self.is_running:\n            return result + \" \uc790\ub3d9\ucc28 \uc2dc\uc2a4\ud15c\uc774 \ud65c\uc131\ud654\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        return result\n\n    def get_info(self):\n        \"\"\"\ucc28\ub7c9 \uc815\ubcf4 - \uae30\ub2a5 \ud655\uc7a5\"\"\"\n        # \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uc815\ubcf4\uc5d0 \ucd94\uac00 \uc815\ubcf4 \ud3ec\ud568\n        base_info = super().get_info()\n        trunk_status = \"\uc5f4\ub9bc\" if self.trunk_open else \"\ub2eb\ud798\"\n        return f\"{base_info}, \ub3c4\uc5b4: {self.num_doors}\uac1c, \ud2b8\ub801\ud06c: {trunk_status}\"\n\nclass ElectricCar(Car):\n    \"\"\"\uc804\uae30 \uc790\ub3d9\ucc28 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, brand, model, year, num_doors, battery_capacity):\n        # \ubd80\ubaa8 \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 \ud638\ucd9c\n        super().__init__(brand, model, year, num_doors)\n        self.battery_capacity = battery_capacity\n        self.battery_level = 100\n        print(f\"ElectricCar \uc0dd\uc131\uc790 \ud638\ucd9c: \ubc30\ud130\ub9ac {battery_capacity}kWh\")\n\n    def charge(self, amount=100):\n        \"\"\"\ubc30\ud130\ub9ac \ucda9\uc804\"\"\"\n        old_level = self.battery_level\n        self.battery_level = min(100, self.battery_level + amount)\n        charged = self.battery_level - old_level\n        return f\"\ubc30\ud130\ub9ac {charged}% \ucda9\uc804\ub428. \ud604\uc7ac \ubc30\ud130\ub9ac: {self.battery_level}%\"\n\n    def start(self):\n        \"\"\"\uc2dc\ub3d9 \uac78\uae30 - \uc804\uae30\ucc28 \ud2b9\ud654\"\"\"\n        if self.battery_level &lt;= 0:\n            return \"\ubc30\ud130\ub9ac\uac00 \ubc29\uc804\ub418\uc5b4 \uc2dc\ub3d9\uc744 \uac78 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\"\n\n        # \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 start() \uba54\uc11c\ub4dc \ud638\ucd9c\n        result = super().start()\n        if self.is_running:\n            return result + \" \uc804\uae30 \ubaa8\ud130\uac00 \uc900\ube44\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        return result\n\n    def get_info(self):\n        \"\"\"\ucc28\ub7c9 \uc815\ubcf4 - \uc804\uae30\ucc28 \uc815\ubcf4 \ud3ec\ud568\"\"\"\n        # \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uc815\ubcf4 \uac00\uc838\uc624\uae30\n        base_info = super().get_info()\n        # \uc5f0\ub8cc \ub808\ubca8\uc744 \ubc30\ud130\ub9ac \ub808\ubca8\ub85c \uad50\uccb4\n        base_info = base_info.replace(f\"\uc5f0\ub8cc: {self.fuel_level}%\", f\"\ubc30\ud130\ub9ac: {self.battery_level}%\")\n        return f\"{base_info}, \ubc30\ud130\ub9ac \uc6a9\ub7c9: {self.battery_capacity}kWh\"\n\n# super() \ud568\uc218 \uc0ac\uc6a9 \uc608\uc81c\nprint(\"1. \uc77c\ubc18 \uc790\ub3d9\ucc28:\")\ncar = Car(\"\ud604\ub300\", \"\uc18c\ub098\ud0c0\", 2023, 4)\nprint(car.get_info())\nprint(car.start())\nprint(car.open_trunk())\nprint(car.get_info())\n\nprint(\"\\n2. \uc804\uae30 \uc790\ub3d9\ucc28:\")\necar = ElectricCar(\"\ud14c\uc2ac\ub77c\", \"Model 3\", 2023, 4, 75)\nprint(ecar.get_info())\nprint(ecar.start())\nprint(ecar.charge(20))\nprint(ecar.get_info())\n\nprint(\"\\n3. \uc0dd\uc131\uc790 \ud638\ucd9c \uc21c\uc11c \ud655\uc778:\")\nprint(\"ElectricCar \uc0dd\uc131 \uc2dc \uc0dd\uc131\uc790 \ud638\ucd9c \uc21c\uc11c:\")\nprint(\"Vehicle -&gt; Car -&gt; ElectricCar\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#2","title":"2. \uba54\uc11c\ub4dc \uc624\ubc84\ub77c\uc774\ub529","text":""},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#21","title":"2.1 \uba54\uc11c\ub4dc \uc624\ubc84\ub77c\uc774\ub529 \uae30\ubcf8","text":"<pre><code>print(\"\\n=== \uba54\uc11c\ub4dc \uc624\ubc84\ub77c\uc774\ub529 ===\")\n\nclass Shape:\n    \"\"\"\ub3c4\ud615 \uae30\ubcf8 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, color=\"black\"):\n        self.color = color\n\n    def area(self):\n        \"\"\"\ub113\uc774 \uacc4\uc0b0 - \uae30\ubcf8 \uad6c\ud604\"\"\"\n        raise NotImplementedError(\"\uc11c\ube0c\ud074\ub798\uc2a4\uc5d0\uc11c \uad6c\ud604\ud574\uc57c \ud569\ub2c8\ub2e4.\")\n\n    def perimeter(self):\n        \"\"\"\ub458\ub808 \uacc4\uc0b0 - \uae30\ubcf8 \uad6c\ud604\"\"\"\n        raise NotImplementedError(\"\uc11c\ube0c\ud074\ub798\uc2a4\uc5d0\uc11c \uad6c\ud604\ud574\uc57c \ud569\ub2c8\ub2e4.\")\n\n    def draw(self):\n        \"\"\"\uadf8\ub9ac\uae30 - \uae30\ubcf8 \uad6c\ud604\"\"\"\n        return f\"{self.color} \uc0c9\uc0c1\uc758 \ub3c4\ud615\uc744 \uadf8\ub9bd\ub2c8\ub2e4.\"\n\n    def get_info(self):\n        \"\"\"\ub3c4\ud615 \uc815\ubcf4\"\"\"\n        return f\"\uc0c9\uc0c1: {self.color}, \ub113\uc774: {self.area():.2f}, \ub458\ub808: {self.perimeter():.2f}\"\n\nclass Rectangle(Shape):\n    \"\"\"\uc9c1\uc0ac\uac01\ud615 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, width, height, color=\"black\"):\n        super().__init__(color)\n        self.width = width\n        self.height = height\n\n    def area(self):\n        \"\"\"\ub113\uc774 \uacc4\uc0b0 - \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        return self.width * self.height\n\n    def perimeter(self):\n        \"\"\"\ub458\ub808 \uacc4\uc0b0 - \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        return 2 * (self.width + self.height)\n\n    def draw(self):\n        \"\"\"\uadf8\ub9ac\uae30 - \uae30\ub2a5 \ud655\uc7a5\"\"\"\n        base_draw = super().draw()\n        return f\"{base_draw} (\uc9c1\uc0ac\uac01\ud615: {self.width}\u00d7{self.height})\"\n\nclass Circle(Shape):\n    \"\"\"\uc6d0 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, radius, color=\"black\"):\n        super().__init__(color)\n        self.radius = radius\n\n    def area(self):\n        \"\"\"\ub113\uc774 \uacc4\uc0b0 - \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        import math\n        return math.pi * self.radius ** 2\n\n    def perimeter(self):\n        \"\"\"\ub458\ub808 \uacc4\uc0b0 - \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        import math\n        return 2 * math.pi * self.radius\n\n    def draw(self):\n        \"\"\"\uadf8\ub9ac\uae30 - \uc644\uc804\ud788 \uc0c8\ub85c\uc6b4 \uad6c\ud604\"\"\"\n        return f\"{self.color} \uc0c9\uc0c1\uc758 \uc6d0\uc744 \uadf8\ub9bd\ub2c8\ub2e4. (\ubc18\uc9c0\ub984: {self.radius})\"\n\nclass Triangle(Shape):\n    \"\"\"\uc0bc\uac01\ud615 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, base, height, side1, side2, color=\"black\"):\n        super().__init__(color)\n        self.base = base\n        self.height = height\n        self.side1 = side1\n        self.side2 = side2\n\n    def area(self):\n        \"\"\"\ub113\uc774 \uacc4\uc0b0 - \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        return 0.5 * self.base * self.height\n\n    def perimeter(self):\n        \"\"\"\ub458\ub808 \uacc4\uc0b0 - \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        return self.base + self.side1 + self.side2\n\n    def draw(self):\n        \"\"\"\uadf8\ub9ac\uae30 - \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        return f\"{self.color} \uc0c9\uc0c1\uc758 \uc0bc\uac01\ud615\uc744 \uadf8\ub9bd\ub2c8\ub2e4. (\ubc11\ubcc0: {self.base}, \ub192\uc774: {self.height})\"\n\n# \uba54\uc11c\ub4dc \uc624\ubc84\ub77c\uc774\ub529 \uc608\uc81c\nprint(\"1. \ub2e4\uc591\ud55c \ub3c4\ud615 \uc0dd\uc131:\")\nshapes = [\n    Rectangle(10, 5, \"\ube68\uac04\uc0c9\"),\n    Circle(3, \"\ud30c\ub780\uc0c9\"),\n    Triangle(8, 6, 7, 9, \"\ucd08\ub85d\uc0c9\")\n]\n\nfor i, shape in enumerate(shapes, 1):\n    print(f\"\\n\ub3c4\ud615 {i}:\")\n    print(f\"  \uc815\ubcf4: {shape.get_info()}\")\n    print(f\"  \uadf8\ub9ac\uae30: {shape.draw()}\")\n\nprint(\"\\n2. \ub3c4\ud615\ubcc4 \ud2b9\uc131:\")\nrect = Rectangle(12, 8)\nprint(f\"\uc9c1\uc0ac\uac01\ud615 - \ub113\uc774: {rect.area()}, \ub458\ub808: {rect.perimeter()}\")\n\ncircle = Circle(5)\nprint(f\"\uc6d0 - \ub113\uc774: {circle.area():.2f}, \ub458\ub808: {circle.perimeter():.2f}\")\n\ntriangle = Triangle(10, 8, 6, 10)\nprint(f\"\uc0bc\uac01\ud615 - \ub113\uc774: {triangle.area()}, \ub458\ub808: {triangle.perimeter()}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#22","title":"2.2 \uace0\uae09 \uc624\ubc84\ub77c\uc774\ub529 \ud328\ud134","text":"<pre><code>print(\"\\n=== \uace0\uae09 \uc624\ubc84\ub77c\uc774\ub529 \ud328\ud134 ===\")\n\nclass Employee:\n    \"\"\"\uc9c1\uc6d0 \uae30\ubcf8 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, name, employee_id, base_salary):\n        self.name = name\n        self.employee_id = employee_id\n        self.base_salary = base_salary\n        self.worked_hours = 0\n\n    def calculate_salary(self):\n        \"\"\"\uae09\uc5ec \uacc4\uc0b0 - \uae30\ubcf8 \uad6c\ud604\"\"\"\n        return self.base_salary\n\n    def work(self, hours):\n        \"\"\"\uadfc\ubb34\ud558\uae30\"\"\"\n        self.worked_hours += hours\n        return f\"{self.name}\uc774(\uac00) {hours}\uc2dc\uac04 \uadfc\ubb34\ud588\uc2b5\ub2c8\ub2e4. (\ucd1d {self.worked_hours}\uc2dc\uac04)\"\n\n    def get_details(self):\n        \"\"\"\uc9c1\uc6d0 \uc138\ubd80 \uc815\ubcf4\"\"\"\n        return f\"\"\"\n=== \uc9c1\uc6d0 \uc815\ubcf4 ===\n\uc774\ub984: {self.name}\n\uc0ac\ubc88: {self.employee_id}\n\uae30\ubcf8\uae09: {self.base_salary:,}\uc6d0\n\uadfc\ubb34\uc2dc\uac04: {self.worked_hours}\uc2dc\uac04\n\uc2e4\uae09\uc5ec: {self.calculate_salary():,}\uc6d0\n        \"\"\".strip()\n\nclass HourlyEmployee(Employee):\n    \"\"\"\uc2dc\uac04\uc81c \uc9c1\uc6d0\"\"\"\n\n    def __init__(self, name, employee_id, hourly_rate):\n        super().__init__(name, employee_id, 0)  # \uae30\ubcf8\uae09 0\n        self.hourly_rate = hourly_rate\n\n    def calculate_salary(self):\n        \"\"\"\uae09\uc5ec \uacc4\uc0b0 - \uc2dc\uac04\uc81c \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        regular_hours = min(self.worked_hours, 40)\n        overtime_hours = max(0, self.worked_hours - 40)\n\n        regular_pay = regular_hours * self.hourly_rate\n        overtime_pay = overtime_hours * self.hourly_rate * 1.5  # \uc57c\uadfc\uc218\ub2f9 1.5\ubc30\n\n        return regular_pay + overtime_pay\n\n    def get_details(self):\n        \"\"\"\uc9c1\uc6d0 \uc138\ubd80 \uc815\ubcf4 - \uc2dc\uac04\uc81c \ud2b9\ud654\"\"\"\n        base_details = super().get_details()\n        regular_hours = min(self.worked_hours, 40)\n        overtime_hours = max(0, self.worked_hours - 40)\n\n        additional_info = f\"\"\"\n\uc2dc\uae09: {self.hourly_rate:,}\uc6d0\n\uc77c\ubc18\uadfc\ubb34: {regular_hours}\uc2dc\uac04\n\uc57c\uadfc: {overtime_hours}\uc2dc\uac04\n        \"\"\".strip()\n\n        return base_details + \"\\n\" + additional_info\n\nclass SalariedEmployee(Employee):\n    \"\"\"\uc815\uaddc\uc9c1 \uc9c1\uc6d0\"\"\"\n\n    def __init__(self, name, employee_id, monthly_salary, bonus_rate=0.1):\n        super().__init__(name, employee_id, monthly_salary)\n        self.bonus_rate = bonus_rate\n        self.performance_score = 0\n\n    def set_performance(self, score):\n        \"\"\"\uc131\uacfc \uc810\uc218 \uc124\uc815 (0-100)\"\"\"\n        self.performance_score = max(0, min(100, score))\n        return f\"{self.name}\uc758 \uc131\uacfc \uc810\uc218: {self.performance_score}\uc810\"\n\n    def calculate_salary(self):\n        \"\"\"\uae09\uc5ec \uacc4\uc0b0 - \uc815\uaddc\uc9c1 \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        # \uae30\ubcf8\uae09 + \uc131\uacfc \ubcf4\ub108\uc2a4\n        bonus = self.base_salary * self.bonus_rate * (self.performance_score / 100)\n        return self.base_salary + bonus\n\n    def get_details(self):\n        \"\"\"\uc9c1\uc6d0 \uc138\ubd80 \uc815\ubcf4 - \uc815\uaddc\uc9c1 \ud2b9\ud654\"\"\"\n        base_details = super().get_details()\n        bonus_amount = self.base_salary * self.bonus_rate * (self.performance_score / 100)\n\n        additional_info = f\"\"\"\n\uc131\uacfc\uc810\uc218: {self.performance_score}\uc810\n\ubcf4\ub108\uc2a4\uc728: {self.bonus_rate * 100}%\n\ubcf4\ub108\uc2a4: {bonus_amount:,}\uc6d0\n        \"\"\".strip()\n\n        return base_details + \"\\n\" + additional_info\n\nclass Manager(SalariedEmployee):\n    \"\"\"\uad00\ub9ac\uc790 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, name, employee_id, monthly_salary, team_size, management_bonus=500000):\n        super().__init__(name, employee_id, monthly_salary, bonus_rate=0.15)  # \ubcf4\ub108\uc2a4\uc728 15%\n        self.team_size = team_size\n        self.management_bonus = management_bonus\n\n    def calculate_salary(self):\n        \"\"\"\uae09\uc5ec \uacc4\uc0b0 - \uad00\ub9ac\uc790 \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        # \uc815\uaddc\uc9c1 \uae09\uc5ec + \uad00\ub9ac\uc790 \uc218\ub2f9 + \ud300 \ud06c\uae30 \ubcf4\ub108\uc2a4\n        base_salary = super().calculate_salary()\n        team_bonus = self.team_size * 50000  # \ud300\uc6d0 1\uba85\ub2f9 5\ub9cc\uc6d0\n        return base_salary + self.management_bonus + team_bonus\n\n    def manage_team(self, task):\n        \"\"\"\ud300 \uad00\ub9ac\"\"\"\n        return f\"\uad00\ub9ac\uc790 {self.name}\uc774(\uac00) \ud300({self.team_size}\uba85)\uc5d0\uac8c '{task}' \uc5c5\ubb34\ub97c \uc9c0\uc2dc\ud588\uc2b5\ub2c8\ub2e4.\"\n\n    def get_details(self):\n        \"\"\"\uc9c1\uc6d0 \uc138\ubd80 \uc815\ubcf4 - \uad00\ub9ac\uc790 \ud2b9\ud654\"\"\"\n        base_details = super().get_details()\n        team_bonus = self.team_size * 50000\n\n        additional_info = f\"\"\"\n\ud300 \ud06c\uae30: {self.team_size}\uba85\n\uad00\ub9ac\uc790 \uc218\ub2f9: {self.management_bonus:,}\uc6d0\n\ud300 \ubcf4\ub108\uc2a4: {team_bonus:,}\uc6d0\n        \"\"\".strip()\n\n        return base_details + \"\\n\" + additional_info\n\n# \uace0\uae09 \uc624\ubc84\ub77c\uc774\ub529 \uc608\uc81c\nprint(\"1. \ub2e4\uc591\ud55c \uc9c1\uc6d0 \ud0c0\uc785:\")\n\n# \uc2dc\uac04\uc81c \uc9c1\uc6d0\nhourly_emp = HourlyEmployee(\"\uae40\uc2dc\uac04\", \"H001\", 15000)\nprint(hourly_emp.work(45))  # 45\uc2dc\uac04 \uadfc\ubb34 (5\uc2dc\uac04 \uc57c\uadfc)\nprint(f\"\uc2dc\uae09 \uc9c1\uc6d0 \uae09\uc5ec: {hourly_emp.calculate_salary():,}\uc6d0\")\n\n# \uc815\uaddc\uc9c1 \uc9c1\uc6d0\nsalaried_emp = SalariedEmployee(\"\ubc15\uc815\uaddc\", \"S001\", 3000000)\nprint(salaried_emp.set_performance(85))\nprint(f\"\uc815\uaddc\uc9c1 \uae09\uc5ec: {salaried_emp.calculate_salary():,}\uc6d0\")\n\n# \uad00\ub9ac\uc790\nmanager = Manager(\"\uc774\uad00\ub9ac\", \"M001\", 5000000, 8)\nprint(manager.set_performance(90))\nprint(manager.manage_team(\"\uc6d4\uac04 \ubcf4\uace0\uc11c \uc791\uc131\"))\nprint(f\"\uad00\ub9ac\uc790 \uae09\uc5ec: {manager.calculate_salary():,}\uc6d0\")\n\nprint(\"\\n2. \uc0c1\uc138 \uc815\ubcf4 \ucd9c\ub825:\")\nemployees = [hourly_emp, salaried_emp, manager]\nfor emp in employees:\n    print(emp.get_details())\n    print(\"-\" * 40)\n</code></pre>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#3-polymorphism","title":"3. \ub2e4\ud615\uc131 (Polymorphism)","text":""},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#31","title":"3.1 \ub2e4\ud615\uc131\uc758 \uae30\ubcf8 \uac1c\ub150","text":"<pre><code>print(\"\\n=== \ub2e4\ud615\uc131\uc758 \uae30\ubcf8 \uac1c\ub150 ===\")\n\n# \ub2e4\ud615\uc131: \uac19\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub85c \ub2e4\ub978 \ud0c0\uc785\uc758 \uac1d\uccb4\ub97c \ub2e4\ub8e8\ub294 \ub2a5\ub825\n\nclass MediaPlayer:\n    \"\"\"\ubbf8\ub514\uc5b4 \ud50c\ub808\uc774\uc5b4 \uae30\ubcf8 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, title):\n        self.title = title\n        self.is_playing = False\n\n    def play(self):\n        \"\"\"\uc7ac\uc0dd - \uae30\ubcf8 \uad6c\ud604\"\"\"\n        self.is_playing = True\n        return f\"'{self.title}' \uc7ac\uc0dd \uc911...\"\n\n    def stop(self):\n        \"\"\"\uc815\uc9c0\"\"\"\n        self.is_playing = False\n        return f\"'{self.title}' \uc7ac\uc0dd \uc815\uc9c0\"\n\n    def get_info(self):\n        \"\"\"\ubbf8\ub514\uc5b4 \uc815\ubcf4\"\"\"\n        status = \"\uc7ac\uc0dd \uc911\" if self.is_playing else \"\uc815\uc9c0\ub428\"\n        return f\"\uc81c\ubaa9: {self.title}, \uc0c1\ud0dc: {status}\"\n\nclass AudioPlayer(MediaPlayer):\n    \"\"\"\uc624\ub514\uc624 \ud50c\ub808\uc774\uc5b4\"\"\"\n\n    def __init__(self, title, artist, duration):\n        super().__init__(title)\n        self.artist = artist\n        self.duration = duration\n\n    def play(self):\n        \"\"\"\uc624\ub514\uc624 \uc7ac\uc0dd - \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        self.is_playing = True\n        return f\"\ud83c\udfb5 {self.artist}\uc758 '{self.title}' \uc624\ub514\uc624 \uc7ac\uc0dd \uc911... ({self.duration}\ucd08)\"\n\n    def adjust_volume(self, level):\n        \"\"\"\ubcfc\ub968 \uc870\uc808 - \uc624\ub514\uc624 \ud2b9\ud654 \uae30\ub2a5\"\"\"\n        return f\"\ubcfc\ub968\uc744 {level}\ub85c \uc870\uc808\ud588\uc2b5\ub2c8\ub2e4.\"\n\nclass VideoPlayer(MediaPlayer):\n    \"\"\"\ube44\ub514\uc624 \ud50c\ub808\uc774\uc5b4\"\"\"\n\n    def __init__(self, title, director, resolution):\n        super().__init__(title)\n        self.director = director\n        self.resolution = resolution\n\n    def play(self):\n        \"\"\"\ube44\ub514\uc624 \uc7ac\uc0dd - \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        self.is_playing = True\n        return f\"\ud83c\udfac {self.director} \uac10\ub3c5\uc758 '{self.title}' \ube44\ub514\uc624 \uc7ac\uc0dd \uc911... ({self.resolution})\"\n\n    def change_quality(self, quality):\n        \"\"\"\ud654\uc9c8 \ubcc0\uacbd - \ube44\ub514\uc624 \ud2b9\ud654 \uae30\ub2a5\"\"\"\n        self.resolution = quality\n        return f\"\ud654\uc9c8\uc744 {quality}\ub85c \ubcc0\uacbd\ud588\uc2b5\ub2c8\ub2e4.\"\n\nclass StreamingPlayer(MediaPlayer):\n    \"\"\"\uc2a4\ud2b8\ub9ac\ubc0d \ud50c\ub808\uc774\uc5b4\"\"\"\n\n    def __init__(self, title, platform, url):\n        super().__init__(title)\n        self.platform = platform\n        self.url = url\n\n    def play(self):\n        \"\"\"\uc2a4\ud2b8\ub9ac\ubc0d \uc7ac\uc0dd - \uc624\ubc84\ub77c\uc774\ub529\"\"\"\n        self.is_playing = True\n        return f\"\ud83d\udce1 {self.platform}\uc5d0\uc11c '{self.title}' \uc2a4\ud2b8\ub9ac\ubc0d \uc7ac\uc0dd \uc911...\"\n\n    def check_connection(self):\n        \"\"\"\uc5f0\uacb0 \uc0c1\ud0dc \ud655\uc778 - \uc2a4\ud2b8\ub9ac\ubc0d \ud2b9\ud654 \uae30\ub2a5\"\"\"\n        return f\"{self.platform} \uc5f0\uacb0 \uc0c1\ud0dc: \uc591\ud638\"\n\ndef play_media(player):\n    \"\"\"\ub2e4\ud615\uc131\uc744 \ud65c\uc6a9\ud55c \ubbf8\ub514\uc5b4 \uc7ac\uc0dd \ud568\uc218\"\"\"\n    print(f\"\uc7ac\uc0dd \uc2dc\uc791: {player.play()}\")\n    print(f\"\uc815\ubcf4: {player.get_info()}\")\n\ndef play_all_media(players):\n    \"\"\"\uc5ec\ub7ec \ubbf8\ub514\uc5b4\ub97c \uc21c\ucc28\uc801\uc73c\ub85c \uc7ac\uc0dd\"\"\"\n    print(\"=== \ud50c\ub808\uc774\ub9ac\uc2a4\ud2b8 \uc7ac\uc0dd ===\")\n    for i, player in enumerate(players, 1):\n        print(f\"\\n{i}. {player.__class__.__name__}:\")\n        play_media(player)\n\n# \ub2e4\ud615\uc131 \uc608\uc81c\nprint(\"1. \ub2e4\uc591\ud55c \ubbf8\ub514\uc5b4 \ud50c\ub808\uc774\uc5b4 \uc0dd\uc131:\")\naudio = AudioPlayer(\"Spring Day\", \"BTS\", 267)\nvideo = VideoPlayer(\"Avengers: Endgame\", \"Russo Brothers\", \"4K\")\nstream = StreamingPlayer(\"Netflix Original\", \"Netflix\", \"https://netflix.com/watch\")\n\nprint(\"\\n2. \ub2e4\ud615\uc131\uc744 \ud1b5\ud55c \ud1b5\uc77c\ub41c \uc778\ud130\ud398\uc774\uc2a4:\")\nmedia_list = [audio, video, stream]\nplay_all_media(media_list)\n\nprint(\"\\n3. \uac01 \ud0c0\uc785\ubcc4 \ud2b9\ud654 \uae30\ub2a5:\")\nprint(f\"\uc624\ub514\uc624: {audio.adjust_volume(75)}\")\nprint(f\"\ube44\ub514\uc624: {video.change_quality('1080p')}\")\nprint(f\"\uc2a4\ud2b8\ub9ac\ubc0d: {stream.check_connection()}\")\n\nprint(\"\\n4. \ud0c0\uc785 \ud655\uc778\uacfc \ud2b9\ud654 \ucc98\ub9ac:\")\ndef advanced_media_control(player):\n    \"\"\"\uace0\uae09 \ubbf8\ub514\uc5b4 \uc81c\uc5b4 - \ud0c0\uc785\ubcc4 \ud2b9\ud654 \ucc98\ub9ac\"\"\"\n    print(f\"\\n=== {player.__class__.__name__} \uace0\uae09 \uc81c\uc5b4 ===\")\n    print(player.play())\n\n    # \ud0c0\uc785\ubcc4 \ud2b9\ud654 \uae30\ub2a5 \ud638\ucd9c\n    if isinstance(player, AudioPlayer):\n        print(player.adjust_volume(80))\n    elif isinstance(player, VideoPlayer):\n        print(player.change_quality(\"HD\"))\n    elif isinstance(player, StreamingPlayer):\n        print(player.check_connection())\n\nfor player in media_list:\n    advanced_media_control(player)\n</code></pre>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#32","title":"3.2 \ub2e4\ud615\uc131\uc744 \ud65c\uc6a9\ud55c \uc2e4\uc6a9\uc801 \uc608\uc81c","text":"<pre><code>print(\"\\n=== \ub2e4\ud615\uc131 \uc2e4\uc6a9 \uc608\uc81c: \uacb0\uc81c \uc2dc\uc2a4\ud15c ===\")\n\nfrom abc import ABC, abstractmethod\nimport datetime\n\nclass PaymentProcessor(ABC):\n    \"\"\"\uacb0\uc81c \ucc98\ub9ac\uae30 \ucd94\uc0c1 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, processor_name):\n        self.processor_name = processor_name\n        self.is_active = True\n\n    @abstractmethod\n    def process_payment(self, amount, **kwargs):\n        \"\"\"\uacb0\uc81c \ucc98\ub9ac - \ucd94\uc0c1 \uba54\uc11c\ub4dc\"\"\"\n        pass\n\n    @abstractmethod\n    def refund_payment(self, transaction_id, amount):\n        \"\"\"\ud658\ubd88 \ucc98\ub9ac - \ucd94\uc0c1 \uba54\uc11c\ub4dc\"\"\"\n        pass\n\n    def validate_amount(self, amount):\n        \"\"\"\uae08\uc561 \uac80\uc99d\"\"\"\n        if not isinstance(amount, (int, float)) or amount &lt;= 0:\n            raise ValueError(\"\uacb0\uc81c \uae08\uc561\uc740 \uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n        return True\n\n    def generate_transaction_id(self):\n        \"\"\"\uac70\ub798 ID \uc0dd\uc131\"\"\"\n        timestamp = datetime.datetime.now().strftime(\"%Y%m%d%H%M%S\")\n        return f\"{self.processor_name[:3].upper()}{timestamp}\"\n\nclass CreditCardProcessor(PaymentProcessor):\n    \"\"\"\uc2e0\uc6a9\uce74\ub4dc \uacb0\uc81c \ucc98\ub9ac\uae30\"\"\"\n\n    def __init__(self):\n        super().__init__(\"CreditCard\")\n        self.processing_fee_rate = 0.029  # 2.9% \uc218\uc218\ub8cc\n\n    def process_payment(self, amount, card_number, expiry_date, cvv, **kwargs):\n        \"\"\"\uc2e0\uc6a9\uce74\ub4dc \uacb0\uc81c \ucc98\ub9ac\"\"\"\n        self.validate_amount(amount)\n\n        # \uce74\ub4dc \uc815\ubcf4 \uac80\uc99d (\uc2e4\uc81c\ub85c\ub294 \ub354 \ubcf5\uc7a1\ud55c \uac80\uc99d)\n        if len(card_number) != 16:\n            raise ValueError(\"\uc798\ubabb\ub41c \uce74\ub4dc \ubc88\ud638\uc785\ub2c8\ub2e4.\")\n\n        processing_fee = amount * self.processing_fee_rate\n        total_charge = amount + processing_fee\n\n        transaction_id = self.generate_transaction_id()\n\n        return {\n            'success': True,\n            'transaction_id': transaction_id,\n            'amount': amount,\n            'processing_fee': processing_fee,\n            'total_charge': total_charge,\n            'card_last_4': card_number[-4:],\n            'processor': self.processor_name\n        }\n\n    def refund_payment(self, transaction_id, amount):\n        \"\"\"\uc2e0\uc6a9\uce74\ub4dc \ud658\ubd88 \ucc98\ub9ac\"\"\"\n        self.validate_amount(amount)\n        refund_fee = min(amount * 0.01, 500)  # \ud658\ubd88 \uc218\uc218\ub8cc 1% (\ucd5c\ub300 500\uc6d0)\n\n        return {\n            'success': True,\n            'refund_id': f\"REF_{transaction_id}\",\n            'refund_amount': amount - refund_fee,\n            'refund_fee': refund_fee,\n            'processor': self.processor_name\n        }\n\nclass BankTransferProcessor(PaymentProcessor):\n    \"\"\"\uacc4\uc88c\uc774\uccb4 \uacb0\uc81c \ucc98\ub9ac\uae30\"\"\"\n\n    def __init__(self):\n        super().__init__(\"BankTransfer\")\n        self.processing_fee = 1000  # \uace0\uc815 \uc218\uc218\ub8cc 1000\uc6d0\n\n    def process_payment(self, amount, account_number, bank_code, **kwargs):\n        \"\"\"\uacc4\uc88c\uc774\uccb4 \uacb0\uc81c \ucc98\ub9ac\"\"\"\n        self.validate_amount(amount)\n\n        if len(account_number) &lt; 10:\n            raise ValueError(\"\uc798\ubabb\ub41c \uacc4\uc88c\ubc88\ud638\uc785\ub2c8\ub2e4.\")\n\n        total_charge = amount + self.processing_fee\n        transaction_id = self.generate_transaction_id()\n\n        return {\n            'success': True,\n            'transaction_id': transaction_id,\n            'amount': amount,\n            'processing_fee': self.processing_fee,\n            'total_charge': total_charge,\n            'account_masked': account_number[:3] + \"*\" * (len(account_number) - 6) + account_number[-3:],\n            'bank_code': bank_code,\n            'processor': self.processor_name\n        }\n\n    def refund_payment(self, transaction_id, amount):\n        \"\"\"\uacc4\uc88c\uc774\uccb4 \ud658\ubd88 \ucc98\ub9ac\"\"\"\n        self.validate_amount(amount)\n\n        return {\n            'success': True,\n            'refund_id': f\"REF_{transaction_id}\",\n            'refund_amount': amount,  # \uacc4\uc88c\uc774\uccb4\ub294 \ud658\ubd88 \uc218\uc218\ub8cc \uc5c6\uc74c\n            'refund_fee': 0,\n            'processor': self.processor_name,\n            'note': \"\uc601\uc5c5\uc77c \uae30\uc900 3\uc77c \ub0b4 \ud658\ubd88 \uc608\uc815\"\n        }\n\nclass DigitalWalletProcessor(PaymentProcessor):\n    \"\"\"\ub514\uc9c0\ud138 \uc9c0\uac11 \uacb0\uc81c \ucc98\ub9ac\uae30\"\"\"\n\n    def __init__(self, wallet_name):\n        super().__init__(f\"DigitalWallet_{wallet_name}\")\n        self.wallet_name = wallet_name\n        self.processing_fee_rate = 0.015  # 1.5% \uc218\uc218\ub8cc\n\n    def process_payment(self, amount, wallet_id, pin, **kwargs):\n        \"\"\"\ub514\uc9c0\ud138 \uc9c0\uac11 \uacb0\uc81c \ucc98\ub9ac\"\"\"\n        self.validate_amount(amount)\n\n        if len(pin) != 6:\n            raise ValueError(\"PIN\uc740 6\uc790\ub9ac\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n\n        processing_fee = amount * self.processing_fee_rate\n        total_charge = amount + processing_fee\n        transaction_id = self.generate_transaction_id()\n\n        return {\n            'success': True,\n            'transaction_id': transaction_id,\n            'amount': amount,\n            'processing_fee': processing_fee,\n            'total_charge': total_charge,\n            'wallet_name': self.wallet_name,\n            'wallet_id_masked': wallet_id[:3] + \"*\" * (len(wallet_id) - 6) + wallet_id[-3:],\n            'processor': self.processor_name\n        }\n\n    def refund_payment(self, transaction_id, amount):\n        \"\"\"\ub514\uc9c0\ud138 \uc9c0\uac11 \ud658\ubd88 \ucc98\ub9ac\"\"\"\n        self.validate_amount(amount)\n\n        return {\n            'success': True,\n            'refund_id': f\"REF_{transaction_id}\",\n            'refund_amount': amount,  # \uc989\uc2dc \ud658\ubd88\n            'refund_fee': 0,\n            'processor': self.processor_name,\n            'note': \"\uc989\uc2dc \uc9c0\uac11\uc73c\ub85c \ud658\ubd88\ub429\ub2c8\ub2e4.\"\n        }\n\nclass PaymentGateway:\n    \"\"\"\uacb0\uc81c \uac8c\uc774\ud2b8\uc6e8\uc774 - \ub2e4\ud615\uc131\uc744 \ud65c\uc6a9\ud55c \ud1b5\ud569 \uacb0\uc81c \uc2dc\uc2a4\ud15c\"\"\"\n\n    def __init__(self):\n        self.processors = {}\n        self.transaction_history = []\n\n    def register_processor(self, name, processor):\n        \"\"\"\uacb0\uc81c \ucc98\ub9ac\uae30 \ub4f1\ub85d\"\"\"\n        if not isinstance(processor, PaymentProcessor):\n            raise TypeError(\"PaymentProcessor \uc778\uc2a4\ud134\uc2a4\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n\n        self.processors[name] = processor\n        return f\"{name} \uacb0\uc81c \ucc98\ub9ac\uae30\uac00 \ub4f1\ub85d\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n\n    def process_payment(self, processor_name, amount, **payment_details):\n        \"\"\"\ud1b5\ud569 \uacb0\uc81c \ucc98\ub9ac\"\"\"\n        if processor_name not in self.processors:\n            raise ValueError(f\"\ub4f1\ub85d\ub418\uc9c0 \uc54a\uc740 \uacb0\uc81c \ucc98\ub9ac\uae30: {processor_name}\")\n\n        processor = self.processors[processor_name]\n\n        try:\n            result = processor.process_payment(amount, **payment_details)\n\n            # \uac70\ub798 \uae30\ub85d \uc800\uc7a5\n            self.transaction_history.append({\n                'timestamp': datetime.datetime.now(),\n                'type': 'payment',\n                'processor': processor_name,\n                'result': result\n            })\n\n            return result\n\n        except Exception as e:\n            error_result = {\n                'success': False,\n                'error': str(e),\n                'processor': processor_name\n            }\n\n            self.transaction_history.append({\n                'timestamp': datetime.datetime.now(),\n                'type': 'payment_failed',\n                'processor': processor_name,\n                'result': error_result\n            })\n\n            return error_result\n\n    def process_refund(self, processor_name, transaction_id, amount):\n        \"\"\"\ud1b5\ud569 \ud658\ubd88 \ucc98\ub9ac\"\"\"\n        if processor_name not in self.processors:\n            raise ValueError(f\"\ub4f1\ub85d\ub418\uc9c0 \uc54a\uc740 \uacb0\uc81c \ucc98\ub9ac\uae30: {processor_name}\")\n\n        processor = self.processors[processor_name]\n\n        try:\n            result = processor.refund_payment(transaction_id, amount)\n\n            # \ud658\ubd88 \uae30\ub85d \uc800\uc7a5\n            self.transaction_history.append({\n                'timestamp': datetime.datetime.now(),\n                'type': 'refund',\n                'processor': processor_name,\n                'result': result\n            })\n\n            return result\n\n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e),\n                'processor': processor_name\n            }\n\n    def get_transaction_summary(self):\n        \"\"\"\uac70\ub798 \uc694\uc57d \uc815\ubcf4\"\"\"\n        total_transactions = len(self.transaction_history)\n        successful_payments = len([t for t in self.transaction_history \n                                 if t['type'] == 'payment' and t['result']['success']])\n        failed_payments = len([t for t in self.transaction_history \n                             if t['type'] == 'payment_failed'])\n        refunds = len([t for t in self.transaction_history if t['type'] == 'refund'])\n\n        return f\"\"\"\n=== \uac70\ub798 \uc694\uc57d ===\n\ucd1d \uac70\ub798: {total_transactions}\uac74\n\uc131\uacf5\ud55c \uacb0\uc81c: {successful_payments}\uac74\n\uc2e4\ud328\ud55c \uacb0\uc81c: {failed_payments}\uac74\n\ud658\ubd88: {refunds}\uac74\n\ub4f1\ub85d\ub41c \uacb0\uc81c \ucc98\ub9ac\uae30: {len(self.processors)}\uac1c\n        \"\"\".strip()\n\n# \ub2e4\ud615\uc131 \uacb0\uc81c \uc2dc\uc2a4\ud15c \uc608\uc81c\nprint(\"1. \uacb0\uc81c \uac8c\uc774\ud2b8\uc6e8\uc774 \uc124\uc815:\")\ngateway = PaymentGateway()\n\n# \ub2e4\uc591\ud55c \uacb0\uc81c \ubc29\ubc95\uc73c\ub85c \uacb0\uc81c \ucc98\ub9ac:\")\n\n# \uc2e0\uc6a9\uce74\ub4dc \uacb0\uc81c\ncredit_result = gateway.process_payment(\n    \"credit_card\", \n    50000,\n    card_number=\"1234567890123456\",\n    expiry_date=\"12/25\",\n    cvv=\"123\"\n)\nprint(f\"\uc2e0\uc6a9\uce74\ub4dc \uacb0\uc81c \uacb0\uacfc: {credit_result}\")\n\n# \uacc4\uc88c\uc774\uccb4 \uacb0\uc81c\nbank_result = gateway.process_payment(\n    \"bank_transfer\",\n    30000,\n    account_number=\"1234567890\",\n    bank_code=\"004\"\n)\nprint(f\"\uacc4\uc88c\uc774\uccb4 \uacb0\uacfc: {bank_result}\")\n\n# \ub514\uc9c0\ud138 \uc9c0\uac11 \uacb0\uc81c\nwallet_result = gateway.process_payment(\n    \"kakao_pay\",\n    25000,\n    wallet_id=\"kakao123456\",\n    pin=\"123456\"\n)\nprint(f\"\uce74\uce74\uc624\ud398\uc774 \uacb0\uc81c \uacb0\uacfc: {wallet_result}\")\n\nprint(\"\\n3. \ud658\ubd88 \ucc98\ub9ac:\")\nif credit_result['success']:\n    refund_result = gateway.process_refund(\n        \"credit_card\",\n        credit_result['transaction_id'],\n        20000\n    )\n    print(f\"\uc2e0\uc6a9\uce74\ub4dc \ud658\ubd88 \uacb0\uacfc: {refund_result}\")\n\nprint(\"\\n4. \uac70\ub798 \uc694\uc57d:\")\nprint(gateway.get_transaction_summary())\n</code></pre>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#4","title":"4. \ucd94\uc0c1 \ud074\ub798\uc2a4\uc640 \uc778\ud130\ud398\uc774\uc2a4","text":""},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#41-abstract-base-class","title":"4.1 \ucd94\uc0c1 \ud074\ub798\uc2a4 (Abstract Base Class)","text":"<pre><code>print(\"\\n=== \ucd94\uc0c1 \ud074\ub798\uc2a4 ===\")\n\nfrom abc import ABC, abstractmethod\n\nclass DatabaseConnection(ABC):\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ucd94\uc0c1 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, host, port, database):\n        self.host = host\n        self.port = port\n        self.database = database\n        self.is_connected = False\n\n    @abstractmethod\n    def connect(self):\n        \"\"\"\uc5f0\uacb0 - \ubc18\ub4dc\uc2dc \uad6c\ud604\ud574\uc57c \ud558\ub294 \ucd94\uc0c1 \uba54\uc11c\ub4dc\"\"\"\n        pass\n\n    @abstractmethod\n    def disconnect(self):\n        \"\"\"\uc5f0\uacb0 \ud574\uc81c - \ubc18\ub4dc\uc2dc \uad6c\ud604\ud574\uc57c \ud558\ub294 \ucd94\uc0c1 \uba54\uc11c\ub4dc\"\"\"\n        pass\n\n    @abstractmethod\n    def execute_query(self, query):\n        \"\"\"\ucffc\ub9ac \uc2e4\ud589 - \ubc18\ub4dc\uc2dc \uad6c\ud604\ud574\uc57c \ud558\ub294 \ucd94\uc0c1 \uba54\uc11c\ub4dc\"\"\"\n        pass\n\n    def get_connection_info(self):\n        \"\"\"\uc5f0\uacb0 \uc815\ubcf4 - \uacf5\ud1b5 \uad6c\ud604\"\"\"\n        status = \"\uc5f0\uacb0\ub428\" if self.is_connected else \"\uc5f0\uacb0 \uc548\ub428\"\n        return f\"Host: {self.host}:{self.port}, DB: {self.database}, Status: {status}\"\n\n    def validate_query(self, query):\n        \"\"\"\ucffc\ub9ac \uac80\uc99d - \uacf5\ud1b5 \uad6c\ud604\"\"\"\n        if not query or not isinstance(query, str):\n            raise ValueError(\"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ucffc\ub9ac\uc785\ub2c8\ub2e4.\")\n\n        dangerous_keywords = ['DROP', 'DELETE', 'TRUNCATE']\n        query_upper = query.upper()\n\n        for keyword in dangerous_keywords:\n            if keyword in query_upper:\n                raise ValueError(f\"\uc704\ud5d8\ud55c \ucffc\ub9ac\uac00 \uac10\uc9c0\ub418\uc5c8\uc2b5\ub2c8\ub2e4: {keyword}\")\n\n        return True\n\nclass MySQLConnection(DatabaseConnection):\n    \"\"\"MySQL \uc5f0\uacb0 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, host, port, database, username, password):\n        super().__init__(host, port, database)\n        self.username = username\n        self.password = password\n        self.charset = \"utf8mb4\"\n\n    def connect(self):\n        \"\"\"MySQL \uc5f0\uacb0 \uad6c\ud604\"\"\"\n        try:\n            # \uc2e4\uc81c\ub85c\ub294 mysql-connector-python \ub4f1\uc744 \uc0ac\uc6a9\n            print(f\"MySQL\uc5d0 \uc5f0\uacb0 \uc911... {self.host}:{self.port}\")\n            self.is_connected = True\n            return f\"MySQL {self.database}\uc5d0 \uc131\uacf5\uc801\uc73c\ub85c \uc5f0\uacb0\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        except Exception as e:\n            return f\"MySQL \uc5f0\uacb0 \uc2e4\ud328: {e}\"\n\n    def disconnect(self):\n        \"\"\"MySQL \uc5f0\uacb0 \ud574\uc81c \uad6c\ud604\"\"\"\n        if self.is_connected:\n            self.is_connected = False\n            return \"MySQL \uc5f0\uacb0\uc774 \ud574\uc81c\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        return \"\uc774\ubbf8 \uc5f0\uacb0\uc774 \ud574\uc81c\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\"\n\n    def execute_query(self, query):\n        \"\"\"MySQL \ucffc\ub9ac \uc2e4\ud589 \uad6c\ud604\"\"\"\n        if not self.is_connected:\n            return \"\uba3c\uc800 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc5f0\uacb0\ud558\uc138\uc694.\"\n\n        self.validate_query(query)\n\n        # \uc2e4\uc81c\ub85c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \ucffc\ub9ac \uc2e4\ud589\n        print(f\"MySQL\uc5d0\uc11c \ucffc\ub9ac \uc2e4\ud589: {query}\")\n        return f\"MySQL \ucffc\ub9ac \uc2e4\ud589 \uc644\ub8cc: {query[:50]}...\"\n\n    def set_charset(self, charset):\n        \"\"\"MySQL \ud2b9\ud654 \uae30\ub2a5\"\"\"\n        self.charset = charset\n        return f\"\ubb38\uc790\uc14b\uc774 {charset}\ub85c \uc124\uc815\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n\nclass PostgreSQLConnection(DatabaseConnection):\n    \"\"\"PostgreSQL \uc5f0\uacb0 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, host, port, database, username, password):\n        super().__init__(host, port, database)\n        self.username = username\n        self.password = password\n        self.schema = \"public\"\n\n    def connect(self):\n        \"\"\"PostgreSQL \uc5f0\uacb0 \uad6c\ud604\"\"\"\n        try:\n            print(f\"PostgreSQL\uc5d0 \uc5f0\uacb0 \uc911... {self.host}:{self.port}\")\n            self.is_connected = True\n            return f\"PostgreSQL {self.database}\uc5d0 \uc131\uacf5\uc801\uc73c\ub85c \uc5f0\uacb0\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        except Exception as e:\n            return f\"PostgreSQL \uc5f0\uacb0 \uc2e4\ud328: {e}\"\n\n    def disconnect(self):\n        \"\"\"PostgreSQL \uc5f0\uacb0 \ud574\uc81c \uad6c\ud604\"\"\"\n        if self.is_connected:\n            self.is_connected = False\n            return \"PostgreSQL \uc5f0\uacb0\uc774 \ud574\uc81c\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        return \"\uc774\ubbf8 \uc5f0\uacb0\uc774 \ud574\uc81c\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\"\n\n    def execute_query(self, query):\n        \"\"\"PostgreSQL \ucffc\ub9ac \uc2e4\ud589 \uad6c\ud604\"\"\"\n        if not self.is_connected:\n            return \"\uba3c\uc800 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc5f0\uacb0\ud558\uc138\uc694.\"\n\n        self.validate_query(query)\n\n        print(f\"PostgreSQL\uc5d0\uc11c \ucffc\ub9ac \uc2e4\ud589: {query}\")\n        return f\"PostgreSQL \ucffc\ub9ac \uc2e4\ud589 \uc644\ub8cc: {query[:50]}...\"\n\n    def set_schema(self, schema):\n        \"\"\"PostgreSQL \ud2b9\ud654 \uae30\ub2a5\"\"\"\n        self.schema = schema\n        return f\"\uc2a4\ud0a4\ub9c8\uac00 {schema}\ub85c \uc124\uc815\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n\nclass SQLiteConnection(DatabaseConnection):\n    \"\"\"SQLite \uc5f0\uacb0 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, database_file):\n        super().__init__(\"localhost\", 0, database_file)\n        self.database_file = database_file\n\n    def connect(self):\n        \"\"\"SQLite \uc5f0\uacb0 \uad6c\ud604\"\"\"\n        try:\n            print(f\"SQLite \ud30c\uc77c\uc5d0 \uc5f0\uacb0 \uc911... {self.database_file}\")\n            self.is_connected = True\n            return f\"SQLite {self.database_file}\uc5d0 \uc131\uacf5\uc801\uc73c\ub85c \uc5f0\uacb0\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        except Exception as e:\n            return f\"SQLite \uc5f0\uacb0 \uc2e4\ud328: {e}\"\n\n    def disconnect(self):\n        \"\"\"SQLite \uc5f0\uacb0 \ud574\uc81c \uad6c\ud604\"\"\"\n        if self.is_connected:\n            self.is_connected = False\n            return \"SQLite \uc5f0\uacb0\uc774 \ud574\uc81c\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        return \"\uc774\ubbf8 \uc5f0\uacb0\uc774 \ud574\uc81c\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\"\n\n    def execute_query(self, query):\n        \"\"\"SQLite \ucffc\ub9ac \uc2e4\ud589 \uad6c\ud604\"\"\"\n        if not self.is_connected:\n            return \"\uba3c\uc800 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc5f0\uacb0\ud558\uc138\uc694.\"\n\n        self.validate_query(query)\n\n        print(f\"SQLite\uc5d0\uc11c \ucffc\ub9ac \uc2e4\ud589: {query}\")\n        return f\"SQLite \ucffc\ub9ac \uc2e4\ud589 \uc644\ub8cc: {query[:50]}...\"\n\n    def vacuum_database(self):\n        \"\"\"SQLite \ud2b9\ud654 \uae30\ub2a5\"\"\"\n        if self.is_connected:\n            return \"\ub370\uc774\ud130\ubca0\uc774\uc2a4 VACUUM \uc791\uc5c5\uc774 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        return \"\uc5f0\uacb0\ub41c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\"\n\ndef database_operations(db_connection):\n    \"\"\"\ucd94\uc0c1 \ud074\ub798\uc2a4\ub97c \ud65c\uc6a9\ud55c \ud1b5\ud569 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5\"\"\"\n    print(f\"\\n=== {db_connection.__class__.__name__} \uc791\uc5c5 ===\")\n    print(db_connection.get_connection_info())\n\n    # \uc5f0\uacb0\n    print(db_connection.connect())\n    print(db_connection.get_connection_info())\n\n    # \ucffc\ub9ac \uc2e4\ud589\n    queries = [\n        \"SELECT * FROM users\",\n        \"INSERT INTO users (name, email) VALUES ('\uae40\ucca0\uc218', 'kim@email.com')\",\n        \"UPDATE users SET email = 'new@email.com' WHERE id = 1\"\n    ]\n\n    for query in queries:\n        try:\n            result = db_connection.execute_query(query)\n            print(result)\n        except ValueError as e:\n            print(f\"\ucffc\ub9ac \uc624\ub958: {e}\")\n\n    # \uc5f0\uacb0 \ud574\uc81c\n    print(db_connection.disconnect())\n\n# \ucd94\uc0c1 \ud074\ub798\uc2a4 \uc608\uc81c\nprint(\"1. \ub2e4\uc591\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0:\")\n\n# \ub2e4\uc591\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uac1d\uccb4 \uc0dd\uc131\nmysql_db = MySQLConnection(\"localhost\", 3306, \"myapp\", \"user\", \"password\")\npostgres_db = PostgreSQLConnection(\"localhost\", 5432, \"myapp\", \"user\", \"password\")\nsqlite_db = SQLiteConnection(\"myapp.db\")\n\n# \ub2e4\ud615\uc131\uc744 \ud65c\uc6a9\ud55c \ub3d9\uc77c\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub85c \ucc98\ub9ac\ndatabases = [mysql_db, postgres_db, sqlite_db]\n\nfor db in databases:\n    database_operations(db)\n\nprint(\"\\n2. \ub370\uc774\ud130\ubca0\uc774\uc2a4\ubcc4 \ud2b9\ud654 \uae30\ub2a5:\")\nprint(mysql_db.set_charset(\"utf8\"))\nprint(postgres_db.set_schema(\"custom_schema\"))\nprint(sqlite_db.vacuum_database())\n\nprint(\"\\n3. \ucd94\uc0c1 \ud074\ub798\uc2a4 \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131 \uc2dc\ub3c4:\")\ntry:\n    # \ucd94\uc0c1 \ud074\ub798\uc2a4\ub294 \uc9c1\uc811 \uc778\uc2a4\ud134\uc2a4\ud654\ud560 \uc218 \uc5c6\uc74c\n    abstract_db = DatabaseConnection(\"host\", 5432, \"db\")\nexcept TypeError as e:\n    print(f\"\ucd94\uc0c1 \ud074\ub798\uc2a4 \uc778\uc2a4\ud134\uc2a4\ud654 \uc624\ub958: {e}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#42","title":"4.2 \uc778\ud130\ud398\uc774\uc2a4 \ud328\ud134 \uad6c\ud604","text":"<pre><code>print(\"\\n=== \uc778\ud130\ud398\uc774\uc2a4 \ud328\ud134 \uad6c\ud604 ===\")\n\nfrom abc import ABC, abstractmethod\n\n# \uc778\ud130\ud398\uc774\uc2a4: \uba54\uc11c\ub4dc \uc2dc\uadf8\ub2c8\ucc98\ub9cc \uc815\uc758\ud558\ub294 \uc21c\uc218 \ucd94\uc0c1 \ud074\ub798\uc2a4\nclass Drawable(ABC):\n    \"\"\"\uadf8\ub9ac\uae30 \uac00\ub2a5\ud55c \uac1d\uccb4 \uc778\ud130\ud398\uc774\uc2a4\"\"\"\n\n    @abstractmethod\n    def draw(self):\n        \"\"\"\uadf8\ub9ac\uae30\"\"\"\n        pass\n\n    @abstractmethod\n    def get_area(self):\n        \"\"\"\ub113\uc774 \uad6c\ud558\uae30\"\"\"\n        pass\n\nclass Movable(ABC):\n    \"\"\"\uc774\ub3d9 \uac00\ub2a5\ud55c \uac1d\uccb4 \uc778\ud130\ud398\uc774\uc2a4\"\"\"\n\n    @abstractmethod\n    def move(self, x, y):\n        \"\"\"\uc774\ub3d9\ud558\uae30\"\"\"\n        pass\n\n    @abstractmethod\n    def get_position(self):\n        \"\"\"\uc704\uce58 \uad6c\ud558\uae30\"\"\"\n        pass\n\nclass Resizable(ABC):\n    \"\"\"\ud06c\uae30 \uc870\uc808 \uac00\ub2a5\ud55c \uac1d\uccb4 \uc778\ud130\ud398\uc774\uc2a4\"\"\"\n\n    @abstractmethod\n    def resize(self, scale_factor):\n        \"\"\"\ud06c\uae30 \uc870\uc808\"\"\"\n        pass\n\n    @abstractmethod\n    def get_size(self):\n        \"\"\"\ud06c\uae30 \uad6c\ud558\uae30\"\"\"\n        pass\n\n# \ub2e4\uc911 \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\nclass GraphicRectangle(Drawable, Movable, Resizable):\n    \"\"\"\uadf8\ub798\ud53d \uc9c1\uc0ac\uac01\ud615 - \uc5ec\ub7ec \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\"\"\"\n\n    def __init__(self, x, y, width, height, color=\"black\"):\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n        self.color = color\n\n    # Drawable \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\n    def draw(self):\n        return f\"{self.color} \uc9c1\uc0ac\uac01\ud615\uc744 ({self.x}, {self.y})\uc5d0 \uadf8\ub9bd\ub2c8\ub2e4. \ud06c\uae30: {self.width}\u00d7{self.height}\"\n\n    def get_area(self):\n        return self.width * self.height\n\n    # Movable \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\n    def move(self, x, y):\n        self.x += x\n        self.y += y\n        return f\"\uc9c1\uc0ac\uac01\ud615\uc744 ({x}, {y})\ub9cc\ud07c \uc774\ub3d9\ud588\uc2b5\ub2c8\ub2e4. \uc0c8 \uc704\uce58: ({self.x}, {self.y})\"\n\n    def get_position(self):\n        return (self.x, self.y)\n\n    # Resizable \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\n    def resize(self, scale_factor):\n        if scale_factor &lt;= 0:\n            raise ValueError(\"\ud06c\uae30 \uc870\uc808 \ube44\uc728\uc740 \uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n\n        self.width *= scale_factor\n        self.height *= scale_factor\n        return f\"\uc9c1\uc0ac\uac01\ud615 \ud06c\uae30\ub97c {scale_factor}\ubc30\ub85c \uc870\uc808\ud588\uc2b5\ub2c8\ub2e4. \uc0c8 \ud06c\uae30: {self.width}\u00d7{self.height}\"\n\n    def get_size(self):\n        return (self.width, self.height)\n\nclass GraphicCircle(Drawable, Movable, Resizable):\n    \"\"\"\uadf8\ub798\ud53d \uc6d0 - \uc5ec\ub7ec \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\"\"\"\n\n    def __init__(self, x, y, radius, color=\"black\"):\n        self.x = x\n        self.y = y\n        self.radius = radius\n        self.color = color\n\n    # Drawable \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\n    def draw(self):\n        return f\"{self.color} \uc6d0\uc744 ({self.x}, {self.y})\uc5d0 \uadf8\ub9bd\ub2c8\ub2e4. \ubc18\uc9c0\ub984: {self.radius}\"\n\n    def get_area(self):\n        import math\n        return math.pi * self.radius ** 2\n\n    # Movable \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\n    def move(self, x, y):\n        self.x += x\n        self.y += y\n        return f\"\uc6d0\uc744 ({x}, {y})\ub9cc\ud07c \uc774\ub3d9\ud588\uc2b5\ub2c8\ub2e4. \uc0c8 \uc704\uce58: ({self.x}, {self.y})\"\n\n    def get_position(self):\n        return (self.x, self.y)\n\n    # Resizable \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\n    def resize(self, scale_factor):\n        if scale_factor &lt;= 0:\n            raise ValueError(\"\ud06c\uae30 \uc870\uc808 \ube44\uc728\uc740 \uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n\n        self.radius *= scale_factor\n        return f\"\uc6d0\uc758 \ud06c\uae30\ub97c {scale_factor}\ubc30\ub85c \uc870\uc808\ud588\uc2b5\ub2c8\ub2e4. \uc0c8 \ubc18\uc9c0\ub984: {self.radius}\"\n\n    def get_size(self):\n        return self.radius\n\nclass SimpleText(Drawable, Movable):\n    \"\"\"\ub2e8\uc21c \ud14d\uc2a4\ud2b8 - \uc77c\ubd80 \uc778\ud130\ud398\uc774\uc2a4\ub9cc \uad6c\ud604\"\"\"\n\n    def __init__(self, x, y, text, font_size=12):\n        self.x = x\n        self.y = y\n        self.text = text\n        self.font_size = font_size\n\n    # Drawable \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\n    def draw(self):\n        return f\"\ud14d\uc2a4\ud2b8 '{self.text}'\ub97c ({self.x}, {self.y})\uc5d0 \uadf8\ub9bd\ub2c8\ub2e4. \ud3f0\ud2b8 \ud06c\uae30: {self.font_size}\"\n\n    def get_area(self):\n        # \ud14d\uc2a4\ud2b8\uc758 \ub300\ub7b5\uc801\uc778 \ub113\uc774 (\ud3f0\ud2b8 \ud06c\uae30 \uae30\ubc18)\n        return len(self.text) * self.font_size * 0.6 * self.font_size\n\n    # Movable \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604\n    def move(self, x, y):\n        self.x += x\n        self.y += y\n        return f\"\ud14d\uc2a4\ud2b8\ub97c ({x}, {y})\ub9cc\ud07c \uc774\ub3d9\ud588\uc2b5\ub2c8\ub2e4. \uc0c8 \uc704\uce58: ({self.x}, {self.y})\"\n\n    def get_position(self):\n        return (self.x, self.y)\n\n# \uc778\ud130\ud398\uc774\uc2a4 \uae30\ubc18 \ud568\uc218\ub4e4\ndef draw_all(drawable_objects):\n    \"\"\"\uadf8\ub9ac\uae30 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uac1d\uccb4 \uadf8\ub9ac\uae30\"\"\"\n    print(\"=== \ubaa8\ub4e0 \uac1d\uccb4 \uadf8\ub9ac\uae30 ===\")\n    for obj in drawable_objects:\n        print(f\"- {obj.draw()}\")\n        print(f\"  \ub113\uc774: {obj.get_area():.2f}\")\n\ndef move_all(movable_objects, dx, dy):\n    \"\"\"\uc774\ub3d9 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uac1d\uccb4 \uc774\ub3d9\"\"\"\n    print(f\"\\n=== \ubaa8\ub4e0 \uac1d\uccb4\ub97c ({dx}, {dy})\ub9cc\ud07c \uc774\ub3d9 ===\")\n    for obj in movable_objects:\n        print(f\"- {obj.move(dx, dy)}\")\n\ndef resize_all(resizable_objects, scale):\n    \"\"\"\ud06c\uae30 \uc870\uc808 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uac1d\uccb4 \ud06c\uae30 \uc870\uc808\"\"\"\n    print(f\"\\n=== \ubaa8\ub4e0 \uac1d\uccb4 \ud06c\uae30\ub97c {scale}\ubc30\ub85c \uc870\uc808 ===\")\n    for obj in resizable_objects:\n        if isinstance(obj, Resizable):\n            print(f\"- {obj.resize(scale)}\")\n\ndef process_graphics(objects):\n    \"\"\"\uadf8\ub798\ud53d \uac1d\uccb4\ub4e4\uc744 \uc778\ud130\ud398\uc774\uc2a4\ubcc4\ub85c \ucc98\ub9ac\"\"\"\n    print(\"\\n=== \uc778\ud130\ud398\uc774\uc2a4\ubcc4 \uac1d\uccb4 \ubd84\ub958 \ubc0f \ucc98\ub9ac ===\")\n\n    drawable_objects = [obj for obj in objects if isinstance(obj, Drawable)]\n    movable_objects = [obj for obj in objects if isinstance(obj, Movable)]\n    resizable_objects = [obj for obj in objects if isinstance(obj, Resizable)]\n\n    print(f\"\uadf8\ub9ac\uae30 \uac00\ub2a5\ud55c \uac1d\uccb4: {len(drawable_objects)}\uac1c\")\n    print(f\"\uc774\ub3d9 \uac00\ub2a5\ud55c \uac1d\uccb4: {len(movable_objects)}\uac1c\")\n    print(f\"\ud06c\uae30 \uc870\uc808 \uac00\ub2a5\ud55c \uac1d\uccb4: {len(resizable_objects)}\uac1c\")\n\n    # \uac01 \uc778\ud130\ud398\uc774\uc2a4\ubcc4 \uc791\uc5c5 \uc218\ud589\n    draw_all(drawable_objects)\n    move_all(movable_objects, 10, 5)\n    resize_all(resizable_objects, 1.5)\n\n# \uc778\ud130\ud398\uc774\uc2a4 \ud328\ud134 \uc608\uc81c\nprint(\"1. \ub2e4\uc591\ud55c \uadf8\ub798\ud53d \uac1d\uccb4 \uc0dd\uc131:\")\nrect = GraphicRectangle(0, 0, 100, 50, \"\ube68\uac04\uc0c9\")\ncircle = GraphicCircle(50, 50, 30, \"\ud30c\ub780\uc0c9\")\ntext = SimpleText(10, 10, \"\uc548\ub155\ud558\uc138\uc694!\", 16)\n\ngraphics_objects = [rect, circle, text]\n\nprint(\"\\n2. \ucd08\uae30 \uc0c1\ud0dc:\")\nfor i, obj in enumerate(graphics_objects, 1):\n    print(f\"{i}. {obj.__class__.__name__}: {obj.draw()}\")\n\nprint(\"\\n3. \uc778\ud130\ud398\uc774\uc2a4 \uae30\ubc18 \ucc98\ub9ac:\")\nprocess_graphics(graphics_objects)\n\nprint(\"\\n4. \ucc98\ub9ac \ud6c4 \uc0c1\ud0dc:\")\nfor i, obj in enumerate(graphics_objects, 1):\n    print(f\"{i}. {obj.__class__.__name__}: {obj.draw()}\")\n    print(f\"   \uc704\uce58: {obj.get_position()}\")\n    if isinstance(obj, Resizable):\n        print(f\"   \ud06c\uae30: {obj.get_size()}\")\n\nprint(\"\\n5. \uc778\ud130\ud398\uc774\uc2a4 \ud655\uc778:\")\nfor obj in graphics_objects:\n    interfaces = []\n    if isinstance(obj, Drawable):\n        interfaces.append(\"Drawable\")\n    if isinstance(obj, Movable):\n        interfaces.append(\"Movable\")\n    if isinstance(obj, Resizable):\n        interfaces.append(\"Resizable\")\n\n    print(f\"{obj.__class__.__name__}: {', '.join(interfaces)}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#5-mro","title":"5. \ub2e4\uc911 \uc0c1\uc18d\uacfc MRO","text":""},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#51","title":"5.1 \ub2e4\uc911 \uc0c1\uc18d \uae30\ubcf8","text":"<pre><code>print(\"\\n=== \ub2e4\uc911 \uc0c1\uc18d\uacfc MRO ===\")\n\nclass Flyable:\n    \"\"\"\ub0a0 \uc218 \uc788\ub294 \ub2a5\ub825\"\"\"\n\n    def __init__(self):\n        self.altitude = 0\n        self.is_flying = False\n\n    def take_off(self):\n        \"\"\"\uc774\ub959\"\"\"\n        if not self.is_flying:\n            self.is_flying = True\n            self.altitude = 100\n            return f\"{self.__class__.__name__}\uc774(\uac00) \uc774\ub959\ud588\uc2b5\ub2c8\ub2e4. \uace0\ub3c4: {self.altitude}m\"\n        return \"\uc774\ubbf8 \ube44\ud589 \uc911\uc785\ub2c8\ub2e4.\"\n\n    def land(self):\n        \"\"\"\ucc29\ub959\"\"\"\n        if self.is_flying:\n            self.is_flying = False\n            self.altitude = 0\n            return f\"{self.__class__.__name__}\uc774(\uac00) \ucc29\ub959\ud588\uc2b5\ub2c8\ub2e4.\"\n        return \"\uc774\ubbf8 \ucc29\ub959\ud574 \uc788\uc2b5\ub2c8\ub2e4.\"\n\n    def fly_to_altitude(self, target_altitude):\n        \"\"\"\uace0\ub3c4 \ubcc0\uacbd\"\"\"\n        if self.is_flying:\n            self.altitude = target_altitude\n            return f\"\uace0\ub3c4\ub97c {target_altitude}m\ub85c \ubcc0\uacbd\ud588\uc2b5\ub2c8\ub2e4.\"\n        return \"\uba3c\uc800 \uc774\ub959\ud558\uc138\uc694.\"\n\nclass Swimmable:\n    \"\"\"\uc218\uc601\ud560 \uc218 \uc788\ub294 \ub2a5\ub825\"\"\"\n\n    def __init__(self):\n        self.depth = 0\n        self.is_swimming = False\n\n    def dive(self):\n        \"\"\"\ub2e4\uc774\ube59\"\"\"\n        if not self.is_swimming:\n            self.is_swimming = True\n            self.depth = 5\n            return f\"{self.__class__.__name__}\uc774(\uac00) \ubb3c\uc5d0 \ub4e4\uc5b4\uac14\uc2b5\ub2c8\ub2e4. \uae4a\uc774: {self.depth}m\"\n        return \"\uc774\ubbf8 \uc218\uc601 \uc911\uc785\ub2c8\ub2e4.\"\n\n    def surface(self):\n        \"\"\"\uc218\uba74\uc73c\ub85c\"\"\"\n        if self.is_swimming:\n            self.is_swimming = False\n            self.depth = 0\n            return f\"{self.__class__.__name__}\uc774(\uac00) \uc218\uba74\uc73c\ub85c \uc62c\ub77c\uc654\uc2b5\ub2c8\ub2e4.\"\n        return \"\ubb3c\uc5d0 \uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\"\n\n    def swim_to_depth(self, target_depth):\n        \"\"\"\uae4a\uc774 \ubcc0\uacbd\"\"\"\n        if self.is_swimming:\n            self.depth = target_depth\n            return f\"\uae4a\uc774\ub97c {target_depth}m\ub85c \ubcc0\uacbd\ud588\uc2b5\ub2c8\ub2e4.\"\n        return \"\uba3c\uc800 \ubb3c\uc5d0 \ub4e4\uc5b4\uac00\uc138\uc694.\"\n\nclass Animal:\n    \"\"\"\ub3d9\ubb3c \uae30\ubcf8 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n        self.energy = 100\n\n    def eat(self, food):\n        \"\"\"\uba39\uae30\"\"\"\n        self.energy = min(100, self.energy + 20)\n        return f\"{self.name}\uc774(\uac00) {food}\uc744(\ub97c) \uba39\uc5b4\uc11c \uc5d0\ub108\uc9c0\uac00 {self.energy}\uc774 \ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n\n    def rest(self):\n        \"\"\"\ud734\uc2dd\"\"\"\n        self.energy = min(100, self.energy + 30)\n        return f\"{self.name}\uc774(\uac00) \ud734\uc2dd\uc744 \ucde8\ud574\uc11c \uc5d0\ub108\uc9c0\uac00 {self.energy}\uc774 \ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n\n    def get_status(self):\n        \"\"\"\uc0c1\ud0dc \ud655\uc778\"\"\"\n        return f\"{self.name} ({self.species}) - \uc5d0\ub108\uc9c0: {self.energy}\"\n\n# \ub2e4\uc911 \uc0c1\uc18d \uc608\uc81c\nclass Duck(Animal, Flyable, Swimmable):\n    \"\"\"\uc624\ub9ac - \ub0a0\uace0 \uc218\uc601\ub3c4 \uac00\ub2a5\ud55c \ub3d9\ubb3c\"\"\"\n\n    def __init__(self, name):\n        # \ub2e4\uc911 \uc0c1\uc18d \uc2dc \ubaa8\ub4e0 \ubd80\ubaa8 \ud074\ub798\uc2a4 \ucd08\uae30\ud654\n        Animal.__init__(self, name, \"\uc624\ub9ac\")\n        Flyable.__init__(self)\n        Swimmable.__init__(self)\n        self.feathers_waterproof = True\n\n    def quack(self):\n        \"\"\"\uaf65\uaf65\"\"\"\n        return f\"{self.name}\uc774(\uac00) \uaf65\uaf65 \uc6c1\ub2c8\ub2e4.\"\n\n    def preen_feathers(self):\n        \"\"\"\uae43\ud138 \uc815\ub9ac\"\"\"\n        return f\"{self.name}\uc774(\uac00) \uae43\ud138\uc744 \uc815\ub9ac\ud569\ub2c8\ub2e4.\"\n\nclass Penguin(Animal, Swimmable):\n    \"\"\"\ud3ad\uadc4 - \uc218\uc601\ub9cc \uac00\ub2a5\ud55c \ub3d9\ubb3c (\ub0a0\uc9c0 \ubabb\ud568)\"\"\"\n\n    def __init__(self, name):\n        Animal.__init__(self, name, \"\ud3ad\uadc4\")\n        Swimmable.__init__(self)\n        self.blubber_thickness = 5  # \uc9c0\ubc29\uce35 \ub450\uaed8(cm)\n\n    def slide_on_ice(self):\n        \"\"\"\uc5bc\uc74c \uc704\uc5d0\uc11c \ubbf8\ub044\ub7ec\uc9c0\uae30\"\"\"\n        return f\"{self.name}\uc774(\uac00) \uc5bc\uc74c \uc704\uc5d0\uc11c \ubbf8\ub044\ub7ec\uc9d1\ub2c8\ub2e4.\"\n\n    def huddle_for_warmth(self):\n        \"\"\"\ucd94\uc704\uc5d0 \ubab8\uc744 \uc6c0\uce20\ub9ac\uae30\"\"\"\n        return f\"{self.name}\uc774(\uac00) \ucd94\uc704\uc5d0 \ubab8\uc744 \uc6c0\uce20\ub9bd\ub2c8\ub2e4.\"\n\nclass Eagle(Animal, Flyable):\n    \"\"\"\ub3c5\uc218\ub9ac - \ub0a0\uae30\ub9cc \uac00\ub2a5\ud55c \ub3d9\ubb3c (\uc218\uc601 \ubabb\ud568)\"\"\"\n\n    def __init__(self, name):\n        Animal.__init__(self, name, \"\ub3c5\uc218\ub9ac\")\n        Flyable.__init__(self)\n        self.wing_span = 200  # \ub0a0\uac1c \uae38\uc774(cm)\n\n    def hunt(self):\n        \"\"\"\uc0ac\ub0e5\"\"\"\n        if self.is_flying:\n            return f\"{self.name}\uc774(\uac00) \ud558\ub298\uc5d0\uc11c \uc0ac\ub0e5\ud569\ub2c8\ub2e4.\"\n        return f\"{self.name}\uc774(\uac00) \uc9c0\uc0c1\uc5d0\uc11c \uc0ac\ub0e5\ud569\ub2c8\ub2e4.\"\n\n    def screech(self):\n        \"\"\"\ub0a0\uce74\ub85c\uc6b4 \uc6b8\uc74c\"\"\"\n        return f\"{self.name}\uc774(\uac00) \ub0a0\uce74\ub86d\uac8c \uc6c1\ub2c8\ub2e4.\"\n\n# MRO (Method Resolution Order) \ud655\uc778\nprint(\"1. MRO (\uba54\uc11c\ub4dc \ud574\uacb0 \uc21c\uc11c) \ud655\uc778:\")\nprint(f\"Duck\uc758 MRO: {Duck.__mro__}\")\nprint(f\"Penguin\uc758 MRO: {Penguin.__mro__}\")\nprint(f\"Eagle\uc758 MRO: {Eagle.__mro__}\")\n\n# \ub2e4\uc911 \uc0c1\uc18d \ub3d9\ubb3c\ub4e4 \uc0dd\uc131 \ubc0f \ud14c\uc2a4\ud2b8\nprint(\"\\n2. \ub2e4\uc911 \uc0c1\uc18d \ub3d9\ubb3c\ub4e4:\")\n\n# \uc624\ub9ac (\ub0a0\uace0 \uc218\uc601 \ubaa8\ub450 \uac00\ub2a5)\nduck = Duck(\"\ub3c4\ub110\ub4dc\")\nprint(f\"\\n=== {duck.name} \uc624\ub9ac ===\")\nprint(duck.get_status())\nprint(duck.quack())\nprint(duck.take_off())\nprint(duck.fly_to_altitude(200))\nprint(duck.land())\nprint(duck.dive())\nprint(duck.swim_to_depth(3))\nprint(duck.surface())\n\n# \ud3ad\uadc4 (\uc218\uc601\ub9cc \uac00\ub2a5)\npenguin = Penguin(\"\ud551\uad6c\")\nprint(f\"\\n=== {penguin.name} \ud3ad\uadc4 ===\")\nprint(penguin.get_status())\nprint(penguin.slide_on_ice())\nprint(penguin.dive())\nprint(penguin.swim_to_depth(10))\nprint(penguin.surface())\n\n# \ub3c5\uc218\ub9ac (\ub0a0\uae30\ub9cc \uac00\ub2a5)\neagle = Eagle(\"\uc774\uae00\")\nprint(f\"\\n=== {eagle.name} \ub3c5\uc218\ub9ac ===\")\nprint(eagle.get_status())\nprint(eagle.take_off())\nprint(eagle.hunt())\nprint(eagle.fly_to_altitude(500))\nprint(eagle.screech())\nprint(eagle.land())\n\nprint(\"\\n3. \ub2a5\ub825\ubcc4 \ub3d9\ubb3c \ubd84\ub958:\")\nanimals = [duck, penguin, eagle]\n\nflying_animals = [animal for animal in animals if isinstance(animal, Flyable)]\nswimming_animals = [animal for animal in animals if isinstance(animal, Swimmable)]\n\nprint(f\"\ub0a0 \uc218 \uc788\ub294 \ub3d9\ubb3c: {[animal.name for animal in flying_animals]}\")\nprint(f\"\uc218\uc601\ud560 \uc218 \uc788\ub294 \ub3d9\ubb3c: {[animal.name for animal in swimming_animals]}\")\n\nprint(\"\\n4. \ub2e4\ud615\uc131\uc744 \ud65c\uc6a9\ud55c \ucc98\ub9ac:\")\ndef test_animal_abilities(animal):\n    \"\"\"\ub3d9\ubb3c\uc758 \ub2a5\ub825 \ud14c\uc2a4\ud2b8\"\"\"\n    print(f\"\\n--- {animal.name} \ub2a5\ub825 \ud14c\uc2a4\ud2b8 ---\")\n\n    # \ubaa8\ub4e0 \ub3d9\ubb3c\uc774 \uac00\uc9c4 \uae30\ubcf8 \ub2a5\ub825\n    print(animal.eat(\"\ubb3c\uace0\uae30\"))\n\n    # \ub0a0 \uc218 \uc788\ub294 \uacbd\uc6b0\n    if isinstance(animal, Flyable):\n        print(animal.take_off())\n        print(animal.land())\n    else:\n        print(f\"{animal.name}\uc740(\ub294) \ub0a0 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n\n    # \uc218\uc601\ud560 \uc218 \uc788\ub294 \uacbd\uc6b0\n    if isinstance(animal, Swimmable):\n        print(animal.dive())\n        print(animal.surface())\n    else:\n        print(f\"{animal.name}\uc740(\ub294) \uc218\uc601\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n\nfor animal in animals:\n    test_animal_abilities(animal)\n</code></pre>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#52","title":"5.2 \ubcf5\uc7a1\ud55c \ub2e4\uc911 \uc0c1\uc18d\uacfc \ub2e4\uc774\uc544\ubaac\ub4dc \ubb38\uc81c","text":"<pre><code>print(\"\\n=== \ub2e4\uc774\uc544\ubaac\ub4dc \ubb38\uc81c\uc640 super() ===\")\n\nclass A:\n    \"\"\"\ucd5c\uc0c1\uc704 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        print(\"A \ud074\ub798\uc2a4 \ucd08\uae30\ud654\")\n        self.value_a = \"A\"\n\n    def method(self):\n        print(\"A\uc758 method \ud638\ucd9c\")\n        return \"A\"\n\nclass B(A):\n    \"\"\"A\ub97c \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        print(\"B \ud074\ub798\uc2a4 \ucd08\uae30\ud654 \uc2dc\uc791\")\n        super().__init__()\n        print(\"B \ud074\ub798\uc2a4 \ucd08\uae30\ud654 \uc644\ub8cc\")\n        self.value_b = \"B\"\n\n    def method(self):\n        print(\"B\uc758 method \ud638\ucd9c\")\n        result = super().method()\n        return f\"B -&gt; {result}\"\n\nclass C(A):\n    \"\"\"A\ub97c \uc0c1\uc18d\ubc1b\ub294 \ub2e4\ub978 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        print(\"C \ud074\ub798\uc2a4 \ucd08\uae30\ud654 \uc2dc\uc791\")\n        super().__init__()\n        print(\"C \ud074\ub798\uc2a4 \ucd08\uae30\ud654 \uc644\ub8cc\")\n        self.value_c = \"C\"\n\n    def method(self):\n        print(\"C\uc758 method \ud638\ucd9c\")\n        result = super().method()\n        return f\"C -&gt; {result}\"\n\nclass D(B, C):\n    \"\"\"B\uc640 C\ub97c \ubaa8\ub450 \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4 (\ub2e4\uc774\uc544\ubaac\ub4dc \uad6c\uc870)\"\"\"\n\n    def __init__(self):\n        print(\"D \ud074\ub798\uc2a4 \ucd08\uae30\ud654 \uc2dc\uc791\")\n        super().__init__()\n        print(\"D \ud074\ub798\uc2a4 \ucd08\uae30\ud654 \uc644\ub8cc\")\n        self.value_d = \"D\"\n\n    def method(self):\n        print(\"D\uc758 method \ud638\ucd9c\")\n        result = super().method()\n        return f\"D -&gt; {result}\"\n\n    def show_all_values(self):\n        \"\"\"\ubaa8\ub4e0 \uac12 \ud45c\uc2dc\"\"\"\n        return f\"A: {self.value_a}, B: {self.value_b}, C: {self.value_c}, D: {self.value_d}\"\n\nprint(\"1. \ub2e4\uc774\uc544\ubaac\ub4dc \uc0c1\uc18d \uad6c\uc870:\")\nprint(\"    A\")\nprint(\"   / \\\\\")\nprint(\"  B   C\")\nprint(\"   \\\\ /\")\nprint(\"    D\")\n\nprint(\"\\n2. MRO \ud655\uc778:\")\nprint(f\"D\uc758 MRO: {D.__mro__}\")\n\nprint(\"\\n3. \uac1d\uccb4 \uc0dd\uc131 \uc2dc \ucd08\uae30\ud654 \uc21c\uc11c:\")\nd = D()\n\nprint(\"\\n4. \uba54\uc11c\ub4dc \ud638\ucd9c \uc21c\uc11c:\")\nresult = d.method()\nprint(f\"\ucd5c\uc885 \uacb0\uacfc: {result}\")\n\nprint(\"\\n5. \ubaa8\ub4e0 \uac12 \ud655\uc778:\")\nprint(d.show_all_values())\n\n# \ub354 \ubcf5\uc7a1\ud55c \ub2e4\uc911 \uc0c1\uc18d \uc608\uc81c\nprint(\"\\n=== \ubcf5\uc7a1\ud55c \ub2e4\uc911 \uc0c1\uc18d \uc2dc\ub098\ub9ac\uc624 ===\")\n\nclass Device:\n    \"\"\"\uc7a5\uce58 \uae30\ubcf8 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, name):\n        self.name = name\n        self.is_on = False\n        print(f\"Device '{name}' \ucd08\uae30\ud654\")\n\n    def power_on(self):\n        self.is_on = True\n        return f\"{self.name} \uc804\uc6d0 \ucf1c\uc9d0\"\n\n    def power_off(self):\n        self.is_on = False\n        return f\"{self.name} \uc804\uc6d0 \uaebc\uc9d0\"\n\nclass NetworkEnabled:\n    \"\"\"\ub124\ud2b8\uc6cc\ud06c \uae30\ub2a5\"\"\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.ip_address = None\n        self.is_connected = False\n        print(\"NetworkEnabled \ucd08\uae30\ud654\")\n\n    def connect_to_network(self, ip):\n        self.ip_address = ip\n        self.is_connected = True\n        return f\"\ub124\ud2b8\uc6cc\ud06c\uc5d0 \uc5f0\uacb0\ub428: {ip}\"\n\n    def disconnect_from_network(self):\n        self.is_connected = False\n        return \"\ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5f0\uacb0 \ud574\uc81c\ub428\"\n\nclass AudioCapable:\n    \"\"\"\uc624\ub514\uc624 \uae30\ub2a5\"\"\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.volume = 50\n        self.is_muted = False\n        print(\"AudioCapable \ucd08\uae30\ud654\")\n\n    def play_audio(self, audio_file):\n        if not self.is_muted:\n            return f\"\uc624\ub514\uc624 \uc7ac\uc0dd: {audio_file} (\ubcfc\ub968: {self.volume})\"\n        return \"\uc74c\uc18c\uac70 \uc0c1\ud0dc\uc785\ub2c8\ub2e4\"\n\n    def set_volume(self, volume):\n        self.volume = max(0, min(100, volume))\n        return f\"\ubcfc\ub968 \uc124\uc815: {self.volume}\"\n\n    def toggle_mute(self):\n        self.is_muted = not self.is_muted\n        status = \"\uc74c\uc18c\uac70\" if self.is_muted else \"\uc74c\uc18c\uac70 \ud574\uc81c\"\n        return f\"{status}\ub428\"\n\nclass DisplayCapable:\n    \"\"\"\ub514\uc2a4\ud50c\ub808\uc774 \uae30\ub2a5\"\"\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.brightness = 70\n        self.resolution = \"1920x1080\"\n        print(\"DisplayCapable \ucd08\uae30\ud654\")\n\n    def show_content(self, content):\n        return f\"\ud654\uba74\uc5d0 \ud45c\uc2dc: {content} (\ubc1d\uae30: {self.brightness}%, \ud574\uc0c1\ub3c4: {self.resolution})\"\n\n    def adjust_brightness(self, brightness):\n        self.brightness = max(0, min(100, brightness))\n        return f\"\ubc1d\uae30 \uc870\uc808: {self.brightness}%\"\n\n    def change_resolution(self, resolution):\n        self.resolution = resolution\n        return f\"\ud574\uc0c1\ub3c4 \ubcc0\uacbd: {resolution}\"\n\nclass SmartTV(Device, NetworkEnabled, AudioCapable, DisplayCapable):\n    \"\"\"\uc2a4\ub9c8\ud2b8 TV - \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uac00\uc9c4 \ubcf5\ud569 \uc7a5\uce58\"\"\"\n\n    def __init__(self, name, brand):\n        self.brand = brand\n        super().__init__(name=name)\n        self.current_channel = 1\n        self.apps_installed = []\n        print(f\"SmartTV '{name}' \ucd08\uae30\ud654 \uc644\ub8cc\")\n\n    def change_channel(self, channel):\n        self.current_channel = channel\n        return f\"\ucc44\ub110 {channel}\uc73c\ub85c \ubcc0\uacbd\"\n\n    def install_app(self, app_name):\n        if self.is_connected:\n            self.apps_installed.append(app_name)\n            return f\"\uc571 '{app_name}' \uc124\uce58 \uc644\ub8cc\"\n        return \"\ub124\ud2b8\uc6cc\ud06c\uc5d0 \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc74c\"\n\n    def launch_app(self, app_name):\n        if app_name in self.apps_installed:\n            return f\"\uc571 '{app_name}' \uc2e4\ud589\"\n        return f\"\uc571 '{app_name}'\uc774 \uc124\uce58\ub418\uc9c0 \uc54a\uc74c\"\n\n    def get_device_info(self):\n        status = \"\ucf1c\uc9d0\" if self.is_on else \"\uaebc\uc9d0\"\n        network_status = f\"\uc5f0\uacb0\ub428 ({self.ip_address})\" if self.is_connected else \"\uc5f0\uacb0 \uc548\ub428\"\n\n        return f\"\"\"\n=== {self.brand} {self.name} \uc815\ubcf4 ===\n\uc804\uc6d0: {status}\n\ub124\ud2b8\uc6cc\ud06c: {network_status}\n\ud604\uc7ac \ucc44\ub110: {self.current_channel}\n\ubcfc\ub968: {self.volume} (\uc74c\uc18c\uac70: {self.is_muted})\n\ubc1d\uae30: {self.brightness}%\n\ud574\uc0c1\ub3c4: {self.resolution}\n\uc124\uce58\ub41c \uc571: {', '.join(self.apps_installed) if self.apps_installed else '\uc5c6\uc74c'}\n        \"\"\".strip()\n\nprint(\"1. \ubcf5\uc7a1\ud55c \ub2e4\uc911 \uc0c1\uc18d \uac1d\uccb4 \uc0dd\uc131:\")\ntv = SmartTV(\"\uac70\uc2e4 TV\", \"\uc0bc\uc131\")\n\nprint(f\"\\n2. SmartTV\uc758 MRO:\")\nprint(f\"MRO: {SmartTV.__mro__}\")\n\nprint(f\"\\n3. \ubaa8\ub4e0 \uae30\ub2a5 \ud14c\uc2a4\ud2b8:\")\nprint(tv.power_on())\nprint(tv.connect_to_network(\"192.168.1.100\"))\nprint(tv.install_app(\"Netflix\"))\nprint(tv.install_app(\"YouTube\"))\nprint(tv.launch_app(\"Netflix\"))\nprint(tv.show_content(\"\uc601\ud654: \uc544\ubc14\ud0c0\"))\nprint(tv.play_audio(\"\uc601\ud654 \uc0ac\uc6b4\ub4dc\ud2b8\ub799\"))\nprint(tv.set_volume(75))\nprint(tv.adjust_brightness(80))\nprint(tv.change_channel(7))\n\nprint(f\"\\n4. \uc7a5\uce58 \uc815\ubcf4:\")\nprint(tv.get_device_info())\n\nprint(f\"\\n5. \ub2e4\uc911 \uc0c1\uc18d\uc5d0\uc11c super()\uc758 \ub3d9\uc791:\")\nprint(\"super()\ub294 MRO\ub97c \ub530\ub77c \ub2e4\uc74c \ud074\ub798\uc2a4\uc758 \uba54\uc11c\ub4dc\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4.\")\nprint(\"\uc774\ub97c \ud1b5\ud574 \ub2e4\uc774\uc544\ubaac\ub4dc \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uace0 \ubaa8\ub4e0 \ubd80\ubaa8 \ud074\ub798\uc2a4\uac00 \uc815\ud655\ud788 \ud55c \ubc88\uc529 \ucd08\uae30\ud654\ub429\ub2c8\ub2e4.\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#6","title":"6. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#1_1","title":"\uc5f0\uc2b5 1: \uac8c\uc784 \uce90\ub9ad\ud130 \uc0c1\uc18d \uc2dc\uc2a4\ud15c","text":"<p>RPG \uac8c\uc784\uc758 \uce90\ub9ad\ud130 \uc2dc\uc2a4\ud15c\uc744 \uc124\uacc4\ud558\uc138\uc694. \uae30\ubcf8 Character \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4\uace0, Warrior, Mage, Archer \ub4f1\uc758 \uc9c1\uc5c5 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\uc544 \uad6c\ud604\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#2_1","title":"\uc5f0\uc2b5 2: \ub3c4\ud615 \uacc4\uce35 \uad6c\uc870","text":"<p>Shape \ucd94\uc0c1 \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4\uace0, \ub2e4\uc591\ud55c \ub3c4\ud615(Circle, Rectangle, Triangle \ub4f1)\uc744 \uc0c1\uc18d\ubc1b\uc544 \uad6c\ud604\ud558\uc138\uc694. \uac01 \ub3c4\ud615\uc740 \ub113\uc774\uc640 \ub458\ub808\ub97c \uacc4\uc0b0\ud560 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#3","title":"\uc5f0\uc2b5 3: \uc9c1\uc6d0 \uad00\ub9ac \uc2dc\uc2a4\ud15c","text":"<p>Employee \uae30\ubcf8 \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4\uace0, FullTimeEmployee, PartTimeEmployee, Contractor \ub4f1\uc73c\ub85c \uc0c1\uc18d\ubc1b\uc544 \uae09\uc5ec \uacc4\uc0b0 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#4_1","title":"\uc5f0\uc2b5 4: \ubbf8\ub514\uc5b4 \ud50c\ub808\uc774\uc5b4 \uc2dc\uc2a4\ud15c","text":"<p>MediaPlayer \ucd94\uc0c1 \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4\uace0, AudioPlayer, VideoPlayer, StreamingPlayer \ub4f1\uc744 \uad6c\ud604\ud558\uc5ec \ub2e4\ud615\uc131\uc744 \ud65c\uc6a9\ud55c \ud50c\ub808\uc774\uc5b4 \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4dc\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\uc0c1\uc18d \uae30\ubcf8: \ucf54\ub4dc \uc7ac\uc0ac\uc6a9\uc131\uc744 \ub192\uc785\ub2c8\ub2e4</li> <li>super() \ud568\uc218: \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uae30\ub2a5\uc744 \uc548\uc804\ud558\uac8c \ud655\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\uba54\uc11c\ub4dc \uc624\ubc84\ub77c\uc774\ub529: \uae30\ub2a5 \ud655\uc7a5\uacfc \ud2b9\ud654</li> <li>\ub2e4\ud615\uc131: \ub3d9\uc77c\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub85c \ub2e4\uc591\ud55c \uac1d\uccb4 \ucc98\ub9ac</li> <li>\ucd94\uc0c1 \ud074\ub798\uc2a4: \uacf5\ud1b5 \uc778\ud130\ud398\uc774\uc2a4 \uac15\uc81c</li> <li>\ub2e4\uc911 \uc0c1\uc18d: \uc5ec\ub7ec \ud074\ub798\uc2a4\ub85c\ubd80\ud130 \uc0c1\uc18d\ubc1b\uae30</li> <li>MRO: \uba54\uc11c\ub4dc \ud574\uacb0 \uc21c\uc11c\uc640 \ub2e4\uc774\uc544\ubaac\ub4dc \ubb38\uc81c</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \ud2b9\uc218 \uba54\uc11c\ub4dc(Magic Methods)\ub97c \ud559\uc2b5\ud558\uc5ec Python \uac1d\uccb4\ub97c \ub354\uc6b1 \uc790\uc5f0\uc2a4\ub7fd\uac8c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6b0\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter05_inheritance_polymorphism/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\uc0c1\uc18d\uc740 is-a \uad00\uacc4\ub97c \ub098\ud0c0\ub0b4\uba70, \ucf54\ub4dc \uc7ac\uc0ac\uc6a9\uc131\uc744 \ub192\uc785\ub2c8\ub2e4</li> <li>super()\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uae30\ub2a5\uc744 \uc548\uc804\ud558\uac8c \ud655\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\ub2e4\ud615\uc131\uc744 \ud1b5\ud574 \uc720\uc5f0\ud558\uace0 \ud655\uc7a5 \uac00\ub2a5\ud55c \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\ucd94\uc0c1 \ud074\ub798\uc2a4\ub85c \uacf5\ud1b5 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uac15\uc81c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\ub2e4\uc911 \uc0c1\uc18d \uc2dc MRO\ub97c \uc774\ud574\ud558\uace0 super()\ub97c \uc62c\ubc14\ub974\uac8c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4  </li> </ul>"},{"location":"tutorials/intermediate/chapter06_magic_methods/","title":"Chapter 6: \ud2b9\uc218 \uba54\uc11c\ub4dc (Magic Methods)","text":""},{"location":"tutorials/intermediate/chapter06_magic_methods/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \ud2b9\uc218 \uba54\uc11c\ub4dc(Magic Methods)\uc758 \uac1c\ub150\uacfc \ubaa9\uc801 \uc774\ud574\ud558\uae30 - str__\uacfc __repr \uba54\uc11c\ub4dc\ub85c \uac1d\uccb4 \ud45c\ud604 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\ud558\uae30 - \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529\uc744 \ud1b5\ud55c \uac1d\uccb4 \uac04 \uc5f0\uc0b0 \uc815\uc758\ud558\uae30 - \ube44\uad50 \uc5f0\uc0b0\uc790\ub97c \uad6c\ud604\ud558\uc5ec \uac1d\uccb4 \uc815\ub82c\uacfc \ube44\uad50 \uac00\ub2a5\ud558\uac8c \ub9cc\ub4e4\uae30 - \ucee8\ud14c\uc774\ub108 \uba54\uc11c\ub4dc\ub85c \uceec\ub809\uc158\ucc98\ub7fc \uc791\ub3d9\ud558\ub294 \ud074\ub798\uc2a4 \ub9cc\ub4e4\uae30 - \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub97c \uad6c\ud604\ud558\uc5ec \ub9ac\uc18c\uc2a4 \uad00\ub9ac\ud558\uae30 - \uc774\ud130\ub808\uc774\ud130 \ud504\ub85c\ud1a0\ucf5c\uc744 \uad6c\ud604\ud558\uc5ec \ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4 \ub9cc\ub4e4\uae30</p>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#1","title":"1. \ud2b9\uc218 \uba54\uc11c\ub4dc \uac1c\uc694","text":""},{"location":"tutorials/intermediate/chapter06_magic_methods/#11","title":"1.1 \ud2b9\uc218 \uba54\uc11c\ub4dc\ub780?","text":"<p>\ud2b9\uc218 \uba54\uc11c\ub4dc(Magic Methods \ub610\ub294 Dunder Methods)\ub294 \ud30c\uc774\uc36c\uc5d0\uc11c \ud074\ub798\uc2a4\uac00 \ub0b4\uc7a5 \ud568\uc218\ub098 \uc5f0\uc0b0\uc790\uc640 \uc0c1\ud638\uc791\uc6a9\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ud2b9\ubcc4\ud55c \uba54\uc11c\ub4dc\uc785\ub2c8\ub2e4. \uc774\ub984\uc774 \uc5b8\ub354\uc2a4\ucf54\uc5b4 \ub450 \uac1c(__) \ub85c \uc2dc\uc791\ud558\uace0 \ub05d\ub0a9\ub2c8\ub2e4.</p> <pre><code>print(\"=== \ud2b9\uc218 \uba54\uc11c\ub4dc \uc18c\uac1c ===\")\n\nclass SimpleClass:\n    \"\"\"\uae30\ubcf8 \ud074\ub798\uc2a4 - \ud2b9\uc218 \uba54\uc11c\ub4dc \uc5c6\uc74c\"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\nclass MagicClass:\n    \"\"\"\ud2b9\uc218 \uba54\uc11c\ub4dc\uac00 \uad6c\ud604\ub41c \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n    def __str__(self):\n        \"\"\"\uc0ac\uc6a9\uc790 \uce5c\ud654\uc801\uc778 \ubb38\uc790\uc5f4 \ud45c\ud604\"\"\"\n        return f\"MagicClass({self.value})\"\n\n    def __repr__(self):\n        \"\"\"\uac1c\ubc1c\uc790\ub97c \uc704\ud55c \uc815\ud655\ud55c \ud45c\ud604\"\"\"\n        return f\"MagicClass({self.value!r})\"\n\n    def __len__(self):\n        \"\"\"len() \ud568\uc218 \ud638\ucd9c \uc2dc \ub3d9\uc791\"\"\"\n        if isinstance(self.value, (list, str, dict)):\n            return len(self.value)\n        return 0\n\n    def __bool__(self):\n        \"\"\"bool() \ubcc0\ud658\uc774\ub098 \uc870\uac74\ubb38\uc5d0\uc11c \uc0ac\uc6a9\"\"\"\n        return bool(self.value)\n\n# \uae30\ubcf8 \ud074\ub798\uc2a4 vs \ud2b9\uc218 \uba54\uc11c\ub4dc \uad6c\ud604 \ud074\ub798\uc2a4 \ube44\uad50\nprint(\"1. \uae30\ubcf8 \ud074\ub798\uc2a4:\")\nsimple = SimpleClass(\"hello\")\nprint(f\"simple: {simple}\")  # \uba54\ubaa8\ub9ac \uc8fc\uc18c \ucd9c\ub825\nprint(f\"type: {type(simple)}\")\n\nprint(\"\\n2. \ud2b9\uc218 \uba54\uc11c\ub4dc \uad6c\ud604 \ud074\ub798\uc2a4:\")\nmagic = MagicClass(\"hello\")\nprint(f\"str(magic): {str(magic)}\")    # __str__ \ud638\ucd9c\nprint(f\"repr(magic): {repr(magic)}\")   # __repr__ \ud638\ucd9c\nprint(f\"len(magic): {len(magic)}\")     # __len__ \ud638\ucd9c\nprint(f\"bool(magic): {bool(magic)}\")   # __bool__ \ud638\ucd9c\n\n# \ube48 \uac12\uc73c\ub85c \ud14c\uc2a4\ud2b8\nempty_magic = MagicClass(\"\")\nprint(f\"\\n3. \ube48 \uac12 \ud14c\uc2a4\ud2b8:\")\nprint(f\"bool(empty_magic): {bool(empty_magic)}\")\nprint(f\"len(empty_magic): {len(empty_magic)}\")\n\nprint(\"\\n4. \uc870\uac74\ubb38\uc5d0\uc11c \uc0ac\uc6a9:\")\nif magic:\n    print(\"magic\uc740 True\ub85c \ud3c9\uac00\ub429\ub2c8\ub2e4\")\n\nif not empty_magic:\n    print(\"empty_magic\uc740 False\ub85c \ud3c9\uac00\ub429\ub2c8\ub2e4\")\n\nprint(\"\\n5. \ub0b4\uc7a5 \ud568\uc218\ub4e4\uacfc\uc758 \ud638\ud658:\")\nmagic_list = MagicClass([1, 2, 3, 4, 5])\nprint(f\"\ub9ac\uc2a4\ud2b8\ub97c \uac00\uc9c4 magic: {magic_list}\")\nprint(f\"\uae38\uc774: {len(magic_list)}\")\nprint(f\"\ubd80\uc6b8\uac12: {bool(magic_list)}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#12","title":"1.2 \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 \ud2b9\uc218 \uba54\uc11c\ub4dc \ubd84\ub958","text":"<pre><code>print(\"\\n=== \ud2b9\uc218 \uba54\uc11c\ub4dc \ubd84\ub958 ===\")\n\nclass MethodDemo:\n    \"\"\"\ub2e4\uc591\ud55c \ud2b9\uc218 \uba54\uc11c\ub4dc \ub370\ubaa8\"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n    # === \uac1d\uccb4 \ud45c\ud604 \uba54\uc11c\ub4dc ===\n    def __str__(self):\n        return f\"MethodDemo: {self.value}\"\n\n    def __repr__(self):\n        return f\"MethodDemo({self.value!r})\"\n\n    # === \uc0b0\uc220 \uc5f0\uc0b0\uc790 \uba54\uc11c\ub4dc ===\n    def __add__(self, other):\n        if isinstance(other, MethodDemo):\n            return MethodDemo(self.value + other.value)\n        return MethodDemo(self.value + other)\n\n    def __mul__(self, other):\n        if isinstance(other, MethodDemo):\n            return MethodDemo(self.value * other.value)\n        return MethodDemo(self.value * other)\n\n    # === \ube44\uad50 \uc5f0\uc0b0\uc790 \uba54\uc11c\ub4dc ===\n    def __eq__(self, other):\n        if isinstance(other, MethodDemo):\n            return self.value == other.value\n        return self.value == other\n\n    def __lt__(self, other):\n        if isinstance(other, MethodDemo):\n            return self.value &lt; other.value\n        return self.value &lt; other\n\n    # === \ucee8\ud14c\uc774\ub108 \uba54\uc11c\ub4dc ===\n    def __len__(self):\n        if hasattr(self.value, '__len__'):\n            return len(self.value)\n        return 0\n\n    def __getitem__(self, key):\n        return self.value[key]\n\n    # === \ub17c\ub9ac \uc5f0\uc0b0 \uba54\uc11c\ub4dc ===\n    def __bool__(self):\n        return bool(self.value)\n\n# \ub2e4\uc591\ud55c \ud2b9\uc218 \uba54\uc11c\ub4dc \uc0ac\uc6a9 \uc608\uc81c\nprint(\"1. \uac1d\uccb4 \uc0dd\uc131\uacfc \ud45c\ud604:\")\ndemo1 = MethodDemo(10)\ndemo2 = MethodDemo(20)\nprint(f\"demo1: {demo1}\")\nprint(f\"repr(demo1): {repr(demo1)}\")\n\nprint(\"\\n2. \uc0b0\uc220 \uc5f0\uc0b0:\")\nresult_add = demo1 + demo2\nprint(f\"{demo1} + {demo2} = {result_add}\")\n\nresult_mul = demo1 * 3\nprint(f\"{demo1} * 3 = {result_mul}\")\n\nprint(\"\\n3. \ube44\uad50 \uc5f0\uc0b0:\")\nprint(f\"{demo1} == {demo2}: {demo1 == demo2}\")\nprint(f\"{demo1} &lt; {demo2}: {demo1 &lt; demo2}\")\n\nprint(\"\\n4. \ucee8\ud14c\uc774\ub108 \uae30\ub2a5 (\ubb38\uc790\uc5f4\ub85c \ud14c\uc2a4\ud2b8):\")\ndemo_str = MethodDemo(\"Hello\")\nprint(f\"len({demo_str}): {len(demo_str)}\")\nprint(f\"{demo_str}[0]: {demo_str[0]}\")\n\nprint(\"\\n5. \ub17c\ub9ac \uc5f0\uc0b0:\")\ndemo_zero = MethodDemo(0)\nprint(f\"bool({demo1}): {bool(demo1)}\")\nprint(f\"bool({demo_zero}): {bool(demo_zero)}\")\n\nprint(\"\\n6. \ud2b9\uc218 \uba54\uc11c\ub4dc \ubaa9\ub85d \ud655\uc778:\")\nmagic_methods = [method for method in dir(MethodDemo) if method.startswith('__') and method.endswith('__')]\nprint(f\"\uad6c\ud604\ub41c \ud2b9\uc218 \uba54\uc11c\ub4dc\ub4e4: {magic_methods[:10]}...\")  # \ucc98\uc74c 10\uac1c\ub9cc \ud45c\uc2dc\n</code></pre>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#2","title":"2. \uac1d\uccb4 \ud45c\ud604 \uba54\uc11c\ub4dc","text":""},{"location":"tutorials/intermediate/chapter06_magic_methods/#21-str__-__repr","title":"2.1 str__\uacfc __repr \uba54\uc11c\ub4dc","text":"<pre><code>print(\"\\n=== \uac1d\uccb4 \ud45c\ud604 \uba54\uc11c\ub4dc ===\")\n\nclass Person:\n    \"\"\"\uc0ac\ub78c \ud074\ub798\uc2a4 - \uac1d\uccb4 \ud45c\ud604 \uba54\uc11c\ub4dc \uad6c\ud604\"\"\"\n\n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n\n    def __str__(self):\n        \"\"\"\uc0ac\uc6a9\uc790 \uce5c\ud654\uc801\uc778 \ud45c\ud604 - \ucd5c\uc885 \uc0ac\uc6a9\uc790\ub97c \uc704\ud55c \uac00\ub3c5\uc131 \uc911\uc2dc\"\"\"\n        return f\"{self.name} ({self.age}\uc138)\"\n\n    def __repr__(self):\n        \"\"\"\uac1c\ubc1c\uc790\ub97c \uc704\ud55c \uc815\ud655\ud55c \ud45c\ud604 - \ub514\ubc84\uae45\uacfc \uac1c\ubc1c\uc5d0 \uc720\uc6a9\"\"\"\n        return f\"Person({self.name!r}, {self.age}, {self.email!r})\"\n\n    def __format__(self, format_spec):\n        \"\"\"format() \ud568\uc218\ub098 f-string\uc5d0\uc11c \uc0ac\uc6a9\uc790 \uc815\uc758 \ud3ec\ub9f7\"\"\"\n        if format_spec == 'full':\n            return f\"{self.name} ({self.age}\uc138, {self.email})\"\n        elif format_spec == 'formal':\n            return f\"Mr./Ms. {self.name}\"\n        else:\n            return str(self)\n\nclass Book:\n    \"\"\"\ucc45 \ud074\ub798\uc2a4 - \ub2e4\uc591\ud55c \ud45c\ud604 \ud615\ud0dc\"\"\"\n\n    def __init__(self, title, author, pages, isbn):\n        self.title = title\n        self.author = author\n        self.pages = pages\n        self.isbn = isbn\n\n    def __str__(self):\n        \"\"\"\uac04\ub2e8\ud55c \ud45c\ud604\"\"\"\n        return f\"'{self.title}' by {self.author}\"\n\n    def __repr__(self):\n        \"\"\"\uc644\uc804\ud55c \ud45c\ud604\"\"\"\n        return f\"Book({self.title!r}, {self.author!r}, {self.pages}, {self.isbn!r})\"\n\n    def __format__(self, format_spec):\n        \"\"\"\ub2e4\uc591\ud55c \ud3ec\ub9f7 \uc635\uc158\"\"\"\n        if format_spec == 'detail':\n            return f\"'{self.title}' by {self.author} ({self.pages} pages, ISBN: {self.isbn})\"\n        elif format_spec == 'short':\n            return f\"{self.title} - {self.author}\"\n        elif format_spec == 'citation':\n            return f\"{self.author}. {self.title}. ISBN: {self.isbn}\"\n        else:\n            return str(self)\n\n# \uac1d\uccb4 \ud45c\ud604 \uba54\uc11c\ub4dc \ud14c\uc2a4\ud2b8\nprint(\"1. Person \ud074\ub798\uc2a4 \ud14c\uc2a4\ud2b8:\")\nperson = Person(\"\uae40\ucca0\uc218\", 30, \"kim@email.com\")\nprint(f\"str(person): {str(person)}\")\nprint(f\"repr(person): {repr(person)}\")\nprint(f\"format(person, 'full'): {format(person, 'full')}\")\nprint(f\"format(person, 'formal'): {format(person, 'formal')}\")\n\nprint(\"\\n2. Book \ud074\ub798\uc2a4 \ud14c\uc2a4\ud2b8:\")\nbook = Book(\"\ud30c\uc774\uc36c \uc644\uc804 \uc815\ubcf5\", \"\uae40\ud30c\uc774\uc36c\", 500, \"978-89-123-4567-8\")\nprint(f\"str(book): {str(book)}\")\nprint(f\"repr(book): {repr(book)}\")\nprint(f\"format(book, 'detail'): {format(book, 'detail')}\")\nprint(f\"format(book, 'citation'): {format(book, 'citation')}\")\n\nprint(\"\\n3. f-string\uc5d0\uc11c \ud3ec\ub9f7 \uc0ac\uc6a9:\")\nprint(f\"\uae30\ubcf8: {person}\")\nprint(f\"\uc804\uccb4 \uc815\ubcf4: {person:full}\")\nprint(f\"\uc815\uc911\ud55c \ud638\uce6d: {person:formal}\")\n\nprint(f\"\\n\ucc45 \uc815\ubcf4:\")\nprint(f\"\uae30\ubcf8: {book}\")\nprint(f\"\uc0c1\uc138: {book:detail}\")\nprint(f\"\uc778\uc6a9: {book:citation}\")\n\nprint(\"\\n4. \ub9ac\uc2a4\ud2b8\uc5d0\uc11c\uc758 \ucd9c\ub825 \ucc28\uc774:\")\npeople = [Person(\"\uae40\ucca0\uc218\", 30, \"kim@email.com\"), Person(\"\uc774\uc601\ud76c\", 25, \"lee@email.com\")]\nprint(f\"\ub9ac\uc2a4\ud2b8 \ucd9c\ub825 (repr \uc0ac\uc6a9): {people}\")\n\nfor person in people:\n    print(f\"\uac1c\ubcc4 \ucd9c\ub825 (str \uc0ac\uc6a9): {person}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#3","title":"3. \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529","text":""},{"location":"tutorials/intermediate/chapter06_magic_methods/#31","title":"3.1 \uc0b0\uc220 \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529","text":"<pre><code>print(\"\\n=== \uc0b0\uc220 \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 ===\")\n\nclass Vector:\n    \"\"\"\ubca1\ud130 \ud074\ub798\uc2a4 - \uc0b0\uc220 \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529\"\"\"\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f\"Vector({self.x}, {self.y})\"\n\n    def __repr__(self):\n        return f\"Vector({self.x}, {self.y})\"\n\n    # === \uc0b0\uc220 \uc5f0\uc0b0\uc790 ===\n    def __add__(self, other):\n        \"\"\"\ub367\uc148 \uc5f0\uc0b0\uc790 (+)\"\"\"\n        if isinstance(other, Vector):\n            return Vector(self.x + other.x, self.y + other.y)\n        elif isinstance(other, (int, float)):\n            return Vector(self.x + other, self.y + other)\n        return NotImplemented\n\n    def __radd__(self, other):\n        \"\"\"\uc5ed\ubc29\ud5a5 \ub367\uc148 (\ub2e4\ub978 \ud0c0\uc785 + Vector)\"\"\"\n        return self.__add__(other)\n\n    def __sub__(self, other):\n        \"\"\"\ube84\uc148 \uc5f0\uc0b0\uc790 (-)\"\"\"\n        if isinstance(other, Vector):\n            return Vector(self.x - other.x, self.y - other.y)\n        elif isinstance(other, (int, float)):\n            return Vector(self.x - other, self.y - other)\n        return NotImplemented\n\n    def __mul__(self, other):\n        \"\"\"\uacf1\uc148 \uc5f0\uc0b0\uc790 (*)\"\"\"\n        if isinstance(other, Vector):\n            # \ub0b4\uc801 (dot product)\n            return self.x * other.x + self.y * other.y\n        elif isinstance(other, (int, float)):\n            # \uc2a4\uce7c\ub77c \uacf1\n            return Vector(self.x * other, self.y * other)\n        return NotImplemented\n\n    def __rmul__(self, other):\n        \"\"\"\uc5ed\ubc29\ud5a5 \uacf1\uc148\"\"\"\n        return self.__mul__(other)\n\n    def __truediv__(self, other):\n        \"\"\"\ub098\ub217\uc148 \uc5f0\uc0b0\uc790 (/)\"\"\"\n        if isinstance(other, (int, float)):\n            if other == 0:\n                raise ValueError(\"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n            return Vector(self.x / other, self.y / other)\n        return NotImplemented\n\n    def __neg__(self):\n        \"\"\"\ub2e8\ud56d \ub9c8\uc774\ub108\uc2a4 \uc5f0\uc0b0\uc790 (-x)\"\"\"\n        return Vector(-self.x, -self.y)\n\n    def __abs__(self):\n        \"\"\"\uc808\ub313\uac12 \ud568\uc218 abs()\"\"\"\n        import math\n        return math.sqrt(self.x**2 + self.y**2)\n\n    # === \ubcf5\ud569 \ud560\ub2f9 \uc5f0\uc0b0\uc790 ===\n    def __iadd__(self, other):\n        \"\"\"\ubcf5\ud569 \ud560\ub2f9 \ub367\uc148 (+=)\"\"\"\n        if isinstance(other, Vector):\n            self.x += other.x\n            self.y += other.y\n        elif isinstance(other, (int, float)):\n            self.x += other\n            self.y += other\n        else:\n            return NotImplemented\n        return self\n\n# \uc0b0\uc220 \uc5f0\uc0b0\uc790 \ud14c\uc2a4\ud2b8\nprint(\"1. Vector \ud074\ub798\uc2a4 \uc0b0\uc220 \uc5f0\uc0b0:\")\nv1 = Vector(3, 4)\nv2 = Vector(1, 2)\n\nprint(f\"v1 = {v1}\")\nprint(f\"v2 = {v2}\")\n\nprint(f\"\\n\uae30\ubcf8 \uc0b0\uc220 \uc5f0\uc0b0:\")\nprint(f\"v1 + v2 = {v1 + v2}\")\nprint(f\"v1 - v2 = {v1 - v2}\")\nprint(f\"v1 * v2 = {v1 * v2}\")  # \ub0b4\uc801\nprint(f\"v1 * 3 = {v1 * 3}\")   # \uc2a4\uce7c\ub77c \uacf1\nprint(f\"3 * v1 = {3 * v1}\")   # \uc5ed\ubc29\ud5a5 \uacf1\uc148\n\nprint(f\"\\n\ub098\ub217\uc148\uacfc \uae30\ud0c0 \uc5f0\uc0b0:\")\nprint(f\"v1 / 2 = {v1 / 2}\")\nprint(f\"-v1 = {-v1}\")\nprint(f\"abs(v1) = {abs(v1):.2f}\")\n\nprint(f\"\\n\ubcf5\ud569 \ud560\ub2f9 \uc5f0\uc0b0\uc790:\")\nv3 = Vector(5, 6)\nprint(f\"v3 = {v3}\")\nv3 += v1\nprint(f\"v3 += v1 -&gt; v3 = {v3}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#32","title":"3.2 \ube44\uad50 \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529","text":"<pre><code>print(\"\\n=== \ube44\uad50 \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 ===\")\n\nfrom functools import total_ordering\n\n@total_ordering\nclass Student:\n    \"\"\"\ud559\uc0dd \ud074\ub798\uc2a4 - \ube44\uad50 \uc5f0\uc0b0\uc790 \uad6c\ud604\"\"\"\n\n    def __init__(self, name, grade, student_id):\n        self.name = name\n        self.grade = grade\n        self.student_id = student_id\n\n    def __str__(self):\n        return f\"Student({self.name}, \uc131\uc801: {self.grade})\"\n\n    def __repr__(self):\n        return f\"Student({self.name!r}, {self.grade}, {self.student_id!r})\"\n\n    def __eq__(self, other):\n        \"\"\"\ub4f1\ub4f1 \uc5f0\uc0b0\uc790 (==)\"\"\"\n        if not isinstance(other, Student):\n            return NotImplemented\n        return (self.name, self.grade, self.student_id) == (other.name, other.grade, other.student_id)\n\n    def __lt__(self, other):\n        \"\"\"\uc791\ub2e4 \uc5f0\uc0b0\uc790 (&lt;) - @total_ordering\uc774 \ub098\uba38\uc9c0\ub97c \uc790\ub3d9 \uc0dd\uc131\"\"\"\n        if not isinstance(other, Student):\n            return NotImplemented\n        # \uc131\uc801\uc73c\ub85c \ube44\uad50 (\ub192\uc740 \uc131\uc801\uc774 \ub354 \ud070 \uac12)\n        return self.grade &lt; other.grade\n\n    def __hash__(self):\n        \"\"\"\ud574\uc2dc \uac12 - \ub515\uc154\ub108\ub9ac \ud0a4\ub098 \uc9d1\ud569 \uc6d0\uc18c\ub85c \uc0ac\uc6a9 \uac00\ub2a5\"\"\"\n        return hash((self.name, self.grade, self.student_id))\n\n# \ube44\uad50 \uc5f0\uc0b0\uc790 \ud14c\uc2a4\ud2b8\nprint(\"1. Student \ud074\ub798\uc2a4 \ube44\uad50:\")\nstudent1 = Student(\"\uae40\ucca0\uc218\", 85, \"S001\")\nstudent2 = Student(\"\uc774\uc601\ud76c\", 92, \"S002\")\nstudent3 = Student(\"\ubc15\ubbfc\uc218\", 85, \"S003\")\n\nstudents = [student1, student2, student3]\nprint(\"\uc815\ub82c \uc804:\")\nfor s in students:\n    print(f\"  {s}\")\n\nstudents.sort()  # __lt__ \uba54\uc11c\ub4dc \uc0ac\uc6a9\nprint(\"\\n\uc131\uc801\uc21c \uc815\ub82c \ud6c4:\")\nfor s in students:\n    print(f\"  {s}\")\n\nprint(f\"\\n\ube44\uad50 \uc5f0\uc0b0:\")\nprint(f\"{student1} == {student3}: {student1 == student3}\")  # False (\uc774\ub984\uc774 \ub2e4\ub984)\nprint(f\"{student1} &lt; {student2}: {student1 &lt; student2}\")    # True (\uc131\uc801\uc774 \ub0ae\uc74c)\nprint(f\"{student2} &gt;= {student1}: {student2 &gt;= student1}\")  # True\n</code></pre>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#4","title":"4. \ucee8\ud14c\uc774\ub108 \uba54\uc11c\ub4dc","text":""},{"location":"tutorials/intermediate/chapter06_magic_methods/#41","title":"4.1 \uc2dc\ud000\uc2a4 \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604","text":"<pre><code>print(\"\\n=== \ucee8\ud14c\uc774\ub108 \uba54\uc11c\ub4dc ===\")\n\nclass CustomList:\n    \"\"\"\ucee4\uc2a4\ud140 \ub9ac\uc2a4\ud2b8 - \uc2dc\ud000\uc2a4 \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604\"\"\"\n\n    def __init__(self, *items):\n        self._items = list(items)\n\n    def __len__(self):\n        \"\"\"len() \ud568\uc218 \uc9c0\uc6d0\"\"\"\n        return len(self._items)\n\n    def __getitem__(self, index):\n        \"\"\"\uc778\ub371\uc2f1\uacfc \uc2ac\ub77c\uc774\uc2f1 \uc9c0\uc6d0\"\"\"\n        if isinstance(index, slice):\n            return CustomList(*self._items[index])\n        return self._items[index]\n\n    def __setitem__(self, index, value):\n        \"\"\"\ud56d\ubaa9 \ud560\ub2f9\"\"\"\n        self._items[index] = value\n\n    def __delitem__(self, index):\n        \"\"\"\ud56d\ubaa9 \uc0ad\uc81c\"\"\"\n        del self._items[index]\n\n    def __contains__(self, item):\n        \"\"\"'in' \uc5f0\uc0b0\uc790 \uc9c0\uc6d0\"\"\"\n        return item in self._items\n\n    def __iter__(self):\n        \"\"\"\ubc18\ubcf5\uc790 \uc9c0\uc6d0\"\"\"\n        return iter(self._items)\n\n    def __str__(self):\n        return f\"CustomList{tuple(self._items)}\"\n\n    def __repr__(self):\n        return f\"CustomList({', '.join(repr(item) for item in self._items)})\"\n\n    def append(self, item):\n        \"\"\"\ud56d\ubaa9 \ucd94\uac00\"\"\"\n        self._items.append(item)\n\n# \ucee8\ud14c\uc774\ub108 \uba54\uc11c\ub4dc \ud14c\uc2a4\ud2b8\nprint(\"1. CustomList \ud14c\uc2a4\ud2b8:\")\nclist = CustomList(1, 2, 3, 4, 5)\nprint(f\"\uc0dd\uc131: {clist}\")\nprint(f\"\uae38\uc774: {len(clist)}\")\nprint(f\"\uc778\ub371\uc2f1 clist[1]: {clist[1]}\")\nprint(f\"\uc2ac\ub77c\uc774\uc2f1 clist[1:4]: {clist[1:4]}\")\n\nprint(f\"\\n\uba64\ubc84\uc2ed \ud14c\uc2a4\ud2b8:\")\nprint(f\"3 in clist: {3 in clist}\")\nprint(f\"10 in clist: {10 in clist}\")\n\nprint(f\"\\n\uc218\uc815 \uc791\uc5c5:\")\nclist[0] = 10\nprint(f\"clist[0] = 10: {clist}\")\n\nclist.append(6)\nprint(f\"clist.append(6): {clist}\")\n\ndel clist[1]\nprint(f\"del clist[1]: {clist}\")\n\nprint(f\"\\n\ubc18\ubcf5:\")\nprint(\"for\ubb38:\", end=\" \")\nfor item in clist:\n    print(item, end=\" \")\n</code></pre>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#5","title":"5. \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800","text":""},{"location":"tutorials/intermediate/chapter06_magic_methods/#51","title":"5.1 \uae30\ubcf8 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uad6c\ud604","text":"<pre><code>print(\"\\n\\n=== \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 ===\")\n\nclass Timer:\n    \"\"\"\uc2e4\ud589 \uc2dc\uac04 \uce21\uc815 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n\n    def __init__(self, name=\"\ucf54\ub4dc \ube14\ub85d\"):\n        self.name = name\n        self.start_time = None\n        self.end_time = None\n        self.elapsed_time = None\n\n    def __enter__(self):\n        \"\"\"\uc2dc\uac04 \uce21\uc815 \uc2dc\uc791\"\"\"\n        import time\n        self.start_time = time.time()\n        print(f\"{self.name} \uc2e4\ud589 \uc2dc\uc791\")\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        \"\"\"\uc2dc\uac04 \uce21\uc815 \uc885\ub8cc\"\"\"\n        import time\n        self.end_time = time.time()\n        self.elapsed_time = self.end_time - self.start_time\n\n        if exc_type is None:\n            print(f\"{self.name} \uc644\ub8cc: {self.elapsed_time:.4f}\ucd08\")\n        else:\n            print(f\"{self.name} \uc2e4\ud589 \uc911 \uc624\ub958 \ubc1c\uc0dd (\uacbd\uacfc \uc2dc\uac04: {self.elapsed_time:.4f}\ucd08)\")\n\n        return False  # \uc608\uc678\ub97c \ub2e4\uc2dc \ubc1c\uc0dd\uc2dc\ud0b4\n\n# \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \ud14c\uc2a4\ud2b8\nprint(\"1. Timer \ud14c\uc2a4\ud2b8:\")\nwith Timer(\"\uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\") as timer:\n    import time\n    time.sleep(0.01)  # 0.01\ucd08 \ub300\uae30\n    print(\"\uc791\uc5c5 \uc911...\")\n\nprint(f\"\uce21\uc815\ub41c \uc2dc\uac04: {timer.elapsed_time:.4f}\ucd08\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#6","title":"6. \uc774\ud130\ub808\uc774\ud130 \ud504\ub85c\ud1a0\ucf5c","text":""},{"location":"tutorials/intermediate/chapter06_magic_methods/#61","title":"6.1 \uae30\ubcf8 \uc774\ud130\ub808\uc774\ud130 \uad6c\ud604","text":"<pre><code>print(\"\\n=== \uc774\ud130\ub808\uc774\ud130 \ud504\ub85c\ud1a0\ucf5c ===\")\n\nclass NumberRange:\n    \"\"\"\uc22b\uc790 \ubc94\uc704 \uc774\ud130\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, start, end, step=1):\n        self.start = start\n        self.end = end\n        self.step = step\n        self.current = start\n\n    def __iter__(self):\n        \"\"\"\uc774\ud130\ub808\uc774\ud130 \uac1d\uccb4 \ubc18\ud658\"\"\"\n        return self\n\n    def __next__(self):\n        \"\"\"\ub2e4\uc74c \uac12 \ubc18\ud658\"\"\"\n        if (self.step &gt; 0 and self.current &gt;= self.end) or \\\n           (self.step &lt; 0 and self.current &lt;= self.end):\n            raise StopIteration\n\n        value = self.current\n        self.current += self.step\n        return value\n\nclass FibonacciIterator:\n    \"\"\"\ud53c\ubcf4\ub098\uce58 \uc218\uc5f4 \uc774\ud130\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, max_count=None):\n        self.max_count = max_count\n        self.count = 0\n        self.current = 0\n        self.next_val = 1\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.max_count is not None and self.count &gt;= self.max_count:\n            raise StopIteration\n\n        value = self.current\n        self.current, self.next_val = self.next_val, self.current + self.next_val\n        self.count += 1\n        return value\n\n# \uc774\ud130\ub808\uc774\ud130 \ud14c\uc2a4\ud2b8\nprint(\"1. NumberRange \uc774\ud130\ub808\uc774\ud130:\")\nprint(\"1\ubd80\ud130 5\uae4c\uc9c0:\", end=\" \")\nfor num in NumberRange(1, 6):\n    print(num, end=\" \")\n\nprint(f\"\\n\\n2. FibonacciIterator:\")\nprint(\"\ucc98\uc74c 8\uac1c \ud53c\ubcf4\ub098\uce58 \uc218:\", end=\" \")\nfor fib in FibonacciIterator(8):\n    print(fib, end=\" \")\n</code></pre>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#7","title":"7. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter06_magic_methods/#1_1","title":"\uc5f0\uc2b5 1: \uc2a4\ub9c8\ud2b8 \uacc4\uc0b0\uae30 \ud074\ub798\uc2a4","text":"<p>\ub2e4\uc591\ud55c \ud2b9\uc218 \uba54\uc11c\ub4dc\ub97c \uad6c\ud604\ud55c \uacc4\uc0b0\uae30 \ud074\ub798\uc2a4\ub97c \ub9cc\ub4dc\uc138\uc694. \uc0b0\uc220 \uc5f0\uc0b0, \ube44\uad50 \uc5f0\uc0b0, \ubb38\uc790\uc5f4 \ud45c\ud604 \ub4f1\uc744 \uc9c0\uc6d0\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#2_1","title":"\uc5f0\uc2b5 2: \ud30c\uc77c \ucc98\ub9ac \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800","text":"<p>\uc548\uc804\ud55c \ud30c\uc77c \ucc98\ub9ac\ub97c \uc704\ud55c \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub97c \uad6c\ud604\ud558\uc138\uc694. \uc608\uc678 \ucc98\ub9ac\uc640 \ub9ac\uc18c\uc2a4 \uc815\ub9ac \uae30\ub2a5\uc744 \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#3_1","title":"\uc5f0\uc2b5 3: \ucee4\uc2a4\ud140 \uceec\ub809\uc158","text":"<p>\ud2b9\ubcc4\ud55c \uae30\ub2a5\uc744 \uac00\uc9c4 \uceec\ub809\uc158 \ud074\ub798\uc2a4\ub97c \uad6c\ud604\ud558\uc138\uc694. \uc778\ub371\uc2f1, \uc2ac\ub77c\uc774\uc2f1, \ubc18\ubcf5, \uba64\ubc84\uc2ed \ud14c\uc2a4\ud2b8\ub97c \uc9c0\uc6d0\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#4_1","title":"\uc5f0\uc2b5 4: \ub370\uc774\ud130 \uc2a4\ud2b8\ub9bc \uc774\ud130\ub808\uc774\ud130","text":"<p>\ub300\uc6a9\ub7c9 \ub370\uc774\ud130\ub97c \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\ub294 \uc774\ud130\ub808\uc774\ud130\ub97c \uad6c\ud604\ud558\uc138\uc694.</p>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\ud2b9\uc218 \uba54\uc11c\ub4dc \uac1c\uc694: Python \uac1d\uccb4\uc640 \ub0b4\uc7a5 \ud568\uc218/\uc5f0\uc0b0\uc790\uc758 \uc0c1\ud638\uc791\uc6a9</li> <li>\uac1d\uccb4 \ud45c\ud604: <code>__str__</code>, <code>__repr__</code>, <code>__format__</code> \uba54\uc11c\ub4dc</li> <li>\uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529: \uc0b0\uc220, \ube44\uad50 \uc5f0\uc0b0\uc790 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5</li> <li>\ucee8\ud14c\uc774\ub108 \uba54\uc11c\ub4dc: \uc2dc\ud000\uc2a4 \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604</li> <li>\ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800: \ub9ac\uc18c\uc2a4 \uad00\ub9ac\uc640 <code>with</code> \ubb38 \uc9c0\uc6d0</li> <li>\uc774\ud130\ub808\uc774\ud130 \ud504\ub85c\ud1a0\ucf5c: \ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4\uc640 \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801 \ucc98\ub9ac</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \ubaa8\ub4c8\uacfc \ud328\ud0a4\uc9c0\ub97c \ud559\uc2b5\ud558\uc5ec \ucf54\ub4dc\ub97c \uccb4\uacc4\uc801\uc73c\ub85c \uad6c\uc870\ud654\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6b0\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter06_magic_methods/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ud2b9\uc218 \uba54\uc11c\ub4dc\ub97c \ud1b5\ud574 Python \uac1d\uccb4\ub97c \ub0b4\uc7a5 \ud0c0\uc785\ucc98\ub7fc \uc790\uc5f0\uc2a4\ub7fd\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529\uc73c\ub85c \ub3c4\uba54\uc778\uc5d0 \ud2b9\ud654\ub41c \uc9c1\uad00\uc801\uc778 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub294 \ub9ac\uc18c\uc2a4 \uad00\ub9ac\uc640 \uc608\uc678 \uc548\uc804\uc131\uc744 \ubcf4\uc7a5\ud569\ub2c8\ub2e4</li> <li>\uc774\ud130\ub808\uc774\ud130\ub294 \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc778 \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ucc98\ub9ac\ub97c \uac00\ub2a5\ud558\uac8c \ud569\ub2c8\ub2e4</li> <li>\uc801\uc808\ud55c \ud2b9\uc218 \uba54\uc11c\ub4dc \uad6c\ud604\uc73c\ub85c Python\ub2e4\uc6b4 \uc6b0\uc544\ud55c \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4 </li> </ul>"},{"location":"tutorials/intermediate/chapter07_modules_packages/","title":"Chapter 7: \ubaa8\ub4c8\uacfc \ud328\ud0a4\uc9c0","text":""},{"location":"tutorials/intermediate/chapter07_modules_packages/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\uace0 \ud6a8\uacfc\uc801\uc73c\ub85c \ud65c\uc6a9\ud558\uae30 - \ud328\ud0a4\uc9c0 \uad6c\uc870\ub97c \uc124\uacc4\ud558\uace0 \uad6c\ud604\ud558\uae30 - import \uc2dc\uc2a4\ud15c\uc758 \uc791\ub3d9 \uc6d0\ub9ac \uc774\ud574\ud558\uae30 - \uc0c1\ub300 import\uc640 \uc808\ub300 import \uad6c\ubd84\ud558\uc5ec \uc0ac\uc6a9\ud558\uae30 - \uac00\uc0c1\ud658\uacbd\uc744 \uc0dd\uc131\ud558\uace0 \uad00\ub9ac\ud558\uae30 - pip\ub97c \uc0ac\uc6a9\ud55c \ud328\ud0a4\uc9c0 \uad00\ub9ac\ud558\uae30 - \ubaa8\ub4c8 \uac80\uc0c9 \uacbd\ub85c\uc640 \ud30c\uc774\uc36c \ud328\ud0a4\uc9c0 \uc2dc\uc2a4\ud15c \uc774\ud574\ud558\uae30</p>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#1","title":"1. \ubaa8\ub4c8 \uae30\ucd08","text":""},{"location":"tutorials/intermediate/chapter07_modules_packages/#11","title":"1.1 \ubaa8\ub4c8\uc774\ub780?","text":"<p>\ubaa8\ub4c8(Module)\uc740 \ud30c\uc774\uc36c \ucf54\ub4dc\uac00 \ub2f4\uae34 \ud30c\uc77c\uc785\ub2c8\ub2e4. \ud568\uc218, \ud074\ub798\uc2a4, \ubcc0\uc218\ub4e4\uc744 \ubaa8\uc544\ub454 \ucf54\ub4dc \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \uc0dd\uac01\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucf54\ub4dc\uc758 \uc7ac\uc0ac\uc6a9\uc131\uacfc \uac00\ub3c5\uc131\uc744 \ub192\uc774\ub294 \ud575\uc2ec\uc801\uc778 \ubc29\ubc95\uc785\ub2c8\ub2e4.</p> <pre><code># === \uccab \ubc88\uc9f8 \ubaa8\ub4c8 \ub9cc\ub4e4\uae30 ===\n\n# math_utils.py \ud30c\uc77c (\uac00\uc0c1\uc758 \ud30c\uc77c \ub0b4\uc6a9)\n\"\"\"\n\uc218\ud559 \uad00\ub828 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\ub4e4\uc744 \ubaa8\uc544\ub454 \ubaa8\ub4c8\n\"\"\"\n\nPI = 3.14159\nE = 2.71828\n\ndef add(a, b):\n    \"\"\"\ub450 \uc218\ub97c \ub354\ud569\ub2c8\ub2e4\"\"\"\n    return a + b\n\ndef subtract(a, b):\n    \"\"\"\uccab \ubc88\uc9f8 \uc218\uc5d0\uc11c \ub450 \ubc88\uc9f8 \uc218\ub97c \ube8d\ub2c8\ub2e4\"\"\"\n    return a - b\n\ndef multiply(a, b):\n    \"\"\"\ub450 \uc218\ub97c \uacf1\ud569\ub2c8\ub2e4\"\"\"\n    return a * b\n\ndef divide(a, b):\n    \"\"\"\uccab \ubc88\uc9f8 \uc218\ub97c \ub450 \ubc88\uc9f8 \uc218\ub85c \ub098\ub215\ub2c8\ub2e4\"\"\"\n    if b == 0:\n        raise ValueError(\"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n    return a / b\n\ndef circle_area(radius):\n    \"\"\"\uc6d0\uc758 \ub113\uc774\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4\"\"\"\n    return PI * radius * radius\n\ndef factorial(n):\n    \"\"\"\ud329\ud1a0\ub9ac\uc5bc\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4\"\"\"\n    if n &lt; 0:\n        raise ValueError(\"\uc74c\uc218\uc758 \ud329\ud1a0\ub9ac\uc5bc\uc740 \uc815\uc758\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\")\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nclass Calculator:\n    \"\"\"\uac04\ub2e8\ud55c \uacc4\uc0b0\uae30 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        self.history = []\n\n    def calculate(self, operation, a, b):\n        if operation == '+':\n            result = add(a, b)\n        elif operation == '-':\n            result = subtract(a, b)\n        elif operation == '*':\n            result = multiply(a, b)\n        elif operation == '/':\n            result = divide(a, b)\n        else:\n            raise ValueError(\"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uc5f0\uc0b0\uc785\ub2c8\ub2e4\")\n\n        self.history.append(f\"{a} {operation} {b} = {result}\")\n        return result\n\n    def get_history(self):\n        return self.history.copy()\n\nprint(\"=== \ubaa8\ub4c8 \uae30\ubcf8 \uac1c\ub150 ===\")\nprint(\"\ubaa8\ub4c8\uc740 .py \ud30c\uc77c\ub85c \uc800\uc7a5\ub41c \ud30c\uc774\uc36c \ucf54\ub4dc\uc785\ub2c8\ub2e4\")\nprint(\"\ud568\uc218, \ud074\ub798\uc2a4, \ubcc0\uc218\ub97c \ud3ec\ud568\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4\")\nprint(\"\ub2e4\ub978 \ud30c\uc77c\uc5d0\uc11c import\ud558\uc5ec \uc7ac\uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#12-import","title":"1.2 \uae30\ubcf8 import \uc0ac\uc6a9\ubc95","text":"<pre><code>print(\"\\n=== import \uae30\ubcf8 \uc0ac\uc6a9\ubc95 ===\")\n\n# 1. \uc804\uccb4 \ubaa8\ub4c8 import\n# import math_utils\n# result = math_utils.add(5, 3)\n\n# 2. \ud2b9\uc815 \ud568\uc218\ub9cc import\n# from math_utils import add, multiply\n# result = add(5, 3)\n\n# 3. \ubcc4\uce6d \uc0ac\uc6a9\n# import math_utils as mu\n# result = mu.add(5, 3)\n\n# 4. \ubaa8\ub4e0 \uac83 import (\uad8c\uc7a5\ud558\uc9c0 \uc54a\uc74c)\n# from math_utils import *\n\n# \ub0b4\uc7a5 \ubaa8\ub4c8 \uc608\uc81c\nimport math\nimport random\nimport datetime\n\nprint(\"1. \ub0b4\uc7a5 \ubaa8\ub4c8 \uc0ac\uc6a9:\")\nprint(f\"\uc218\ud559 \uc0c1\uc218 \u03c0: {math.pi}\")\nprint(f\"\uc81c\uacf1\uadfc \u221a16: {math.sqrt(16)}\")\nprint(f\"\ub85c\uadf8 log(10): {math.log10(100)}\")\n\nprint(f\"\\n2. \ub79c\ub364 \ubaa8\ub4c8:\")\nprint(f\"1-10 \uc0ac\uc774 \ub79c\ub364 \uc218: {random.randint(1, 10)}\")\nprint(f\"\ub9ac\uc2a4\ud2b8\uc5d0\uc11c \ub79c\ub364 \uc120\ud0dd: {random.choice(['\uc0ac\uacfc', '\ubc14\ub098\ub098', '\ud3ec\ub3c4'])}\")\n\nprint(f\"\\n3. \ub0a0\uc9dc/\uc2dc\uac04 \ubaa8\ub4c8:\")\nnow = datetime.datetime.now()\nprint(f\"\ud604\uc7ac \uc2dc\uac04: {now.strftime('%Y-%m-%d %H:%M:%S')}\")\n\n# \ubaa8\ub4c8\uc758 \uc18d\uc131 \ud655\uc778\nprint(f\"\\n4. \ubaa8\ub4c8 \uc815\ubcf4:\")\nprint(f\"math \ubaa8\ub4c8\uc758 \uc77c\ubd80 \uc18d\uc131\ub4e4:\")\nmath_attributes = [attr for attr in dir(math) if not attr.startswith('_')][:5]\nprint(f\"  {math_attributes}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#13","title":"1.3 \ubaa8\ub4c8 \uc0dd\uc131\uacfc \ud65c\uc6a9 \uc2e4\uc2b5","text":"<pre><code>print(\"\\n=== \uc2e4\uc81c \ubaa8\ub4c8 \uc0dd\uc131 \uc2e4\uc2b5 ===\")\n\n# \uc2e4\uc81c\ub85c\ub294 \ud30c\uc77c\ub85c \uc0dd\uc131\ud574\uc57c \ud558\uc9c0\ub9cc, \uc5ec\uae30\uc11c\ub294 \uac1c\ub150 \uc124\uba85\n# string_utils.py \ubaa8\ub4c8 \uc608\uc81c\n\nstring_utils_code = '''\n\"\"\"\n\ubb38\uc790\uc5f4 \ucc98\ub9ac \uc720\ud2f8\ub9ac\ud2f0 \ubaa8\ub4c8\n\"\"\"\n\ndef reverse_string(text):\n    \"\"\"\ubb38\uc790\uc5f4\uc744 \ub4a4\uc9d1\uc2b5\ub2c8\ub2e4\"\"\"\n    return text[::-1]\n\ndef count_words(text):\n    \"\"\"\ubb38\uc790\uc5f4\uc758 \ub2e8\uc5b4 \uc218\ub97c \uc149\ub2c8\ub2e4\"\"\"\n    return len(text.split())\n\ndef is_palindrome(text):\n    \"\"\"\ud68c\ubb38\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4\"\"\"\n    cleaned = ''.join(text.lower().split())\n    return cleaned == cleaned[::-1]\n\ndef title_case(text):\n    \"\"\"\uac01 \ub2e8\uc5b4\uc758 \uccab \uae00\uc790\ub97c \ub300\ubb38\uc790\ub85c \ub9cc\ub4ed\ub2c8\ub2e4\"\"\"\n    return ' '.join(word.capitalize() for word in text.split())\n\ndef remove_duplicates(text):\n    \"\"\"\uc5f0\uc18d\ub41c \uc911\ubcf5 \ubb38\uc790\ub97c \uc81c\uac70\ud569\ub2c8\ub2e4\"\"\"\n    if not text:\n        return text\n\n    result = [text[0]]\n    for char in text[1:]:\n        if char != result[-1]:\n            result.append(char)\n\n    return ''.join(result)\n\nclass TextProcessor:\n    \"\"\"\ud14d\uc2a4\ud2b8 \ucc98\ub9ac \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        self.processed_texts = []\n\n    def process(self, text, operations):\n        \"\"\"\uc5ec\ub7ec \ud14d\uc2a4\ud2b8 \ucc98\ub9ac \uc791\uc5c5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4\"\"\"\n        result = text\n\n        for operation in operations:\n            if operation == 'reverse':\n                result = reverse_string(result)\n            elif operation == 'title':\n                result = title_case(result)\n            elif operation == 'remove_dup':\n                result = remove_duplicates(result)\n\n        self.processed_texts.append((text, result))\n        return result\n\n    def get_history(self):\n        return self.processed_texts.copy()\n'''\n\nprint(\"\ubb38\uc790\uc5f4 \uc720\ud2f8\ub9ac\ud2f0 \ubaa8\ub4c8 \uc608\uc81c:\")\nprint(\"def reverse_string(text): ...\")\nprint(\"def count_words(text): ...\")\nprint(\"def is_palindrome(text): ...\")\n\n# \ubaa8\ub4c8 \uc0ac\uc6a9 \uc2dc\ubbac\ub808\uc774\uc158\ndef reverse_string(text):\n    return text[::-1]\n\ndef count_words(text):\n    return len(text.split())\n\ndef is_palindrome(text):\n    cleaned = ''.join(text.lower().split())\n    return cleaned == cleaned[::-1]\n\n# \uc0ac\uc6a9 \uc608\uc81c\ntest_text = \"Hello World\"\nprint(f\"\\n\uc608\uc81c \uc0ac\uc6a9:\")\nprint(f\"\uc6d0\ubcf8: '{test_text}'\")\nprint(f\"\ub4a4\uc9d1\uae30: '{reverse_string(test_text)}'\")\nprint(f\"\ub2e8\uc5b4 \uc218: {count_words(test_text)}\")\n\npalindrome_text = \"A man a plan a canal Panama\"\nprint(f\"\ud68c\ubb38 \ud14c\uc2a4\ud2b8 '{palindrome_text}': {is_palindrome(palindrome_text)}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#2","title":"2. \ubaa8\ub4c8 \uc2dc\uc2a4\ud15c \uc2ec\ud654","text":""},{"location":"tutorials/intermediate/chapter07_modules_packages/#21","title":"2.1 \ubaa8\ub4c8 \uac80\uc0c9 \uacbd\ub85c","text":"<pre><code>print(\"\\n=== \ubaa8\ub4c8 \uac80\uc0c9 \uacbd\ub85c ===\")\n\nimport sys\nimport os\n\nprint(\"1. \ud30c\uc774\uc36c \ubaa8\ub4c8 \uac80\uc0c9 \uacbd\ub85c:\")\nfor i, path in enumerate(sys.path[:5], 1):  # \ucc98\uc74c 5\uac1c\ub9cc \ud45c\uc2dc\n    print(f\"  {i}. {path}\")\n\nprint(f\"\\n2. \ud604\uc7ac \uc791\uc5c5 \ub514\ub809\ud1a0\ub9ac:\")\nprint(f\"  {os.getcwd()}\")\n\nprint(f\"\\n3. \ubaa8\ub4c8 \uac80\uc0c9 \uc21c\uc11c:\")\nprint(\"  1) \ud604\uc7ac \uc2a4\ud06c\ub9bd\ud2b8\uac00 \uc788\ub294 \ub514\ub809\ud1a0\ub9ac\")\nprint(\"  2) PYTHONPATH \ud658\uacbd \ubcc0\uc218\uc5d0 \uc9c0\uc815\ub41c \ub514\ub809\ud1a0\ub9ac\ub4e4\")\nprint(\"  3) \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub514\ub809\ud1a0\ub9ac\")\nprint(\"  4) site-packages \ub514\ub809\ud1a0\ub9ac (\uc124\uce58\ub41c \ud328\ud0a4\uc9c0\ub4e4)\")\n\n# \ubaa8\ub4c8 \uc704\uce58 \ud655\uc778\nprint(f\"\\n4. \ub0b4\uc7a5 \ubaa8\ub4c8 \uc704\uce58 \uc608\uc81c:\")\nimport json\nprint(f\"  json \ubaa8\ub4c8 \uc704\uce58: {json.__file__}\")\n\n# \ubaa8\ub4c8 \uc815\ubcf4 \ud655\uc778\nprint(f\"\\n5. \ubaa8\ub4c8 \uc815\ubcf4:\")\nprint(f\"  json \ubaa8\ub4c8 \uc774\ub984: {json.__name__}\")\nprint(f\"  json \ubaa8\ub4c8 \ubb38\uc11c: {json.__doc__[:50]}...\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#22-__name__-__main__","title":"2.2 <code>__name__</code>\uacfc <code>__main__</code> \uc774\ud574","text":"<pre><code>print(\"\\n=== __name__\uacfc __main__ ===\")\n\n# \uc774 \uac1c\ub150\uc744 \uc774\ud574\ud558\uae30 \uc704\ud55c \uc608\uc81c\nprint(\"1. __name__ \ubcc0\uc218:\")\nprint(f\"  \ud604\uc7ac \uc2a4\ud06c\ub9bd\ud2b8\uc758 __name__: {__name__}\")\n\n# \ubaa8\ub4c8\uc774 \uc9c1\uc811 \uc2e4\ud589\ub420 \ub54c\uc640 import\ub420 \ub54c\uc758 \ucc28\uc774\nexample_module_code = '''\n# example_module.py\n\ndef greet(name):\n    return f\"\uc548\ub155\ud558\uc138\uc694, {name}\ub2d8!\"\n\ndef main():\n    print(\"\uc774 \ubaa8\ub4c8\uc774 \uc9c1\uc811 \uc2e4\ud589\ub418\uc5c8\uc2b5\ub2c8\ub2e4\")\n    print(greet(\"\ud30c\uc774\uc36c\"))\n\nif __name__ == \"__main__\":\n    main()\n'''\n\nprint(f\"\\n2. \ubaa8\ub4c8 \uc608\uc81c \ucf54\ub4dc:\")\nprint(\"# example_module.py\")\nprint(\"def greet(name):\")\nprint(\"    return f'\uc548\ub155\ud558\uc138\uc694, {name}\ub2d8!'\")\nprint(\"\")\nprint(\"if __name__ == '__main__':\")\nprint(\"    print('\uc9c1\uc811 \uc2e4\ud589\ub428')\")\n\nprint(f\"\\n3. \uc2e4\ud589 \ubc29\uc2dd\ubcc4 \ub3d9\uc791:\")\nprint(\"  - \uc9c1\uc811 \uc2e4\ud589: python example_module.py \u2192 __name__ == '__main__'\")\nprint(\"  - import \uc2dc: import example_module \u2192 __name__ == 'example_module'\")\n\n# \uc2e4\uc81c \uc608\uc81c \ud568\uc218\ndef demonstrate_name_main():\n    \"\"\"__name__ == '__main__' \ud328\ud134\uc758 \uc2e4\uc6a9\uc801 \uc608\uc81c\"\"\"\n    print(\"\\n4. \uc2e4\uc6a9\uc801 \ud65c\uc6a9:\")\n    print(\"  - \ubaa8\ub4c8\uc744 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c\ub3c4, \uc2e4\ud589 \ud30c\uc77c\ub85c\ub3c4 \uc0ac\uc6a9 \uac00\ub2a5\")\n    print(\"  - \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\ub97c \ubaa8\ub4c8 \ub0b4\uc5d0 \ud3ec\ud568\")\n    print(\"  - \uc124\uc815\uc774\ub098 \ucd08\uae30\ud654 \ucf54\ub4dc \ubd84\ub9ac\")\n\ndemonstrate_name_main()\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#3-packages","title":"3. \ud328\ud0a4\uc9c0 (Packages)","text":""},{"location":"tutorials/intermediate/chapter07_modules_packages/#31","title":"3.1 \ud328\ud0a4\uc9c0 \uae30\ubcf8 \uad6c\uc870","text":"<pre><code>print(\"\\n=== \ud328\ud0a4\uc9c0 \uae30\ubcf8 \uad6c\uc870 ===\")\n\n# \ud328\ud0a4\uc9c0 \uad6c\uc870 \uc608\uc81c\npackage_structure = '''\nmyproject/\n\u251c\u2500\u2500 __init__.py          # \ud328\ud0a4\uc9c0 \ucd08\uae30\ud654 \ud30c\uc77c\n\u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 database.py      # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uad00\ub828 \uae30\ub2a5\n\u2502   \u2514\u2500\u2500 utils.py         # \ud575\uc2ec \uc720\ud2f8\ub9ac\ud2f0\n\u251c\u2500\u2500 web/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 server.py        # \uc6f9 \uc11c\ubc84 \uae30\ub2a5\n\u2502   \u2514\u2500\u2500 templates/       # \ud15c\ud50c\ub9bf \ub514\ub809\ud1a0\ub9ac\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 test_core.py\n    \u2514\u2500\u2500 test_web.py\n'''\n\nprint(\"1. \ud328\ud0a4\uc9c0 \ub514\ub809\ud1a0\ub9ac \uad6c\uc870:\")\nprint(package_structure)\n\nprint(\"2. __init__.py \ud30c\uc77c\uc758 \uc5ed\ud560:\")\nprint(\"  - \ub514\ub809\ud1a0\ub9ac\ub97c \ud328\ud0a4\uc9c0\ub85c \uc778\uc2dd\ud558\uac8c \ud568\")\nprint(\"  - \ud328\ud0a4\uc9c0 \ucd08\uae30\ud654 \ucf54\ub4dc \ud3ec\ud568\")\nprint(\"  - \ud328\ud0a4\uc9c0\uc5d0\uc11c \ub178\ucd9c\ud560 \ubaa8\ub4c8/\ud568\uc218 \uc9c0\uc815\")\nprint(\"  - \ud328\ud0a4\uc9c0 \uc218\uc900\uc758 \ubcc0\uc218\ub098 \ud568\uc218 \uc815\uc758\")\n\n# __init__.py \uc608\uc81c\ninit_example = '''\n# myproject/__init__.py\n\"\"\"\nMyProject \ud328\ud0a4\uc9c0\n\uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uac1c\ubc1c\uc744 \uc704\ud55c \uc720\ud2f8\ub9ac\ud2f0 \ud328\ud0a4\uc9c0\n\"\"\"\n\n__version__ = \"1.0.0\"\n__author__ = \"Python Developer\"\n\n# \ud3b8\uc758\ub97c \uc704\ud55c import\nfrom .core.utils import helper_function\nfrom .web.server import start_server\n\n# \ud328\ud0a4\uc9c0\uc5d0\uc11c \ub178\ucd9c\ud560 \ud56d\ubaa9\ub4e4\n__all__ = ['helper_function', 'start_server', '__version__']\n\ndef package_info():\n    return f\"MyProject v{__version__} by {__author__}\"\n'''\n\nprint(f\"\\n3. __init__.py \uc608\uc81c:\")\nprint(\"# myproject/__init__.py\")\nprint(\"__version__ = '1.0.0'\")\nprint(\"from .core.utils import helper_function\")\nprint(\"__all__ = ['helper_function', '__version__']\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#32-import","title":"3.2 import \ud328\ud134\ub4e4","text":"<pre><code>print(\"\\n=== \ub2e4\uc591\ud55c import \ud328\ud134 ===\")\n\n# \ub2e4\uc591\ud55c import \ubc29\ubc95\ub4e4\nimport_examples = {\n    \"\uc808\ub300 import\": [\n        \"import myproject\",\n        \"import myproject.core.database\",\n        \"from myproject.core import utils\",\n        \"from myproject.web.server import start_server\"\n    ],\n    \"\uc0c1\ub300 import\": [\n        \"from . import utils          # \uac19\uc740 \ud328\ud0a4\uc9c0\uc758 \ubaa8\ub4c8\",\n        \"from .. import config       # \uc0c1\uc704 \ud328\ud0a4\uc9c0\uc758 \ubaa8\ub4c8\",\n        \"from ..web import server    # \ud615\uc81c \ud328\ud0a4\uc9c0\uc758 \ubaa8\ub4c8\",\n        \"from ...external import lib # \ub354 \uc0c1\uc704 \ud328\ud0a4\uc9c0\"\n    ],\n    \"\ubcc4\uce6d \uc0ac\uc6a9\": [\n        \"import myproject.core.database as db\",\n        \"from myproject.core.utils import helper as h\",\n        \"import numpy as np  # \uad00\ub840\uc801 \ubcc4\uce6d\"\n    ]\n}\n\nfor category, examples in import_examples.items():\n    print(f\"\\n{category}:\")\n    for example in examples:\n        print(f\"  {example}\")\n\nprint(f\"\\n\uc0c1\ub300 import vs \uc808\ub300 import:\")\nprint(\"1. \uc808\ub300 import:\")\nprint(\"  - \uba85\uc2dc\uc801\uc774\uace0 \uba85\ud655\ud568\")\nprint(\"  - \ud328\ud0a4\uc9c0 \uad6c\uc870 \ubcc0\uacbd\uc5d0 \ub35c \ubbfc\uac10\")\nprint(\"  - \uad8c\uc7a5\ub418\ub294 \ubc29\uc2dd\")\n\nprint(\"\\n2. \uc0c1\ub300 import:\")\nprint(\"  - \ud328\ud0a4\uc9c0 \ub0b4\ubd80\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\")\nprint(\"  - \ud328\ud0a4\uc9c0 \uc774\ub984 \ubcc0\uacbd\uc5d0 \uc720\uc5f0\")\nprint(\"  - \uc2a4\ud06c\ub9bd\ud2b8 \uc9c1\uc811 \uc2e4\ud589 \uc2dc \ubb38\uc81c \ubc1c\uc0dd \uac00\ub2a5\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#33","title":"3.3 \uc2e4\uc6a9\uc801 \ud328\ud0a4\uc9c0 \uc608\uc81c","text":"<pre><code>print(\"\\n=== \uc2e4\uc6a9\uc801 \ud328\ud0a4\uc9c0 \uc124\uacc4 \uc608\uc81c ===\")\n\n# \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ud328\ud0a4\uc9c0 \uad6c\uc870\nwebapp_structure = '''\nwebapp/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 app.py               # \uba54\uc778 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\n\u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 development.py   # \uac1c\ubc1c \ud658\uacbd \uc124\uc815\n\u2502   \u2514\u2500\u2500 production.py    # \uc6b4\uc601 \ud658\uacbd \uc124\uc815\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 user.py         # \uc0ac\uc6a9\uc790 \ubaa8\ub378\n\u2502   \u2514\u2500\u2500 post.py         # \uac8c\uc2dc\ubb3c \ubaa8\ub378\n\u251c\u2500\u2500 views/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 auth.py         # \uc778\uc99d \uad00\ub828 \ubdf0\n\u2502   \u2514\u2500\u2500 blog.py         # \ube14\ub85c\uadf8 \uad00\ub828 \ubdf0\n\u251c\u2500\u2500 utils/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 validators.py   # \uac80\uc99d \ud568\uc218\ub4e4\n\u2502   \u2514\u2500\u2500 helpers.py      # \ud5ec\ud37c \ud568\uc218\ub4e4\n\u2514\u2500\u2500 static/\n    \u251c\u2500\u2500 css/\n    \u251c\u2500\u2500 js/\n    \u2514\u2500\u2500 images/\n'''\n\nprint(\"\uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ud328\ud0a4\uc9c0 \uad6c\uc870:\")\nprint(webapp_structure)\n\n# \uac01 \ubaa8\ub4c8\uc758 \uc608\uc81c \ucf54\ub4dc\nprint(\"\\n\ubaa8\ub4c8\ubcc4 \uc608\uc81c \ucf54\ub4dc:\")\n\n# utils/validators.py \uc608\uc81c\nprint(\"\\n1. utils/validators.py:\")\ndef validate_email(email):\n    \"\"\"\uc774\uba54\uc77c \uc8fc\uc18c \uc720\ud6a8\uc131 \uac80\uc0ac\"\"\"\n    import re\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None\n\ndef validate_password(password):\n    \"\"\"\ube44\ubc00\ubc88\ud638 \uac15\ub3c4 \uac80\uc0ac\"\"\"\n    if len(password) &lt; 8:\n        return False, \"\ube44\ubc00\ubc88\ud638\ub294 \ucd5c\uc18c 8\uc790 \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4\"\n\n    checks = {\n        'uppercase': any(c.isupper() for c in password),\n        'lowercase': any(c.islower() for c in password),\n        'digit': any(c.isdigit() for c in password),\n        'special': any(c in '!@#$%^&amp;*(),.?\":{}|&lt;&gt;' for c in password)\n    }\n\n    missing = [key for key, value in checks.items() if not value]\n\n    if len(missing) &gt; 1:\n        return False, f\"\ube44\ubc00\ubc88\ud638\uc5d0 {', '.join(missing)}\uc774(\uac00) \ud3ec\ud568\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4\"\n\n    return True, \"\uc720\ud6a8\ud55c \ube44\ubc00\ubc88\ud638\uc785\ub2c8\ub2e4\"\n\n# \uc0ac\uc6a9 \uc608\uc81c\nprint(\"def validate_email(email): ...\")\nprint(\"def validate_password(password): ...\")\n\ntest_email = \"test@example.com\"\ntest_password = \"MyPassword123!\"\n\nprint(f\"\\n\uac80\uc99d \uc608\uc81c:\")\nprint(f\"\uc774\uba54\uc77c '{test_email}': {validate_email(test_email)}\")\nis_valid, message = validate_password(test_password)\nprint(f\"\ube44\ubc00\ubc88\ud638 \uac80\uc99d: {is_valid} - {message}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#4","title":"4. \uac00\uc0c1\ud658\uacbd\uacfc \ud328\ud0a4\uc9c0 \uad00\ub9ac","text":""},{"location":"tutorials/intermediate/chapter07_modules_packages/#41","title":"4.1 \uac00\uc0c1\ud658\uacbd\uc758 \ud544\uc694\uc131","text":"<pre><code>print(\"\\n=== \uac00\uc0c1\ud658\uacbd\uc758 \ud544\uc694\uc131 ===\")\n\nprint(\"1. \uac00\uc0c1\ud658\uacbd\uc774 \ud544\uc694\ud55c \uc774\uc720:\")\nreasons = [\n    \"\ud504\ub85c\uc81d\ud2b8\ubcc4 \ub3c5\ub9bd\uc801\uc778 \ud328\ud0a4\uc9c0 \uad00\ub9ac\",\n    \"\ud328\ud0a4\uc9c0 \ubc84\uc804 \ucda9\ub3cc \ubc29\uc9c0\",\n    \"\uc2dc\uc2a4\ud15c \ud30c\uc774\uc36c \ud658\uacbd \ubcf4\ud638\",\n    \"\ubc30\ud3ec \uc2dc \uc815\ud655\ud55c \uc758\uc874\uc131 \uad00\ub9ac\",\n    \"\uac1c\ubc1c \ud658\uacbd \uc77c\uad00\uc131 \uc720\uc9c0\"\n]\n\nfor i, reason in enumerate(reasons, 1):\n    print(f\"  {i}. {reason}\")\n\nprint(f\"\\n2. \uac00\uc0c1\ud658\uacbd \uc5c6\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \ubb38\uc81c:\")\nproblems = [\n    \"Django 2.0\uacfc Django 3.0\uc774 \ub3d9\uc2dc\uc5d0 \ud544\uc694\ud55c \uacbd\uc6b0\",\n    \"A \ud504\ub85c\uc81d\ud2b8\ub294 requests 2.20, B \ud504\ub85c\uc81d\ud2b8\ub294 requests 2.25 \ud544\uc694\",\n    \"\uc804\uc5ed \ud328\ud0a4\uc9c0 \uc124\uce58\ub85c \uc778\ud55c \uc2dc\uc2a4\ud15c \ubd88\uc548\uc815\",\n    \"\ub2e4\ub978 \uac1c\ubc1c\uc790\uc640 \ud658\uacbd \ucc28\uc774\ub85c \uc778\ud55c \uc624\ub958\"\n]\n\nfor i, problem in enumerate(problems, 1):\n    print(f\"  {i}. {problem}\")\n\n# \uac00\uc0c1\ud658\uacbd \uba85\ub839\uc5b4 \uc608\uc81c (\uc2e4\uc81c\ub85c\ub294 \ud130\ubbf8\ub110\uc5d0\uc11c \uc2e4\ud589)\nvenv_commands = [\n    \"python -m venv myenv          # \uac00\uc0c1\ud658\uacbd \uc0dd\uc131\",\n    \"source myenv/bin/activate     # \ud65c\uc131\ud654 (Linux/Mac)\",\n    \"myenv\\\\Scripts\\\\activate       # \ud65c\uc131\ud654 (Windows)\",\n    \"deactivate                    # \ube44\ud65c\uc131\ud654\"\n]\n\nprint(f\"\\n3. \uac00\uc0c1\ud658\uacbd \uae30\ubcf8 \uba85\ub839\uc5b4:\")\nfor cmd in venv_commands:\n    print(f\"  {cmd}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#42-pip","title":"4.2 pip \ud328\ud0a4\uc9c0 \uad00\ub9ac","text":"<pre><code>print(\"\\n=== pip \ud328\ud0a4\uc9c0 \uad00\ub9ac ===\")\n\n# pip \uae30\ubcf8 \uba85\ub839\uc5b4\ub4e4\npip_commands = {\n    \"\uc124\uce58\": [\n        \"pip install package_name\",\n        \"pip install package_name==1.2.3\",\n        \"pip install -r requirements.txt\",\n        \"pip install -e .  # \uac1c\ubc1c \ubaa8\ub4dc \uc124\uce58\"\n    ],\n    \"\uc870\ud68c\": [\n        \"pip list                    # \uc124\uce58\ub41c \ud328\ud0a4\uc9c0 \ubaa9\ub85d\",\n        \"pip show package_name       # \ud328\ud0a4\uc9c0 \uc815\ubcf4 \ud655\uc778\",\n        \"pip search keyword          # \ud328\ud0a4\uc9c0 \uac80\uc0c9 (deprecated)\",\n        \"pip outdated                # \uc5c5\ub370\uc774\ud2b8 \uac00\ub2a5\ud55c \ud328\ud0a4\uc9c0\"\n    ],\n    \"\uc5c5\ub370\uc774\ud2b8/\uc81c\uac70\": [\n        \"pip install --upgrade package_name\",\n        \"pip uninstall package_name\",\n        \"pip freeze &gt; requirements.txt\",\n        \"pip check                   # \uc758\uc874\uc131 \ud655\uc778\"\n    ]\n}\n\nfor category, commands in pip_commands.items():\n    print(f\"\\n{category}:\")\n    for cmd in commands:\n        print(f\"  {cmd}\")\n\n# requirements.txt \uc608\uc81c\nrequirements_example = '''\n# requirements.txt \uc608\uc81c\nDjango&gt;=3.2,&lt;4.0\nrequests==2.25.1\nnumpy&gt;=1.20.0\npandas\npytest&gt;=6.0\nblack==21.5b2        # \ucf54\ub4dc \ud3ec\ub9f7\ud130\nflake8               # \ub9b0\ud130\n'''\n\nprint(f\"\\n4. requirements.txt \uc608\uc81c:\")\nprint(\"# requirements.txt\")\nprint(\"Django&gt;=3.2,&lt;4.0\")\nprint(\"requests==2.25.1\")\nprint(\"numpy&gt;=1.20.0\")\nprint(\"pytest&gt;=6.0\")\n\nprint(f\"\\n5. \ubc84\uc804 \uc9c0\uc815 \ubc29\ubc95:\")\nversion_specifiers = [\n    \"package==1.2.3      # \uc815\ud655\ud55c \ubc84\uc804\",\n    \"package&gt;=1.2.0      # \ucd5c\uc18c \ubc84\uc804\",\n    \"package&lt;=1.3.0      # \ucd5c\ub300 \ubc84\uc804\",\n    \"package&gt;=1.2,&lt;1.4   # \ubc94\uc704 \uc9c0\uc815\",\n    \"package~=1.2.0      # \ud638\ud658 \ubc84\uc804 (&gt;=1.2.0, &lt;1.3.0)\"\n]\n\nfor spec in version_specifiers:\n    print(f\"  {spec}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#43","title":"4.3 \ud328\ud0a4\uc9c0 \uac1c\ubc1c\uacfc \ubc30\ud3ec","text":"<pre><code>print(\"\\n=== \ud328\ud0a4\uc9c0 \uac1c\ubc1c\uacfc \ubc30\ud3ec ===\")\n\n# setup.py \uc608\uc81c\nsetup_example = '''\n# setup.py\nfrom setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name=\"my-awesome-package\",\n    version=\"0.1.0\",\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    description=\"A short description of your package\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/yourusername/my-awesome-package\",\n    packages=find_packages(),\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n    python_requires=\"&gt;=3.8\",\n    install_requires=[\n        \"requests&gt;=2.25.0\",\n        \"click&gt;=7.0\",\n    ],\n    extras_require={\n        \"dev\": [\n            \"pytest&gt;=6.0\",\n            \"black&gt;=21.0\",\n            \"flake8&gt;=3.8\",\n        ]\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"my-tool=my_package.cli:main\",\n        ],\n    },\n)\n'''\n\nprint(\"1. setup.py \uad6c\uc870:\")\nprint(\"# setup.py\")\nprint(\"from setuptools import setup, find_packages\")\nprint(\"\")\nprint(\"setup(\")\nprint(\"    name='my-package',\")\nprint(\"    version='0.1.0',\")\nprint(\"    packages=find_packages(),\")\nprint(\"    install_requires=['requests'],\")\nprint(\")\")\n\nprint(f\"\\n2. \ud328\ud0a4\uc9c0 \ubc30\ud3ec \uba85\ub839\uc5b4:\")\ndist_commands = [\n    \"python setup.py sdist bdist_wheel  # \ubc30\ud3ec \ud30c\uc77c \uc0dd\uc131\",\n    \"pip install twine                  # \uc5c5\ub85c\ub4dc \ub3c4\uad6c \uc124\uce58\",\n    \"twine check dist/*                 # \ubc30\ud3ec \ud30c\uc77c \uac80\uc99d\",\n    \"twine upload --repository testpypi dist/*  # \ud14c\uc2a4\ud2b8 PyPI \uc5c5\ub85c\ub4dc\",\n    \"twine upload dist/*                # PyPI \uc5c5\ub85c\ub4dc\"\n]\n\nfor cmd in dist_commands:\n    print(f\"  {cmd}\")\n\nprint(f\"\\n3. pyproject.toml (\ud604\ub300\uc801 \ubc29\uc2dd):\")\npyproject_example = '''\n[build-system]\nrequires = [\"setuptools&gt;=45\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"my-package\"\nversion = \"0.1.0\"\ndescription = \"My awesome package\"\nauthors = [{name = \"Your Name\", email = \"your.email@example.com\"}]\nlicense = {text = \"MIT\"}\ndependencies = [\"requests&gt;=2.25.0\"]\n'''\n\nprint(\"[project]\")\nprint(\"name = 'my-package'\")\nprint(\"version = '0.1.0'\")\nprint(\"dependencies = ['requests&gt;=2.25.0']\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#5","title":"5. \uace0\uae09 \ubaa8\ub4c8 \uc2dc\uc2a4\ud15c","text":""},{"location":"tutorials/intermediate/chapter07_modules_packages/#51-import","title":"5.1 \ub3d9\uc801 import","text":"<pre><code>print(\"\\n=== \ub3d9\uc801 import ===\")\n\n# importlib\ub97c \uc0ac\uc6a9\ud55c \ub3d9\uc801 import\nimport importlib\nimport sys\n\ndef dynamic_import_demo():\n    \"\"\"\ub3d9\uc801 import \uc608\uc81c\"\"\"\n\n    print(\"1. importlib.import_module() \uc0ac\uc6a9:\")\n\n    # \ubaa8\ub4c8 \uc774\ub984\uc744 \ubb38\uc790\uc5f4\ub85c \uc9c0\uc815\ud558\uc5ec import\n    module_names = ['math', 'random', 'datetime']\n\n    for module_name in module_names:\n        try:\n            module = importlib.import_module(module_name)\n            print(f\"  {module_name} \ubaa8\ub4c8 \ub85c\ub4dc \uc131\uacf5: {module.__name__}\")\n\n            # \ubaa8\ub4c8\uc758 \uc77c\ubd80 \uc18d\uc131 \ud45c\uc2dc\n            attrs = [attr for attr in dir(module) if not attr.startswith('_')][:3]\n            print(f\"    \uc8fc\uc694 \uc18d\uc131: {attrs}\")\n\n        except ImportError as e:\n            print(f\"  {module_name} \ubaa8\ub4c8 \ub85c\ub4dc \uc2e4\ud328: {e}\")\n\ndynamic_import_demo()\n\ndef conditional_import():\n    \"\"\"\uc870\uac74\ubd80 import \uc608\uc81c\"\"\"\n    print(f\"\\n2. \uc870\uac74\ubd80 import:\")\n\n    # \uc6b4\uc601\uccb4\uc81c\ubcc4 \ubaa8\ub4c8 import\n    import platform\n    system = platform.system()\n\n    print(f\"  \ud604\uc7ac OS: {system}\")\n\n    if system == \"Windows\":\n        print(\"  Windows \uc804\uc6a9 \ubaa8\ub4c8\uc744 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4\")\n        # import winsound  # Windows\uc5d0\uc11c\ub9cc \uc0ac\uc6a9 \uac00\ub2a5\n    elif system == \"Darwin\":  # macOS\n        print(\"  macOS \uc804\uc6a9 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4\")\n    else:  # Linux \ub4f1\n        print(\"  Unix/Linux \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4\")\n\nconditional_import()\n\ndef plugin_system_demo():\n    \"\"\"\ud50c\ub7ec\uadf8\uc778 \uc2dc\uc2a4\ud15c \uc608\uc81c\"\"\"\n    print(f\"\\n3. \ud50c\ub7ec\uadf8\uc778 \uc2dc\uc2a4\ud15c \uac1c\ub150:\")\n\n    # \uac00\uc0c1\uc758 \ud50c\ub7ec\uadf8\uc778 \uc2dc\uc2a4\ud15c\n    available_plugins = ['auth_plugin', 'cache_plugin', 'logger_plugin']\n\n    loaded_plugins = {}\n\n    for plugin_name in available_plugins:\n        # \uc2e4\uc81c\ub85c\ub294 \ud30c\uc77c \uc2dc\uc2a4\ud15c\uc5d0\uc11c \ud50c\ub7ec\uadf8\uc778\uc744 \ucc3e\uc544 \ub85c\ub4dc\n        print(f\"  \ud50c\ub7ec\uadf8\uc778 '{plugin_name}' \ub85c\ub4dc \uc2dc\ubbac\ub808\uc774\uc158\")\n\n        # \uac00\uc0c1\uc758 \ud50c\ub7ec\uadf8\uc778 \uac1d\uccb4\n        plugin = type('Plugin', (), {\n            'name': plugin_name,\n            'version': '1.0.0',\n            'process': lambda self, data: f\"{self.name}\uc774(\uac00) {data}\ub97c \ucc98\ub9ac\ud588\uc2b5\ub2c8\ub2e4\"\n        })()\n\n        loaded_plugins[plugin_name] = plugin\n\n    print(f\"  \ub85c\ub4dc\ub41c \ud50c\ub7ec\uadf8\uc778 \uc218: {len(loaded_plugins)}\")\n\n    # \ud50c\ub7ec\uadf8\uc778 \uc0ac\uc6a9 \uc608\uc81c\n    if 'auth_plugin' in loaded_plugins:\n        result = loaded_plugins['auth_plugin'].process(\"\uc0ac\uc6a9\uc790 \uc778\uc99d\")\n        print(f\"    {result}\")\n\nplugin_system_demo()\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#52","title":"5.2 \ubaa8\ub4c8 \uce90\uc2f1\uacfc \uc7ac\ub85c\ub4dc","text":"<pre><code>print(\"\\n=== \ubaa8\ub4c8 \uce90\uc2f1\uacfc \uc7ac\ub85c\ub4dc ===\")\n\ndef module_caching_demo():\n    \"\"\"\ubaa8\ub4c8 \uce90\uc2f1 \uba54\ucee4\ub2c8\uc998 \uc124\uba85\"\"\"\n\n    print(\"1. \ubaa8\ub4c8 \uce90\uc2dc \ud655\uc778:\")\n\n    # sys.modules\uc5d0\uc11c \ub85c\ub4dc\ub41c \ubaa8\ub4c8\ub4e4 \ud655\uc778\n    loaded_modules = list(sys.modules.keys())\n    print(f\"  \ud604\uc7ac \ub85c\ub4dc\ub41c \ubaa8\ub4c8 \uc218: {len(loaded_modules)}\")\n\n    # \uc77c\ubd80 \ubaa8\ub4c8 \ud45c\uc2dc\n    sample_modules = [m for m in loaded_modules if not m.startswith('_')][:5]\n    print(f\"  \uc608\uc2dc \ubaa8\ub4c8\ub4e4: {sample_modules}\")\n\n    print(f\"\\n2. \ubaa8\ub4c8 \uce90\uc2f1 \ub3d9\uc791:\")\n    print(\"  - \ucc98\uc74c import \uc2dc: \ubaa8\ub4c8 \ud30c\uc77c\uc744 \uc77d\uace0 \uc2e4\ud589\")\n    print(\"  - \uc774\ud6c4 import \uc2dc: sys.modules\uc5d0\uc11c \uce90\uc2dc\ub41c \ubaa8\ub4c8 \ubc18\ud658\")\n    print(\"  - \ubaa8\ub4c8 \ucf54\ub4dc\ub294 \ud55c \ubc88\ub9cc \uc2e4\ud589\ub428\")\n\nmodule_caching_demo()\n\ndef reload_demo():\n    \"\"\"\ubaa8\ub4c8 \uc7ac\ub85c\ub4dc \uc608\uc81c\"\"\"\n    print(f\"\\n3. \ubaa8\ub4c8 \uc7ac\ub85c\ub4dc:\")\n\n    print(\"  \uac1c\ubc1c \uc911 \ubaa8\ub4c8\uc744 \uc218\uc815\ud55c \ud6c4 \uc7ac\ub85c\ub4dc\uac00 \ud544\uc694\ud55c \uacbd\uc6b0:\")\n    print(\"  importlib.reload(module_name)\")\n\n    # \uc608\uc81c: math \ubaa8\ub4c8 \uc7ac\ub85c\ub4dc (\uc2e4\uc81c\ub85c\ub294 \uc758\ubbf8 \uc5c6\uc74c)\n    import math\n    print(f\"  math.pi (\uc7ac\ub85c\ub4dc \uc804): {math.pi}\")\n\n    # \uc7ac\ub85c\ub4dc \uc218\ud589\n    importlib.reload(math)\n    print(f\"  math.pi (\uc7ac\ub85c\ub4dc \ud6c4): {math.pi}\")\n\n    print(f\"\\n  \uc7ac\ub85c\ub4dc \uc8fc\uc758\uc0ac\ud56d:\")\n    print(\"  - \uc774\ubbf8 \uc0dd\uc131\ub41c \uac1d\uccb4\ub294 \uc601\ud5a5\ubc1b\uc9c0 \uc54a\uc74c\")\n    print(\"  - \uc21c\ud658 \ucc38\uc870\uac00 \uc788\ub294 \ubaa8\ub4c8\uc740 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc74c\")\n    print(\"  - \ud504\ub85c\ub355\uc158\uc5d0\uc11c\ub294 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83\uc774 \uc88b\uc74c\")\n\nreload_demo()\n\ndef namespace_package_intro():\n    \"\"\"\ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ud328\ud0a4\uc9c0 \uac1c\ub150 \uc18c\uac1c\"\"\"\n    print(f\"\\n4. \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ud328\ud0a4\uc9c0:\")\n\n    print(\"  __init__.py\uac00 \uc5c6\ub294 \ud328\ud0a4\uc9c0 \uad6c\uc870:\")\n    ns_structure = '''\n  company/\n  \u251c\u2500\u2500 auth/           # __init__.py \uc5c6\uc74c\n  \u2502   \u2514\u2500\u2500 models.py\n  \u2514\u2500\u2500 billing/        # __init__.py \uc5c6\uc74c\n      \u2514\u2500\u2500 invoice.py\n  '''\n    print(ns_structure)\n\n    print(\"  \ud2b9\uc9d5:\")\n    print(\"  - \uc5ec\ub7ec \ub514\ub809\ud1a0\ub9ac\uc5d0 \ubd84\uc0b0\ub41c \ud328\ud0a4\uc9c0\ub97c \ud558\ub098\ub85c \ucde8\uae09\")\n    print(\"  - \ub300\uaddc\ubaa8 \ud504\ub85c\uc81d\ud2b8\ub098 \ud50c\ub7ec\uadf8\uc778 \uc2dc\uc2a4\ud15c\uc5d0 \uc720\uc6a9\")\n    print(\"  - Python 3.3+ \uc5d0\uc11c \uc9c0\uc6d0\")\n\nnamespace_package_intro()\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#6","title":"6. \uc2e4\uc6a9\uc801 \ud65c\uc6a9 \uc608\uc81c","text":""},{"location":"tutorials/intermediate/chapter07_modules_packages/#61","title":"6.1 \ub85c\uadf8 \uc2dc\uc2a4\ud15c \ud328\ud0a4\uc9c0","text":"<pre><code>print(\"\\n=== \uc2e4\uc6a9\uc801 \uc608\uc81c: \ub85c\uadf8 \uc2dc\uc2a4\ud15c \ud328\ud0a4\uc9c0 ===\")\n\n# \ub85c\uadf8 \uc2dc\uc2a4\ud15c \ud328\ud0a4\uc9c0 \uad6c\uc870\nlog_package_structure = '''\nlogger_package/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 logger.py       # \ub85c\uac70 \ud074\ub798\uc2a4\n\u2502   \u2514\u2500\u2500 formatters.py   # \ud3ec\ub9f7\ud130\ub4e4\n\u251c\u2500\u2500 handlers/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 file_handler.py # \ud30c\uc77c \ud578\ub4e4\ub7ec\n\u2502   \u2514\u2500\u2500 email_handler.py# \uc774\uba54\uc77c \ud578\ub4e4\ub7ec\n\u251c\u2500\u2500 utils/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 helpers.py      # \ud5ec\ud37c \ud568\uc218\ub4e4\n\u2514\u2500\u2500 config/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 settings.py     # \uc124\uc815\n'''\n\nprint(\"\ub85c\uadf8 \uc2dc\uc2a4\ud15c \ud328\ud0a4\uc9c0 \uad6c\uc870:\")\nprint(log_package_structure)\n\n# \uac01 \ubaa8\ub4c8 \uad6c\ud604 \uc608\uc81c\nprint(\"\\n1. core/logger.py \uad6c\ud604:\")\n\nimport datetime\nimport json\nfrom enum import Enum\n\nclass LogLevel(Enum):\n    DEBUG = 1\n    INFO = 2\n    WARNING = 3\n    ERROR = 4\n    CRITICAL = 5\n\nclass Logger:\n    \"\"\"\uac04\ub2e8\ud55c \ub85c\uac70 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, name, level=LogLevel.INFO):\n        self.name = name\n        self.level = level\n        self.handlers = []\n\n    def add_handler(self, handler):\n        \"\"\"\ud578\ub4e4\ub7ec \ucd94\uac00\"\"\"\n        self.handlers.append(handler)\n\n    def log(self, level, message, **kwargs):\n        \"\"\"\ub85c\uadf8 \uba54\uc2dc\uc9c0 \uae30\ub85d\"\"\"\n        if level.value &lt; self.level.value:\n            return\n\n        log_record = {\n            'timestamp': datetime.datetime.now().isoformat(),\n            'logger': self.name,\n            'level': level.name,\n            'message': message,\n            'extra': kwargs\n        }\n\n        for handler in self.handlers:\n            handler.handle(log_record)\n\n    def debug(self, message, **kwargs):\n        self.log(LogLevel.DEBUG, message, **kwargs)\n\n    def info(self, message, **kwargs):\n        self.log(LogLevel.INFO, message, **kwargs)\n\n    def warning(self, message, **kwargs):\n        self.log(LogLevel.WARNING, message, **kwargs)\n\n    def error(self, message, **kwargs):\n        self.log(LogLevel.ERROR, message, **kwargs)\n\n    def critical(self, message, **kwargs):\n        self.log(LogLevel.CRITICAL, message, **kwargs)\n\nprint(\"class Logger:\")\nprint(\"    def log(self, level, message): ...\")\nprint(\"    def info(self, message): ...\")\nprint(\"    def error(self, message): ...\")\n\n# \ud578\ub4e4\ub7ec \uc608\uc81c\nprint(\"\\n2. handlers/file_handler.py:\")\n\nclass FileHandler:\n    \"\"\"\ud30c\uc77c \ub85c\uadf8 \ud578\ub4e4\ub7ec\"\"\"\n\n    def __init__(self, filename, max_size=1024*1024):  # 1MB\n        self.filename = filename\n        self.max_size = max_size\n\n    def handle(self, log_record):\n        \"\"\"\ub85c\uadf8 \ub808\ucf54\ub4dc\ub97c \ud30c\uc77c\uc5d0 \uae30\ub85d\"\"\"\n        formatted_message = self._format_message(log_record)\n\n        # \ud30c\uc77c \ud06c\uae30 \ud655\uc778 \ubc0f \ub85c\ud14c\uc774\uc158 (\uc2e4\uc81c \uad6c\ud604 \uc2dc)\n        try:\n            with open(self.filename, 'a', encoding='utf-8') as f:\n                f.write(formatted_message + '\\n')\n        except IOError as e:\n            print(f\"\ud30c\uc77c \uc4f0\uae30 \uc624\ub958: {e}\")\n\n    def _format_message(self, log_record):\n        \"\"\"\ub85c\uadf8 \uba54\uc2dc\uc9c0 \ud3ec\ub9f7\ud305\"\"\"\n        return f\"[{log_record['timestamp']}] {log_record['level']} - {log_record['logger']}: {log_record['message']}\"\n\nclass ConsoleHandler:\n    \"\"\"\ucf58\uc194 \ub85c\uadf8 \ud578\ub4e4\ub7ec\"\"\"\n\n    def handle(self, log_record):\n        \"\"\"\ub85c\uadf8 \ub808\ucf54\ub4dc\ub97c \ucf58\uc194\uc5d0 \ucd9c\ub825\"\"\"\n        level = log_record['level']\n        message = log_record['message']\n        logger_name = log_record['logger']\n\n        # \ub808\ubca8\ubcc4 \uc0c9\uc0c1 (\uc2e4\uc81c\ub85c\ub294 colorama \ub4f1 \uc0ac\uc6a9)\n        color_codes = {\n            'DEBUG': '',\n            'INFO': '',\n            'WARNING': '\u26a0\ufe0f',\n            'ERROR': '\u274c',\n            'CRITICAL': '\ud83d\udea8'\n        }\n\n        prefix = color_codes.get(level, '')\n        print(f\"{prefix} [{level}] {logger_name}: {message}\")\n\nprint(\"class FileHandler:\")\nprint(\"    def handle(self, log_record): ...\")\nprint(\"\")\nprint(\"class ConsoleHandler:\")\nprint(\"    def handle(self, log_record): ...\")\n\n# \uc0ac\uc6a9 \uc608\uc81c\nprint(\"\\n3. \ub85c\uac70 \uc0ac\uc6a9 \uc608\uc81c:\")\n\n# \ub85c\uac70 \uc0dd\uc131\napp_logger = Logger(\"MyApp\", LogLevel.DEBUG)\n\n# \ud578\ub4e4\ub7ec \ucd94\uac00\nconsole_handler = ConsoleHandler()\napp_logger.add_handler(console_handler)\n\n# \ub85c\uadf8 \uba54\uc2dc\uc9c0 \ucd9c\ub825\napp_logger.info(\"\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc2dc\uc791\")\napp_logger.warning(\"\uc124\uc815 \ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\", config_path=\"/etc/myapp.conf\")\napp_logger.error(\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc2e4\ud328\", error_code=500)\n\nprint(\"\\n\ub85c\uadf8 \ucd9c\ub825 \uc644\ub8cc\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#62","title":"6.2 \uc124\uc815 \uad00\ub9ac \ud328\ud0a4\uc9c0","text":"<pre><code>print(\"\\n=== \uc124\uc815 \uad00\ub9ac \ud328\ud0a4\uc9c0 \uc608\uc81c ===\")\n\n# \uc124\uc815 \uad00\ub9ac \uc2dc\uc2a4\ud15c\nclass ConfigManager:\n    \"\"\"\uc124\uc815 \uad00\ub9ac\uc790 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        self.config = {}\n        self.config_sources = []\n\n    def add_source(self, source):\n        \"\"\"\uc124\uc815 \uc18c\uc2a4 \ucd94\uac00\"\"\"\n        self.config_sources.append(source)\n        self._reload()\n\n    def _reload(self):\n        \"\"\"\ubaa8\ub4e0 \uc18c\uc2a4\uc5d0\uc11c \uc124\uc815 \ub2e4\uc2dc \ub85c\ub4dc\"\"\"\n        self.config = {}\n        for source in self.config_sources:\n            source_config = source.load()\n            self._merge_config(source_config)\n\n    def _merge_config(self, new_config):\n        \"\"\"\uc124\uc815 \ubcd1\ud569\"\"\"\n        for key, value in new_config.items():\n            if key in self.config and isinstance(self.config[key], dict) and isinstance(value, dict):\n                self.config[key].update(value)\n            else:\n                self.config[key] = value\n\n    def get(self, key, default=None):\n        \"\"\"\uc124\uc815 \uac12 \uc870\ud68c\"\"\"\n        keys = key.split('.')\n        value = self.config\n\n        for k in keys:\n            if isinstance(value, dict) and k in value:\n                value = value[k]\n            else:\n                return default\n\n        return value\n\n    def set(self, key, value):\n        \"\"\"\uc124\uc815 \uac12 \uc124\uc815\"\"\"\n        keys = key.split('.')\n        config = self.config\n\n        for k in keys[:-1]:\n            if k not in config:\n                config[k] = {}\n            config = config[k]\n\n        config[keys[-1]] = value\n\nclass DictConfigSource:\n    \"\"\"\ub515\uc154\ub108\ub9ac \uc124\uc815 \uc18c\uc2a4\"\"\"\n\n    def __init__(self, config_dict):\n        self.config_dict = config_dict\n\n    def load(self):\n        return self.config_dict.copy()\n\nclass EnvConfigSource:\n    \"\"\"\ud658\uacbd\ubcc0\uc218 \uc124\uc815 \uc18c\uc2a4\"\"\"\n\n    def __init__(self, prefix=\"APP_\"):\n        self.prefix = prefix\n\n    def load(self):\n        import os\n        config = {}\n\n        for key, value in os.environ.items():\n            if key.startswith(self.prefix):\n                config_key = key[len(self.prefix):].lower().replace('_', '.')\n                config[config_key] = value\n\n        return config\n\n# \uc124\uc815 \uad00\ub9ac\uc790 \uc0ac\uc6a9 \uc608\uc81c\nprint(\"1. \uc124\uc815 \uad00\ub9ac\uc790 \uc0dd\uc131:\")\nconfig_manager = ConfigManager()\n\n# \uae30\ubcf8 \uc124\uc815\ndefault_config = {\n    'database': {\n        'host': 'localhost',\n        'port': 5432,\n        'name': 'myapp'\n    },\n    'app': {\n        'debug': False,\n        'secret_key': 'default-secret'\n    }\n}\n\nconfig_manager.add_source(DictConfigSource(default_config))\n\nprint(f\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud638\uc2a4\ud2b8: {config_manager.get('database.host')}\")\nprint(f\"\uc571 \ub514\ubc84\uadf8 \ubaa8\ub4dc: {config_manager.get('app.debug')}\")\n\n# \ud658\uacbd\ubcc0\uc218 \uc124\uc815 \ucd94\uac00 (\uc2dc\ubbac\ub808\uc774\uc158)\nimport os\nos.environ['APP_DATABASE_HOST'] = 'production-db.example.com'\nos.environ['APP_APP_DEBUG'] = 'true'\n\nconfig_manager.add_source(EnvConfigSource())\n\nprint(f\"\\n\ud658\uacbd\ubcc0\uc218 \uc801\uc6a9 \ud6c4:\")\nprint(f\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud638\uc2a4\ud2b8: {config_manager.get('database.host')}\")\nprint(f\"\uc571 \ub514\ubc84\uadf8 \ubaa8\ub4dc: {config_manager.get('app.debug')}\")\n\n# \ub3d9\uc801 \uc124\uc815 \ubcc0\uacbd\nconfig_manager.set('app.new_feature', True)\nprint(f\"\uc0c8 \uae30\ub2a5 \ud65c\uc131\ud654: {config_manager.get('app.new_feature')}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#7","title":"7. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter07_modules_packages/#1_1","title":"\uc5f0\uc2b5 1: \uc720\ud2f8\ub9ac\ud2f0 \ud328\ud0a4\uc9c0 \ub9cc\ub4e4\uae30","text":"<p>\ub2e4\uc591\ud55c \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\ub4e4\uc744 \ud3ec\ud568\ud558\ub294 \ud328\ud0a4\uc9c0\ub97c \uc124\uacc4\ud558\uace0 \uad6c\ud604\ud558\uc138\uc694. \ubb38\uc790\uc5f4 \ucc98\ub9ac, \ud30c\uc77c \uc870\uc791, \ub370\uc774\ud130 \uac80\uc99d \ub4f1\uc758 \ubaa8\ub4c8\uc744 \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#2_1","title":"\uc5f0\uc2b5 2: \ud50c\ub7ec\uadf8\uc778 \uc2dc\uc2a4\ud15c \uad6c\ud604","text":"<p>\ub3d9\uc801\uc73c\ub85c \ud50c\ub7ec\uadf8\uc778\uc744 \ub85c\ub4dc\ud558\uace0 \uc2e4\ud589\ud560 \uc218 \uc788\ub294 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694. \ud50c\ub7ec\uadf8\uc778 \ub514\ub809\ud1a0\ub9ac\ub97c \uc2a4\uce94\ud558\uace0 \ubaa8\ub4c8\uc744 \ub3d9\uc801\uc73c\ub85c import\ud558\ub294 \uae30\ub2a5\uc744 \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#3","title":"\uc5f0\uc2b5 3: \uc124\uc815 \ud30c\uc77c \uad00\ub9ac\uc790","text":"<p>JSON, YAML, INI \ub4f1 \ub2e4\uc591\ud55c \ud615\uc2dd\uc758 \uc124\uc815 \ud30c\uc77c\uc744 \ud1b5\ud569 \uad00\ub9ac\ud560 \uc218 \uc788\ub294 \ud328\ud0a4\uc9c0\ub97c \ub9cc\ub4dc\uc138\uc694. \ud658\uacbd\ubcc0\uc218\uc640 \uba85\ub839\ud589 \uc778\uc218\ub3c4 \uc9c0\uc6d0\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#4_1","title":"\uc5f0\uc2b5 4: \ubaa8\ub4c8 \ubb38\uc11c\ud654 \ub3c4\uad6c","text":"<p>\ud328\ud0a4\uc9c0\ub098 \ubaa8\ub4c8\uc758 \uad6c\uc870\ub97c \ubd84\uc11d\ud558\uace0 \uc790\ub3d9\uc73c\ub85c \ubb38\uc11c\ub97c \uc0dd\uc131\ud558\ub294 \ub3c4\uad6c\ub97c \ub9cc\ub4dc\uc138\uc694. docstring\uc744 \ucd94\ucd9c\ud558\uace0 HTML\uc774\ub098 \ub9c8\ud06c\ub2e4\uc6b4 \ud615\ud0dc\ub85c \ucd9c\ub825\ud558\ub294 \uae30\ub2a5\uc744 \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\ubaa8\ub4c8 \uae30\ucd08: \ubaa8\ub4c8 \uc0dd\uc131, import \ubc29\ubc95, <code>__name__</code>\uacfc <code>__main__</code> \uc774\ud574</li> <li>\ud328\ud0a4\uc9c0 \uad6c\uc870: <code>__init__.py</code>, \ud328\ud0a4\uc9c0 \uacc4\uce35, import \ud328\ud134</li> <li>\uac00\uc0c1\ud658\uacbd: venv \uc0ac\uc6a9\ubc95, \ud504\ub85c\uc81d\ud2b8 \uaca9\ub9ac, \uc758\uc874\uc131 \uad00\ub9ac</li> <li>\ud328\ud0a4\uc9c0 \uad00\ub9ac: pip \uc0ac\uc6a9\ubc95, requirements.txt, \ud328\ud0a4\uc9c0 \ubc30\ud3ec</li> <li>\uace0\uae09 \uae30\ub2a5: \ub3d9\uc801 import, \ubaa8\ub4c8 \uce90\uc2f1, \uc7ac\ub85c\ub4dc, \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ud328\ud0a4\uc9c0</li> <li>\uc2e4\uc6a9\uc801 \uc608\uc81c: \ub85c\uadf8 \uc2dc\uc2a4\ud15c, \uc124\uc815 \uad00\ub9ac, \ud50c\ub7ec\uadf8\uc778 \uc544\ud0a4\ud14d\ucc98</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \uc608\uc678 \ucc98\ub9ac \uace0\uae09 \uae30\ubc95\uc744 \ud559\uc2b5\ud558\uc5ec \uacac\uace0\ud558\uace0 \uc548\uc815\uc801\uc778 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6b0\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter07_modules_packages/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ubaa8\ub4c8\uacfc \ud328\ud0a4\uc9c0\ub294 \ucf54\ub4dc \uad6c\uc870\ud654\uc640 \uc7ac\uc0ac\uc6a9\uc131\uc758 \ud575\uc2ec\uc785\ub2c8\ub2e4</li> <li>\uac00\uc0c1\ud658\uacbd\uc740 \ud504\ub85c\uc81d\ud2b8\ubcc4 \uc758\uc874\uc131 \uad00\ub9ac\uc5d0 \ud544\uc218\uc801\uc785\ub2c8\ub2e4</li> <li>\uc62c\ubc14\ub978 import \ud328\ud134\uacfc \ud328\ud0a4\uc9c0 \uad6c\uc870\ub294 \uc720\uc9c0\ubcf4\uc218\uc131\uc744 \ud06c\uac8c \ud5a5\uc0c1\uc2dc\ud0b5\ub2c8\ub2e4</li> <li>\ub3d9\uc801 import\uc640 \ud50c\ub7ec\uadf8\uc778 \uc2dc\uc2a4\ud15c\uc73c\ub85c \ud655\uc7a5 \uac00\ub2a5\ud55c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\uc124\uc815 \uad00\ub9ac\uc640 \ub85c\uae45\uc740 \uc2e4\ubb34 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \ubc18\ub4dc\uc2dc \ud544\uc694\ud55c \uc694\uc18c\uc785\ub2c8\ub2e4 </li> </ul>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/","title":"Chapter 8: \uc608\uc678 \ucc98\ub9ac \uace0\uae09","text":""},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - Python \uc608\uc678 \uacc4\uce35 \uad6c\uc870\ub97c \uc774\ud574\ud558\uace0 \ud65c\uc6a9\ud558\uae30 - \ucee4\uc2a4\ud140 \uc608\uc678 \ud074\ub798\uc2a4\ub97c \uc124\uacc4\ud558\uace0 \uad6c\ud604\ud558\uae30 - \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub97c \ud65c\uc6a9\ud55c \ub9ac\uc18c\uc2a4 \uad00\ub9ac\ud558\uae30 - \ub85c\uae45 \uc2dc\uc2a4\ud15c\uacfc \uc608\uc678 \ucc98\ub9ac \ud1b5\ud569\ud558\uae30 - \uc608\uc678 \uccb4\uc774\ub2dd\uacfc \uc6d0\uc778 \ucd94\uc801\ud558\uae30 - \uc131\ub2a5 \uace0\ub824\uc0ac\ud56d\uacfc \ucd5c\uc801\ud654 \uae30\ubc95 \uc801\uc6a9\ud558\uae30 - \uc2e4\ubb34\uc5d0\uc11c\uc758 \uacac\uace0\ud55c \uc608\uc678 \ucc98\ub9ac \ud328\ud134 \uad6c\ud604\ud558\uae30</p>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#1-python","title":"1. Python \uc608\uc678 \uacc4\uce35 \uad6c\uc870 \uc774\ud574","text":""},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#11","title":"1.1 \uae30\ubcf8 \uc608\uc678 \uacc4\uce35","text":"<pre><code>print(\"=== Python \uc608\uc678 \uacc4\uce35 \uad6c\uc870 \uc774\ud574 ===\")\n\nimport traceback\nimport sys\nfrom datetime import datetime\n\ndef demonstrate_exception_hierarchy():\n    \"\"\"Python \uc608\uc678 \uacc4\uce35 \uad6c\uc870 \uc2dc\uc5f0\"\"\"\n\n    print(\"1. Python \uc608\uc678 \uacc4\uce35 \uad6c\uc870:\")\n    print(\"   BaseException\")\n    print(\"    \u251c\u2500\u2500 SystemExit\")\n    print(\"    \u251c\u2500\u2500 KeyboardInterrupt\")\n    print(\"    \u251c\u2500\u2500 GeneratorExit\")\n    print(\"    \u2514\u2500\u2500 Exception\")\n    print(\"         \u251c\u2500\u2500 StopIteration\")\n    print(\"         \u251c\u2500\u2500 StopAsyncIteration\")\n    print(\"         \u251c\u2500\u2500 ArithmeticError\")\n    print(\"         \u2502    \u251c\u2500\u2500 ZeroDivisionError\")\n    print(\"         \u2502    \u251c\u2500\u2500 OverflowError\")\n    print(\"         \u2502    \u2514\u2500\u2500 FloatingPointError\")\n    print(\"         \u251c\u2500\u2500 LookupError\")\n    print(\"         \u2502    \u251c\u2500\u2500 IndexError\")\n    print(\"         \u2502    \u2514\u2500\u2500 KeyError\")\n    print(\"         \u251c\u2500\u2500 OSError\")\n    print(\"         \u2502    \u251c\u2500\u2500 FileNotFoundError\")\n    print(\"         \u2502    \u251c\u2500\u2500 PermissionError\")\n    print(\"         \u2502    \u2514\u2500\u2500 TimeoutError\")\n    print(\"         \u251c\u2500\u2500 ValueError\")\n    print(\"         \u251c\u2500\u2500 TypeError\")\n    print(\"         \u251c\u2500\u2500 AttributeError\")\n    print(\"         \u2514\u2500\u2500 RuntimeError\")\n    print()\n\ndef demonstrate_exception_types():\n    \"\"\"\ub2e4\uc591\ud55c \uc608\uc678 \ud0c0\uc785 \uc2dc\uc5f0\"\"\"\n\n    print(\"2. \uc608\uc678 \ud0c0\uc785\ubcc4 \ud2b9\uc131:\")\n\n    exception_examples = [\n        (\"ArithmeticError\", lambda: 1 / 0, \"\uc218\ud559 \uc5f0\uc0b0 \uad00\ub828 \uc624\ub958\"),\n        (\"LookupError\", lambda: [1, 2, 3][10], \"\uc778\ub371\uc2a4/\ud0a4 \uad00\ub828 \uc624\ub958\"),\n        (\"ValueError\", lambda: int(\"invalid\"), \"\uc798\ubabb\ub41c \uac12 \uad00\ub828 \uc624\ub958\"),\n        (\"TypeError\", lambda: \"string\" + 123, \"\ud0c0\uc785 \uad00\ub828 \uc624\ub958\"),\n        (\"AttributeError\", lambda: \"string\".nonexistent_method(), \"\uc18d\uc131 \uad00\ub828 \uc624\ub958\")\n    ]\n\n    for category, func, description in exception_examples:\n        try:\n            func()\n        except Exception as e:\n            print(f\"   {category}: {type(e).__name__}\")\n            print(f\"     - \uc124\uba85: {description}\")\n            print(f\"     - \uba54\uc2dc\uc9c0: {str(e)}\")\n            print(f\"     - MRO: {[cls.__name__ for cls in type(e).__mro__]}\")\n            print()\n\ndemonstrate_exception_hierarchy()\ndemonstrate_exception_types()\n\nclass ExceptionAnalyzer:\n    \"\"\"\uc608\uc678 \ubd84\uc11d \ub3c4\uad6c\"\"\"\n\n    def __init__(self):\n        self.exception_log = []\n\n    def analyze_exception(self, exception):\n        \"\"\"\uc608\uc678 \uc0c1\uc138 \ubd84\uc11d\"\"\"\n        analysis = {\n            'timestamp': datetime.now().isoformat(),\n            'type': type(exception).__name__,\n            'message': str(exception),\n            'args': exception.args,\n            'mro': [cls.__name__ for cls in type(exception).__mro__],\n            'module': type(exception).__module__,\n            'traceback_info': self._get_traceback_info()\n        }\n\n        self.exception_log.append(analysis)\n        return analysis\n\n    def _get_traceback_info(self):\n        \"\"\"\ud2b8\ub808\uc774\uc2a4\ubc31 \uc815\ubcf4 \ucd94\ucd9c\"\"\"\n        exc_type, exc_value, exc_traceback = sys.exc_info()\n        if exc_traceback:\n            tb_lines = traceback.format_tb(exc_traceback)\n            return {\n                'frames': len(tb_lines),\n                'last_frame': tb_lines[-1].strip() if tb_lines else None\n            }\n        return None\n\n    def get_exception_stats(self):\n        \"\"\"\uc608\uc678 \ud1b5\uacc4 \ubc18\ud658\"\"\"\n        if not self.exception_log:\n            return \"\uc608\uc678\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\"\n\n        exception_counts = {}\n        for log in self.exception_log:\n            exc_type = log['type']\n            exception_counts[exc_type] = exception_counts.get(exc_type, 0) + 1\n\n        return {\n            'total_exceptions': len(self.exception_log),\n            'unique_types': len(exception_counts),\n            'type_distribution': exception_counts,\n            'most_common': max(exception_counts.items(), key=lambda x: x[1])\n        }\n\ndef demonstrate_exception_analysis():\n    \"\"\"\uc608\uc678 \ubd84\uc11d \uc2dc\uc5f0\"\"\"\n\n    print(\"3. \uc608\uc678 \ubd84\uc11d \ub3c4\uad6c \ud65c\uc6a9:\")\n\n    analyzer = ExceptionAnalyzer()\n\n    # \ub2e4\uc591\ud55c \uc608\uc678 \ubc1c\uc0dd\uc2dc\ucf1c \ubd84\uc11d\n    test_cases = [\n        lambda: 1 / 0,\n        lambda: [1, 2][5],\n        lambda: int(\"not_a_number\"),\n        lambda: {\"a\": 1}[\"b\"]\n    ]\n\n    for i, test_case in enumerate(test_cases, 1):\n        try:\n            test_case()\n        except Exception as e:\n            analysis = analyzer.analyze_exception(e)\n            print(f\"   \uc608\uc678 {i}: {analysis['type']}\")\n            print(f\"     \uba54\uc2dc\uc9c0: {analysis['message']}\")\n            print(f\"     \uc0c1\uc18d \uacc4\uce35: {' -&gt; '.join(analysis['mro'])}\")\n\n    # \ud1b5\uacc4 \ucd9c\ub825\n    stats = analyzer.get_exception_stats()\n    print(f\"\\n   \uc608\uc678 \ud1b5\uacc4:\")\n    print(f\"     \ucd1d \uc608\uc678 \uc218: {stats['total_exceptions']}\")\n    print(f\"     \uace0\uc720 \ud0c0\uc785 \uc218: {stats['unique_types']}\")\n    if stats['most_common']:\n        pattern, count = stats['most_common']\n        print(f\"     \uac00\uc7a5 \ube48\ubc88\ud55c \ud328\ud134: {pattern} ({count}\ud68c)\")\n\ndemonstrate_exception_analysis()\n</code></pre>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#12","title":"1.2 \uc608\uc678 \ud3ec\ucc29 \uc804\ub7b5","text":"<pre><code>print(\"\\n=== \uc608\uc678 \ud3ec\ucc29 \uc804\ub7b5 ===\")\n\nclass SmartExceptionHandler:\n    \"\"\"\uc9c0\ub2a5\ud615 \uc608\uc678 \ucc98\ub9ac\uae30\"\"\"\n\n    def __init__(self, strict_mode=False):\n        self.strict_mode = strict_mode\n        self.handled_exceptions = []\n\n    def handle_with_specificity(self, operation, *args, **kwargs):\n        \"\"\"\uad6c\uccb4\uc801\uc778 \uc608\uc678\ubcc4 \ucc98\ub9ac\"\"\"\n\n        try:\n            return operation(*args, **kwargs)\n\n        except FileNotFoundError as e:\n            self._log_exception(e, \"\ud30c\uc77c \uad00\ub828\")\n            if self.strict_mode:\n                raise\n            return self._create_default_file()\n\n        except PermissionError as e:\n            self._log_exception(e, \"\uad8c\ud55c \uad00\ub828\")\n            if self.strict_mode:\n                raise\n            return self._request_elevated_access()\n\n        except ValueError as e:\n            self._log_exception(e, \"\uac12 \uad00\ub828\")\n            if self.strict_mode:\n                raise\n            return self._sanitize_input(*args, **kwargs)\n\n        except (ConnectionError, TimeoutError) as e:\n            self._log_exception(e, \"\ub124\ud2b8\uc6cc\ud06c \uad00\ub828\")\n            if self.strict_mode:\n                raise\n            return self._retry_with_backoff(operation, *args, **kwargs)\n\n        except Exception as e:\n            self._log_exception(e, \"\uc77c\ubc18\")\n            if self.strict_mode:\n                raise\n            return self._generic_fallback()\n\n    def _log_exception(self, exception, category):\n        \"\"\"\uc608\uc678 \ub85c\uae45\"\"\"\n        log_data = {\n            'timestamp': datetime.now().isoformat(),\n            'category': category,\n            'type': type(exception).__name__,\n            'message': str(exception),\n            'handled': not self.strict_mode\n        }\n\n        self.handled_exceptions.append(log_data)\n        print(f\"   [{category}] {type(exception).__name__}: {exception}\")\n\n    def _create_default_file(self):\n        \"\"\"\uae30\ubcf8 \ud30c\uc77c \uc0dd\uc131\"\"\"\n        print(\"     \u2192 \uae30\ubcf8 \uc124\uc815 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\")\n        return \"default_content\"\n\n    def _request_elevated_access(self):\n        \"\"\"\uad8c\ud55c \uc0c1\uc2b9 \uc694\uccad\"\"\"\n        print(\"     \u2192 \uad00\ub9ac\uc790 \uad8c\ud55c\uc744 \uc694\uccad\ud569\ub2c8\ub2e4.\")\n        return \"permission_requested\"\n\n    def _sanitize_input(self, *args, **kwargs):\n        \"\"\"\uc785\ub825 \uac12 \uc815\uc81c\"\"\"\n        print(\"     \u2192 \uc785\ub825 \uac12\uc744 \uc815\uc81c\ud558\uc5ec \uc7ac\uc2dc\ub3c4\ud569\ub2c8\ub2e4.\")\n        return \"sanitized_result\"\n\n    def _retry_with_backoff(self, operation, *args, **kwargs):\n        \"\"\"\ubc31\uc624\ud504\ub97c \uc0ac\uc6a9\ud55c \uc7ac\uc2dc\ub3c4\"\"\"\n        print(\"     \u2192 \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0\uc744 \uc7ac\uc2dc\ub3c4\ud569\ub2c8\ub2e4.\")\n        return \"retry_result\"\n\n    def _generic_fallback(self):\n        \"\"\"\uc77c\ubc18\uc801\uc778 \ud3f4\ubc31\"\"\"\n        print(\"     \u2192 \uc548\uc804\ud55c \uae30\ubcf8\uac12\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\")\n        return \"fallback_result\"\n\ndef demonstrate_exception_handling_strategies():\n    \"\"\"\uc608\uc678 \ucc98\ub9ac \uc804\ub7b5 \uc2dc\uc5f0\"\"\"\n\n    print(\"4. \uad6c\uccb4\uc801\uc778 \uc608\uc678 \ucc98\ub9ac \uc804\ub7b5:\")\n\n    handler = SmartExceptionHandler(strict_mode=False)\n\n    # \uc2dc\ubbac\ub808\uc774\uc158 \ud568\uc218\ub4e4\n    def file_operation():\n        raise FileNotFoundError(\"\uc124\uc815 \ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n\n    def value_operation():\n        raise ValueError(\"\uc798\ubabb\ub41c \ud615\uc2dd\uc758 \ub370\uc774\ud130\uc785\ub2c8\ub2e4\")\n\n    def network_operation():\n        raise ConnectionError(\"\uc11c\ubc84\uc5d0 \uc5f0\uacb0\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n\n    operations = [\n        (\"\ud30c\uc77c \uc791\uc5c5\", file_operation),\n        (\"\uac12 \uac80\uc99d\", value_operation),\n        (\"\ub124\ud2b8\uc6cc\ud06c \uc694\uccad\", network_operation)\n    ]\n\n    for name, operation in operations:\n        print(f\"\\n   {name} \uc2e4\ud589:\")\n        result = handler.handle_with_specificity(operation)\n        print(f\"     \uacb0\uacfc: {result}\")\n\n    # \ucc98\ub9ac\ub41c \uc608\uc678 \uc694\uc57d\n    print(f\"\\n   \ucc98\ub9ac\ub41c \uc608\uc678 \ucd1d {len(handler.handled_exceptions)}\uac1c:\")\n    for log in handler.handled_exceptions:\n        print(f\"     - {log['category']}: {log['type']}\")\n\ndemonstrate_exception_handling_strategies()\n</code></pre>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#2","title":"2. \ucee4\uc2a4\ud140 \uc608\uc678 \ud074\ub798\uc2a4 \uc124\uacc4","text":""},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#21","title":"2.1 \uae30\ubcf8 \ucee4\uc2a4\ud140 \uc608\uc678","text":"<pre><code>print(\"\\n=== \ucee4\uc2a4\ud140 \uc608\uc678 \ud074\ub798\uc2a4 \uc124\uacc4 ===\")\n\nclass ApplicationError(Exception):\n    \"\"\"\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uae30\ubcf8 \uc608\uc678 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, message, error_code=None, details=None):\n        super().__init__(message)\n        self.error_code = error_code\n        self.details = details or {}\n        self.timestamp = datetime.now()\n\n    def __str__(self):\n        base_msg = super().__str__()\n        if self.error_code:\n            return f\"[{self.error_code}] {base_msg}\"\n        return base_msg\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}('{self}', error_code={self.error_code})\"\n\n    def to_dict(self):\n        \"\"\"\uc608\uc678 \uc815\ubcf4\ub97c \ub515\uc154\ub108\ub9ac\ub85c \ubcc0\ud658\"\"\"\n        return {\n            'type': self.__class__.__name__,\n            'message': str(self),\n            'error_code': self.error_code,\n            'details': self.details,\n            'timestamp': self.timestamp.isoformat()\n        }\n\nclass ValidationError(ApplicationError):\n    \"\"\"\uac80\uc99d \uad00\ub828 \uc608\uc678\"\"\"\n\n    def __init__(self, field, value, message=None):\n        self.field = field\n        self.value = value\n        default_message = f\"\ud544\ub4dc '{field}'\uc758 \uac12 '{value}'\uc774(\uac00) \uc720\ud6a8\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\"\n        super().__init__(\n            message or default_message,\n            error_code=\"VALIDATION_ERROR\",\n            details={'field': field, 'value': value}\n        )\n\nclass BusinessLogicError(ApplicationError):\n    \"\"\"\ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uad00\ub828 \uc608\uc678\"\"\"\n\n    def __init__(self, operation, reason, suggestions=None):\n        self.operation = operation\n        self.reason = reason\n        self.suggestions = suggestions or []\n\n        message = f\"\uc791\uc5c5 '{operation}'\uc744(\ub97c) \uc218\ud589\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {reason}\"\n        super().__init__(\n            message,\n            error_code=\"BUSINESS_LOGIC_ERROR\",\n            details={\n                'operation': operation,\n                'reason': reason,\n                'suggestions': self.suggestions\n            }\n        )\n\nclass DataAccessError(ApplicationError):\n    \"\"\"\ub370\uc774\ud130 \uc811\uadfc \uad00\ub828 \uc608\uc678\"\"\"\n\n    def __init__(self, resource, action, original_error=None):\n        self.resource = resource\n        self.action = action\n        self.original_error = original_error\n\n        message = f\"\ub9ac\uc18c\uc2a4 '{resource}'\uc5d0 \ub300\ud55c '{action}' \uc791\uc5c5\uc774 \uc2e4\ud328\ud588\uc2b5\ub2c8\ub2e4\"\n        if original_error:\n            message += f\": {original_error}\"\n\n        super().__init__(\n            message,\n            error_code=\"DATA_ACCESS_ERROR\",\n            details={\n                'resource': resource,\n                'action': action,\n                'original_error': str(original_error) if original_error else None\n            }\n        )\n\ndef demonstrate_custom_exceptions():\n    \"\"\"\ucee4\uc2a4\ud140 \uc608\uc678 \uc2dc\uc5f0\"\"\"\n\n    print(\"5. \ucee4\uc2a4\ud140 \uc608\uc678 \ud074\ub798\uc2a4 \ud65c\uc6a9:\")\n\n    # \uac80\uc99d \uc608\uc678\n    try:\n        age = -5\n        if age &lt; 0:\n            raise ValidationError('age', age, '\ub098\uc774\ub294 0 \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4')\n    except ValidationError as e:\n        print(f\"   \uac80\uc99d \uc624\ub958: {e}\")\n        print(f\"     \uc138\ubd80 \uc815\ubcf4: {e.details}\")\n\n    # \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc608\uc678\n    try:\n        account_balance = 100\n        withdraw_amount = 500\n        if withdraw_amount &gt; account_balance:\n            raise BusinessLogicError(\n                operation='\ucd9c\uae08',\n                reason='\uc794\uc561 \ubd80\uc871',\n                suggestions=['\uc794\uc561\uc744 \ud655\uc778\ud558\uc138\uc694', '\uc785\uae08\uc744 \uba3c\uc800 \ud558\uc138\uc694']\n            )\n    except BusinessLogicError as e:\n        print(f\"\\n   \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc624\ub958: {e}\")\n        print(f\"     \uc81c\uc548\uc0ac\ud56d: {', '.join(e.suggestions)}\")\n\n    # \ub370\uc774\ud130 \uc811\uadfc \uc608\uc678\n    try:\n        raise DataAccessError(\n            resource='user_database',\n            action='read',\n            original_error=ConnectionError(\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc2e4\ud328\")\n        )\n    except DataAccessError as e:\n        print(f\"\\n   \ub370\uc774\ud130 \uc811\uadfc \uc624\ub958: {e}\")\n        print(f\"     JSON \ud615\ud0dc: {e.to_dict()}\")\n\ndemonstrate_custom_exceptions()\n</code></pre>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#22","title":"2.2 \uc608\uc678 \uccb4\uc774\ub2dd\uacfc \uc6d0\uc778 \ucd94\uc801","text":"<pre><code>print(\"\\n=== \uc608\uc678 \uccb4\uc774\ub2dd\uacfc \uc6d0\uc778 \ucd94\uc801 ===\")\n\nclass ExceptionChainManager:\n    \"\"\"\uc608\uc678 \uccb4\uc774\ub2dd \uad00\ub9ac\uc790\"\"\"\n\n    def __init__(self):\n        self.chain_history = []\n\n    def raise_from(self, new_exception, original_exception):\n        \"\"\"\uba85\uc2dc\uc801 \uc608\uc678 \uccb4\uc774\ub2dd\"\"\"\n        self.chain_history.append({\n            'original': original_exception,\n            'new': new_exception,\n            'timestamp': datetime.now()\n        })\n\n        # Python 3\uc758 raise ... from ... \uad6c\ubb38 \uc2dc\ubbac\ub808\uc774\uc158\n        new_exception.__cause__ = original_exception\n        raise new_exception\n\n    def raise_during(self, new_exception):\n        \"\"\"\ucee8\ud14d\uc2a4\ud2b8 \ub0b4\uc5d0\uc11c \ubc1c\uc0dd\ud55c \uc608\uc678 \uccb4\uc774\ub2dd\"\"\"\n        # Python\uc758 \uc554\uc2dc\uc801 \uccb4\uc774\ub2dd \uc2dc\ubbac\ub808\uc774\uc158\n        exc_type, exc_value, exc_traceback = sys.exc_info()\n        if exc_value:\n            new_exception.__context__ = exc_value\n        raise new_exception\n\n    def analyze_chain(self, exception):\n        \"\"\"\uc608\uc678 \uccb4\uc778 \ubd84\uc11d\"\"\"\n        chain = []\n        current = exception\n\n        while current:\n            chain.append({\n                'type': type(current).__name__,\n                'message': str(current),\n                'is_cause': hasattr(current, '__cause__') and current.__cause__ is not None,\n                'is_context': hasattr(current, '__context__') and current.__context__ is not None\n            })\n\n            # \ub2e4\uc74c \uc608\uc678 \ucc3e\uae30 (cause\uac00 \uc6b0\uc120, \uc5c6\uc73c\uba74 context)\n            current = getattr(current, '__cause__', None) or getattr(current, '__context__', None)\n\n        return chain\n\nclass LayeredService:\n    \"\"\"\uacc4\uce35\ud654\ub41c \uc11c\ube44\uc2a4 \uc608\uc81c\"\"\"\n\n    def __init__(self):\n        self.chain_manager = ExceptionChainManager()\n\n    def database_layer(self, query):\n        \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uacc4\uce35\"\"\"\n        try:\n            if \"invalid\" in query:\n                raise ConnectionError(\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc2e4\ud328\")\n            return f\"DB Result for: {query}\"\n        except ConnectionError as e:\n            # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc608\uc678\ub97c \uc11c\ube44\uc2a4 \uc608\uc678\ub85c \ubcc0\ud658\n            self.chain_manager.raise_from(\n                DataAccessError(\"database\", \"query\", e),\n                e\n            )\n\n    def business_layer(self, request):\n        \"\"\"\ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uacc4\uce35\"\"\"\n        try:\n            if not request.get('valid', True):\n                raise ValidationError('request', request, '\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uc694\uccad')\n\n            # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud638\ucd9c\n            return self.database_layer(request.get('query', 'valid_query'))\n\n        except (ValidationError, DataAccessError) as e:\n            # \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc608\uc678\ub85c \ub798\ud551\n            try:\n                raise BusinessLogicError(\n                    operation='process_request',\n                    reason=f\"\uc694\uccad \ucc98\ub9ac \uc2e4\ud328: {e}\"\n                )\n            except BusinessLogicError:\n                # \uae30\uc874 \uc608\uc678\ub97c \ucee8\ud14d\uc2a4\ud2b8\ub85c \uc720\uc9c0\n                self.chain_manager.raise_during(\n                    ApplicationError(\"\uc11c\ube44\uc2a4 \ucc98\ub9ac \uc911 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4\")\n                )\n\n    def api_layer(self, user_request):\n        \"\"\"API \uacc4\uce35\"\"\"\n        try:\n            return self.business_layer(user_request)\n        except Exception as e:\n            print(f\"6. \uc608\uc678 \uccb4\uc774\ub2dd \ubd84\uc11d:\")\n\n            # \uc608\uc678 \uccb4\uc778 \ubd84\uc11d\n            chain = self.chain_manager.analyze_chain(e)\n\n            print(f\"   \ubc1c\uc0dd\ud55c \uc608\uc678 \uccb4\uc778 ({len(chain)}\ub2e8\uacc4):\")\n            for i, exc_info in enumerate(chain):\n                indent = \"  \" * (i + 2)\n                chain_type = \"\uc6d0\uc778\" if exc_info['is_cause'] else \"\ucee8\ud14d\uc2a4\ud2b8\" if exc_info['is_context'] else \"\ucd5c\uc885\"\n                print(f\"{indent}[{chain_type}] {exc_info['type']}: {exc_info['message']}\")\n\n            # \ucd5c\uc885 \uc608\uc678\ub85c \ubcc0\ud658\n            raise ApplicationError(\n                \"API \uc694\uccad \ucc98\ub9ac \uc2e4\ud328\",\n                error_code=\"API_ERROR\"\n            ) from e\n\ndef demonstrate_exception_chaining():\n    \"\"\"\uc608\uc678 \uccb4\uc774\ub2dd \uc2dc\uc5f0\"\"\"\n\n    service = LayeredService()\n\n    # \uc815\uc0c1 \uc694\uccad\n    try:\n        result = service.api_layer({'query': 'SELECT * FROM users', 'valid': True})\n        print(f\"   \uc815\uc0c1 \uacb0\uacfc: {result}\")\n    except Exception as e:\n        print(f\"   \uc2e4\ud328: {type(e).__name__}: {e}\")\n\n    print()\n\n    # \uc624\ub958 \ubc1c\uc0dd \uc694\uccad\n    try:\n        service.api_layer({'query': 'invalid_query', 'valid': False})\n    except ApplicationError as e:\n        print(f\"\\n   \ucd5c\uc885 \uc608\uc678: {e}\")\n        print(f\"   \uc608\uc678 \ucf54\ub4dc: {e.error_code}\")\n\ndemonstrate_exception_chaining()\n</code></pre>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#3","title":"3. \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\uc640 \uc608\uc678 \ucc98\ub9ac","text":""},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#31","title":"3.1 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uae30\ubcf8","text":"<pre><code>print(\"\\n=== \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\uc640 \uc608\uc678 \ucc98\ub9ac ===\")\n\nimport contextlib\nfrom contextlib import contextmanager\n\nclass ResourceManager:\n    \"\"\"\ub9ac\uc18c\uc2a4 \uad00\ub9ac \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n\n    def __init__(self, resource_name, timeout=10):\n        self.resource_name = resource_name\n        self.timeout = timeout\n        self.resource = None\n        self.acquired = False\n        self.exceptions_occurred = []\n\n    def __enter__(self):\n        \"\"\"\ub9ac\uc18c\uc2a4 \ud68d\ub4dd\"\"\"\n        print(f\"   \ub9ac\uc18c\uc2a4 '{self.resource_name}' \ud68d\ub4dd \uc2dc\ub3c4...\")\n\n        try:\n            # \ub9ac\uc18c\uc2a4 \ucd08\uae30\ud654 \uc2dc\ubbac\ub808\uc774\uc158\n            if self.resource_name == \"failing_resource\":\n                raise RuntimeError(\"\ub9ac\uc18c\uc2a4 \ucd08\uae30\ud654 \uc2e4\ud328\")\n\n            self.resource = f\"Resource-{self.resource_name}-Handle\"\n            self.acquired = True\n            print(f\"   \u2713 \ub9ac\uc18c\uc2a4 '{self.resource_name}' \ud68d\ub4dd \uc131\uacf5\")\n            return self.resource\n\n        except Exception as e:\n            print(f\"   \u2717 \ub9ac\uc18c\uc2a4 \ud68d\ub4dd \uc2e4\ud328: {e}\")\n            self.exceptions_occurred.append(e)\n            raise\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        \"\"\"\ub9ac\uc18c\uc2a4 \ud574\uc81c\"\"\"\n        print(f\"   \ub9ac\uc18c\uc2a4 '{self.resource_name}' \ud574\uc81c \uc911...\")\n\n        if exc_type:\n            print(f\"   \uc608\uc678 \ubc1c\uc0dd: {exc_type.__name__}: {exc_value}\")\n            self.exceptions_occurred.append(exc_value)\n\n        try:\n            if self.acquired:\n                # \ub9ac\uc18c\uc2a4 \uc815\ub9ac \uc2dc\ubbac\ub808\uc774\uc158\n                if self.resource_name == \"cleanup_failing_resource\":\n                    raise RuntimeError(\"\ub9ac\uc18c\uc2a4 \uc815\ub9ac \uc2e4\ud328\")\n\n                self.resource = None\n                self.acquired = False\n                print(f\"   \u2713 \ub9ac\uc18c\uc2a4 '{self.resource_name}' \ud574\uc81c \uc644\ub8cc\")\n\n        except Exception as cleanup_error:\n            print(f\"   \u2717 \ub9ac\uc18c\uc2a4 \ud574\uc81c \uc2e4\ud328: {cleanup_error}\")\n            self.exceptions_occurred.append(cleanup_error)\n\n            # \uc815\ub9ac \uc911 \uc608\uc678\uac00 \ubc1c\uc0dd\ud574\ub3c4 \uc6d0\ub798 \uc608\uc678\ub97c \uc720\uc9c0\n            if exc_type is None:\n                # \uc6d0\ub798 \uc608\uc678\uac00 \uc5c6\uc5c8\ub2e4\uba74 \uc815\ub9ac \uc608\uc678\ub97c \ubc1c\uc0dd\n                raise cleanup_error\n            else:\n                # \uc6d0\ub798 \uc608\uc678\uac00 \uc788\uc5c8\ub2e4\uba74 \uadf8\uac83\uc744 \uc6b0\uc120\uc2dc (\uc815\ub9ac \uc608\uc678\ub294 \ub85c\uadf8\ub9cc)\n                print(f\"   \uc8fc\uc758: \uc815\ub9ac \uc911 \ucd94\uac00 \uc608\uc678 \ubc1c\uc0dd, \uc6d0\ub798 \uc608\uc678\ub97c \uc720\uc9c0\ud569\ub2c8\ub2e4\")\n\n        # False\ub97c \ubc18\ud658\ud558\uc5ec \uc608\uc678\ub97c \uc7ac\ubc1c\uc0dd\uc2dc\ud0b4 (\uc608\uc678 \uc5b5\uc81c \uc548\ud568)\n        return False\n\nclass DatabaseConnection:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n\n    def __init__(self, connection_string):\n        self.connection_string = connection_string\n        self.connected = False\n        self.transaction_active = False\n\n    def connect(self):\n        \"\"\"\uc5f0\uacb0\"\"\"\n        if \"invalid\" in self.connection_string:\n            raise ConnectionError(\"\uc798\ubabb\ub41c \uc5f0\uacb0 \ubb38\uc790\uc5f4\")\n        self.connected = True\n        print(f\"     \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\ub428: {self.connection_string}\")\n\n    def begin_transaction(self):\n        \"\"\"\ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\"\"\"\n        if not self.connected:\n            raise RuntimeError(\"\uc5f0\uacb0\ub418\uc9c0 \uc54a\uc74c\")\n        self.transaction_active = True\n        print(f\"     \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\")\n\n    def commit(self):\n        \"\"\"\ucee4\ubc0b\"\"\"\n        if not self.transaction_active:\n            raise RuntimeError(\"\ud65c\uc131 \ud2b8\ub79c\uc7ad\uc158\uc774 \uc5c6\uc74c\")\n        self.transaction_active = False\n        print(f\"     \ud2b8\ub79c\uc7ad\uc158 \ucee4\ubc0b\ub428\")\n\n    def rollback(self):\n        \"\"\"\ub864\ubc31\"\"\"\n        if self.transaction_active:\n            self.transaction_active = False\n            print(f\"     \ud2b8\ub79c\uc7ad\uc158 \ub864\ubc31\ub428\")\n\n    def close(self):\n        \"\"\"\uc5f0\uacb0 \uc885\ub8cc\"\"\"\n        if self.transaction_active:\n            self.rollback()\n        if self.connected:\n            self.connected = False\n            print(f\"     \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc885\ub8cc\ub428\")\n\n@contextmanager\ndef database_transaction(connection_string):\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n\n    db = DatabaseConnection(connection_string)\n\n    try:\n        # \uc124\uc815\n        db.connect()\n        db.begin_transaction()\n\n        yield db\n\n        # \uc131\uacf5 \uc2dc \ucee4\ubc0b\n        db.commit()\n\n    except Exception as e:\n        # \uc2e4\ud328 \uc2dc \ub864\ubc31\n        print(f\"     \uc624\ub958 \ubc1c\uc0dd, \ub864\ubc31 \uc218\ud589: {e}\")\n        try:\n            db.rollback()\n        except Exception as rollback_error:\n            print(f\"     \ub864\ubc31 \uc2e4\ud328: {rollback_error}\")\n        raise\n\n    finally:\n        # \ud56d\uc0c1 \uc5f0\uacb0 \uc885\ub8cc\n        try:\n            db.close()\n        except Exception as close_error:\n            print(f\"     \uc5f0\uacb0 \uc885\ub8cc \uc2e4\ud328: {close_error}\")\n\ndef demonstrate_context_managers():\n    \"\"\"\ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc2dc\uc5f0\"\"\"\n\n    print(\"7. \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uae30\ubcf8 \uc0ac\uc6a9\ubc95:\")\n\n    # \uc131\uacf5 \ucf00\uc774\uc2a4\n    try:\n        with ResourceManager(\"file_handler\") as resource:\n            print(f\"     \uc791\uc5c5 \uc218\ud589 \uc911: {resource}\")\n            # \uc815\uc0c1 \uc791\uc5c5\n    except Exception as e:\n        print(f\"   \uc624\ub958: {e}\")\n\n    print()\n\n    # \uc608\uc678 \ubc1c\uc0dd \ucf00\uc774\uc2a4\n    try:\n        with ResourceManager(\"database_connection\") as resource:\n            print(f\"     \uc791\uc5c5 \uc218\ud589 \uc911: {resource}\")\n            raise ValueError(\"\ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc624\ub958\")\n    except ValueError as e:\n        print(f\"   \ucc98\ub9ac\ub41c \uc624\ub958: {e}\")\n\n    print()\n\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158 \uc131\uacf5\n    print(\"8. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800:\")\n    try:\n        with database_transaction(\"postgresql://localhost:5432/mydb\") as db:\n            print(f\"     SQL \uc2e4\ud589: INSERT INTO users...\")\n            print(f\"     SQL \uc2e4\ud589: UPDATE profiles...\")\n            # \uc131\uacf5\uc801\uc73c\ub85c \uc644\ub8cc\n    except Exception as e:\n        print(f\"   \ud2b8\ub79c\uc7ad\uc158 \uc2e4\ud328: {e}\")\n\n    print()\n\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158 \uc2e4\ud328\n    try:\n        with database_transaction(\"postgresql://localhost:5432/mydb\") as db:\n            print(f\"     SQL \uc2e4\ud589: INSERT INTO users...\")\n            raise RuntimeError(\"SQL \uc2e4\ud589 \uc624\ub958\")\n    except RuntimeError as e:\n        print(f\"   \ud2b8\ub79c\uc7ad\uc158 \uc2e4\ud328 \ucc98\ub9ac\ub428: {e}\")\n\ndemonstrate_context_managers()\n</code></pre>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#32","title":"3.2 \uace0\uae09 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \ud328\ud134","text":"<pre><code>print(\"\\n=== \uace0\uae09 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \ud328\ud134 ===\")\n\nclass MultiResourceManager:\n    \"\"\"\ub2e4\uc911 \ub9ac\uc18c\uc2a4 \uad00\ub9ac\uc790\"\"\"\n\n    def __init__(self):\n        self.resources = []\n        self.acquired_resources = []\n\n    def add_resource(self, resource_factory, *args, **kwargs):\n        \"\"\"\ub9ac\uc18c\uc2a4 \ud329\ud1a0\ub9ac \ucd94\uac00\"\"\"\n        self.resources.append((resource_factory, args, kwargs))\n\n    def __enter__(self):\n        \"\"\"\ubaa8\ub4e0 \ub9ac\uc18c\uc2a4 \ud68d\ub4dd\"\"\"\n        print(\"   \ub2e4\uc911 \ub9ac\uc18c\uc2a4 \ud68d\ub4dd \uc2dc\uc791...\")\n\n        try:\n            for i, (factory, args, kwargs) in enumerate(self.resources):\n                print(f\"     \ub9ac\uc18c\uc2a4 {i+1} \ud68d\ub4dd \uc911...\")\n                resource = factory(*args, **kwargs)\n\n                if hasattr(resource, '__enter__'):\n                    acquired = resource.__enter__()\n                    self.acquired_resources.append((resource, acquired))\n                else:\n                    self.acquired_resources.append((resource, resource))\n\n                print(f\"     \ub9ac\uc18c\uc2a4 {i+1} \ud68d\ub4dd \uc644\ub8cc\")\n\n            print(\"   \ubaa8\ub4e0 \ub9ac\uc18c\uc2a4 \ud68d\ub4dd \uc644\ub8cc\")\n            return [res[1] for res in self.acquired_resources]\n\n        except Exception as e:\n            print(f\"   \ub9ac\uc18c\uc2a4 \ud68d\ub4dd \uc2e4\ud328: {e}\")\n            self._cleanup_acquired_resources()\n            raise\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        \"\"\"\ubaa8\ub4e0 \ub9ac\uc18c\uc2a4 \ud574\uc81c\"\"\"\n        print(\"   \ub2e4\uc911 \ub9ac\uc18c\uc2a4 \ud574\uc81c \uc2dc\uc791...\")\n\n        cleanup_errors = []\n\n        # \uc5ed\uc21c\uc73c\ub85c \ud574\uc81c\n        for resource, acquired in reversed(self.acquired_resources):\n            try:\n                if hasattr(resource, '__exit__'):\n                    resource.__exit__(exc_type, exc_value, traceback)\n                else:\n                    # \uac04\ub2e8\ud55c \uc815\ub9ac \ub85c\uc9c1\n                    if hasattr(resource, 'close'):\n                        resource.close()\n                print(f\"     \ub9ac\uc18c\uc2a4 \ud574\uc81c \uc644\ub8cc: {type(resource).__name__}\")\n\n            except Exception as cleanup_error:\n                print(f\"     \ub9ac\uc18c\uc2a4 \ud574\uc81c \uc2e4\ud328: {cleanup_error}\")\n                cleanup_errors.append(cleanup_error)\n\n        self.acquired_resources.clear()\n\n        if cleanup_errors and exc_type is None:\n            # \uc6d0\ub798 \uc608\uc678\uac00 \uc5c6\uc5c8\ub2e4\uba74 \uc815\ub9ac \uc608\uc678 \ubc1c\uc0dd\n            raise cleanup_errors[0]\n\n        print(\"   \ub2e4\uc911 \ub9ac\uc18c\uc2a4 \ud574\uc81c \uc644\ub8cc\")\n        return False\n\n    def _cleanup_acquired_resources(self):\n        \"\"\"\ubd80\ubd84\uc801\uc73c\ub85c \ud68d\ub4dd\ub41c \ub9ac\uc18c\uc2a4 \uc815\ub9ac\"\"\"\n        for resource, acquired in reversed(self.acquired_resources):\n            try:\n                if hasattr(resource, '__exit__'):\n                    resource.__exit__(None, None, None)\n            except Exception as e:\n                print(f\"     \uc815\ub9ac \uc911 \uc624\ub958: {e}\")\n        self.acquired_resources.clear()\n\n@contextmanager\ndef error_handling_context(error_handler=None, recovery_action=None):\n    \"\"\"\uc624\ub958 \ucc98\ub9ac \ucee8\ud14d\uc2a4\ud2b8\"\"\"\n\n    try:\n        print(\"     \uc624\ub958 \ucc98\ub9ac \ucee8\ud14d\uc2a4\ud2b8 \uc2dc\uc791\")\n        yield\n        print(\"     \uc624\ub958 \ucc98\ub9ac \ucee8\ud14d\uc2a4\ud2b8 \uc815\uc0c1 \uc644\ub8cc\")\n\n    except Exception as e:\n        print(f\"     \uc624\ub958 \uac10\uc9c0: {type(e).__name__}: {e}\")\n\n        if error_handler:\n            try:\n                result = error_handler(e)\n                print(f\"     \uc624\ub958 \ud578\ub4e4\ub7ec \uacb0\uacfc: {result}\")\n            except Exception as handler_error:\n                print(f\"     \uc624\ub958 \ud578\ub4e4\ub7ec \uc2e4\ud328: {handler_error}\")\n\n        if recovery_action:\n            try:\n                recovery_result = recovery_action(e)\n                print(f\"     \ubcf5\uad6c \uc561\uc158 \uacb0\uacfc: {recovery_result}\")\n                return  # \ubcf5\uad6c \uc131\uacf5 \uc2dc \uc608\uc678 \uc5b5\uc81c\n            except Exception as recovery_error:\n                print(f\"     \ubcf5\uad6c \uc561\uc158 \uc2e4\ud328: {recovery_error}\")\n\n        # \uc608\uc678 \uc7ac\ubc1c\uc0dd\n        raise\n\nclass RetryContext:\n    \"\"\"\uc7ac\uc2dc\ub3c4 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n\n    def __init__(self, max_attempts=3, delay=1, backoff_factor=2, \n                 retry_exceptions=(Exception,)):\n        self.max_attempts = max_attempts\n        self.delay = delay\n        self.backoff_factor = backoff_factor\n        self.retry_exceptions = retry_exceptions\n        self.attempt = 0\n        self.last_exception = None\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if exc_type and issubclass(exc_type, self.retry_exceptions):\n            self.attempt += 1\n            self.last_exception = exc_value\n\n            if self.attempt &lt; self.max_attempts:\n                import time\n                current_delay = self.delay * (self.backoff_factor ** (self.attempt - 1))\n                print(f\"     \uc7ac\uc2dc\ub3c4 {self.attempt}/{self.max_attempts}, {current_delay}\ucd08 \ub300\uae30...\")\n                time.sleep(current_delay)\n                return True  # \uc608\uc678 \uc5b5\uc81c (\uc7ac\uc2dc\ub3c4)\n            else:\n                print(f\"     \ucd5c\ub300 \uc7ac\uc2dc\ub3c4 \ud69f\uc218 \ucd08\uacfc\")\n                return False  # \uc608\uc678 \uc7ac\ubc1c\uc0dd\n\n        return False  # \ub2e4\ub978 \uc608\uc678\ub294 \uc7ac\ubc1c\uc0dd\n\ndef demonstrate_advanced_context_managers():\n    \"\"\"\uace0\uae09 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc2dc\uc5f0\"\"\"\n\n    print(\"9. \ub2e4\uc911 \ub9ac\uc18c\uc2a4 \uad00\ub9ac\uc790:\")\n\n    # Mock \ub9ac\uc18c\uc2a4\ub4e4\n    class MockFileResource:\n        def __init__(self, filename):\n            self.filename = filename\n\n        def __enter__(self):\n            print(f\"       \ud30c\uc77c \uc5f4\uae30: {self.filename}\")\n            return self\n\n        def __exit__(self, *args):\n            print(f\"       \ud30c\uc77c \ub2eb\uae30: {self.filename}\")\n\n    class MockNetworkResource:\n        def __init__(self, host):\n            self.host = host\n\n        def __enter__(self):\n            print(f\"       \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0: {self.host}\")\n            return self\n\n        def __exit__(self, *args):\n            print(f\"       \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0 \ud574\uc81c: {self.host}\")\n\n    # \ub2e4\uc911 \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\n    try:\n        multi_manager = MultiResourceManager()\n        multi_manager.add_resource(MockFileResource, \"config.txt\")\n        multi_manager.add_resource(MockNetworkResource, \"api.example.com\")\n\n        with multi_manager as resources:\n            file_res, network_res = resources\n            print(f\"     \ubaa8\ub4e0 \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9 \uac00\ub2a5\")\n            # \uc791\uc5c5 \uc218\ud589\n\n    except Exception as e:\n        print(f\"   \ub2e4\uc911 \ub9ac\uc18c\uc2a4 \uc624\ub958: {e}\")\n\n    print()\n\n    # \uc624\ub958 \ucc98\ub9ac \ucee8\ud14d\uc2a4\ud2b8\n    print(\"10. \uc624\ub958 \ucc98\ub9ac \ucee8\ud14d\uc2a4\ud2b8:\")\n\n    def custom_error_handler(error):\n        return f\"\uc624\ub958 \ub85c\uae45 \uc644\ub8cc: {error}\"\n\n    def recovery_action(error):\n        if isinstance(error, ValueError):\n            return \"\uae30\ubcf8\uac12\uc73c\ub85c \ubcf5\uad6c\"\n        raise error  # \ubcf5\uad6c \ubd88\uac00\ub2a5\n\n    try:\n        with error_handling_context(custom_error_handler, recovery_action):\n            print(\"     \uc815\uc0c1 \uc791\uc5c5 \uc218\ud589\")\n            raise ValueError(\"\ubcf5\uad6c \uac00\ub2a5\ud55c \uc624\ub958\")\n    except Exception as e:\n        print(f\"   \ucd5c\uc885 \uc624\ub958: {e}\")\n\n    print()\n\n    # \uc7ac\uc2dc\ub3c4 \ucee8\ud14d\uc2a4\ud2b8\n    print(\"11. \uc7ac\uc2dc\ub3c4 \ucee8\ud14d\uc2a4\ud2b8:\")\n\n    attempt_count = 0\n    while True:\n        try:\n            with RetryContext(max_attempts=3, delay=0.1) as retry_ctx:\n                attempt_count += 1\n                print(f\"     \uc791\uc5c5 \uc2dc\ub3c4 #{attempt_count}\")\n\n                if attempt_count &lt; 3:\n                    result = unreliable_service(success_rate=0.3)  # \ub192\uc740 \uc2e4\ud328\uc728\n                    print(f\"     \ud638\ucd9c {attempt_count}: \uc131\uacf5\")\n                    break\n                else:\n                    result = slow_operation(delay_factor=attempt_count-4)\n                    print(f\"     \ud638\ucd9c {attempt_count}: {result}\")\n                    break\n\n        except Exception as e:\n            print(f\"     \ud638\ucd9c {attempt_count}: \uc2e4\ud328 - {type(e).__name__}\")\n            break\n\ndemonstrate_advanced_context_managers()\n</code></pre>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#4","title":"4. \ub85c\uae45\uacfc \uc608\uc678 \ucc98\ub9ac \ud1b5\ud569","text":""},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#41","title":"4.1 \uc608\uc678 \ub85c\uae45 \uc2dc\uc2a4\ud15c","text":"<pre><code>print(\"\\n=== \ub85c\uae45\uacfc \uc608\uc678 \ucc98\ub9ac \ud1b5\ud569 ===\")\n\nimport logging\nimport json\nfrom datetime import datetime\nimport traceback\n\nclass ExceptionLogger:\n    \"\"\"\uc608\uc678 \uc804\uc6a9 \ub85c\uac70\"\"\"\n\n    def __init__(self, name=\"exception_logger\", level=logging.INFO):\n        self.logger = logging.getLogger(name)\n        self.logger.setLevel(level)\n\n        # \ucf58\uc194 \ud578\ub4e4\ub7ec \uc124\uc815\n        if not self.logger.handlers:\n            handler = logging.StreamHandler()\n            formatter = logging.Formatter(\n                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n            )\n            handler.setFormatter(formatter)\n            self.logger.addHandler(handler)\n\n    def log_exception(self, exception, context=None, extra_data=None):\n        \"\"\"\uc608\uc678 \uc0c1\uc138 \ub85c\uae45\"\"\"\n\n        log_data = {\n            'timestamp': datetime.now().isoformat(),\n            'category': 'general',\n            'type': type(exception).__name__,\n            'message': str(exception),\n            'handled': True\n        }\n\n        if context:\n            log_data['context'] = context\n\n        if extra_data:\n            log_data.update(extra_data)\n\n        self.logger.log(logging.INFO, json.dumps(log_data, indent=2, ensure_ascii=False))\n\n        return log_data\n\n    def log_with_context(self, level, message, exception=None, **context):\n        \"\"\"\ucee8\ud14d\uc2a4\ud2b8\uc640 \ud568\uaed8 \ub85c\uae45\"\"\"\n\n        log_entry = {\n            'message': message,\n            'timestamp': datetime.now().isoformat(),\n            'context': context\n        }\n\n        if exception:\n            log_entry.update(self.log_exception(exception))\n\n        self.logger.log(level, json.dumps(log_entry, indent=2, ensure_ascii=False))\n\nclass LoggingExceptionHandler:\n    \"\"\"\ub85c\uae45 \uae30\ub2a5\uc774 \ud3ec\ud568\ub41c \uc608\uc678 \ucc98\ub9ac\uae30\"\"\"\n\n    def __init__(self, logger_name=\"app_logger\"):\n        self.exception_logger = ExceptionLogger(logger_name)\n        self.handled_count = 0\n        self.error_patterns = {}\n\n    def handle_exception(self, func):\n        \"\"\"\ud568\uc218 \ub370\ucf54\ub808\uc774\ud130\ub85c \uc608\uc678 \ucc98\ub9ac\"\"\"\n\n        def wrapper(*args, **kwargs):\n            try:\n                return func(*args, **kwargs)\n\n            except Exception as e:\n                self.handled_count += 1\n\n                # \ucee8\ud14d\uc2a4\ud2b8 \uc815\ubcf4 \uc218\uc9d1\n                context = {\n                    'function_name': func.__name__,\n                    'function_module': func.__module__,\n                    'args_count': len(args),\n                    'kwargs_keys': list(kwargs.keys()),\n                    'handled_count': self.handled_count\n                }\n\n                # \uc608\uc678 \ud328\ud134 \ucd94\uc801\n                pattern_key = f\"{type(e).__name__}:{func.__name__}\"\n                self.error_patterns[pattern_key] = self.error_patterns.get(pattern_key, 0) + 1\n\n                # \ub85c\uae45\n                self.exception_logger.log_exception(\n                    e, \n                    context=context,\n                    extra_data={'error_patterns': self.error_patterns}\n                )\n\n                # \uc608\uc678 \uc7ac\ubc1c\uc0dd (\ub85c\uae45 \ud6c4)\n                raise\n\n        return wrapper\n\n    def get_error_statistics(self):\n        \"\"\"\uc624\ub958 \ud1b5\uacc4 \ubc18\ud658\"\"\"\n        return {\n            'total_handled': self.handled_count,\n            'unique_patterns': len(self.error_patterns),\n            'pattern_distribution': self.error_patterns,\n            'most_common_pattern': max(self.error_patterns.items(), key=lambda x: x[1]) if self.error_patterns else None\n        }\n\ndef demonstrate_exception_logging():\n    \"\"\"\uc608\uc678 \ub85c\uae45 \uc2dc\uc5f0\"\"\"\n\n    print(\"12. \uc608\uc678 \ub85c\uae45 \uc2dc\uc2a4\ud15c:\")\n\n    handler = LoggingExceptionHandler(\"demo_logger\")\n\n    @handler.handle_exception\n    def unreliable_service(success_rate=0.5):\n        \"\"\"\ubd88\uc548\uc815\ud55c \uc11c\ube44\uc2a4 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        import random\n\n        # \uc2e4\ud589 \uc2dc\uac04 \uc2dc\ubbac\ub808\uc774\uc158\n        time.sleep(random.uniform(0.01, 0.05))\n\n        if random.random() &gt; success_rate:\n            raise ConnectionError(\"\uc11c\ube44\uc2a4 \uc77c\uc2dc\uc801 \uc624\ub958\")\n\n        return \"\uc11c\ube44\uc2a4 \uc131\uacf5\"\n\n    @handler.handle_exception\n    def slow_operation(delay_factor=1):\n        \"\"\"\ub290\ub9b0 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        time.sleep(0.01 * delay_factor)\n        return f\"\uc791\uc5c5 \uc644\ub8cc (\uc9c0\uc5f0 \uacc4\uc218: {delay_factor})\"\n\n    # \ud14c\uc2a4\ud2b8 \uc2e4\ud589\n    print(\"   \uc11c\ube44\uc2a4 \ud638\ucd9c \ud14c\uc2a4\ud2b8:\")\n\n    for i in range(10):\n        try:\n            result = unreliable_service(success_rate=0.3)  # \ub192\uc740 \uc2e4\ud328\uc728\n            print(f\"     \ud638\ucd9c {i+1}: \uc131\uacf5\")\n        except Exception as e:\n            print(f\"     \ud638\ucd9c {i+1}: \uc2e4\ud328 - {type(e).__name__}\")\n\n    # \ud1b5\uacc4 \ucd9c\ub825\n    stats = handler.get_error_statistics()\n    print(f\"\\n   \uc608\uc678 \ud1b5\uacc4:\")\n    print(f\"     \ucd1d \ucc98\ub9ac \uc218: {stats['total_handled']}\")\n    print(f\"     \uace0\uc720 \ud328\ud134 \uc218: {stats['unique_patterns']}\")\n\n    print(f\"\\n   \ud568\uc218\ubcc4 \ud1b5\uacc4:\")\n    for func_name, stats in stats['function_stats'].items():\n        print(f\"     {func_name}:\")\n        print(f\"       \ud638\ucd9c \uc218: {stats['call_count']}\")\n        print(f\"       \ud3c9\uade0 \uc2e4\ud589 \uc2dc\uac04: {stats['avg_time']:.4f}\ucd08\")\n        print(f\"       \uc608\uc678 \uc218: {stats['exception_count']}\")\n\ndemonstrate_exception_logging()\n</code></pre>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#42","title":"4.2 \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1\uacfc \uc608\uc678 \ucd94\uc801","text":"<pre><code>print(\"\\n=== \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1\uacfc \uc608\uc678 \ucd94\uc801 ===\")\n\nimport time\nfrom functools import wraps\nfrom collections import defaultdict, deque\nfrom threading import Lock\n\nclass PerformanceMonitor:\n    \"\"\"\uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c\"\"\"\n\n    def __init__(self, max_history=1000):\n        self.max_history = max_history\n        self.call_history = deque(maxlen=max_history)\n        self.exception_history = deque(maxlen=max_history)\n        self.function_stats = defaultdict(lambda: {\n            'call_count': 0,\n            'total_time': 0,\n            'exception_count': 0,\n            'last_exception': None,\n            'avg_time': 0\n        })\n        self.lock = Lock()\n\n    def monitor(self, func):\n        \"\"\"\uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            func_name = f\"{func.__module__}.{func.__name__}\"\n            start_time = time.time()\n\n            try:\n                result = func(*args, **kwargs)\n                success = True\n                exception = None\n\n            except Exception as e:\n                success = False\n                exception = e\n                result = None\n\n                # \uc608\uc678 \uc815\ubcf4 \uae30\ub85d\n                with self.lock:\n                    self.exception_history.append({\n                        'timestamp': time.time(),\n                        'function': func_name,\n                        'exception_type': type(e).__name__,\n                        'exception_message': str(e),\n                        'args_count': len(args),\n                        'kwargs_keys': list(kwargs.keys())\n                    })\n\n                raise\n\n            finally:\n                end_time = time.time()\n                execution_time = end_time - start_time\n\n                # \uc131\ub2a5 \ud1b5\uacc4 \uc5c5\ub370\uc774\ud2b8\n                with self.lock:\n                    stats = self.function_stats[func_name]\n                    stats['call_count'] += 1\n                    stats['total_time'] += execution_time\n                    stats['avg_time'] = stats['total_time'] / stats['call_count']\n\n                    if not success:\n                        stats['exception_count'] += 1\n                        stats['last_exception'] = {\n                            'type': type(exception).__name__,\n                            'message': str(exception),\n                            'timestamp': end_time\n                        }\n\n                    # \ud638\ucd9c \uae30\ub85d\n                    self.call_history.append({\n                        'timestamp': end_time,\n                        'function': func_name,\n                        'execution_time': execution_time,\n                        'success': success,\n                        'args_count': len(args),\n                        'kwargs_count': len(kwargs)\n                    })\n\n            return result\n\n        return wrapper\n\n    def get_performance_report(self):\n        \"\"\"\uc131\ub2a5 \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\"\"\"\n\n        with self.lock:\n            report = {\n                'summary': {\n                    'total_calls': len(self.call_history),\n                    'total_exceptions': len(self.exception_history),\n                    'monitored_functions': len(self.function_stats)\n                },\n                'function_stats': dict(self.function_stats),\n                'recent_exceptions': list(self.exception_history)[-5:],  # \ucd5c\uadfc 5\uac1c\n                'slowest_calls': []\n            }\n\n            # \uac00\uc7a5 \ub290\ub9b0 \ud638\ucd9c\ub4e4\n            sorted_calls = sorted(\n                self.call_history, \n                key=lambda x: x['execution_time'], \n                reverse=True\n            )\n            report['slowest_calls'] = sorted_calls[:5]\n\n            return report\n\n    def get_exception_patterns(self):\n        \"\"\"\uc608\uc678 \ud328\ud134 \ubd84\uc11d\"\"\"\n\n        patterns = defaultdict(int)\n        function_exceptions = defaultdict(int)\n\n        with self.lock:\n            for exc_record in self.exception_history:\n                patterns[exc_record['exception_type']] += 1\n                function_exceptions[exc_record['function']] += 1\n\n        return {\n            'exception_types': dict(patterns),\n            'function_exceptions': dict(function_exceptions)\n        }\n\nclass CircuitBreaker:\n    \"\"\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ud328\ud134 \uad6c\ud604\"\"\"\n\n    def __init__(self, failure_threshold=5, timeout=60):\n        self.failure_threshold = failure_threshold\n        self.timeout = timeout\n        self.failure_count = 0\n        self.last_failure_time = None\n        self.state = 'CLOSED'  # CLOSED, OPEN, HALF_OPEN\n\n    def __call__(self, func):\n        \"\"\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            if self.state == 'OPEN':\n                if time.time() - self.last_failure_time &gt; self.timeout:\n                    self.state = 'HALF_OPEN'\n                    print(f\"     \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 HALF_OPEN: {func.__name__}\")\n                else:\n                    raise RuntimeError(f\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 OPEN: {func.__name__}\")\n\n            try:\n                result = func(*args, **kwargs)\n\n                # \uc131\uacf5 \uc2dc \ub9ac\uc14b\n                if self.state == 'HALF_OPEN':\n                    self.state = 'CLOSED'\n                    self.failure_count = 0\n                    print(f\"     \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 CLOSED: {func.__name__}\")\n\n                return result\n\n            except Exception as e:\n                self.failure_count += 1\n                self.last_failure_time = time.time()\n\n                if self.failure_count &gt;= self.failure_threshold:\n                    self.state = 'OPEN'\n                    print(f\"     \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 OPEN: {func.__name__} (\uc2e4\ud328 {self.failure_count}\ud68c)\")\n\n                raise\n\n        return wrapper\n\ndef demonstrate_performance_monitoring():\n    \"\"\"\uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc5f0\"\"\"\n\n    print(\"13. \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1\uacfc \uc608\uc678 \ucd94\uc801:\")\n\n    monitor = PerformanceMonitor(max_history=100)\n    circuit_breaker = CircuitBreaker(failure_threshold=3, timeout=5)\n\n    @monitor.monitor\n    @circuit_breaker\n    def unreliable_service(success_rate=0.5):\n        \"\"\"\ubd88\uc548\uc815\ud55c \uc11c\ube44\uc2a4 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        import random\n\n        # \uc2e4\ud589 \uc2dc\uac04 \uc2dc\ubbac\ub808\uc774\uc158\n        time.sleep(random.uniform(0.01, 0.05))\n\n        if random.random() &gt; success_rate:\n            raise ConnectionError(\"\uc11c\ube44\uc2a4 \uc77c\uc2dc\uc801 \uc624\ub958\")\n\n        return \"\uc11c\ube44\uc2a4 \uc131\uacf5\"\n\n    @monitor.monitor\n    def slow_operation(delay_factor=1):\n        \"\"\"\ub290\ub9b0 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        time.sleep(0.01 * delay_factor)\n        return f\"\uc791\uc5c5 \uc644\ub8cc (\uc9c0\uc5f0 \uacc4\uc218: {delay_factor})\"\n\n    # \ud14c\uc2a4\ud2b8 \uc2e4\ud589\n    print(\"   \uc11c\ube44\uc2a4 \ud638\ucd9c \ud14c\uc2a4\ud2b8:\")\n\n    for i in range(10):\n        try:\n            result = unreliable_service(success_rate=0.3)  # \ub192\uc740 \uc2e4\ud328\uc728\n            print(f\"     \ud638\ucd9c {i+1}: \uc131\uacf5\")\n        except Exception as e:\n            print(f\"     \ud638\ucd9c {i+1}: \uc2e4\ud328 - {type(e).__name__}\")\n\n    # \ud1b5\uacc4 \ucd9c\ub825\n    report = monitor.get_performance_report()\n    print(f\"\\n   \uc131\ub2a5 \ub9ac\ud3ec\ud2b8:\")\n    print(f\"     \ucd1d \ud638\ucd9c \uc218: {report['summary']['total_calls']}\")\n    print(f\"     \ucd1d \uc608\uc678 \uc218: {report['summary']['total_exceptions']}\")\n\n    print(f\"\\n   \ud568\uc218\ubcc4 \ud1b5\uacc4:\")\n    for func_name, stats in report['function_stats'].items():\n        print(f\"     {func_name}:\")\n        print(f\"       \ud638\ucd9c \uc218: {stats['call_count']}\")\n        print(f\"       \ud3c9\uade0 \uc2e4\ud589 \uc2dc\uac04: {stats['avg_time']:.4f}\ucd08\")\n        print(f\"       \uc608\uc678 \uc218: {stats['exception_count']}\")\n\ndemonstrate_performance_monitoring()\n</code></pre>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#5","title":"5. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#1","title":"\uc5f0\uc2b5 1: \uacac\uace0\ud55c \ud30c\uc77c \ucc98\ub9ac \uc2dc\uc2a4\ud15c","text":"<p>\ud30c\uc77c I/O \uc791\uc5c5\uc5d0 \ub300\ud55c \ud3ec\uad04\uc801\uc778 \uc608\uc678 \ucc98\ub9ac \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694: - \ub2e4\uc591\ud55c \ud30c\uc77c \uad00\ub828 \uc608\uc678 \ucc98\ub9ac - \uc790\ub3d9 \ubc31\uc5c5 \ubc0f \ubcf5\uad6c \uae30\ub2a5 - \ud2b8\ub79c\uc7ad\uc158 \uae30\ubc18 \ud30c\uc77c \uc5c5\ub370\uc774\ud2b8 - \ub3d9\uc2dc \uc811\uadfc \uc81c\uc5b4</p>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#2-api","title":"\uc5f0\uc2b5 2: API \ud074\ub77c\uc774\uc5b8\ud2b8 \uc608\uc678 \ucc98\ub9ac","text":"<p>\uc678\ubd80 API \ud638\ucd9c\uc744 \uc704\ud55c \uacac\uace0\ud55c \ud074\ub77c\uc774\uc5b8\ud2b8\ub97c \uad6c\ud604\ud558\uc138\uc694: - \ub124\ud2b8\uc6cc\ud06c \uc608\uc678 \ucc98\ub9ac \ubc0f \uc7ac\uc2dc\ub3c4 - \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ud328\ud134 \uc801\uc6a9 - \uc751\ub2f5 \uac80\uc99d \ubc0f \uc624\ub958 \ubcc0\ud658 - \ube44\ub3d9\uae30 \ud638\ucd9c \uc9c0\uc6d0</p>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#3_1","title":"\uc5f0\uc2b5 3: \ub370\uc774\ud130 \uac80\uc99d \ud504\ub808\uc784\uc6cc\ud06c","text":"<p>\ucee4\uc2a4\ud140 \uc608\uc678\ub97c \ud65c\uc6a9\ud55c \ub370\uc774\ud130 \uac80\uc99d \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uad6c\ud604\ud558\uc138\uc694: - \ud544\ub4dc\ubcc4 \uac80\uc99d \uaddc\uce59 \uc815\uc758 - \uacc4\uce35\uc801 \uc608\uc678 \uad6c\uc870 - \ub2e4\uad6d\uc5b4 \uc624\ub958 \uba54\uc2dc\uc9c0 \uc9c0\uc6d0 - \uac80\uc99d \uacb0\uacfc \ub9ac\ud3ec\ud305</p>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#4_1","title":"\uc5f0\uc2b5 4: \ub85c\uadf8 \ubd84\uc11d \uc2dc\uc2a4\ud15c","text":"<p>\uc608\uc678 \ub85c\uadf8\ub97c \ubd84\uc11d\ud558\uace0 \ud328\ud134\uc744 \ucc3e\ub294 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694: - \ub85c\uadf8 \ud30c\uc2f1 \ubc0f \uad6c\uc870\ud654 - \uc608\uc678 \ud328\ud134 \ud0d0\uc9c0 - \uc54c\ub9bc \uc2dc\uc2a4\ud15c \uc5f0\ub3d9 - \ub300\uc2dc\ubcf4\ub4dc \ub370\uc774\ud130 \uc0dd\uc131</p>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\uc608\uc678 \uacc4\uce35 \uad6c\uc870: Python\uc758 \uc608\uc678 \uc0c1\uc18d \uccb4\uacc4\uc640 \uc801\uc808\ud55c \uc608\uc678 \uc120\ud0dd</li> <li>\ucee4\uc2a4\ud140 \uc608\uc678: \uc560\ud50c\ub9ac\ucf00\uc774\uc158\ubcc4 \uc608\uc678 \ud074\ub798\uc2a4 \uc124\uacc4\uc640 \uad6c\ud604</li> <li>\uc608\uc678 \uccb4\uc774\ub2dd: \uc6d0\uc778\uacfc \ucee8\ud14d\uc2a4\ud2b8\ub97c \uc720\uc9c0\ud558\ub294 \uc608\uc678 \ucc98\ub9ac</li> <li>\ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800: \ub9ac\uc18c\uc2a4 \uad00\ub9ac\uc640 \uc608\uc678 \uc548\uc804\uc131</li> <li>\ub85c\uae45 \ud1b5\ud569: \uc608\uc678 \uc815\ubcf4\uc758 \uccb4\uacc4\uc801 \uae30\ub85d\uacfc \ubd84\uc11d</li> <li>\uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1: \uc608\uc678\uac00 \uc131\ub2a5\uc5d0 \ubbf8\uce58\ub294 \uc601\ud5a5 \ucd94\uc801</li> <li>\uace0\uae09 \ud328\ud134: \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4, \uc7ac\uc2dc\ub3c4, \ub2e4\uc911 \ub9ac\uc18c\uc2a4 \uad00\ub9ac</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 GUI \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08\uc5d0 \ub300\ud574 \ud559\uc2b5\ud558\uc5ec \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4 \uac1c\ubc1c \ubc29\ubc95\uc744 \ubc30\uc6b0\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter08_advanced_exception_handling/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\uc608\uc678\ub294 \ud504\ub85c\uadf8\ub7a8\uc758 \ud750\ub984\uc744 \ub098\ud0c0\ub0b4\ub294 \uc911\uc694\ud55c \uc815\ubcf4\uc785\ub2c8\ub2e4</li> <li>\uc801\uc808\ud55c \ucd94\uc0c1\ud654 \uc218\uc900\uc5d0\uc11c \uc608\uc678\ub97c \ucc98\ub9ac\ud558\uc138\uc694</li> <li>\ub9ac\uc18c\uc2a4\ub294 \ud56d\uc0c1 \uc548\uc804\ud558\uac8c \uad00\ub9ac\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4</li> <li>\ub85c\uae45\uacfc \ubaa8\ub2c8\ud130\ub9c1\uc744 \ud1b5\ud574 \uc2dc\uc2a4\ud15c \uc0c1\ud0dc\ub97c \ud30c\uc545\ud558\uc138\uc694</li> <li>\uc0ac\uc6a9\uc790 \uce5c\ud654\uc801\uc778 \uc624\ub958 \uba54\uc2dc\uc9c0\ub97c \uc81c\uacf5\ud558\uc138\uc694</li> <li>\uc131\ub2a5\uacfc \uacac\uace0\uc131\uc758 \uade0\ud615\uc744 \ub9de\ucd94\uc138\uc694 </li> </ul>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/","title":"Chapter 9: \uc774\ud130\ub808\uc774\ud130\uc640 \uc81c\ub108\ub808\uc774\ud130","text":""},{"location":"tutorials/intermediate/chapter09_iterators_generators/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \uc774\ud130\ub808\uc774\ud130\uc640 \uc774\ud130\ub7ec\ube14\uc758 \uac1c\ub150\uc744 \uc774\ud574\ud558\uace0 \uad6c\ubd84\ud558\uae30 - \ucee4\uc2a4\ud140 \uc774\ud130\ub808\uc774\ud130\ub97c \uad6c\ud604\ud558\uace0 \ud65c\uc6a9\ud558\uae30 - \uc81c\ub108\ub808\uc774\ud130 \ud568\uc218\uc640 \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd \uc0ac\uc6a9\ud558\uae30 - yield \ud0a4\uc6cc\ub4dc\uc758 \ub2e4\uc591\ud55c \ud65c\uc6a9\ubc95 \uc774\ud574\ud558\uae30 - \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \ucc98\ub9ac \uad6c\ud604\ud558\uae30 - itertools \ubaa8\ub4c8\uc744 \ud65c\uc6a9\ud55c \uace0\uae09 \uc774\ud130\ub808\uc774\ud130 \ud328\ud134 \uc0ac\uc6a9\ud558\uae30 - \ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130\uc640 \uc81c\ub108\ub808\uc774\ud130 \uae30\ucd08 \uc774\ud574\ud558\uae30</p>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#1","title":"1. \uc774\ud130\ub808\uc774\ud130\uc640 \uc774\ud130\ub7ec\ube14 \uae30\ucd08","text":""},{"location":"tutorials/intermediate/chapter09_iterators_generators/#11","title":"1.1 \uac1c\ub150 \uc774\ud574","text":"<pre><code>print(\"=== \uc774\ud130\ub808\uc774\ud130\uc640 \uc774\ud130\ub7ec\ube14 \uae30\ucd08 ===\")\n\ndef basic_iterator_concepts():\n    \"\"\"\uc774\ud130\ub808\uc774\ud130\uc640 \uc774\ud130\ub7ec\ube14\uc758 \uae30\ubcf8 \uac1c\ub150\"\"\"\n\n    print(\"1. \uc774\ud130\ub7ec\ube14(Iterable)\uacfc \uc774\ud130\ub808\uc774\ud130(Iterator) \uad6c\ubd84:\")\n\n    # \uc774\ud130\ub7ec\ube14: __iter__ \uba54\uc11c\ub4dc\ub97c \uac00\uc9c4 \uac1d\uccb4\n    my_list = [1, 2, 3, 4, 5]\n    my_string = \"Hello\"\n    my_dict = {\"a\": 1, \"b\": 2}\n\n    print(f\"  \ub9ac\uc2a4\ud2b8\uac00 \uc774\ud130\ub7ec\ube14\uc778\uac00? {hasattr(my_list, '__iter__')}\")\n    print(f\"  \ubb38\uc790\uc5f4\uc774 \uc774\ud130\ub7ec\ube14\uc778\uac00? {hasattr(my_string, '__iter__')}\")\n    print(f\"  \ub515\uc154\ub108\ub9ac\uac00 \uc774\ud130\ub7ec\ube14\uc778\uac00? {hasattr(my_dict, '__iter__')}\")\n\n    # \uc774\ud130\ub7ec\ube14\uc5d0\uc11c \uc774\ud130\ub808\uc774\ud130 \uc5bb\uae30\n    list_iterator = iter(my_list)\n    string_iterator = iter(my_string)\n    dict_iterator = iter(my_dict)\n\n    print(f\"\\n  \ub9ac\uc2a4\ud2b8 \uc774\ud130\ub808\uc774\ud130: {type(list_iterator)}\")\n    print(f\"  \ubb38\uc790\uc5f4 \uc774\ud130\ub808\uc774\ud130: {type(string_iterator)}\")\n    print(f\"  \ub515\uc154\ub108\ub9ac \uc774\ud130\ub808\uc774\ud130: {type(dict_iterator)}\")\n\n    # \uc774\ud130\ub808\uc774\ud130: __next__ \uba54\uc11c\ub4dc\ub97c \uac00\uc9c4 \uac1d\uccb4\n    print(f\"\\n  \uc774\ud130\ub808\uc774\ud130\uac00 __next__ \uba54\uc11c\ub4dc\ub97c \uac00\uc9c0\ub294\uac00? {hasattr(list_iterator, '__next__')}\")\n\n    # \uc218\ub3d9\uc73c\ub85c \uc774\ud130\ub808\uc774\uc158\n    print(f\"\\n2. \uc218\ub3d9 \uc774\ud130\ub808\uc774\uc158:\")\n    print(f\"  next(list_iterator): {next(list_iterator)}\")\n    print(f\"  next(list_iterator): {next(list_iterator)}\")\n    print(f\"  next(string_iterator): {next(string_iterator)}\")\n    print(f\"  next(dict_iterator): {next(dict_iterator)}\")\n\nbasic_iterator_concepts()\n\ndef iteration_protocol():\n    \"\"\"\uc774\ud130\ub808\uc774\uc158 \ud504\ub85c\ud1a0\ucf5c \uc0c1\uc138 \uc124\uba85\"\"\"\n\n    print(f\"\\n3. \uc774\ud130\ub808\uc774\uc158 \ud504\ub85c\ud1a0\ucf5c:\")\n\n    data = [10, 20, 30]\n    iterator = iter(data)\n\n    print(f\"  \uc6d0\ubcf8 \ub370\uc774\ud130: {data}\")\n    print(f\"  \uc774\ud130\ub808\uc774\ud130 \uc0dd\uc131: {iterator}\")\n\n    # StopIteration \uc608\uc678 \ucc98\ub9ac\n    try:\n        while True:\n            value = next(iterator)\n            print(f\"    next() \ud638\ucd9c \uacb0\uacfc: {value}\")\n    except StopIteration:\n        print(\"    StopIteration \uc608\uc678 \ubc1c\uc0dd - \uc774\ud130\ub808\uc774\uc158 \uc644\ub8cc\")\n\n    print(f\"\\n4. for \ubb38\uc758 \ub0b4\ubd80 \ub3d9\uc791:\")\n    print(\"  for \ubb38\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ub3d9\uc791\ud569\ub2c8\ub2e4:\")\n    print(\"  1. iter() \ud568\uc218\ub85c \uc774\ud130\ub808\uc774\ud130 \uc0dd\uc131\")\n    print(\"  2. next() \ud568\uc218\ub85c \uac12\uc744 \ud558\ub098\uc529 \uac00\uc838\uc634\")\n    print(\"  3. StopIteration \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uba74 \ubc18\ubcf5 \uc885\ub8cc\")\n\n    # for \ubb38\uacfc \ub3d9\uc77c\ud55c \ub3d9\uc791\uc744 \uc218\ub3d9\uc73c\ub85c \uad6c\ud604\n    data = ['a', 'b', 'c']\n    iterator = iter(data)\n\n    print(f\"\\n  \uc218\ub3d9 for \ubb38 \uad6c\ud604:\")\n    try:\n        while True:\n            item = next(iterator)\n            print(f\"    \ucc98\ub9ac: {item}\")\n    except StopIteration:\n        print(\"    \ubc18\ubcf5 \uc644\ub8cc\")\n\niteration_protocol()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#12","title":"1.2 \ub0b4\uc7a5 \uc774\ud130\ub7ec\ube14\uacfc \uc774\ud130\ub808\uc774\ud130","text":"<pre><code>print(\"\\n=== \ub0b4\uc7a5 \uc774\ud130\ub7ec\ube14\uacfc \uc774\ud130\ub808\uc774\ud130 ===\")\n\ndef builtin_iterables():\n    \"\"\"\ub0b4\uc7a5 \uc774\ud130\ub7ec\ube14\ub4e4\uc758 \ud2b9\uc9d5\"\"\"\n\n    print(\"1. \ub2e4\uc591\ud55c \ub0b4\uc7a5 \uc774\ud130\ub7ec\ube14:\")\n\n    # \uc2dc\ud000\uc2a4 \ud0c0\uc785\n    my_list = [1, 2, 3]\n    my_tuple = (4, 5, 6)\n    my_string = \"abc\"\n    my_range = range(3)\n\n    # \ub9e4\ud551 \ud0c0\uc785\n    my_dict = {\"x\": 1, \"y\": 2}\n\n    # \uc9d1\ud569 \ud0c0\uc785\n    my_set = {7, 8, 9}\n\n    iterables = [\n        (\"\ub9ac\uc2a4\ud2b8\", my_list),\n        (\"\ud29c\ud50c\", my_tuple),\n        (\"\ubb38\uc790\uc5f4\", my_string),\n        (\"range\", my_range),\n        (\"\ub515\uc154\ub108\ub9ac\", my_dict),\n        (\"\uc9d1\ud569\", my_set)\n    ]\n\n    for name, iterable in iterables:\n        print(f\"  {name}: {list(iterable)}\")\n\n    print(f\"\\n2. \ub515\uc154\ub108\ub9ac\uc758 \ub2e4\uc591\ud55c \uc774\ud130\ub808\uc774\ud130:\")\n    sample_dict = {\"name\": \"Alice\", \"age\": 30, \"city\": \"Seoul\"}\n\n    print(f\"  \ud0a4 \uc774\ud130\ub808\uc774\uc158: {list(sample_dict)}\")  # \uae30\ubcf8\uc801\uc73c\ub85c \ud0a4\n    print(f\"  \ud0a4 \uc774\ud130\ub808\uc774\uc158: {list(sample_dict.keys())}\")\n    print(f\"  \uac12 \uc774\ud130\ub808\uc774\uc158: {list(sample_dict.values())}\")\n    print(f\"  \ud56d\ubaa9 \uc774\ud130\ub808\uc774\uc158: {list(sample_dict.items())}\")\n\nbuiltin_iterables()\n\ndef special_iterators():\n    \"\"\"\ud2b9\ubcc4\ud55c \uc774\ud130\ub808\uc774\ud130\ub4e4\"\"\"\n\n    print(f\"\\n3. \ud2b9\ubcc4\ud55c \uc774\ud130\ub808\uc774\ud130\ub4e4:\")\n\n    # enumerate\n    data = ['apple', 'banana', 'cherry']\n    print(f\"  enumerate: {list(enumerate(data))}\")\n    print(f\"  enumerate(start=1): {list(enumerate(data, start=1))}\")\n\n    # zip\n    names = ['Alice', 'Bob', 'Charlie']\n    ages = [25, 30, 35]\n    cities = ['Seoul', 'Busan', 'Daegu']\n\n    print(f\"  zip: {list(zip(names, ages))}\")\n    print(f\"  zip (3\uac1c): {list(zip(names, ages, cities))}\")\n\n    # reversed\n    print(f\"  reversed: {list(reversed(data))}\")\n\n    # sorted\n    numbers = [3, 1, 4, 1, 5]\n    print(f\"  sorted: {list(sorted(numbers))}\")\n    print(f\"  sorted(reverse=True): {list(sorted(numbers, reverse=True))}\")\n\n    # filter\uc640 map\n    numbers = [1, 2, 3, 4, 5, 6]\n    print(f\"  filter(\uc9dd\uc218): {list(filter(lambda x: x % 2 == 0, numbers))}\")\n    print(f\"  map(\uc81c\uacf1): {list(map(lambda x: x ** 2, numbers))}\")\n\nspecial_iterators()\n\ndef iterator_consumption():\n    \"\"\"\uc774\ud130\ub808\uc774\ud130 \uc18c\ube44\uc640 \uc7ac\uc0ac\uc6a9\"\"\"\n\n    print(f\"\\n4. \uc774\ud130\ub808\uc774\ud130 \uc18c\ube44\uc640 \uc7ac\uc0ac\uc6a9:\")\n\n    data = [1, 2, 3, 4, 5]\n    iterator = iter(data)\n\n    print(f\"  \uc6d0\ubcf8 \ub370\uc774\ud130: {data}\")\n    print(f\"  \uccab \ubc88\uc9f8 \uc18c\ube44: {list(iterator)}\")\n    print(f\"  \ub450 \ubc88\uc9f8 \uc18c\ube44: {list(iterator)}\")  # \ube48 \ub9ac\uc2a4\ud2b8\n\n    print(f\"\\n  \uc774\ud130\ub808\uc774\ud130\ub294 \ud55c \ubc88\ub9cc \uc0ac\uc6a9 \uac00\ub2a5\ud569\ub2c8\ub2e4!\")\n    print(f\"  \uc7ac\uc0ac\uc6a9\ud558\ub824\uba74 \uc0c8\ub85c \uc0dd\uc131\ud574\uc57c \ud569\ub2c8\ub2e4:\")\n\n    iterator = iter(data)  # \uc0c8\ub85c \uc0dd\uc131\n    print(f\"  \uc0c8 \uc774\ud130\ub808\uc774\ud130: {list(iterator)}\")\n\n    # \uc774\ud130\ub7ec\ube14\uc740 \uc5ec\ub7ec \ubc88 \uc0ac\uc6a9 \uac00\ub2a5\n    print(f\"\\n  \uc774\ud130\ub7ec\ube14\uc740 \uc5ec\ub7ec \ubc88 \uc0ac\uc6a9 \uac00\ub2a5:\")\n    print(f\"  \uccab \ubc88\uc9f8: {list(data)}\")\n    print(f\"  \ub450 \ubc88\uc9f8: {list(data)}\")\n\niterator_consumption()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#2","title":"2. \ucee4\uc2a4\ud140 \uc774\ud130\ub808\uc774\ud130 \uad6c\ud604","text":""},{"location":"tutorials/intermediate/chapter09_iterators_generators/#21","title":"2.1 \uae30\ubcf8 \uc774\ud130\ub808\uc774\ud130 \ud074\ub798\uc2a4","text":"<pre><code>print(\"\\n=== \ucee4\uc2a4\ud140 \uc774\ud130\ub808\uc774\ud130 \uad6c\ud604 ===\")\n\nclass NumberRange:\n    \"\"\"\uc22b\uc790 \ubc94\uc704\ub97c \ub098\ud0c0\ub0b4\ub294 \uc774\ud130\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, start, end, step=1):\n        self.start = start\n        self.end = end\n        self.step = step\n        self.current = start\n\n    def __iter__(self):\n        \"\"\"\uc774\ud130\ub7ec\ube14 \ud504\ub85c\ud1a0\ucf5c: \uc790\uae30 \uc790\uc2e0(\uc774\ud130\ub808\uc774\ud130)\uc744 \ubc18\ud658\"\"\"\n        return self\n\n    def __next__(self):\n        \"\"\"\uc774\ud130\ub808\uc774\ud130 \ud504\ub85c\ud1a0\ucf5c: \ub2e4\uc74c \uac12\uc744 \ubc18\ud658\"\"\"\n        if self.current &gt;= self.end:\n            raise StopIteration\n\n        value = self.current\n        self.current += self.step\n        return value\n\ndef demonstrate_custom_iterator():\n    \"\"\"\ucee4\uc2a4\ud140 \uc774\ud130\ub808\uc774\ud130 \uc0ac\uc6a9 \uc608\uc81c\"\"\"\n\n    print(\"1. \uae30\ubcf8 \ucee4\uc2a4\ud140 \uc774\ud130\ub808\uc774\ud130:\")\n\n    # NumberRange \uc0ac\uc6a9\n    num_range = NumberRange(1, 6)\n    print(f\"  NumberRange(1, 6): {list(num_range)}\")\n\n    # step\uc774 \uc788\ub294 \uacbd\uc6b0\n    num_range_step = NumberRange(0, 10, 2)\n    print(f\"  NumberRange(0, 10, 2): {list(num_range_step)}\")\n\n    # for \ubb38\uc5d0\uc11c \uc0ac\uc6a9\n    print(f\"  for \ubb38\uc5d0\uc11c \uc0ac\uc6a9:\")\n    for num in NumberRange(5, 8):\n        print(f\"    \uac12: {num}\")\n\ndemonstrate_custom_iterator()\n\nclass FibonacciIterator:\n    \"\"\"\ud53c\ubcf4\ub098\uce58 \uc218\uc5f4 \uc774\ud130\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, max_count=None):\n        self.max_count = max_count\n        self.count = 0\n        self.a, self.b = 0, 1\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.max_count and self.count &gt;= self.max_count:\n            raise StopIteration\n\n        value = self.a\n        self.a, self.b = self.b, self.a + self.b\n        self.count += 1\n        return value\n\nclass InfiniteCounter:\n    \"\"\"\ubb34\ud55c \uce74\uc6b4\ud130 \uc774\ud130\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, start=0, step=1):\n        self.current = start\n        self.step = step\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        value = self.current\n        self.current += self.step\n        return value\n\ndef demonstrate_advanced_iterators():\n    \"\"\"\uace0\uae09 \ucee4\uc2a4\ud140 \uc774\ud130\ub808\uc774\ud130 \uc608\uc81c\"\"\"\n\n    print(f\"\\n2. \uace0\uae09 \ucee4\uc2a4\ud140 \uc774\ud130\ub808\uc774\ud130:\")\n\n    # \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4 (\uc81c\ud55c\ub41c \uac1c\uc218)\n    fib = FibonacciIterator(10)\n    print(f\"  \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4 (10\uac1c): {list(fib)}\")\n\n    # \ubb34\ud55c \uce74\uc6b4\ud130 (\ucc98\uc74c 5\uac1c\ub9cc)\n    counter = InfiniteCounter(10, 3)\n    result = []\n    for i, value in enumerate(counter):\n        if i &gt;= 5:  # \ucc98\uc74c 5\uac1c\ub9cc\n            break\n        result.append(value)\n    print(f\"  \ubb34\ud55c \uce74\uc6b4\ud130 (\ucc98\uc74c 5\uac1c): {result}\")\n\ndemonstrate_advanced_iterators()\n\nclass FileLineIterator:\n    \"\"\"\ud30c\uc77c\uc744 \ud55c \uc904\uc529 \uc77d\ub294 \uc774\ud130\ub808\uc774\ud130\"\"\"\n\n    def __init__(self, filename):\n        self.filename = filename\n        self.file = None\n\n    def __iter__(self):\n        self.file = open(self.filename, 'r', encoding='utf-8')\n        return self\n\n    def __next__(self):\n        if self.file is None:\n            raise StopIteration\n\n        line = self.file.readline()\n        if not line:\n            self.file.close()\n            self.file = None\n            raise StopIteration\n\n        return line.rstrip('\\n')  # \uc904\ubc14\uafc8 \uc81c\uac70\n\n    def __del__(self):\n        \"\"\"\uc18c\uba78\uc790\uc5d0\uc11c \ud30c\uc77c \ub2eb\uae30\"\"\"\n        if self.file and not self.file.closed:\n            self.file.close()\n\ndef demonstrate_file_iterator():\n    \"\"\"\ud30c\uc77c \uc774\ud130\ub808\uc774\ud130 \uc608\uc81c\"\"\"\n\n    print(f\"\\n3. \ud30c\uc77c \uc774\ud130\ub808\uc774\ud130:\")\n\n    # \ud14c\uc2a4\ud2b8\uc6a9 \ud30c\uc77c \uc0dd\uc131\n    test_filename = \"temp_test_file.txt\"\n    with open(test_filename, 'w', encoding='utf-8') as f:\n        f.write(\"\uccab \ubc88\uc9f8 \uc904\\n\ub450 \ubc88\uc9f8 \uc904\\n\uc138 \ubc88\uc9f8 \uc904\\n\")\n\n    # \ud30c\uc77c \uc774\ud130\ub808\uc774\ud130 \uc0ac\uc6a9\n    file_iter = FileLineIterator(test_filename)\n    print(f\"  \ud30c\uc77c \ub0b4\uc6a9:\")\n    for line_num, line in enumerate(file_iter, 1):\n        print(f\"    \ub77c\uc778 {line_num}: {line}\")\n\n    # \ud30c\uc77c \uc815\ub9ac\n    import os\n    os.remove(test_filename)\n\ndemonstrate_file_iterator()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#22-vs","title":"2.2 \uc774\ud130\ub7ec\ube14 \ud074\ub798\uc2a4 vs \uc774\ud130\ub808\uc774\ud130 \ud074\ub798\uc2a4","text":"<pre><code>print(\"\\n=== \uc774\ud130\ub7ec\ube14 vs \uc774\ud130\ub808\uc774\ud130 \ud074\ub798\uc2a4 ===\")\n\nclass NumberSequence:\n    \"\"\"\uc774\ud130\ub7ec\ube14 \ud074\ub798\uc2a4 (\uc7ac\uc0ac\uc6a9 \uac00\ub2a5)\"\"\"\n\n    def __init__(self, start, end, step=1):\n        self.start = start\n        self.end = end\n        self.step = step\n\n    def __iter__(self):\n        \"\"\"\uc0c8\ub85c\uc6b4 \uc774\ud130\ub808\uc774\ud130\ub97c \ubc18\ud658\"\"\"\n        return NumberSequenceIterator(self.start, self.end, self.step)\n\nclass NumberSequenceIterator:\n    \"\"\"\ubcc4\ub3c4\uc758 \uc774\ud130\ub808\uc774\ud130 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, start, end, step):\n        self.current = start\n        self.end = end\n        self.step = step\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.current &gt;= self.end:\n            raise StopIteration\n        value = self.current\n        self.current += self.step\n        return value\n\ndef demonstrate_iterable_vs_iterator():\n    \"\"\"\uc774\ud130\ub7ec\ube14\uacfc \uc774\ud130\ub808\uc774\ud130 \ud074\ub798\uc2a4 \ube44\uad50\"\"\"\n\n    print(\"1. \uc774\ud130\ub7ec\ube14 \ud074\ub798\uc2a4 (\uc7ac\uc0ac\uc6a9 \uac00\ub2a5):\")\n\n    # \uc774\ud130\ub7ec\ube14 \ud074\ub798\uc2a4\ub294 \uc5ec\ub7ec \ubc88 \uc0ac\uc6a9 \uac00\ub2a5\n    sequence = NumberSequence(1, 5)\n\n    print(f\"  \uccab \ubc88\uc9f8 \uc0ac\uc6a9: {list(sequence)}\")\n    print(f\"  \ub450 \ubc88\uc9f8 \uc0ac\uc6a9: {list(sequence)}\")\n\n    # \uc5ec\ub7ec \uc774\ud130\ub808\uc774\ud130 \ub3d9\uc2dc \uc0ac\uc6a9 \uac00\ub2a5\n    iter1 = iter(sequence)\n    iter2 = iter(sequence)\n\n    print(f\"  \uc774\ud130\ub808\uc774\ud130 1 (2\uac1c): {[next(iter1), next(iter1)]}\")\n    print(f\"  \uc774\ud130\ub808\uc774\ud130 2 (1\uac1c): {[next(iter2)]}\")\n    print(f\"  \uc774\ud130\ub808\uc774\ud130 1 (\ub098\uba38\uc9c0): {list(iter1)}\")\n    print(f\"  \uc774\ud130\ub808\uc774\ud130 2 (\ub098\uba38\uc9c0): {list(iter2)}\")\n\ndemonstrate_iterable_vs_iterator()\n\nclass SmartContainer:\n    \"\"\"\uc2a4\ub9c8\ud2b8 \ucee8\ud14c\uc774\ub108 - \ub2e4\uc591\ud55c \uc774\ud130\ub808\uc774\uc158 \ubc29\uc2dd \uc9c0\uc6d0\"\"\"\n\n    def __init__(self, data):\n        self.data = list(data)\n\n    def __iter__(self):\n        \"\"\"\uae30\ubcf8 \uc774\ud130\ub808\uc774\uc158\"\"\"\n        return iter(self.data)\n\n    def reverse_iter(self):\n        \"\"\"\uc5ed\uc21c \uc774\ud130\ub808\uc774\uc158\"\"\"\n        return reversed(self.data)\n\n    def enumerate_iter(self, start=0):\n        \"\"\"\uc778\ub371\uc2a4\uc640 \ud568\uaed8 \uc774\ud130\ub808\uc774\uc158\"\"\"\n        return enumerate(self.data, start)\n\n    def filter_iter(self, predicate):\n        \"\"\"\uc870\uac74\uc5d0 \ub9de\ub294 \uc694\uc18c\ub9cc \uc774\ud130\ub808\uc774\uc158\"\"\"\n        return filter(predicate, self.data)\n\n    def chunk_iter(self, size):\n        \"\"\"\uccad\ud06c \ub2e8\uc704\ub85c \uc774\ud130\ub808\uc774\uc158\"\"\"\n        for i in range(0, len(self.data), size):\n            yield self.data[i:i+size]\n\ndef demonstrate_smart_container():\n    \"\"\"\uc2a4\ub9c8\ud2b8 \ucee8\ud14c\uc774\ub108 \uc0ac\uc6a9 \uc608\uc81c\"\"\"\n\n    print(f\"\\n2. \uc2a4\ub9c8\ud2b8 \ucee8\ud14c\uc774\ub108:\")\n\n    container = SmartContainer([1, 2, 3, 4, 5, 6, 7, 8])\n\n    print(f\"  \uae30\ubcf8 \uc774\ud130\ub808\uc774\uc158: {list(container)}\")\n    print(f\"  \uc5ed\uc21c \uc774\ud130\ub808\uc774\uc158: {list(container.reverse_iter())}\")\n    print(f\"  \uc778\ub371\uc2a4\uc640 \ud568\uaed8: {list(container.enumerate_iter(1))}\")\n    print(f\"  \uc9dd\uc218\ub9cc \ud544\ud130\ub9c1: {list(container.filter_iter(lambda x: x % 2 == 0))}\")\n    print(f\"  \uccad\ud06c \ub2e8\uc704 (\ud06c\uae30 3): {list(container.chunk_iter(3))}\")\n\ndemonstrate_smart_container()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#3","title":"3. \uc81c\ub108\ub808\uc774\ud130 \ud568\uc218","text":""},{"location":"tutorials/intermediate/chapter09_iterators_generators/#31","title":"3.1 \uae30\ubcf8 \uc81c\ub108\ub808\uc774\ud130 \ud568\uc218","text":"<pre><code>print(\"\\n=== \uc81c\ub108\ub808\uc774\ud130 \ud568\uc218 ===\")\n\ndef simple_generator():\n    \"\"\"\uac00\uc7a5 \uac04\ub2e8\ud55c \uc81c\ub108\ub808\uc774\ud130 \ud568\uc218\"\"\"\n    print(\"  \uc81c\ub108\ub808\uc774\ud130 \uc2dc\uc791\")\n    yield 1\n    print(\"  \uccab \ubc88\uc9f8 yield \uc774\ud6c4\")\n    yield 2\n    print(\"  \ub450 \ubc88\uc9f8 yield \uc774\ud6c4\")\n    yield 3\n    print(\"  \uc81c\ub108\ub808\uc774\ud130 \uc885\ub8cc\")\n\ndef demonstrate_basic_generator():\n    \"\"\"\uae30\ubcf8 \uc81c\ub108\ub808\uc774\ud130 \ub3d9\uc791 \ud655\uc778\"\"\"\n\n    print(\"1. \uae30\ubcf8 \uc81c\ub108\ub808\uc774\ud130 \ud568\uc218:\")\n\n    # \uc81c\ub108\ub808\uc774\ud130 \uac1d\uccb4 \uc0dd\uc131\n    gen = simple_generator()\n    print(f\"  \uc81c\ub108\ub808\uc774\ud130 \uac1d\uccb4: {gen}\")\n    print(f\"  \ud0c0\uc785: {type(gen)}\")\n\n    # \uc218\ub3d9\uc73c\ub85c \uac12 \uac00\uc838\uc624\uae30\n    print(f\"\\n  \uc218\ub3d9 \uc2e4\ud589:\")\n    print(f\"    \uccab \ubc88\uc9f8 next(): {next(gen)}\")\n    print(f\"    \ub450 \ubc88\uc9f8 next(): {next(gen)}\")\n    print(f\"    \uc138 \ubc88\uc9f8 next(): {next(gen)}\")\n\n    try:\n        print(f\"    \ub124 \ubc88\uc9f8 next(): {next(gen)}\")\n    except StopIteration:\n        print(f\"    StopIteration \ubc1c\uc0dd\")\n\n    # for \ubb38\uc73c\ub85c \uc0ac\uc6a9\n    print(f\"\\n  for \ubb38\uc73c\ub85c \uc0ac\uc6a9:\")\n    for value in simple_generator():\n        print(f\"    \uac12: {value}\")\n\ndemonstrate_basic_generator()\n\ndef countdown(n):\n    \"\"\"\uce74\uc6b4\ud2b8\ub2e4\uc6b4 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    while n &gt; 0:\n        yield n\n        n -= 1\n    yield \"\ubc1c\uc0ac!\"\n\ndef fibonacci_generator(max_count=None):\n    \"\"\"\ud53c\ubcf4\ub098\uce58 \uc218\uc5f4 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    a, b = 0, 1\n    count = 0\n\n    while max_count is None or count &lt; max_count:\n        yield a\n        a, b = b, a + b\n        count += 1\n\ndef squares(max_num):\n    \"\"\"\uc81c\uacf1\uc218 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    for i in range(1, max_num + 1):\n        yield i ** 2\n\ndef demonstrate_practical_generators():\n    \"\"\"\uc2e4\uc6a9\uc801\uc778 \uc81c\ub108\ub808\uc774\ud130 \uc608\uc81c\"\"\"\n\n    print(f\"\\n2. \uc2e4\uc6a9\uc801\uc778 \uc81c\ub108\ub808\uc774\ud130\ub4e4:\")\n\n    # \uce74\uc6b4\ud2b8\ub2e4\uc6b4\n    print(f\"  \uce74\uc6b4\ud2b8\ub2e4\uc6b4: {list(countdown(5))}\")\n\n    # \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4\n    print(f\"  \ud53c\ubcf4\ub098\uce58 (10\uac1c): {list(fibonacci_generator(10))}\")\n\n    # \uc81c\uacf1\uc218\n    print(f\"  \uc81c\uacf1\uc218 (1-5): {list(squares(5))}\")\n\ndemonstrate_practical_generators()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#32","title":"3.2 \uace0\uae09 \uc81c\ub108\ub808\uc774\ud130 \ud328\ud134","text":"<pre><code>print(\"\\n=== \uace0\uae09 \uc81c\ub108\ub808\uc774\ud130 \ud328\ud134 ===\")\n\ndef infinite_sequence(start=0, step=1):\n    \"\"\"\ubb34\ud55c \uc2dc\ud000\uc2a4 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    current = start\n    while True:\n        yield current\n        current += step\n\ndef take(iterable, n):\n    \"\"\"\uc774\ud130\ub7ec\ube14\uc5d0\uc11c \ucc98\uc74c n\uac1c \uc694\uc18c\ub97c \uac00\uc838\uc624\ub294 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    for i, item in enumerate(iterable):\n        if i &gt;= n:\n            break\n        yield item\n\ndef cycle(iterable):\n    \"\"\"\uc774\ud130\ub7ec\ube14\uc744 \ubb34\ud55c\ud788 \ubc18\ubcf5\ud558\ub294 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    saved = []\n    for item in iterable:\n        yield item\n        saved.append(item)\n\n    while saved:\n        for item in saved:\n            yield item\n\ndef demonstrate_infinite_generators():\n    \"\"\"\ubb34\ud55c \uc81c\ub108\ub808\uc774\ud130 \ud65c\uc6a9\"\"\"\n\n    print(\"3. \ubb34\ud55c \uc81c\ub108\ub808\uc774\ud130:\")\n\n    # \ubb34\ud55c \uc2dc\ud000\uc2a4\uc5d0\uc11c \ucc98\uc74c 5\uac1c\n    infinite_nums = infinite_sequence(10, 3)\n    first_five = list(take(infinite_nums, 5))\n    print(f\"  \ubb34\ud55c \uc2dc\ud000\uc2a4 (\ucc98\uc74c 5\uac1c): {first_five}\")\n\n    # \uc21c\ud658 \uc81c\ub108\ub808\uc774\ud130\n    colors = ['red', 'green', 'blue']\n    color_cycle = cycle(colors)\n    first_ten_colors = list(take(color_cycle, 10))\n    print(f\"  \uc0c9\uc0c1 \uc21c\ud658 (10\uac1c): {first_ten_colors}\")\n\ndemonstrate_infinite_generators()\n\ndef file_processor(filename):\n    \"\"\"\ud30c\uc77c\uc744 \ucc98\ub9ac\ud558\ub294 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    try:\n        with open(filename, 'r', encoding='utf-8') as file:\n            for line_num, line in enumerate(file, 1):\n                # \ube48 \uc904\uc774\ub098 \uc8fc\uc11d \uc81c\uc678\n                line = line.strip()\n                if line and not line.startswith('#'):\n                    yield line_num, line\n    except FileNotFoundError:\n        print(f\"  \ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {filename}\")\n        return\n\ndef data_pipeline(*processors):\n    \"\"\"\ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    def pipeline(data):\n        result = data\n        for processor in processors:\n            result = processor(result)\n        return result\n    return pipeline\n\ndef demonstrate_generator_pipeline():\n    \"\"\"\uc81c\ub108\ub808\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778 \uc608\uc81c\"\"\"\n\n    print(f\"\\n4. \uc81c\ub108\ub808\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778:\")\n\n    # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc0dd\uc131\n    test_file = \"temp_data.txt\"\n    with open(test_file, 'w', encoding='utf-8') as f:\n        f.write(\"# \uc124\uc815 \ud30c\uc77c\\n\")\n        f.write(\"name=Alice\\n\")\n        f.write(\"age=30\\n\")\n        f.write(\"\\n\")  # \ube48 \uc904\n        f.write(\"city=Seoul\\n\")\n        f.write(\"# \uc8fc\uc11d\\n\")\n        f.write(\"country=Korea\\n\")\n\n    # \ud30c\uc77c \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\n    def parse_config_line(line_data):\n        \"\"\"\uc124\uc815 \ub77c\uc778\uc744 \ud30c\uc2f1\ud558\ub294 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n        for line_num, line in line_data:\n            if '=' in line:\n                key, value = line.split('=', 1)\n                yield line_num, key.strip(), value.strip()\n\n    def filter_valid_config(config_data):\n        \"\"\"\uc720\ud6a8\ud55c \uc124\uc815\ub9cc \ud544\ud130\ub9c1\ud558\ub294 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n        for line_num, key, value in config_data:\n            if key and value:  # \ud0a4\uc640 \uac12\uc774 \ubaa8\ub450 \uc788\ub294 \uacbd\uc6b0\ub9cc\n                yield line_num, key, value\n\n    # \ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589\n    print(f\"  \ud30c\uc77c \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778:\")\n    file_data = file_processor(test_file)\n    parsed_data = parse_config_line(file_data)\n    valid_config = filter_valid_config(parsed_data)\n\n    for line_num, key, value in valid_config:\n        print(f\"    \ub77c\uc778 {line_num}: {key} = {value}\")\n\n    # \ud30c\uc77c \uc815\ub9ac\n    import os\n    os.remove(test_file)\n\ndemonstrate_generator_pipeline()\n\ndef sliding_window(iterable, window_size):\n    \"\"\"\uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    iterator = iter(iterable)\n    window = []\n\n    # \ucd08\uae30 \uc708\ub3c4\uc6b0 \ucc44\uc6b0\uae30\n    for _ in range(window_size):\n        try:\n            window.append(next(iterator))\n        except StopIteration:\n            return\n\n    yield tuple(window)\n\n    # \uc2ac\ub77c\uc774\ub529\n    for item in iterator:\n        window.pop(0)\n        window.append(item)\n        yield tuple(window)\n\ndef batch_generator(iterable, batch_size):\n    \"\"\"\ubc30\uce58 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    iterator = iter(iterable)\n    while True:\n        batch = list(take(iterator, batch_size))\n        if not batch:\n            break\n        yield batch\n\ndef demonstrate_window_generators():\n    \"\"\"\uc708\ub3c4\uc6b0\uc640 \ubc30\uce58 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n\n    print(f\"\\n5. \uc708\ub3c4\uc6b0\uc640 \ubc30\uce58 \uc81c\ub108\ub808\uc774\ud130:\")\n\n    data = range(1, 11)  # 1\ubd80\ud130 10\uae4c\uc9c0\n\n    # \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0\n    print(f\"  \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 (\ud06c\uae30 3):\")\n    for window in sliding_window(data, 3):\n        print(f\"    {window}\")\n\n    # \ubc30\uce58 \ucc98\ub9ac\n    print(f\"\\n  \ubc30\uce58 \ucc98\ub9ac (\ud06c\uae30 4):\")\n    for batch in batch_generator(range(1, 13), 4):\n        print(f\"    \ubc30\uce58: {batch}\")\n\ndemonstrate_window_generators()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#33","title":"3.3 \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd","text":"<pre><code>print(\"\\n=== \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd ===\")\n\ndef demonstrate_generator_expressions():\n    \"\"\"\uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd \uc0ac\uc6a9\ubc95\"\"\"\n\n    print(\"6. \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd:\")\n\n    # \uae30\ubcf8 \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd\n    numbers = range(1, 6)\n    squared_gen = (x ** 2 for x in numbers)\n\n    print(f\"  \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd: {squared_gen}\")\n    print(f\"  \ud0c0\uc785: {type(squared_gen)}\")\n    print(f\"  \uac12\ub4e4: {list(squared_gen)}\")\n\n    # \uc870\uac74\ubd80 \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd\n    even_squares = (x ** 2 for x in range(1, 11) if x % 2 == 0)\n    print(f\"  \uc9dd\uc218\uc758 \uc81c\uacf1: {list(even_squares)}\")\n\n    # \uc911\ucca9 \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    flattened = (item for row in matrix for item in row)\n    print(f\"  \ud589\ub82c \ud3c9\uba74\ud654: {list(flattened)}\")\n\n    # \ud568\uc218\uc640 \ud568\uaed8 \uc0ac\uc6a9\n    words = ['hello', 'world', 'python', 'generator']\n    word_lengths = (len(word) for word in words)\n    print(f\"  \ub2e8\uc5b4 \uae38\uc774\ub4e4: {list(word_lengths)}\")\n\ndemonstrate_generator_expressions()\n\ndef demonstrate_memory_efficiency():\n    \"\"\"\uba54\ubaa8\ub9ac \ud6a8\uc728\uc131 \ube44\uad50\"\"\"\n\n    print(f\"\\n7. \uba54\ubaa8\ub9ac \ud6a8\uc728\uc131 \ube44\uad50:\")\n\n    import sys\n\n    # \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 vs \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd\n    size = 1000\n\n    # \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\n    list_comp = [x ** 2 for x in range(size)]\n    list_size = sys.getsizeof(list_comp)\n\n    # \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd\n    gen_exp = (x ** 2 for x in range(size))\n    gen_size = sys.getsizeof(gen_exp)\n\n    print(f\"  \ub370\uc774\ud130 \ud06c\uae30: {size}\")\n    print(f\"  \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 \uba54\ubaa8\ub9ac: {list_size} bytes\")\n    print(f\"  \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd \uba54\ubaa8\ub9ac: {gen_size} bytes\")\n    print(f\"  \uba54\ubaa8\ub9ac \ucc28\uc774: {list_size - gen_size} bytes\")\n    print(f\"  \uc81c\ub108\ub808\uc774\ud130\uac00 {list_size // gen_size}\ubc30 \ub354 \ud6a8\uc728\uc801\")\n\ndemonstrate_memory_efficiency()\n\ndef generator_pipeline_example():\n    \"\"\"\uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd \ud30c\uc774\ud504\ub77c\uc778\"\"\"\n\n    print(f\"\\n8. \uc81c\ub108\ub808\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778:\")\n\n    # \uc6d0\ubcf8 \ub370\uc774\ud130\n    text_data = [\n        \"Hello World\",\n        \"Python Programming\",\n        \"Generator Expressions\",\n        \"Memory Efficient\",\n        \"Data Processing\"\n    ]\n\n    # \ud30c\uc774\ud504\ub77c\uc778: \uc18c\ubb38\uc790 \u2192 \ub2e8\uc5b4 \ubd84\ub9ac \u2192 \uae38\uc774 5 \uc774\uc0c1 \u2192 \uc815\ub82c\n    pipeline = sorted(\n        word\n        for line in text_data\n        for word in line.lower().split()\n        if len(word) &gt;= 5\n    )\n\n    print(f\"  \uc6d0\ubcf8 \ub370\uc774\ud130: {text_data}\")\n    print(f\"  \ud30c\uc774\ud504\ub77c\uc778 \uacb0\uacfc: {pipeline}\")\n\ngenerator_pipeline_example()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#4-yield","title":"4. yield \ud0a4\uc6cc\ub4dc \uace0\uae09 \ud65c\uc6a9","text":""},{"location":"tutorials/intermediate/chapter09_iterators_generators/#41-send","title":"4.1 \uc591\ubc29\ud5a5 \uc81c\ub108\ub808\uc774\ud130 (send \uba54\uc11c\ub4dc)","text":"<pre><code>print(\"\\n=== yield \ud0a4\uc6cc\ub4dc \uace0\uae09 \ud65c\uc6a9 ===\")\n\ndef accumulator():\n    \"\"\"\uac12\uc744 \ub204\uc801\ud558\ub294 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    total = 0\n    while True:\n        value = yield total\n        if value is not None:\n            total += value\n\ndef demonstrate_generator_send():\n    \"\"\"\uc81c\ub108\ub808\uc774\ud130 send \uba54\uc11c\ub4dc \uc0ac\uc6a9\"\"\"\n\n    print(\"1. \uc591\ubc29\ud5a5 \uc81c\ub108\ub808\uc774\ud130 (send \uba54\uc11c\ub4dc):\")\n\n    acc = accumulator()\n\n    # \uc81c\ub108\ub808\uc774\ud130 \uc2dc\uc791 (\uccab \ubc88\uc9f8 yield\uae4c\uc9c0 \uc2e4\ud589)\n    print(f\"  \ucd08\uae30\uac12: {next(acc)}\")\n\n    # \uac12 \uc804\uc1a1\ud558\uace0 \uacb0\uacfc \ubc1b\uae30\n    print(f\"  10 \uc804\uc1a1: {acc.send(10)}\")\n    print(f\"  20 \uc804\uc1a1: {acc.send(20)}\")\n    print(f\"  5 \uc804\uc1a1: {acc.send(5)}\")\n\n    # None \uc804\uc1a1 (\uac12 \ucd94\uac00\ud558\uc9c0 \uc54a\uc74c)\n    print(f\"  None \uc804\uc1a1: {acc.send(None)}\")\n\ndemonstrate_generator_send()\n\ndef calculator():\n    \"\"\"\uacc4\uc0b0\uae30 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    result = 0\n    while True:\n        expression = yield result\n        if expression is None:\n            continue\n\n        try:\n            # \uac04\ub2e8\ud55c \uc218\uc2dd \ud3c9\uac00\n            if '+' in expression:\n                a, b = map(float, expression.split('+'))\n                result = a + b\n            elif '-' in expression:\n                a, b = map(float, expression.split('-'))\n                result = a - b\n            elif '*' in expression:\n                a, b = map(float, expression.split('*'))\n                result = a * b\n            elif '/' in expression:\n                a, b = map(float, expression.split('/'))\n                result = a / b if b != 0 else float('inf')\n            else:\n                result = float(expression)\n        except:\n            result = 0  # \uc624\ub958 \uc2dc 0\uc73c\ub85c \uc124\uc815\n\ndef demonstrate_calculator_generator():\n    \"\"\"\uacc4\uc0b0\uae30 \uc81c\ub108\ub808\uc774\ud130 \uc608\uc81c\"\"\"\n\n    print(f\"\\n2. \uacc4\uc0b0\uae30 \uc81c\ub108\ub808\uc774\ud130:\")\n\n    calc = calculator()\n    print(f\"  \ucd08\uae30\uac12: {next(calc)}\")\n\n    expressions = [\"10\", \"5+3\", \"20-7\", \"4*6\", \"15/3\"]\n\n    for expr in expressions:\n        result = calc.send(expr)\n        print(f\"  '{expr}' = {result}\")\n\ndemonstrate_calculator_generator()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#42","title":"4.2 \uc608\uc678 \ucc98\ub9ac\uc640 \uc81c\ub108\ub808\uc774\ud130","text":"<pre><code>def robust_processor():\n    \"\"\"\uacac\uace0\ud55c \ub370\uc774\ud130 \ucc98\ub9ac \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    processed_count = 0\n    error_count = 0\n\n    try:\n        while True:\n            data = yield (processed_count, error_count)\n\n            try:\n                # \ub370\uc774\ud130 \ucc98\ub9ac \uc2dc\ubbac\ub808\uc774\uc158\n                if data is None:\n                    continue\n\n                if isinstance(data, str) and data.isdigit():\n                    processed_value = int(data) * 2\n                    processed_count += 1\n                    print(f\"    \ucc98\ub9ac \uc644\ub8cc: '{data}' \u2192 {processed_value}\")\n                else:\n                    raise ValueError(f\"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ub370\uc774\ud130: {data}\")\n\n            except ValueError as e:\n                error_count += 1\n                print(f\"    \uc624\ub958: {e}\")\n\n    except GeneratorExit:\n        print(f\"  \uc81c\ub108\ub808\uc774\ud130 \uc885\ub8cc - \ucc98\ub9ac: {processed_count}, \uc624\ub958: {error_count}\")\n\ndef demonstrate_generator_exceptions():\n    \"\"\"\uc81c\ub108\ub808\uc774\ud130 \uc608\uc678 \ucc98\ub9ac\"\"\"\n\n    print(f\"\\n3. \uc81c\ub108\ub808\uc774\ud130 \uc608\uc678 \ucc98\ub9ac:\")\n\n    processor = robust_processor()\n    print(f\"  \ucd08\uae30 \uc0c1\ud0dc: {next(processor)}\")\n\n    test_data = [\"10\", \"20\", \"invalid\", \"30\", None, \"40\", \"abc\"]\n\n    for data in test_data:\n        stats = processor.send(data)\n        print(f\"    \ud1b5\uacc4: \ucc98\ub9ac {stats[0]}\uac1c, \uc624\ub958 {stats[1]}\uac1c\")\n\n    # \uc81c\ub108\ub808\uc774\ud130 \uc815\ub9ac\n    processor.close()\n\ndemonstrate_generator_exceptions()\n\ndef generator_with_cleanup():\n    \"\"\"\uc815\ub9ac \uc791\uc5c5\uc774 \uc788\ub294 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    print(\"  \ub9ac\uc18c\uc2a4 \ucd08\uae30\ud654\")\n    resource = {\"connections\": [], \"files\": []}\n\n    try:\n        while True:\n            action = yield len(resource[\"connections\"])\n\n            if action == \"connect\":\n                resource[\"connections\"].append(f\"conn_{len(resource['connections'])}\")\n                print(f\"    \uc5f0\uacb0 \uc0dd\uc131: {resource['connections'][-1]}\")\n            elif action == \"disconnect\":\n                if resource[\"connections\"]:\n                    conn = resource[\"connections\"].pop()\n                    print(f\"    \uc5f0\uacb0 \ud574\uc81c: {conn}\")\n\n    except GeneratorExit:\n        print(f\"  \ub9ac\uc18c\uc2a4 \uc815\ub9ac \uc911...\")\n        for conn in resource[\"connections\"]:\n            print(f\"    \uc5f0\uacb0 \uc815\ub9ac: {conn}\")\n        print(f\"  \uc815\ub9ac \uc644\ub8cc\")\n\ndef demonstrate_generator_cleanup():\n    \"\"\"\uc81c\ub108\ub808\uc774\ud130 \uc815\ub9ac \uc791\uc5c5\"\"\"\n\n    print(f\"\\n4. \uc81c\ub108\ub808\uc774\ud130 \uc815\ub9ac \uc791\uc5c5:\")\n\n    resource_manager = generator_with_cleanup()\n    print(f\"  \ucd08\uae30 \uc5f0\uacb0 \uc218: {next(resource_manager)}\")\n\n    actions = [\"connect\", \"connect\", \"disconnect\", \"connect\"]\n\n    for action in actions:\n        count = resource_manager.send(action)\n        print(f\"    \ud604\uc7ac \uc5f0\uacb0 \uc218: {count}\")\n\n    # \uc81c\ub108\ub808\uc774\ud130 \uc885\ub8cc \uc2dc \uc815\ub9ac \uc791\uc5c5 \uc2e4\ud589\n    resource_manager.close()\n\ndemonstrate_generator_cleanup()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#43-yield-from","title":"4.3 yield from\uacfc \uc81c\ub108\ub808\uc774\ud130 \uc704\uc784","text":"<pre><code>print(\"\\n=== yield from\uacfc \uc81c\ub108\ub808\uc774\ud130 \uc704\uc784 ===\")\n\ndef subgenerator():\n    \"\"\"\ud558\uc704 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n    print(\"    \ud558\uc704 \uc81c\ub108\ub808\uc774\ud130 \uc2dc\uc791\")\n    yield \"A\"\n    yield \"B\"\n    yield \"C\"\n    print(\"    \ud558\uc704 \uc81c\ub108\ub808\uc774\ud130 \uc885\ub8cc\")\n    return \"\ud558\uc704 \uc81c\ub108\ub808\uc774\ud130 \uc644\ub8cc\"\n\ndef delegating_generator():\n    \"\"\"\uc704\uc784\ud558\ub294 \uc81c\ub108\ub808\uc774\ud130 (yield from \uc0ac\uc6a9)\"\"\"\n    print(\"  \uc704\uc784 \uc81c\ub108\ub808\uc774\ud130 \uc2dc\uc791\")\n    yield \"\uc2dc\uc791\"\n\n    # yield from\uc73c\ub85c \ub2e4\ub978 \uc81c\ub108\ub808\uc774\ud130\uc5d0 \uc704\uc784\n    result = yield from subgenerator()\n    print(f\"  \ud558\uc704 \uc81c\ub108\ub808\uc774\ud130 \ubc18\ud658\uac12: {result}\")\n\n    yield \"\uc885\ub8cc\"\n    print(\"  \uc704\uc784 \uc81c\ub108\ub808\uc774\ud130 \uc885\ub8cc\")\n\ndef manual_delegation():\n    \"\"\"\uc218\ub3d9 \uc704\uc784 (yield from \uc5c6\uc774)\"\"\"\n    print(\"  \uc218\ub3d9 \uc704\uc784 \uc2dc\uc791\")\n    yield \"\uc2dc\uc791\"\n\n    # \uc218\ub3d9\uc73c\ub85c \uc704\uc784\n    for value in subgenerator():\n        yield value\n\n    yield \"\uc885\ub8cc\"\n    print(\"  \uc218\ub3d9 \uc704\uc784 \uc885\ub8cc\")\n\ndef demonstrate_yield_from():\n    \"\"\"yield from \uc0ac\uc6a9 \uc608\uc81c\"\"\"\n\n    print(\"5. yield from \uc0ac\uc6a9:\")\n\n    print(f\"  yield from \uc0ac\uc6a9:\")\n    for value in delegating_generator():\n        print(f\"    \ubc1b\uc740 \uac12: {value}\")\n\n    print(f\"\\n  \uc218\ub3d9 \uc704\uc784:\")\n    for value in manual_delegation():\n        print(f\"    \ubc1b\uc740 \uac12: {value}\")\n\ndemonstrate_yield_from()\n\ndef nested_data_processor():\n    \"\"\"\uc911\ucca9 \ub370\uc774\ud130 \ucc98\ub9ac \uc81c\ub108\ub808\uc774\ud130\"\"\"\n\n    def process_numbers(numbers):\n        \"\"\"\uc22b\uc790 \ucc98\ub9ac \ud558\uc704 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n        for num in numbers:\n            if isinstance(num, (int, float)):\n                yield num * 2\n\n    def process_strings(strings):\n        \"\"\"\ubb38\uc790\uc5f4 \ucc98\ub9ac \ud558\uc704 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n        for s in strings:\n            if isinstance(s, str):\n                yield s.upper()\n\n    def process_mixed_data(data):\n        \"\"\"\ud63c\ud569 \ub370\uc774\ud130 \ucc98\ub9ac\"\"\"\n        for item in data:\n            if isinstance(item, (int, float)):\n                yield from process_numbers([item])\n            elif isinstance(item, str):\n                yield from process_strings([item])\n            elif isinstance(item, (list, tuple)):\n                yield from process_mixed_data(item)\n\n    # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\n    mixed_data = [1, \"hello\", [2, 3], \"world\", (4, \"python\"), 5]\n\n    yield from process_mixed_data(mixed_data)\n\ndef demonstrate_nested_processing():\n    \"\"\"\uc911\ucca9 \ucc98\ub9ac \uc608\uc81c\"\"\"\n\n    print(f\"\\n6. \uc911\ucca9 \ub370\uc774\ud130 \ucc98\ub9ac:\")\n\n    processor = nested_data_processor()\n    results = list(processor)\n    print(f\"  \ucc98\ub9ac \uacb0\uacfc: {results}\")\n\ndemonstrate_nested_processing()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#5-itertools","title":"5. itertools \ubaa8\ub4c8 \ud65c\uc6a9","text":""},{"location":"tutorials/intermediate/chapter09_iterators_generators/#51","title":"5.1 \ubb34\ud55c \uc774\ud130\ub808\uc774\ud130","text":"<pre><code>print(\"\\n=== itertools \ubaa8\ub4c8 \ud65c\uc6a9 ===\")\n\nimport itertools\n\ndef demonstrate_infinite_iterators():\n    \"\"\"\ubb34\ud55c \uc774\ud130\ub808\uc774\ud130\ub4e4\"\"\"\n\n    print(\"1. \ubb34\ud55c \uc774\ud130\ub808\uc774\ud130:\")\n\n    # count: \ubb34\ud55c \uce74\uc6b4\ud130\n    counter = itertools.count(10, 3)  # 10\ubd80\ud130 3\uc529 \uc99d\uac00\n    first_five = list(itertools.islice(counter, 5))\n    print(f\"  count(10, 3) \ucc98\uc74c 5\uac1c: {first_five}\")\n\n    # cycle: \uc21c\ud658 \ubc18\ubcf5\n    colors = ['red', 'green', 'blue']\n    color_cycle = itertools.cycle(colors)\n    first_ten = list(itertools.islice(color_cycle, 10))\n    print(f\"  cycle(['red', 'green', 'blue']) 10\uac1c: {first_ten}\")\n\n    # repeat: \uac12 \ubc18\ubcf5\n    repeated = itertools.repeat('hello', 5)\n    print(f\"  repeat('hello', 5): {list(repeated)}\")\n\n    # repeat (\ubb34\ud55c)\n    infinite_repeat = itertools.repeat('x')\n    first_three = list(itertools.islice(infinite_repeat, 3))\n    print(f\"  repeat('x') \ucc98\uc74c 3\uac1c: {first_three}\")\n\ndemonstrate_infinite_iterators()\n\ndef demonstrate_terminating_iterators():\n    \"\"\"\uc885\ub8cc\ub418\ub294 \uc774\ud130\ub808\uc774\ud130\ub4e4\"\"\"\n\n    print(f\"\\n2. \uc885\ub8cc\ub418\ub294 \uc774\ud130\ub808\uc774\ud130:\")\n\n    # accumulate: \ub204\uc801 \uc5f0\uc0b0\n    numbers = [1, 2, 3, 4, 5]\n    accumulated = list(itertools.accumulate(numbers))\n    print(f\"  accumulate([1,2,3,4,5]): {accumulated}\")\n\n    # accumulate with operator\n    import operator\n    accumulated_mul = list(itertools.accumulate(numbers, operator.mul))\n    print(f\"  accumulate (\uacf1\uc148): {accumulated_mul}\")\n\n    # chain: \uc5ec\ub7ec \uc774\ud130\ub7ec\ube14 \uc5f0\uacb0\n    list1 = [1, 2, 3]\n    list2 = ['a', 'b', 'c']\n    list3 = [10, 20]\n    chained = list(itertools.chain(list1, list2, list3))\n    print(f\"  chain([1,2,3], ['a','b','c'], [10,20]): {chained}\")\n\n    # compress: \uc870\uac74\uc5d0 \ub530\ub978 \ud544\ud130\ub9c1\n    data = ['a', 'b', 'c', 'd', 'e']\n    selectors = [1, 0, 1, 0, 1]\n    compressed = list(itertools.compress(data, selectors))\n    print(f\"  compress(['a','b','c','d','e'], [1,0,1,0,1]): {compressed}\")\n\n    # dropwhile: \uc870\uac74\uc774 \uac70\uc9d3\uc774 \ub420 \ub54c\uae4c\uc9c0 \ubc84\ub9ac\uae30\n    numbers = [1, 3, 5, 8, 9, 10, 12]\n    dropped = list(itertools.dropwhile(lambda x: x % 2 == 1, numbers))\n    print(f\"  dropwhile(\ud640\uc218): {dropped}\")\n\n    # takewhile: \uc870\uac74\uc774 \ucc38\uc778 \ub3d9\uc548\ub9cc \uac00\uc838\uc624\uae30\n    taken = list(itertools.takewhile(lambda x: x &lt; 10, numbers))\n    print(f\"  takewhile(&lt;10): {taken}\")\n\ndemonstrate_terminating_iterators()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#52","title":"5.2 \uc870\ud569 \uc774\ud130\ub808\uc774\ud130","text":"<pre><code>def demonstrate_combinatorial_iterators():\n    \"\"\"\uc870\ud569 \uc774\ud130\ub808\uc774\ud130\ub4e4\"\"\"\n\n    print(f\"\\n3. \uc870\ud569 \uc774\ud130\ub808\uc774\ud130:\")\n\n    data = ['A', 'B', 'C', 'D']\n\n    # product: \uacf1\uc9d1\ud569\n    pairs = list(itertools.product(data[:2], repeat=2))\n    print(f\"  product(['A','B'], repeat=2): {pairs}\")\n\n    different_sets = list(itertools.product(['X', 'Y'], [1, 2]))\n    print(f\"  product(['X','Y'], [1,2]): {different_sets}\")\n\n    # permutations: \uc21c\uc5f4\n    perms = list(itertools.permutations(data[:3]))\n    print(f\"  permutations(['A','B','C']): {perms}\")\n\n    # permutations with length\n    perms_2 = list(itertools.permutations(data[:3], 2))\n    print(f\"  permutations(['A','B','C'], 2): {perms_2}\")\n\n    # combinations: \uc870\ud569\n    combs = list(itertools.combinations(data, 2))\n    print(f\"  combinations(['A','B','C','D'], 2): {combs}\")\n\n    # combinations_with_replacement: \uc911\ubcf5 \uc870\ud569\n    combs_rep = list(itertools.combinations_with_replacement(data[:3], 2))\n    print(f\"  combinations_with_replacement(['A','B','C'], 2): {combs_rep}\")\n\ndemonstrate_combinatorial_iterators()\n\ndef real_world_itertools_examples():\n    \"\"\"\uc2e4\uc6a9\uc801\uc778 itertools \uc608\uc81c\"\"\"\n\n    print(f\"\\n4. \uc2e4\uc6a9\uc801\uc778 itertools \ud65c\uc6a9:\")\n\n    # \ubc30\uce58 \ucc98\ub9ac\n    def batch_data(iterable, batch_size):\n        \"\"\"\ub370\uc774\ud130\ub97c \ubc30\uce58\ub85c \ub098\ub204\uae30\"\"\"\n        iterator = iter(iterable)\n        while True:\n            batch = list(itertools.islice(iterator, batch_size))\n            if not batch:\n                break\n            yield batch\n\n    data = range(1, 16)  # 1\ubd80\ud130 15\uae4c\uc9c0\n    batches = list(batch_data(data, 4))\n    print(f\"  \ubc30\uce58 \ucc98\ub9ac (\ud06c\uae30 4): {batches}\")\n\n    # \uadf8\ub8f9\ud654\n    data = [\n        ('A', 1), ('A', 2), ('B', 3), ('B', 4), ('B', 5), ('C', 6)\n    ]\n\n    grouped = []\n    for key, group in itertools.groupby(data, key=lambda x: x[0]):\n        group_list = list(group)\n        grouped.append((key, group_list))\n\n    print(f\"  \uadf8\ub8f9\ud654: {grouped}\")\n\n    # \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 (itertools \ubc84\uc804)\n    def sliding_window_itertools(iterable, window_size):\n        \"\"\"itertools\ub97c \uc0ac\uc6a9\ud55c \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0\"\"\"\n        iterators = itertools.tee(iterable, window_size)\n\n        for i, iterator in enumerate(iterators):\n            # \uac01 \uc774\ud130\ub808\uc774\ud130\ub97c i\ub9cc\ud07c \uc55e\uc73c\ub85c \uc9c4\ud589\n            for _ in range(i):\n                next(iterator, None)\n\n        return zip(*iterators)\n\n    data = range(1, 8)\n    windows = list(sliding_window_itertools(data, 3))\n    print(f\"  \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 (\ud06c\uae30 3): {windows}\")\n\n    # \ud3c9\uba74\ud654 (flatten)\n    nested_data = [[1, 2], [3, 4, 5], [6], [7, 8, 9]]\n    flattened = list(itertools.chain.from_iterable(nested_data))\n    print(f\"  \ud3c9\uba74\ud654: {flattened}\")\n\nreal_world_itertools_examples()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#53-itertools","title":"5.3 \uace0\uae09 itertools \ud328\ud134","text":"<pre><code>def advanced_itertools_patterns():\n    \"\"\"\uace0\uae09 itertools \ud328\ud134\"\"\"\n\n    print(f\"\\n5. \uace0\uae09 itertools \ud328\ud134:\")\n\n    # \ub77c\uc6b4\ub4dc \ub85c\ube48\n    def roundrobin(*iterables):\n        \"\"\"\ub77c\uc6b4\ub4dc \ub85c\ube48 \ubc29\uc2dd\uc73c\ub85c \uc774\ud130\ub7ec\ube14\ub4e4\uc744 \ucc98\ub9ac\"\"\"\n        iterators = [iter(it) for it in iterables]\n        while iterators:\n            for i, iterator in enumerate(iterators[:]):\n                try:\n                    yield next(iterator)\n                except StopIteration:\n                    iterators.remove(iterator)\n\n    list1 = [1, 2, 3]\n    list2 = ['a', 'b', 'c', 'd']\n    list3 = [10, 20]\n\n    result = list(roundrobin(list1, list2, list3))\n    print(f\"  \ub77c\uc6b4\ub4dc \ub85c\ube48: {result}\")\n\n    # \ubd84\ud560 (partition)\n    def partition(predicate, iterable):\n        \"\"\"\uc870\uac74\uc5d0 \ub530\ub77c \uc774\ud130\ub7ec\ube14\uc744 \ub450 \ubd80\ubd84\uc73c\ub85c \ubd84\ud560\"\"\"\n        t1, t2 = itertools.tee(iterable)\n        return itertools.filterfalse(predicate, t1), filter(predicate, t2)\n\n    numbers = range(1, 11)\n    even, odd = partition(lambda x: x % 2 == 0, numbers)\n    print(f\"  \uc9dd\uc218: {list(even)}\")\n    print(f\"  \ud640\uc218: {list(odd)}\")\n\n    # \uace0\uc720 \uac12\ub9cc \uc720\uc9c0 (\uc911\ubcf5 \uc81c\uac70)\n    def unique_everseen(iterable, key=None):\n        \"\"\"\uc21c\uc11c\ub97c \uc720\uc9c0\ud558\uba74\uc11c \uc911\ubcf5 \uc81c\uac70\"\"\"\n        seen = set()\n        seen_add = seen.add\n        if key is None:\n            for element in itertools.filterfalse(seen.__contains__, iterable):\n                seen_add(element)\n                yield element\n        else:\n            for element in iterable:\n                k = key(element)\n                if k not in seen:\n                    seen_add(k)\n                    yield element\n\n    data = [1, 2, 3, 2, 4, 1, 5, 3]\n    unique = list(unique_everseen(data))\n    print(f\"  \uc911\ubcf5 \uc81c\uac70: {unique}\")\n\n    # \uc870\uac74\ubcc4 \uc18c\ube44\n    def consume(iterator, n=None):\n        \"\"\"\uc774\ud130\ub808\uc774\ud130\uc5d0\uc11c n\uac1c \uc694\uc18c\ub97c \uc18c\ube44 (\ubc18\ud658\ud558\uc9c0 \uc54a\uc74c)\"\"\"\n        if n is None:\n            # \ubaa8\ub4e0 \uc694\uc18c \uc18c\ube44\n            for _ in iterator:\n                pass\n        else:\n            # n\uac1c \uc694\uc18c\ub9cc \uc18c\ube44\n            next(itertools.islice(iterator, n, n), None)\n\n    numbers = iter(range(1, 11))\n    consume(numbers, 3)  # \ucc98\uc74c 3\uac1c \uc18c\ube44\n    remaining = list(numbers)\n    print(f\"  \uc18c\ube44 \ud6c4 \ub0a8\uc740 \uac83: {remaining}\")\n\nadvanced_itertools_patterns()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#6","title":"6. \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \ucc98\ub9ac","text":""},{"location":"tutorials/intermediate/chapter09_iterators_generators/#61","title":"6.1 \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ucc98\ub9ac","text":"<pre><code>print(\"\\n=== \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \ucc98\ub9ac ===\")\n\ndef process_large_dataset():\n    \"\"\"\ub300\uc6a9\ub7c9 \ub370\uc774\ud130\uc14b \ucc98\ub9ac \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n\n    print(\"1. \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ucc98\ub9ac:\")\n\n    # \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \uc2dc\ubbac\ub808\uc774\uc158 (\uba54\ubaa8\ub9ac\uc5d0 \ubaa8\ub450 \ub85c\ub4dc\ud558\uc9c0 \uc54a\uc74c)\n    def generate_large_dataset(size):\n        \"\"\"\ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \uc0dd\uc131\uae30\"\"\"\n        for i in range(size):\n            # \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \uc0dd\uc131 \uc2dc\ubbac\ub808\uc774\uc158\n            yield {\n                'id': i,\n                'value': i ** 2,\n                'category': 'A' if i % 3 == 0 else 'B' if i % 3 == 1 else 'C',\n                'active': i % 2 == 0\n            }\n\n    # \uc2a4\ud2b8\ub9ac\ubc0d \ucc98\ub9ac\n    def process_streaming_data(data_stream):\n        \"\"\"\uc2a4\ud2b8\ub9ac\ubc0d \ub370\uc774\ud130 \ucc98\ub9ac\"\"\"\n        for record in data_stream:\n            # \ub370\uc774\ud130 \ubcc0\ud658\n            if record['active']:\n                yield {\n                    'id': record['id'],\n                    'processed_value': record['value'] * 1.1,\n                    'category': record['category']\n                }\n\n    # \ud544\ud130\ub9c1\n    def filter_data(data_stream, min_value=0):\n        \"\"\"\ub370\uc774\ud130 \ud544\ud130\ub9c1\"\"\"\n        for record in data_stream:\n            if record['processed_value'] &gt; min_value:\n                yield record\n\n    # \ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589\n    dataset_size = 100000  # 10\ub9cc \uac1c \ub808\ucf54\ub4dc\n\n    print(f\"  \ub370\uc774\ud130\uc14b \ud06c\uae30: {dataset_size:,} \ub808\ucf54\ub4dc\")\n\n    # \uc2a4\ud2b8\ub9ac\ubc0d \ud30c\uc774\ud504\ub77c\uc778\n    raw_data = generate_large_dataset(dataset_size)\n    processed_data = process_streaming_data(raw_data)\n    filtered_data = filter_data(processed_data, min_value=1000)\n\n    # \ucc98\uc74c 5\uac1c\ub9cc \ud655\uc778\n    sample_results = list(itertools.islice(filtered_data, 5))\n\n    print(f\"  \ucc98\ub9ac \uacb0\uacfc \uc0d8\ud50c:\")\n    for record in sample_results:\n        print(f\"    {record}\")\n\nprocess_large_dataset()\n\ndef demonstrate_memory_comparison():\n    \"\"\"\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ube44\uad50\"\"\"\n\n    print(f\"\\n2. \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ube44\uad50:\")\n\n    import sys\n    import gc\n\n    # \uba54\ubaa8\ub9ac \uce21\uc815 \ud568\uc218\n    def get_memory_usage():\n        \"\"\"\ud604\uc7ac \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ubc18\ud658 (\ub300\ub7b5\uc801)\"\"\"\n        return sum(sys.getsizeof(obj) for obj in gc.get_objects())\n\n    size = 10000\n\n    # \ub9ac\uc2a4\ud2b8 \ubc29\uc2dd (\ubaa8\ub4e0 \ub370\uc774\ud130\ub97c \uba54\ubaa8\ub9ac\uc5d0 \ub85c\ub4dc)\n    print(f\"  \ub9ac\uc2a4\ud2b8 \ubc29\uc2dd:\")\n    mem_before = get_memory_usage()\n\n    data_list = [x ** 2 for x in range(size)]\n    processed_list = [x * 2 for x in data_list if x % 2 == 0]\n\n    mem_after = get_memory_usage()\n    print(f\"    \uba54\ubaa8\ub9ac \uc99d\uac00: {mem_after - mem_before:,} bytes (\ub300\ub7b5)\")\n    print(f\"    \uacb0\uacfc \uac1c\uc218: {len(processed_list)}\")\n\n    # \uc81c\ub108\ub808\uc774\ud130 \ubc29\uc2dd (\ud544\uc694\ud55c \ub54c\ub9cc \uacc4\uc0b0)\n    print(f\"\\n  \uc81c\ub108\ub808\uc774\ud130 \ubc29\uc2dd:\")\n    mem_before = get_memory_usage()\n\n    data_gen = (x ** 2 for x in range(size))\n    processed_gen = (x * 2 for x in data_gen if x % 2 == 0)\n    result_count = sum(1 for _ in processed_gen)  # \uac1c\uc218\ub9cc \uc138\uae30\n\n    mem_after = get_memory_usage()\n    print(f\"    \uba54\ubaa8\ub9ac \uc99d\uac00: {mem_after - mem_before:,} bytes (\ub300\ub7b5)\")\n    print(f\"    \uacb0\uacfc \uac1c\uc218: {result_count}\")\n\ndemonstrate_memory_comparison()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#62","title":"6.2 \ud30c\uc77c \ucc98\ub9ac\uc640 \uc2a4\ud2b8\ub9ac\ubc0d","text":"<pre><code>def file_processing_generators():\n    \"\"\"\ud30c\uc77c \ucc98\ub9ac \uc81c\ub108\ub808\uc774\ud130\"\"\"\n\n    print(f\"\\n3. \ud30c\uc77c \ucc98\ub9ac \uc81c\ub108\ub808\uc774\ud130:\")\n\n    # \ub300\uc6a9\ub7c9 \ub85c\uadf8 \ud30c\uc77c \uc2dc\ubbac\ub808\uc774\uc158\n    log_filename = \"temp_large_log.txt\"\n\n    # \ud14c\uc2a4\ud2b8 \ub85c\uadf8 \ud30c\uc77c \uc0dd\uc131\n    with open(log_filename, 'w', encoding='utf-8') as f:\n        for i in range(1000):\n            level = ['INFO', 'WARNING', 'ERROR'][i % 3]\n            f.write(f\"2023-01-01 10:{i%60:02d}:{i%60:02d} {level} Message {i}\\n\")\n\n    def read_log_lines(filename):\n        \"\"\"\ub85c\uadf8 \ud30c\uc77c\uc744 \ud55c \uc904\uc529 \uc77d\ub294 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n        with open(filename, 'r', encoding='utf-8') as file:\n            for line_num, line in enumerate(file, 1):\n                yield line_num, line.strip()\n\n    def parse_log_entry(line_data):\n        \"\"\"\ub85c\uadf8 \ud56d\ubaa9\uc744 \ud30c\uc2f1\ud558\ub294 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n        for line_num, line in line_data:\n            parts = line.split(' ', 3)\n            if len(parts) &gt;= 4:\n                date, time, level, message = parts\n                yield {\n                    'line_num': line_num,\n                    'datetime': f\"{date} {time}\",\n                    'level': level,\n                    'message': message\n                }\n\n    def filter_log_level(log_entries, target_level):\n        \"\"\"\ud2b9\uc815 \ub85c\uadf8 \ub808\ubca8\ub9cc \ud544\ud130\ub9c1\ud558\ub294 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n        for entry in log_entries:\n            if entry['level'] == target_level:\n                yield entry\n\n    # \ub85c\uadf8 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\n    print(f\"  \ub85c\uadf8 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778:\")\n\n    # ERROR \ub85c\uadf8\ub9cc \ud544\ud130\ub9c1\n    log_lines = read_log_lines(log_filename)\n    parsed_logs = parse_log_entry(log_lines)\n    error_logs = filter_log_level(parsed_logs, 'ERROR')\n\n    # \ucc98\uc74c 5\uac1c ERROR \ub85c\uadf8\ub9cc \ucd9c\ub825\n    error_count = 0\n    for log_entry in error_logs:\n        print(f\"    \ub77c\uc778 {log_entry['line_num']}: {log_entry['datetime']} - {log_entry['message']}\")\n        error_count += 1\n        if error_count &gt;= 5:\n            break\n\n    # \ud30c\uc77c \uc815\ub9ac\n    import os\n    os.remove(log_filename)\n\nfile_processing_generators()\n\ndef csv_processing_example():\n    \"\"\"CSV \ud30c\uc77c \ucc98\ub9ac \uc608\uc81c\"\"\"\n\n    print(f\"\\n4. CSV \ud30c\uc77c \ucc98\ub9ac:\")\n\n    csv_filename = \"temp_data.csv\"\n\n    # \ud14c\uc2a4\ud2b8 CSV \ud30c\uc77c \uc0dd\uc131\n    with open(csv_filename, 'w', encoding='utf-8') as f:\n        f.write(\"id,name,age,department,salary\\n\")\n        departments = ['IT', 'HR', 'Finance', 'Marketing']\n        for i in range(1, 101):\n            dept = departments[i % 4]\n            salary = 30000 + (i * 1000) + (i % 10) * 5000\n            f.write(f\"{i},Employee{i},{25 + i % 40},{dept},{salary}\\n\")\n\n    def read_csv_rows(filename):\n        \"\"\"CSV \ud30c\uc77c\uc744 \ud589\ubcc4\ub85c \uc77d\ub294 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n        with open(filename, 'r', encoding='utf-8') as file:\n            header = file.readline().strip().split(',')\n            for line in file:\n                values = line.strip().split(',')\n                yield dict(zip(header, values))\n\n    def convert_types(rows):\n        \"\"\"\ub370\uc774\ud130 \ud0c0\uc785 \ubcc0\ud658 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n        for row in rows:\n            yield {\n                'id': int(row['id']),\n                'name': row['name'],\n                'age': int(row['age']),\n                'department': row['department'],\n                'salary': int(row['salary'])\n            }\n\n    def department_statistics(rows):\n        \"\"\"\ubd80\uc11c\ubcc4 \ud1b5\uacc4 \uacc4\uc0b0\"\"\"\n        dept_stats = {}\n\n        for row in rows:\n            dept = row['department']\n            if dept not in dept_stats:\n                dept_stats[dept] = {'count': 0, 'total_salary': 0, 'ages': []}\n\n            dept_stats[dept]['count'] += 1\n            dept_stats[dept]['total_salary'] += row['salary']\n            dept_stats[dept]['ages'].append(row['age'])\n\n        # \ud3c9\uade0 \uacc4\uc0b0\n        for dept, stats in dept_stats.items():\n            stats['avg_salary'] = stats['total_salary'] / stats['count']\n            stats['avg_age'] = sum(stats['ages']) / len(stats['ages'])\n            del stats['ages']  # \uba54\ubaa8\ub9ac \uc808\uc57d\n\n        return dept_stats\n\n    # CSV \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\n    rows = read_csv_rows(csv_filename)\n    converted_rows = convert_types(rows)\n\n    # \uc2a4\ud2b8\ub9ac\ubc0d\uc73c\ub85c \ud1b5\uacc4 \uacc4\uc0b0\n    stats = department_statistics(converted_rows)\n\n    print(f\"  \ubd80\uc11c\ubcc4 \ud1b5\uacc4:\")\n    for dept, stat in stats.items():\n        print(f\"    {dept}: \uc9c1\uc6d0 {stat['count']}\uba85, \ud3c9\uade0 \uc5f0\ubd09 {stat['avg_salary']:,.0f}\uc6d0, \ud3c9\uade0 \ub098\uc774 {stat['avg_age']:.1f}\uc138\")\n\n    # \ud30c\uc77c \uc815\ub9ac\n    import os\n    os.remove(csv_filename)\n\ncsv_processing_example()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#7","title":"7. \ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130\uc640 \uc81c\ub108\ub808\uc774\ud130 \uae30\ucd08","text":""},{"location":"tutorials/intermediate/chapter09_iterators_generators/#71","title":"7.1 \ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130 \uc18c\uac1c","text":"<pre><code>print(\"\\n=== \ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130\uc640 \uc81c\ub108\ub808\uc774\ud130 \uae30\ucd08 ===\")\n\nimport asyncio\nimport time\n\nasync def demonstrate_async_generator():\n    \"\"\"\ube44\ub3d9\uae30 \uc81c\ub108\ub808\uc774\ud130 \uae30\ubcf8 \uc608\uc81c\"\"\"\n\n    print(\"1. \ube44\ub3d9\uae30 \uc81c\ub108\ub808\uc774\ud130:\")\n\n    async def async_counter(max_count):\n        \"\"\"\ube44\ub3d9\uae30 \uce74\uc6b4\ud130 \uc81c\ub108\ub808\uc774\ud130\"\"\"\n        for i in range(max_count):\n            # \ube44\ub3d9\uae30 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n            await asyncio.sleep(0.1)\n            yield i\n\n    # \ube44\ub3d9\uae30 \uc81c\ub108\ub808\uc774\ud130 \uc0ac\uc6a9\n    print(f\"  \ube44\ub3d9\uae30 \uce74\uc6b4\ud130 \uc2e4\ud589:\")\n    async for value in async_counter(5):\n        print(f\"    \uac12: {value}\")\n\n# \ube44\ub3d9\uae30 \ud568\uc218 \uc2e4\ud589\uc744 \uc704\ud55c \ub798\ud37c\ndef run_async_demo():\n    \"\"\"\ube44\ub3d9\uae30 \ub370\ubaa8 \uc2e4\ud589\"\"\"\n    try:\n        asyncio.run(demonstrate_async_generator())\n    except Exception as e:\n        print(f\"  \ube44\ub3d9\uae30 \uc2e4\ud589 \uc624\ub958: {e}\")\n        print(f\"  (\uc77c\ubd80 \ud658\uacbd\uc5d0\uc11c\ub294 \ube44\ub3d9\uae30 \ucf54\ub4dc\uac00 \uc81c\ud55c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4)\")\n\nrun_async_demo()\n\nclass AsyncRange:\n    \"\"\"\ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, start, end, delay=0.1):\n        self.start = start\n        self.end = end\n        self.delay = delay\n        self.current = start\n\n    def __aiter__(self):\n        return self\n\n    async def __anext__(self):\n        if self.current &gt;= self.end:\n            raise StopAsyncIteration\n\n        await asyncio.sleep(self.delay)\n        value = self.current\n        self.current += 1\n        return value\n\nasync def demonstrate_async_iterator():\n    \"\"\"\ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130 \ud074\ub798\uc2a4 \uc0ac\uc6a9\"\"\"\n\n    print(f\"\\n2. \ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130 \ud074\ub798\uc2a4:\")\n\n    async_range = AsyncRange(1, 4, 0.05)\n\n    print(f\"  AsyncRange(1, 4) \uc2e4\ud589:\")\n    async for value in async_range:\n        print(f\"    \uac12: {value}\")\n\ndef run_async_iterator_demo():\n    \"\"\"\ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130 \ub370\ubaa8 \uc2e4\ud589\"\"\"\n    try:\n        asyncio.run(demonstrate_async_iterator())\n    except Exception as e:\n        print(f\"  \ube44\ub3d9\uae30 \uc2e4\ud589 \uc624\ub958: {e}\")\n\nrun_async_iterator_demo()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#72-vs","title":"7.2 \ub3d9\uae30 vs \ube44\ub3d9\uae30 \uc131\ub2a5 \ube44\uad50","text":"<pre><code>def sync_vs_async_comparison():\n    \"\"\"\ub3d9\uae30 vs \ube44\ub3d9\uae30 \uc131\ub2a5 \ube44\uad50\"\"\"\n\n    print(f\"\\n3. \ub3d9\uae30 vs \ube44\ub3d9\uae30 \uc131\ub2a5 \ube44\uad50:\")\n\n    def sync_slow_operation(n):\n        \"\"\"\ub3d9\uae30 \ubc29\uc2dd\uc758 \ub290\ub9b0 \uc791\uc5c5\"\"\"\n        time.sleep(0.01)  # I/O \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n        return n * 2\n\n    async def async_slow_operation(n):\n        \"\"\"\ube44\ub3d9\uae30 \ubc29\uc2dd\uc758 \ub290\ub9b0 \uc791\uc5c5\"\"\"\n        await asyncio.sleep(0.01)  # \ube44\ub3d9\uae30 I/O \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n        return n * 2\n\n    def sync_processor(data):\n        \"\"\"\ub3d9\uae30 \ucc98\ub9ac\"\"\"\n        start_time = time.time()\n        results = []\n\n        for item in data:\n            result = sync_slow_operation(item)\n            results.append(result)\n\n        end_time = time.time()\n        return results, end_time - start_time\n\n    async def async_processor(data):\n        \"\"\"\ube44\ub3d9\uae30 \ucc98\ub9ac\"\"\"\n        start_time = time.time()\n\n        # \ubaa8\ub4e0 \uc791\uc5c5\uc744 \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\n        tasks = [async_slow_operation(item) for item in data]\n        results = await asyncio.gather(*tasks)\n\n        end_time = time.time()\n        return results, end_time - start_time\n\n    test_data = list(range(1, 6))  # 5\uac1c \uc791\uc5c5\n\n    # \ub3d9\uae30 \ucc98\ub9ac\n    sync_results, sync_time = sync_processor(test_data)\n    print(f\"  \ub3d9\uae30 \ucc98\ub9ac: {sync_time:.3f}\ucd08, \uacb0\uacfc: {sync_results}\")\n\n    # \ube44\ub3d9\uae30 \ucc98\ub9ac\n    try:\n        async_results, async_time = asyncio.run(async_processor(test_data))\n        print(f\"  \ube44\ub3d9\uae30 \ucc98\ub9ac: {async_time:.3f}\ucd08, \uacb0\uacfc: {async_results}\")\n        print(f\"  \uc131\ub2a5 \uac1c\uc120: {sync_time / async_time:.1f}\ubc30 \ube60\ub984\")\n    except Exception as e:\n        print(f\"  \ube44\ub3d9\uae30 \ucc98\ub9ac \uc624\ub958: {e}\")\n\nsync_vs_async_comparison()\n</code></pre>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#8","title":"8. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter09_iterators_generators/#1_1","title":"\uc5f0\uc2b5 1: \ucee4\uc2a4\ud140 \ub370\uc774\ud130 \uad6c\uc870","text":"<p>\ub9ac\uc2a4\ud2b8\uc640 \ub515\uc154\ub108\ub9ac\uc758 \uae30\ub2a5\uc744 \uacb0\ud569\ud55c IndexedDict \ud074\ub798\uc2a4\ub97c \uad6c\ud604\ud558\uc138\uc694. \uc778\ub371\uc2a4\uc640 \ud0a4 \ubaa8\ub450\ub85c \uc811\uadfc \uac00\ub2a5\ud558\uace0, \uc774\ud130\ub808\uc774\uc158\uc744 \uc9c0\uc6d0\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#2_1","title":"\uc5f0\uc2b5 2: \ub85c\uadf8 \ubd84\uc11d\uae30","text":"<p>\ub300\uc6a9\ub7c9 \ub85c\uadf8 \ud30c\uc77c\uc744 \ubd84\uc11d\ud558\ub294 \uc81c\ub108\ub808\uc774\ud130\ub97c \uad6c\ud604\ud558\uc138\uc694. \ud2b9\uc815 \ud328\ud134\uc744 \ucc3e\uace0, \uc2dc\uac04\ub300\ubcc4 \ud1b5\uacc4\ub97c \uacc4\uc0b0\ud558\uba70, \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#3_1","title":"\uc5f0\uc2b5 3: \ub370\uc774\ud130 \uc2a4\ud2b8\ub9bc \ucc98\ub9ac\uae30","text":"<p>\uc2e4\uc2dc\uac04 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9bc\uc744 \ucc98\ub9ac\ud558\ub294 \ud30c\uc774\ud504\ub77c\uc778\uc744 \uad6c\ud604\ud558\uc138\uc694. \ud544\ud130\ub9c1, \ubcc0\ud658, \uc9d1\uacc4 \uae30\ub2a5\uc744 \uc81c\ub108\ub808\uc774\ud130\ub85c \uad6c\ud604\ud558\uace0 \uc870\ud569 \uac00\ub2a5\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#4","title":"\uc5f0\uc2b5 4: \ud30c\uc77c \uc2dc\uc2a4\ud15c \ud0d0\uc0c9\uae30","text":"<p>\ub514\ub809\ud1a0\ub9ac \uad6c\uc870\ub97c \uc7ac\uadc0\uc801\uc73c\ub85c \ud0d0\uc0c9\ud558\ub294 \uc81c\ub108\ub808\uc774\ud130\ub97c \uad6c\ud604\ud558\uc138\uc694. \ud30c\uc77c \ud06c\uae30, \ud655\uc7a5\uc790\ubcc4 \ud544\ud130\ub9c1, \uae4a\uc774 \uc81c\ud55c \ub4f1\uc758 \uae30\ub2a5\uc744 \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\uc774\ud130\ub808\uc774\ud130\uc640 \uc774\ud130\ub7ec\ube14: \uae30\ubcf8 \uac1c\ub150\uacfc \ud504\ub85c\ud1a0\ucf5c \uc774\ud574</li> <li>\ucee4\uc2a4\ud140 \uc774\ud130\ub808\uc774\ud130: \ud074\ub798\uc2a4 \uae30\ubc18 \uc774\ud130\ub808\uc774\ud130 \uad6c\ud604</li> <li>\uc81c\ub108\ub808\uc774\ud130 \ud568\uc218: yield\ub97c \uc0ac\uc6a9\ud55c \uac04\ud3b8\ud55c \uc774\ud130\ub808\uc774\ud130 \uc0dd\uc131</li> <li>\uace0\uae09 yield: send, \uc608\uc678 \ucc98\ub9ac, yield from \ud65c\uc6a9</li> <li>itertools \ubaa8\ub4c8: \uac15\ub825\ud55c \uc774\ud130\ub808\uc774\ud130 \uc720\ud2f8\ub9ac\ud2f0 \ud65c\uc6a9</li> <li>\uba54\ubaa8\ub9ac \ud6a8\uc728\uc131: \ub300\uc6a9\ub7c9 \ub370\uc774\ud130\uc758 \uc2a4\ud2b8\ub9ac\ubc0d \ucc98\ub9ac</li> <li>\ube44\ub3d9\uae30 \uae30\ucd08: \ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130\uc640 \uc81c\ub108\ub808\uc774\ud130 \uc18c\uac1c</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \uba40\ud2f0\uc2a4\ub808\ub529\uacfc \ube44\ub3d9\uae30 \ucc98\ub9ac\ub97c \ub354 \uae4a\uc774 \ud559\uc2b5\ud558\uc5ec \ud6a8\uc728\uc801\uc778 \ub3d9\uc2dc\uc131 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ubc30\uc6b0\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter09_iterators_generators/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\uc774\ud130\ub808\uc774\ud130\ub294 \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \ucc98\ub9ac\uc758 \ud575\uc2ec\uc785\ub2c8\ub2e4</li> <li>\uc81c\ub108\ub808\uc774\ud130\ub294 \uc774\ud130\ub808\uc774\ud130\ub97c \uc27d\uac8c \ub9cc\ub4dc\ub294 \uac15\ub825\ud55c \ub3c4\uad6c\uc785\ub2c8\ub2e4</li> <li>yield\ub294 \ub2e8\uc21c\ud55c \uac12 \ubc18\ud658 \uc774\uc0c1\uc758 \ub2e4\uc591\ud55c \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4</li> <li>itertools\ub294 \ubcf5\uc7a1\ud55c \uc774\ud130\ub808\uc774\uc158 \ud328\ud134\uc744 \uac04\ub2e8\ud558\uac8c \uad6c\ud604\ud558\uac8c \ud574\uc90d\ub2c8\ub2e4</li> <li>\ub300\uc6a9\ub7c9 \ub370\uc774\ud130\ub294 \uc2a4\ud2b8\ub9ac\ubc0d \ubc29\uc2dd\uc73c\ub85c \ucc98\ub9ac\ud574\uc57c \ud569\ub2c8\ub2e4</li> <li>\ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130\ub294 I/O \uc9d1\uc57d\uc801 \uc791\uc5c5\uc5d0\uc11c \uc131\ub2a5\uc744 \ud06c\uac8c \uac1c\uc120\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> </ul>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/","title":"Chapter 10: \uba40\ud2f0\uc2a4\ub808\ub529\uacfc \ube44\ub3d9\uae30 \ucc98\ub9ac \uae30\ucd08","text":""},{"location":"tutorials/intermediate/chapter10_multithreading_async/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131\uc758 \uac1c\ub150\uacfc \ucc28\uc774\uc810 \uc774\ud574\ud558\uae30 - \uc2a4\ub808\ub529\uc744 \ud65c\uc6a9\ud55c \ub3d9\uc2dc \uc791\uc5c5 \ucc98\ub9ac\ud558\uae30 - \uba40\ud2f0\ud504\ub85c\uc138\uc2f1\uc744 \ud1b5\ud55c \ubcd1\ub82c \ucc98\ub9ac \uad6c\ud604\ud558\uae30 - asyncio\ub97c \uc0ac\uc6a9\ud55c \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d \ub9c8\uc2a4\ud130\ud558\uae30 - \uc2a4\ub808\ub4dc \uac04 \ub3d9\uae30\ud654\uc640 \ub370\uc774\ud130 \uacf5\uc720 \ucc98\ub9ac\ud558\uae30 - \uc801\uc808\ud55c \ub3d9\uc2dc\uc131 \ud328\ud134 \uc120\ud0dd\ud558\uace0 \uc131\ub2a5 \ucd5c\uc801\ud654\ud558\uae30 - GIL(Global Interpreter Lock)\uc758 \uc601\ud5a5 \uc774\ud574\ud558\uae30</p>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#1","title":"1. \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131 \uae30\ucd08","text":""},{"location":"tutorials/intermediate/chapter10_multithreading_async/#11","title":"1.1 \uac1c\ub150 \uc774\ud574","text":"<pre><code>print(\"=== \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131 \uae30\ucd08 ===\")\n\nimport time\nimport threading\nimport multiprocessing\nimport asyncio\nfrom concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor\n\ndef demonstrate_concepts():\n    \"\"\"\ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131 \uac1c\ub150 \uc124\uba85\"\"\"\n\n    print(\"1. \ub3d9\uc2dc\uc131 vs \ubcd1\ub82c\uc131:\")\n    print(\"  \ub3d9\uc2dc\uc131(Concurrency): \uc5ec\ub7ec \uc791\uc5c5\uc744 \ubc88\uac08\uc544\uac00\uba70 \ucc98\ub9ac (\ub17c\ub9ac\uc801\uc73c\ub85c \ub3d9\uc2dc)\")\n    print(\"  \ubcd1\ub82c\uc131(Parallelism): \uc5ec\ub7ec \uc791\uc5c5\uc744 \uc2e4\uc81c\ub85c \ub3d9\uc2dc\uc5d0 \ucc98\ub9ac (\ubb3c\ub9ac\uc801\uc73c\ub85c \ub3d9\uc2dc)\")\n    print()\n\n    print(\"2. Python\uc5d0\uc11c\uc758 \uc120\ud0dd \uae30\uc900:\")\n    print(\"  I/O \ubc14\uc6b4\ub4dc \uc791\uc5c5: \uc2a4\ub808\ub529 \ub610\ub294 \ube44\ub3d9\uae30\")\n    print(\"  CPU \ubc14\uc6b4\ub4dc \uc791\uc5c5: \uba40\ud2f0\ud504\ub85c\uc138\uc2f1\")\n    print(\"  \ub2e8\uc77c \uc2a4\ub808\ub4dc \ube44\ub3d9\uae30: asyncio\")\n\ndemonstrate_concepts()\n\n# CPU \uc9d1\uc57d\uc801 \uc791\uc5c5 \uc608\uc81c\ndef cpu_intensive_task(n, task_id):\n    \"\"\"CPU \uc9d1\uc57d\uc801 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n    start_time = time.time()\n    total = 0\n    for i in range(n):\n        total += i ** 2\n    end_time = time.time()\n    print(f\"  \uc791\uc5c5 {task_id}: {end_time - start_time:.2f}\ucd08, \uacb0\uacfc: {total}\")\n    return total\n\n# I/O \uc9d1\uc57d\uc801 \uc791\uc5c5 \uc608\uc81c\ndef io_intensive_task(duration, task_id):\n    \"\"\"I/O \uc9d1\uc57d\uc801 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n    start_time = time.time()\n    time.sleep(duration)  # I/O \ub300\uae30 \uc2dc\ubbac\ub808\uc774\uc158\n    end_time = time.time()\n    print(f\"  I/O \uc791\uc5c5 {task_id}: {end_time - start_time:.2f}\ucd08 \uc644\ub8cc\")\n    return f\"\uacb0\uacfc {task_id}\"\n\ndef sequential_execution():\n    \"\"\"\uc21c\ucc28 \uc2e4\ud589 \uc608\uc81c\"\"\"\n\n    print(f\"\\n3. \uc21c\ucc28 \uc2e4\ud589:\")\n    start_time = time.time()\n\n    # CPU \uc791\uc5c5\ub4e4\n    for i in range(3):\n        cpu_intensive_task(1000000, i+1)\n\n    end_time = time.time()\n    print(f\"  \ucd1d \uc2e4\ud589 \uc2dc\uac04: {end_time - start_time:.2f}\ucd08\")\n\nsequential_execution()\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#12-python-gil-global-interpreter-lock","title":"1.2 Python\uc758 GIL (Global Interpreter Lock)","text":"<pre><code>print(\"\\n=== Python\uc758 GIL ===\")\n\ndef demonstrate_gil():\n    \"\"\"GIL\uc758 \uc601\ud5a5 \uc124\uba85\"\"\"\n\n    print(\"4. GIL (Global Interpreter Lock):\")\n    print(\"  - \ud55c \ubc88\uc5d0 \ud558\ub098\uc758 \uc2a4\ub808\ub4dc\ub9cc Python \ubc14\uc774\ud2b8\ucf54\ub4dc \uc2e4\ud589 \uac00\ub2a5\")\n    print(\"  - CPU \uc9d1\uc57d\uc801 \uc791\uc5c5\uc5d0\uc11c\ub294 \uba40\ud2f0\uc2a4\ub808\ub529 \ud6a8\uacfc \uc81c\ud55c\uc801\")\n    print(\"  - I/O \uc791\uc5c5 \uc911\uc5d0\ub294 GIL\uc774 \ud574\uc81c\ub418\uc5b4 \uc2a4\ub808\ub529 \ud6a8\uacfc\uc801\")\n    print(\"  - C \ud655\uc7a5 \ubaa8\ub4c8\uc5d0\uc11c\ub294 GIL \ud574\uc81c \uac00\ub2a5\")\n    print()\n\n    print(\"5. \uac01 \ubc29\uc2dd\uc758 \ud2b9\uc9d5:\")\n    print(\"  \uc2a4\ub808\ub529: \uba54\ubaa8\ub9ac \uacf5\uc720, \ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d \ube60\ub984, GIL \uc81c\uc57d\")\n    print(\"  \ud504\ub85c\uc138\uc2f1: \ub3c5\ub9bd\uc801 \uba54\ubaa8\ub9ac, \uc9c4\uc815\ud55c \ubcd1\ub82c\uc131, \uc624\ubc84\ud5e4\ub4dc \ud07c\")\n    print(\"  \ube44\ub3d9\uae30: \ub2e8\uc77c \uc2a4\ub808\ub4dc, \uc774\ubca4\ud2b8 \ub8e8\ud504, I/O \ucd5c\uc801\ud654\")\n\ndemonstrate_gil()\n\n# GIL \uc601\ud5a5 \ud655\uc778 \uc2e4\ud5d8\nimport threading\nimport time\n\ndef count_up(n):\n    \"\"\"\uce74\uc6b4\ud305 \uc791\uc5c5\"\"\"\n    for i in range(n):\n        pass\n\ndef measure_threading_performance():\n    \"\"\"\uc2a4\ub808\ub529 \uc131\ub2a5 \uce21\uc815\"\"\"\n\n    print(f\"\\n6. GIL \uc601\ud5a5 \uc2e4\ud5d8:\")\n    n = 50000000  # 5\ucc9c\ub9cc \ubc88 \ubc18\ubcf5\n\n    # \ub2e8\uc77c \uc2a4\ub808\ub4dc\n    start_time = time.time()\n    count_up(n)\n    single_time = time.time() - start_time\n    print(f\"  \ub2e8\uc77c \uc2a4\ub808\ub4dc: {single_time:.2f}\ucd08\")\n\n    # \uba40\ud2f0 \uc2a4\ub808\ub4dc (2\uac1c)\n    start_time = time.time()\n\n    thread1 = threading.Thread(target=count_up, args=(n//2,))\n    thread2 = threading.Thread(target=count_up, args=(n//2,))\n\n    thread1.start()\n    thread2.start()\n\n    thread1.join()\n    thread2.join()\n\n    multi_time = time.time() - start_time\n    print(f\"  \uba40\ud2f0 \uc2a4\ub808\ub4dc: {multi_time:.2f}\ucd08\")\n    print(f\"  \uc131\ub2a5 \ube44\uc728: {single_time / multi_time:.2f}\ubc30\")\n\n    if multi_time &gt;= single_time:\n        print(\"  \u2192 GIL\ub85c \uc778\ud574 \uba40\ud2f0\uc2a4\ub808\ub529\uc774 \ub354 \ub290\ub9bc\")\n    else:\n        print(\"  \u2192 \uba40\ud2f0\uc2a4\ub808\ub529\uc774 \ube60\ub984\")\n\n# \uc548\uc804\ud55c \ud658\uacbd\uc5d0\uc11c\ub9cc \uc2e4\ud589\ntry:\n    measure_threading_performance()\nexcept:\n    print(\"  (\uc131\ub2a5 \uce21\uc815\uc740 \ud658\uacbd\uc5d0 \ub530\ub77c \uc81c\ud55c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4)\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#2-threading","title":"2. \uc2a4\ub808\ub529 (Threading)","text":""},{"location":"tutorials/intermediate/chapter10_multithreading_async/#21","title":"2.1 \uae30\ubcf8 \uc2a4\ub808\ub529","text":"<pre><code>print(\"\\n=== \uc2a4\ub808\ub529 \uae30\ucd08 ===\")\n\nimport threading\nimport time\nimport queue\n\ndef worker_function(name, duration):\n    \"\"\"\uc6cc\ucee4 \ud568\uc218\"\"\"\n    print(f\"  \uc2a4\ub808\ub4dc {name} \uc2dc\uc791\")\n    time.sleep(duration)\n    print(f\"  \uc2a4\ub808\ub4dc {name} \uc644\ub8cc ({duration}\ucd08)\")\n    return f\"\uacb0\uacfc {name}\"\n\ndef basic_threading():\n    \"\"\"\uae30\ubcf8 \uc2a4\ub808\ub529 \uc0ac\uc6a9\ubc95\"\"\"\n\n    print(\"1. \uae30\ubcf8 \uc2a4\ub808\ub4dc \uc0dd\uc131\uacfc \uc2e4\ud589:\")\n\n    # \uc2a4\ub808\ub4dc \uc0dd\uc131 \ubc29\ubc95 1: Thread \ud074\ub798\uc2a4 \uc9c1\uc811 \uc0ac\uc6a9\n    thread1 = threading.Thread(target=worker_function, args=(\"A\", 1))\n    thread2 = threading.Thread(target=worker_function, args=(\"B\", 2))\n\n    start_time = time.time()\n\n    # \uc2a4\ub808\ub4dc \uc2dc\uc791\n    thread1.start()\n    thread2.start()\n\n    # \uc2a4\ub808\ub4dc \uc644\ub8cc \ub300\uae30\n    thread1.join()\n    thread2.join()\n\n    end_time = time.time()\n    print(f\"  \ucd1d \uc2e4\ud589 \uc2dc\uac04: {end_time - start_time:.2f}\ucd08\")\n\nbasic_threading()\n\nclass WorkerThread(threading.Thread):\n    \"\"\"\ucee4\uc2a4\ud140 \uc2a4\ub808\ub4dc \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, name, task_queue, result_queue):\n        super().__init__()\n        self.name = name\n        self.task_queue = task_queue\n        self.result_queue = result_queue\n        self.daemon = True  # \uba54\uc778 \ud504\ub85c\uadf8\ub7a8 \uc885\ub8cc \uc2dc \uac19\uc774 \uc885\ub8cc\n\n    def run(self):\n        \"\"\"\uc2a4\ub808\ub4dc \uc2e4\ud589 \uba54\uc11c\ub4dc\"\"\"\n        while True:\n            try:\n                task = self.task_queue.get(timeout=1)\n                if task is None:  # \uc885\ub8cc \uc2e0\ud638\n                    break\n\n                # \uc791\uc5c5 \ucc98\ub9ac\n                print(f\"  {self.name}: \uc791\uc5c5 '{task}' \ucc98\ub9ac \uc911...\")\n                time.sleep(0.5)  # \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n                result = f\"{task}_\uc644\ub8cc\"\n\n                self.result_queue.put(result)\n                self.task_queue.task_done()\n\n            except queue.Empty:\n                break\n\n        print(f\"  {self.name}: \uc885\ub8cc\")\n\ndef custom_thread_example():\n    \"\"\"\ucee4\uc2a4\ud140 \uc2a4\ub808\ub4dc \ud074\ub798\uc2a4 \uc0ac\uc6a9\"\"\"\n\n    print(f\"\\n2. \ucee4\uc2a4\ud140 \uc2a4\ub808\ub4dc \ud074\ub798\uc2a4:\")\n\n    # \ud050 \uc0dd\uc131\n    task_queue = queue.Queue()\n    result_queue = queue.Queue()\n\n    # \uc791\uc5c5 \ucd94\uac00\n    tasks = [\"\uc791\uc5c51\", \"\uc791\uc5c52\", \"\uc791\uc5c53\", \"\uc791\uc5c54\", \"\uc791\uc5c55\"]\n    for task in tasks:\n        task_queue.put(task)\n\n    # \uc6cc\ucee4 \uc2a4\ub808\ub4dc \uc0dd\uc131\n    workers = []\n    for i in range(3):\n        worker = WorkerThread(f\"\uc6cc\ucee4{i+1}\", task_queue, result_queue)\n        worker.start()\n        workers.append(worker)\n\n    # \ubaa8\ub4e0 \uc791\uc5c5 \uc644\ub8cc \ub300\uae30\n    task_queue.join()\n\n    # \uc6cc\ucee4 \uc885\ub8cc\n    for _ in workers:\n        task_queue.put(None)\n\n    for worker in workers:\n        worker.join()\n\n    # \uacb0\uacfc \uc218\uc9d1\n    results = []\n    while not result_queue.empty():\n        results.append(result_queue.get())\n\n    print(f\"  \uacb0\uacfc: {results}\")\n\ncustom_thread_example()\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#22","title":"2.2 \uc2a4\ub808\ub4dc \ub3d9\uae30\ud654","text":"<pre><code>print(\"\\n=== \uc2a4\ub808\ub4dc \ub3d9\uae30\ud654 ===\")\n\nimport threading\nimport time\nimport random\n\n# \uacf5\uc720 \uc790\uc6d0\nshared_counter = 0\nshared_list = []\n\ndef unsafe_increment(name, iterations):\n    \"\"\"\uc548\uc804\ud558\uc9c0 \uc54a\uc740 \uce74\uc6b4\ud130 \uc99d\uac00\"\"\"\n    global shared_counter\n\n    for i in range(iterations):\n        # \uc774 \ubd80\ubd84\uc5d0\uc11c \ub808\uc774\uc2a4 \ucee8\ub514\uc158 \ubc1c\uc0dd \uac00\ub2a5\n        temp = shared_counter\n        temp += 1\n        shared_counter = temp\n\n    print(f\"  {name}: {iterations}\ubc88 \uc99d\uac00 \uc644\ub8cc\")\n\ndef demonstrate_race_condition():\n    \"\"\"\ub808\uc774\uc2a4 \ucee8\ub514\uc158 \uc2dc\uc5f0\"\"\"\n\n    print(\"3. \ub808\uc774\uc2a4 \ucee8\ub514\uc158 \ubb38\uc81c:\")\n\n    global shared_counter\n    shared_counter = 0\n\n    # \ub450 \uc2a4\ub808\ub4dc\uac00 \ub3d9\uc2dc\uc5d0 \uce74\uc6b4\ud130 \uc99d\uac00\n    thread1 = threading.Thread(target=unsafe_increment, args=(\"\uc2a4\ub808\ub4dc1\", 1000))\n    thread2 = threading.Thread(target=unsafe_increment, args=(\"\uc2a4\ub808\ub4dc2\", 1000))\n\n    thread1.start()\n    thread2.start()\n\n    thread1.join()\n    thread2.join()\n\n    print(f\"  \uc608\uc0c1 \uacb0\uacfc: 2000\")\n    print(f\"  \uc2e4\uc81c \uacb0\uacfc: {shared_counter}\")\n    if shared_counter != 2000:\n        print(\"  \u2192 \ub808\uc774\uc2a4 \ucee8\ub514\uc158 \ubc1c\uc0dd!\")\n\ndemonstrate_race_condition()\n\n# Lock\uc744 \uc0ac\uc6a9\ud55c \uc548\uc804\ud55c \ubc84\uc804\ncounter_lock = threading.Lock()\nsafe_counter = 0\n\ndef safe_increment(name, iterations):\n    \"\"\"Lock\uc744 \uc0ac\uc6a9\ud55c \uc548\uc804\ud55c \uce74\uc6b4\ud130 \uc99d\uac00\"\"\"\n    global safe_counter\n\n    for i in range(iterations):\n        with counter_lock:  # Lock \ud68d\ub4dd\n            temp = safe_counter\n            temp += 1\n            safe_counter = temp\n\n    print(f\"  {name}: {iterations}\ubc88 \uc548\uc804\ud558\uac8c \uc99d\uac00 \uc644\ub8cc\")\n\ndef demonstrate_lock():\n    \"\"\"Lock\uc744 \uc0ac\uc6a9\ud55c \ub3d9\uae30\ud654\"\"\"\n\n    print(f\"\\n4. Lock\uc744 \uc0ac\uc6a9\ud55c \ub3d9\uae30\ud654:\")\n\n    global safe_counter\n    safe_counter = 0\n\n    thread1 = threading.Thread(target=safe_increment, args=(\"\uc548\uc804\uc2a4\ub808\ub4dc1\", 1000))\n    thread2 = threading.Thread(target=safe_increment, args=(\"\uc548\uc804\uc2a4\ub808\ub4dc2\", 1000))\n\n    thread1.start()\n    thread2.start()\n\n    thread1.join()\n    thread2.join()\n\n    print(f\"  \uc608\uc0c1 \uacb0\uacfc: 2000\")\n    print(f\"  \uc2e4\uc81c \uacb0\uacfc: {safe_counter}\")\n    print(\"  \u2192 Lock\uc73c\ub85c \ub3d9\uae30\ud654 \uc131\uacf5!\")\n\ndemonstrate_lock()\n\ndef demonstrate_other_sync_primitives():\n    \"\"\"\ub2e4\ub978 \ub3d9\uae30\ud654 \ud504\ub9ac\ubbf8\ud2f0\ube0c\ub4e4\"\"\"\n\n    print(f\"\\n5. \ub2e4\ub978 \ub3d9\uae30\ud654 \ub3c4\uad6c\ub4e4:\")\n\n    # RLock (\uc7ac\uadc0 \ub77d)\n    rlock = threading.RLock()\n\n    def recursive_function(depth):\n        with rlock:\n            print(f\"    \uc7ac\uadc0 \uae4a\uc774: {depth}\")\n            if depth &gt; 0:\n                recursive_function(depth - 1)\n\n    print(\"  RLock (\uc7ac\uadc0 \ub77d) \uc608\uc81c:\")\n    thread = threading.Thread(target=recursive_function, args=(3,))\n    thread.start()\n    thread.join()\n\n    # Semaphore (\uc138\ub9c8\ud3ec\uc5b4)\n    print(f\"\\n  Semaphore (\uc138\ub9c8\ud3ec\uc5b4) \uc608\uc81c:\")\n    semaphore = threading.Semaphore(2)  # \ucd5c\ub300 2\uac1c \uc2a4\ub808\ub4dc\ub9cc \ub3d9\uc2dc \uc811\uadfc\n\n    def limited_resource(name):\n        with semaphore:\n            print(f\"    {name}: \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9 \uc911...\")\n            time.sleep(1)\n            print(f\"    {name}: \ub9ac\uc18c\uc2a4 \ud574\uc81c\")\n\n    # 5\uac1c \uc2a4\ub808\ub4dc\uac00 \ub3d9\uc2dc\uc5d0 \uc2dc\uc791\ud558\uc9c0\ub9cc 2\uac1c\uc529\ub9cc \uc2e4\ud589\n    threads = []\n    for i in range(5):\n        t = threading.Thread(target=limited_resource, args=(f\"\uc2a4\ub808\ub4dc{i+1}\",))\n        threads.append(t)\n        t.start()\n\n    for t in threads:\n        t.join()\n\n    # Event (\uc774\ubca4\ud2b8)\n    print(f\"\\n  Event (\uc774\ubca4\ud2b8) \uc608\uc81c:\")\n    event = threading.Event()\n\n    def waiter(name):\n        print(f\"    {name}: \uc774\ubca4\ud2b8 \ub300\uae30 \uc911...\")\n        event.wait()\n        print(f\"    {name}: \uc774\ubca4\ud2b8 \uc218\uc2e0, \uc791\uc5c5 \uc2dc\uc791!\")\n\n    def setter():\n        time.sleep(2)\n        print(f\"    \uc774\ubca4\ud2b8 \ubc1c\uc0dd!\")\n        event.set()\n\n    # \ub300\uae30 \uc2a4\ub808\ub4dc\ub4e4\n    for i in range(3):\n        t = threading.Thread(target=waiter, args=(f\"\ub300\uae30\uc790{i+1}\",))\n        t.start()\n\n    # \uc774\ubca4\ud2b8 \uc124\uc815 \uc2a4\ub808\ub4dc\n    threading.Thread(target=setter).start()\n    time.sleep(3)  # \uacb0\uacfc \ud655\uc778\uc744 \uc704\ud55c \ub300\uae30\n\ndemonstrate_other_sync_primitives()\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#23","title":"2.3 \uc2a4\ub808\ub4dc \ud480","text":"<pre><code>print(\"\\n=== \uc2a4\ub808\ub4dc \ud480 ===\")\n\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nimport requests\nimport time\n\ndef download_simulation(url_id):\n    \"\"\"\ub2e4\uc6b4\ub85c\ub4dc \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n    # \uc2e4\uc81c\ub85c\ub294 requests\ub97c \uc0ac\uc6a9\ud558\uc9c0\ub9cc \uc5ec\uae30\uc11c\ub294 \uc2dc\ubbac\ub808\uc774\uc158\n    download_time = random.uniform(0.5, 2.0)\n    time.sleep(download_time)\n\n    result = {\n        'url_id': url_id,\n        'download_time': download_time,\n        'size': random.randint(1000, 5000)\n    }\n\n    print(f\"  \ub2e4\uc6b4\ub85c\ub4dc \uc644\ub8cc: URL {url_id} ({download_time:.2f}\ucd08)\")\n    return result\n\ndef thread_pool_example():\n    \"\"\"\uc2a4\ub808\ub4dc \ud480 \uc0ac\uc6a9 \uc608\uc81c\"\"\"\n\n    print(\"6. ThreadPoolExecutor \uc0ac\uc6a9:\")\n\n    urls = [f\"url_{i}\" for i in range(1, 6)]\n\n    # \uc21c\ucc28 \ucc98\ub9ac\n    print(f\"  \uc21c\ucc28 \ucc98\ub9ac:\")\n    start_time = time.time()\n    sequential_results = []\n    for url in urls:\n        result = download_simulation(url)\n        sequential_results.append(result)\n    sequential_time = time.time() - start_time\n    print(f\"    \uc21c\ucc28 \ucc98\ub9ac \uc2dc\uac04: {sequential_time:.2f}\ucd08\")\n\n    # \uc2a4\ub808\ub4dc \ud480 \ucc98\ub9ac\n    print(f\"\\n  \uc2a4\ub808\ub4dc \ud480 \ucc98\ub9ac:\")\n    start_time = time.time()\n\n    with ThreadPoolExecutor(max_workers=3) as executor:\n        # \ubc29\ubc95 1: map \uc0ac\uc6a9\n        results = list(executor.map(download_simulation, urls))\n\n    pool_time = time.time() - start_time\n    print(f\"    \uc2a4\ub808\ub4dc \ud480 \ucc98\ub9ac \uc2dc\uac04: {pool_time:.2f}\ucd08\")\n    print(f\"    \uc131\ub2a5 \ud5a5\uc0c1: {sequential_time / pool_time:.2f}\ubc30\")\n\nthread_pool_example()\n\ndef advanced_thread_pool():\n    \"\"\"\uace0\uae09 \uc2a4\ub808\ub4dc \ud480 \uc0ac\uc6a9\ubc95\"\"\"\n\n    print(f\"\\n7. \uace0\uae09 \uc2a4\ub808\ub4dc \ud480 \ud328\ud134:\")\n\n    def process_task(task_id):\n        \"\"\"\uc791\uc5c5 \ucc98\ub9ac\"\"\"\n        processing_time = random.uniform(1, 3)\n        time.sleep(processing_time)\n\n        # \uc2e4\ud328 \uc2dc\ubbac\ub808\uc774\uc158\n        if random.random() &lt; 0.2:  # 20% \ud655\ub960\ub85c \uc2e4\ud328\n            raise Exception(f\"\uc791\uc5c5 {task_id} \uc2e4\ud328\")\n\n        return f\"\uc791\uc5c5 {task_id} \uc131\uacf5 ({processing_time:.2f}\ucd08)\"\n\n    tasks = list(range(1, 8))\n\n    with ThreadPoolExecutor(max_workers=3) as executor:\n        # \ubc29\ubc95 2: submit\uacfc as_completed \uc0ac\uc6a9\n        future_to_task = {executor.submit(process_task, task): task for task in tasks}\n\n        print(f\"  \uc2e4\uc2dc\uac04 \uacb0\uacfc \ucc98\ub9ac:\")\n        for future in as_completed(future_to_task):\n            task = future_to_task[future]\n            try:\n                result = future.result()\n                print(f\"    \u2713 {result}\")\n            except Exception as exc:\n                print(f\"    \u2717 \uc791\uc5c5 {task}: {exc}\")\n\nadvanced_thread_pool()\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#3-multiprocessing","title":"3. \uba40\ud2f0\ud504\ub85c\uc138\uc2f1 (Multiprocessing)","text":""},{"location":"tutorials/intermediate/chapter10_multithreading_async/#31","title":"3.1 \uae30\ubcf8 \ud504\ub85c\uc138\uc2f1","text":"<pre><code>print(\"\\n=== \uba40\ud2f0\ud504\ub85c\uc138\uc2f1 \uae30\ucd08 ===\")\n\nimport multiprocessing\nimport time\nimport os\n\ndef cpu_bound_task(n, process_id):\n    \"\"\"CPU \uc9d1\uc57d\uc801 \uc791\uc5c5\"\"\"\n    start_time = time.time()\n    result = sum(i * i for i in range(n))\n    end_time = time.time()\n\n    print(f\"  \ud504\ub85c\uc138\uc2a4 {process_id} (PID: {os.getpid()}): \"\n          f\"{end_time - start_time:.2f}\ucd08, \uacb0\uacfc: {result}\")\n    return result\n\ndef basic_multiprocessing():\n    \"\"\"\uae30\ubcf8 \uba40\ud2f0\ud504\ub85c\uc138\uc2f1\"\"\"\n\n    print(\"8. \uae30\ubcf8 \ud504\ub85c\uc138\uc2a4 \uc0dd\uc131:\")\n    print(f\"  \uba54\uc778 \ud504\ub85c\uc138\uc2a4 PID: {os.getpid()}\")\n\n    # \ud504\ub85c\uc138\uc2a4 \uc0dd\uc131\n    processes = []\n    start_time = time.time()\n\n    for i in range(2):\n        p = multiprocessing.Process(\n            target=cpu_bound_task, \n            args=(2000000, i+1)\n        )\n        processes.append(p)\n        p.start()\n\n    # \ubaa8\ub4e0 \ud504\ub85c\uc138\uc2a4 \uc644\ub8cc \ub300\uae30\n    for p in processes:\n        p.join()\n\n    end_time = time.time()\n    print(f\"  \ucd1d \uc2e4\ud589 \uc2dc\uac04: {end_time - start_time:.2f}\ucd08\")\n\n# multiprocessing \ubaa8\ub4c8\uc740 \uba54\uc778 \ubaa8\ub4c8\uc5d0\uc11c\ub9cc \uc2e4\ud589\ub418\uc5b4\uc57c \ud568\nif __name__ == '__main__':\n    try:\n        basic_multiprocessing()\n    except:\n        print(\"  (\uc77c\ubd80 \ud658\uacbd\uc5d0\uc11c\ub294 \uba40\ud2f0\ud504\ub85c\uc138\uc2f1\uc774 \uc81c\ud55c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4)\")\n\ndef demonstrate_process_communication():\n    \"\"\"\ud504\ub85c\uc138\uc2a4 \uac04 \ud1b5\uc2e0\"\"\"\n\n    print(f\"\\n9. \ud504\ub85c\uc138\uc2a4 \uac04 \ud1b5\uc2e0:\")\n\n    def worker_with_queue(queue, process_id):\n        \"\"\"\ud050\ub97c \uc0ac\uc6a9\ud558\ub294 \uc6cc\ucee4\"\"\"\n        for i in range(3):\n            item = f\"\ud504\ub85c\uc138\uc2a4{process_id}_\ud56d\ubaa9{i+1}\"\n            queue.put(item)\n            print(f\"  \ud504\ub85c\uc138\uc2a4 {process_id}: {item} \uc0dd\uc131\")\n            time.sleep(0.5)\n\n    def consumer(queue):\n        \"\"\"\ud050\uc5d0\uc11c \uc18c\ube44\ud558\ub294 \ud504\ub85c\uc138\uc2a4\"\"\"\n        items = []\n        while True:\n            try:\n                item = queue.get(timeout=2)\n                items.append(item)\n                print(f\"  \uc18c\ube44\uc790: {item} \uc218\uc2e0\")\n            except:\n                break\n        return items\n\n    try:\n        # \ud050 \uc0dd\uc131\n        queue = multiprocessing.Queue()\n\n        # \uc0dd\uc0b0\uc790 \ud504\ub85c\uc138\uc2a4\ub4e4\n        producers = []\n        for i in range(2):\n            p = multiprocessing.Process(\n                target=worker_with_queue, \n                args=(queue, i+1)\n            )\n            producers.append(p)\n            p.start()\n\n        # \uc0dd\uc0b0\uc790 \uc644\ub8cc \ub300\uae30\n        for p in producers:\n            p.join()\n\n        # \uc18c\ube44\uc790\uc5d0\uc11c \uacb0\uacfc \uc218\uc9d1\n        results = consumer(queue)\n        print(f\"  \uc218\uc9d1\ub41c \ud56d\ubaa9\ub4e4: {results}\")\n\n    except:\n        print(\"  (\ud504\ub85c\uc138\uc2a4 \uac04 \ud1b5\uc2e0 \uc608\uc81c\ub294 \ud658\uacbd\uc5d0 \ub530\ub77c \uc81c\ud55c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4)\")\n\ndemonstrate_process_communication()\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#32","title":"3.2 \ud504\ub85c\uc138\uc2a4 \ud480","text":"<pre><code>print(\"\\n=== \ud504\ub85c\uc138\uc2a4 \ud480 ===\")\n\nfrom concurrent.futures import ProcessPoolExecutor\nimport multiprocessing\n\ndef cpu_intensive_calculation(n):\n    \"\"\"CPU \uc9d1\uc57d\uc801 \uacc4\uc0b0\"\"\"\n    return sum(i * i for i in range(n))\n\ndef process_pool_example():\n    \"\"\"\ud504\ub85c\uc138\uc2a4 \ud480 \uc0ac\uc6a9 \uc608\uc81c\"\"\"\n\n    print(\"10. ProcessPoolExecutor \uc0ac\uc6a9:\")\n\n    numbers = [1000000, 1500000, 2000000, 2500000]\n\n    # \uc21c\ucc28 \ucc98\ub9ac\n    print(f\"  \uc21c\ucc28 \ucc98\ub9ac:\")\n    start_time = time.time()\n    sequential_results = [cpu_intensive_calculation(n) for n in numbers]\n    sequential_time = time.time() - start_time\n    print(f\"    \uc21c\ucc28 \ucc98\ub9ac \uc2dc\uac04: {sequential_time:.2f}\ucd08\")\n\n    # \ud504\ub85c\uc138\uc2a4 \ud480 \ucc98\ub9ac\n    print(f\"  \ud504\ub85c\uc138\uc2a4 \ud480 \ucc98\ub9ac:\")\n    try:\n        start_time = time.time()\n\n        with ProcessPoolExecutor(max_workers=2) as executor:\n            parallel_results = list(executor.map(cpu_intensive_calculation, numbers))\n\n        parallel_time = time.time() - start_time\n        print(f\"    \ud504\ub85c\uc138\uc2a4 \ud480 \ucc98\ub9ac \uc2dc\uac04: {parallel_time:.2f}\ucd08\")\n        print(f\"    \uc131\ub2a5 \ud5a5\uc0c1: {sequential_time / parallel_time:.2f}\ubc30\")\n\n        # \uacb0\uacfc \uac80\uc99d\n        if sequential_results == parallel_results:\n            print(f\"    \u2713 \uacb0\uacfc \uc77c\uce58 \ud655\uc778\")\n\n    except:\n        print(\"    (\ud504\ub85c\uc138\uc2a4 \ud480\uc740 \uc77c\ubd80 \ud658\uacbd\uc5d0\uc11c \uc81c\ud55c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4)\")\n\nprocess_pool_example()\n\ndef shared_memory_example():\n    \"\"\"\uacf5\uc720 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\"\"\"\n\n    print(f\"\\n11. \uacf5\uc720 \uba54\ubaa8\ub9ac:\")\n\n    def increment_shared_value(shared_val, lock, process_id):\n        \"\"\"\uacf5\uc720 \uac12 \uc99d\uac00\"\"\"\n        for i in range(5):\n            with lock:\n                temp = shared_val.value\n                temp += 1\n                shared_val.value = temp\n                print(f\"  \ud504\ub85c\uc138\uc2a4 {process_id}: \uac12\uc744 {shared_val.value}\ub85c \uc99d\uac00\")\n                time.sleep(0.1)\n\n    try:\n        # \uacf5\uc720 \ubcc0\uc218\uc640 \ub77d \uc0dd\uc131\n        shared_value = multiprocessing.Value('i', 0)  # \uc815\uc218\ud615 \uacf5\uc720 \ubcc0\uc218\n        lock = multiprocessing.Lock()\n\n        # \ud504\ub85c\uc138\uc2a4\ub4e4 \uc0dd\uc131\n        processes = []\n        for i in range(2):\n            p = multiprocessing.Process(\n                target=increment_shared_value,\n                args=(shared_value, lock, i+1)\n            )\n            processes.append(p)\n            p.start()\n\n        # \uc644\ub8cc \ub300\uae30\n        for p in processes:\n            p.join()\n\n        print(f\"  \ucd5c\uc885 \uac12: {shared_value.value}\")\n\n    except:\n        print(\"  (\uacf5\uc720 \uba54\ubaa8\ub9ac \uc608\uc81c\ub294 \ud658\uacbd\uc5d0 \ub530\ub77c \uc81c\ud55c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4)\")\n\nshared_memory_example()\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#4-asyncio","title":"4. \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d (Asyncio)","text":""},{"location":"tutorials/intermediate/chapter10_multithreading_async/#41","title":"4.1 \uae30\ubcf8 \ube44\ub3d9\uae30 \uac1c\ub150","text":"<pre><code>print(\"\\n=== \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08 ===\")\n\nimport asyncio\nimport time\nimport aiohttp\nimport random\n\nasync def async_task(name, duration):\n    \"\"\"\ube44\ub3d9\uae30 \uc791\uc5c5\"\"\"\n    print(f\"  {name} \uc2dc\uc791\")\n    await asyncio.sleep(duration)  # \ube44\ub3d9\uae30 \ub300\uae30\n    print(f\"  {name} \uc644\ub8cc ({duration}\ucd08)\")\n    return f\"\uacb0\uacfc_{name}\"\n\nasync def basic_async_example():\n    \"\"\"\uae30\ubcf8 \ube44\ub3d9\uae30 \uc608\uc81c\"\"\"\n\n    print(\"12. \uae30\ubcf8 \ube44\ub3d9\uae30 \uc2e4\ud589:\")\n\n    # \uc21c\ucc28 \uc2e4\ud589\n    start_time = time.time()\n    result1 = await async_task(\"\uc791\uc5c51\", 1)\n    result2 = await async_task(\"\uc791\uc5c52\", 2)\n    sequential_time = time.time() - start_time\n    print(f\"    \uc21c\ucc28 \uc2e4\ud589 \uc2dc\uac04: {sequential_time:.2f}\ucd08\")\n\n    # \ub3d9\uc2dc \uc2e4\ud589\n    print(f\"\\n  \ub3d9\uc2dc \uc2e4\ud589:\")\n    start_time = time.time()\n\n    # \ubc29\ubc95 1: gather \uc0ac\uc6a9\n    results = await asyncio.gather(\n        async_task(\"\ub3d9\uc2dc\uc791\uc5c51\", 1),\n        async_task(\"\ub3d9\uc2dc\uc791\uc5c52\", 2),\n        async_task(\"\ub3d9\uc2dc\uc791\uc5c53\", 1.5)\n    )\n\n    concurrent_time = time.time() - start_time\n    print(f\"    \ub3d9\uc2dc \uc2e4\ud589 \uc2dc\uac04: {concurrent_time:.2f}\ucd08\")\n    print(f\"    \uc131\ub2a5 \ud5a5\uc0c1: {sequential_time / concurrent_time:.2f}\ubc30\")\n    print(f\"    \uacb0\uacfc: {results}\")\n\n# \ube44\ub3d9\uae30 \ud568\uc218 \uc2e4\ud589\ndef run_async_example():\n    \"\"\"\ube44\ub3d9\uae30 \uc608\uc81c \uc2e4\ud589\"\"\"\n    try:\n        asyncio.run(basic_async_example())\n    except Exception as e:\n        print(f\"  \ube44\ub3d9\uae30 \uc2e4\ud589 \uc624\ub958: {e}\")\n\nrun_async_example()\n\nasync def task_management_example():\n    \"\"\"\ud0dc\uc2a4\ud06c \uad00\ub9ac \uc608\uc81c\"\"\"\n\n    print(f\"\\n13. \ud0dc\uc2a4\ud06c \uad00\ub9ac:\")\n\n    async def long_running_task(task_id):\n        \"\"\"\uc7a5\uc2dc\uac04 \uc2e4\ud589 \uc791\uc5c5\"\"\"\n        try:\n            for i in range(5):\n                print(f\"    \uc791\uc5c5 {task_id}: \uc9c4\ud589 {i+1}/5\")\n                await asyncio.sleep(0.5)\n            return f\"\uc791\uc5c5 {task_id} \uc644\ub8cc\"\n        except asyncio.CancelledError:\n            print(f\"    \uc791\uc5c5 {task_id} \ucde8\uc18c\ub428\")\n            raise\n\n    # \ud0dc\uc2a4\ud06c \uc0dd\uc131\n    task1 = asyncio.create_task(long_running_task(\"A\"))\n    task2 = asyncio.create_task(long_running_task(\"B\"))\n\n    # \uc77c\uc815 \uc2dc\uac04 \ud6c4 \ud0dc\uc2a4\ud06c \ucde8\uc18c\n    await asyncio.sleep(1.5)\n    task2.cancel()\n\n    # \uacb0\uacfc \uc218\uc9d1\n    try:\n        result1 = await task1\n        print(f\"  {result1}\")\n    except:\n        print(f\"  \uc791\uc5c5 A \uc2e4\ud328\")\n\n    try:\n        result2 = await task2\n        print(f\"  {result2}\")\n    except asyncio.CancelledError:\n        print(f\"  \uc791\uc5c5 B\uac00 \ucde8\uc18c\ub418\uc5c8\uc2b5\ub2c8\ub2e4\")\n\ndef run_task_management():\n    \"\"\"\ud0dc\uc2a4\ud06c \uad00\ub9ac \uc608\uc81c \uc2e4\ud589\"\"\"\n    try:\n        asyncio.run(task_management_example())\n    except:\n        print(\"  (\ud0dc\uc2a4\ud06c \uad00\ub9ac \uc608\uc81c\ub294 \ud658\uacbd\uc5d0 \ub530\ub77c \uc81c\ud55c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4)\")\n\nrun_task_management()\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#42-io","title":"4.2 \ube44\ub3d9\uae30 I/O \ud328\ud134","text":"<pre><code>print(\"\\n=== \ube44\ub3d9\uae30 I/O \ud328\ud134 ===\")\n\nasync def simulate_api_call(api_id, delay):\n    \"\"\"API \ud638\ucd9c \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n    print(f\"  API {api_id} \ud638\ucd9c \uc2dc\uc791\")\n    await asyncio.sleep(delay)  # \ub124\ud2b8\uc6cc\ud06c \uc9c0\uc5f0 \uc2dc\ubbac\ub808\uc774\uc158\n\n    # \uc2e4\ud328 \uc2dc\ubbac\ub808\uc774\uc158\n    if random.random() &lt; 0.2:  # 20% \ud655\ub960\ub85c \uc2e4\ud328\n        raise Exception(f\"API {api_id} \ud638\ucd9c \uc2e4\ud328\")\n\n    result = {\n        'api_id': api_id,\n        'data': f\"\uc751\ub2f5\ub370\uc774\ud130_{api_id}\",\n        'delay': delay\n    }\n    print(f\"  API {api_id} \ud638\ucd9c \uc644\ub8cc\")\n    return result\n\nasync def async_io_patterns():\n    \"\"\"\ube44\ub3d9\uae30 I/O \ud328\ud134\ub4e4\"\"\"\n\n    print(\"14. \ube44\ub3d9\uae30 I/O \ud328\ud134:\")\n\n    # \ud328\ud134 1: as_completed - \uc644\ub8cc\ub418\ub294 \uc21c\uc11c\ub300\ub85c \ucc98\ub9ac\n    print(f\"  \ud328\ud134 1: as_completed\")\n\n    tasks = [\n        simulate_api_call(f\"API{i}\", random.uniform(0.5, 2.0))\n        for i in range(1, 5)\n    ]\n\n    async for completed_task in asyncio.as_completed(tasks):\n        try:\n            result = await completed_task\n            print(f\"    \uc644\ub8cc: {result['api_id']} ({result['delay']:.2f}\ucd08)\")\n        except Exception as e:\n            print(f\"    \uc624\ub958: {e}\")\n\n    # \ud328\ud134 2: wait - \uc870\uac74\ubd80 \ub300\uae30\n    print(f\"\\n  \ud328\ud134 2: wait with timeout\")\n\n    tasks = [\n        asyncio.create_task(simulate_api_call(f\"API{i}\", random.uniform(1, 3)))\n        for i in range(5, 8)\n    ]\n\n    try:\n        done, pending = await asyncio.wait(tasks, timeout=2.0)\n\n        print(f\"    \uc644\ub8cc\ub41c \uc791\uc5c5: {len(done)}\uac1c\")\n        for task in done:\n            try:\n                result = await task\n                print(f\"      \uc644\ub8cc: {result['api_id']}\")\n            except Exception as e:\n                print(f\"      \uc624\ub958: {e}\")\n\n        print(f\"    \ubbf8\uc644\ub8cc \uc791\uc5c5: {len(pending)}\uac1c\")\n        for task in pending:\n            task.cancel()\n            print(f\"      \ucde8\uc18c\ub428\")\n\n    except asyncio.TimeoutError:\n        print(f\"    \ud0c0\uc784\uc544\uc6c3 \ubc1c\uc0dd\")\n\ndef run_async_io_patterns():\n    \"\"\"\ube44\ub3d9\uae30 I/O \ud328\ud134 \uc2e4\ud589\"\"\"\n    try:\n        asyncio.run(async_io_patterns())\n    except:\n        print(\"  (\ube44\ub3d9\uae30 I/O \ud328\ud134\uc740 \ud658\uacbd\uc5d0 \ub530\ub77c \uc81c\ud55c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4)\")\n\nrun_async_io_patterns()\n\nasync def producer_consumer_pattern():\n    \"\"\"\ube44\ub3d9\uae30 \uc0dd\uc0b0\uc790-\uc18c\ube44\uc790 \ud328\ud134\"\"\"\n\n    print(f\"\\n15. \ube44\ub3d9\uae30 \uc0dd\uc0b0\uc790-\uc18c\ube44\uc790 \ud328\ud134:\")\n\n    async def producer(queue, producer_id):\n        \"\"\"\ube44\ub3d9\uae30 \uc0dd\uc0b0\uc790\"\"\"\n        for i in range(3):\n            item = f\"\uc0dd\uc0b0\uc790{producer_id}_\ud56d\ubaa9{i+1}\"\n            await queue.put(item)\n            print(f\"  \uc0dd\uc0b0: {item}\")\n            await asyncio.sleep(0.5)\n\n        await queue.put(None)  # \uc885\ub8cc \uc2e0\ud638\n        print(f\"  \uc0dd\uc0b0\uc790 {producer_id} \uc644\ub8cc\")\n\n    async def consumer(queue, consumer_id):\n        \"\"\"\ube44\ub3d9\uae30 \uc18c\ube44\uc790\"\"\"\n        consumed_items = []\n        while True:\n            item = await queue.get()\n            if item is None:\n                queue.task_done()\n                break\n\n            consumed_items.append(item)\n            print(f\"  \uc18c\ube44 {consumer_id}: {item}\")\n            await asyncio.sleep(0.3)\n            queue.task_done()\n\n        print(f\"  \uc18c\ube44\uc790 {consumer_id} \uc644\ub8cc: {len(consumed_items)}\uac1c \ucc98\ub9ac\")\n        return consumed_items\n\n    # \ud050 \uc0dd\uc131\n    queue = asyncio.Queue(maxsize=5)\n\n    # \uc0dd\uc0b0\uc790\uc640 \uc18c\ube44\uc790 \uc2e4\ud589\n    await asyncio.gather(\n        producer(queue, 1),\n        consumer(queue, 1),\n        producer(queue, 2),\n        consumer(queue, 2)\n    )\n\ndef run_producer_consumer():\n    \"\"\"\uc0dd\uc0b0\uc790-\uc18c\ube44\uc790 \ud328\ud134 \uc2e4\ud589\"\"\"\n    try:\n        asyncio.run(producer_consumer_pattern())\n    except:\n        print(\"  (\uc0dd\uc0b0\uc790-\uc18c\ube44\uc790 \ud328\ud134\uc740 \ud658\uacbd\uc5d0 \ub530\ub77c \uc81c\ud55c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4)\")\n\nrun_producer_consumer()\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#43","title":"4.3 \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800","text":"<pre><code>print(\"\\n=== \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 ===\")\n\nclass AsyncResource:\n    \"\"\"\ube44\ub3d9\uae30 \ub9ac\uc18c\uc2a4 \ub9e4\ub2c8\uc800\"\"\"\n\n    def __init__(self, name):\n        self.name = name\n        self.is_open = False\n\n    async def __aenter__(self):\n        \"\"\"\ube44\ub3d9\uae30 \uc9c4\uc785\"\"\"\n        print(f\"  {self.name} \ub9ac\uc18c\uc2a4 \uc5f4\uae30 \uc2dc\uc791...\")\n        await asyncio.sleep(0.5)  # \ub9ac\uc18c\uc2a4 \uc5f4\uae30 \uc2dc\ubbac\ub808\uc774\uc158\n        self.is_open = True\n        print(f\"  {self.name} \ub9ac\uc18c\uc2a4 \uc900\ube44 \uc644\ub8cc\")\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"\ube44\ub3d9\uae30 \uc885\ub8cc\"\"\"\n        print(f\"  {self.name} \ub9ac\uc18c\uc2a4 \uc815\ub9ac \uc2dc\uc791...\")\n        await asyncio.sleep(0.3)  # \uc815\ub9ac \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n        self.is_open = False\n        print(f\"  {self.name} \ub9ac\uc18c\uc2a4 \uc815\ub9ac \uc644\ub8cc\")\n\n        if exc_type:\n            print(f\"  \uc608\uc678 \ubc1c\uc0dd: {exc_type.__name__}: {exc_val}\")\n            return False  # \uc608\uc678\ub97c \ub2e4\uc2dc \ubc1c\uc0dd\uc2dc\ud0b4\n\n    async def do_work(self):\n        \"\"\"\uc791\uc5c5 \uc218\ud589\"\"\"\n        if not self.is_open:\n            raise RuntimeError(\"\ub9ac\uc18c\uc2a4\uac00 \uc5f4\ub824\uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\")\n\n        print(f\"  {self.name}\uc5d0\uc11c \uc791\uc5c5 \uc218\ud589 \uc911...\")\n        await asyncio.sleep(1)\n        print(f\"  {self.name} \uc791\uc5c5 \uc644\ub8cc\")\n        return f\"{self.name} \uacb0\uacfc\"\n\nasync def async_context_manager_example():\n    \"\"\"\ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc0ac\uc6a9\"\"\"\n\n    print(\"16. \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800:\")\n\n    # \uc815\uc0c1\uc801\uc778 \uc0ac\uc6a9\n    async with AsyncResource(\"\ub370\uc774\ud130\ubca0\uc774\uc2a4\") as db:\n        result = await db.do_work()\n        print(f\"  \uc791\uc5c5 \uacb0\uacfc: {result}\")\n\n    print()\n\n    # \uc608\uc678 \ubc1c\uc0dd \uc2dc\n    try:\n        async with AsyncResource(\"\ub124\ud2b8\uc6cc\ud06c\") as network:\n            await network.do_work()\n            raise ValueError(\"\uc758\ub3c4\uc801 \uc608\uc678\")\n    except ValueError as e:\n        print(f\"  \uc608\uc678 \ucc98\ub9ac\ub428: {e}\")\n\ndef run_async_context_manager():\n    \"\"\"\ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc2e4\ud589\"\"\"\n    try:\n        asyncio.run(async_context_manager_example())\n    except:\n        print(\"  (\ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub294 \ud658\uacbd\uc5d0 \ub530\ub77c \uc81c\ud55c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4)\")\n\nrun_async_context_manager()\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#5","title":"5. \uc131\ub2a5 \ube44\uad50\uc640 \uc120\ud0dd \uae30\uc900","text":""},{"location":"tutorials/intermediate/chapter10_multithreading_async/#51","title":"5.1 \uc2dc\ub098\ub9ac\uc624\ubcc4 \uc131\ub2a5 \ube44\uad50","text":"<pre><code>print(\"\\n=== \uc131\ub2a5 \ube44\uad50\uc640 \uc120\ud0dd \uae30\uc900 ===\")\n\nimport time\nimport threading\nimport multiprocessing\nimport asyncio\nfrom concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor\n\ndef io_bound_sync(task_id, duration):\n    \"\"\"I/O \ubc14\uc6b4\ub4dc \ub3d9\uae30 \uc791\uc5c5\"\"\"\n    time.sleep(duration)\n    return f\"IO\uc791\uc5c5{task_id}_\uc644\ub8cc\"\n\nasync def io_bound_async(task_id, duration):\n    \"\"\"I/O \ubc14\uc6b4\ub4dc \ube44\ub3d9\uae30 \uc791\uc5c5\"\"\"\n    await asyncio.sleep(duration)\n    return f\"\ube44\ub3d9\uae30IO\uc791\uc5c5{task_id}_\uc644\ub8cc\"\n\ndef cpu_bound_sync(n):\n    \"\"\"CPU \ubc14\uc6b4\ub4dc \ub3d9\uae30 \uc791\uc5c5\"\"\"\n    return sum(i * i for i in range(n))\n\ndef performance_comparison():\n    \"\"\"\uc131\ub2a5 \ube44\uad50\"\"\"\n\n    print(\"17. I/O \ubc14\uc6b4\ub4dc \uc791\uc5c5 \uc131\ub2a5 \ube44\uad50:\")\n\n    tasks = [(i, 0.5) for i in range(1, 6)]  # 5\uac1c \uc791\uc5c5, \uac01\uac01 0.5\ucd08\n\n    # 1. \uc21c\ucc28 \uc2e4\ud589\n    start_time = time.time()\n    sequential_results = [io_bound_sync(task_id, duration) for task_id, duration in tasks]\n    sequential_time = time.time() - start_time\n    print(f\"  \uc21c\ucc28 \uc2e4\ud589: {sequential_time:.2f}\ucd08\")\n\n    # 2. \uc2a4\ub808\ub4dc \ud480\n    start_time = time.time()\n    with ThreadPoolExecutor(max_workers=3) as executor:\n        thread_results = list(executor.map(lambda x: io_bound_sync(*x), tasks))\n    thread_time = time.time() - start_time\n    print(f\"  \uc2a4\ub808\ub4dc \ud480: {thread_time:.2f}\ucd08 (\ud5a5\uc0c1: {sequential_time/thread_time:.2f}\ubc30)\")\n\n    # 3. \ube44\ub3d9\uae30 \uc2e4\ud589\n    async def async_test():\n        start_time = time.time()\n        async_results = await asyncio.gather(\n            *[io_bound_async(task_id, duration) for task_id, duration in tasks]\n        )\n        return time.time() - start_time, async_results\n\n    try:\n        async_time, async_results = asyncio.run(async_test())\n        print(f\"  \ube44\ub3d9\uae30 \uc2e4\ud589: {async_time:.2f}\ucd08 (\ud5a5\uc0c1: {sequential_time/async_time:.2f}\ubc30)\")\n    except:\n        print(f\"  \ube44\ub3d9\uae30 \uc2e4\ud589: (\ud658\uacbd \uc81c\ud55c)\")\n\nperformance_comparison()\n\ndef cpu_bound_comparison():\n    \"\"\"CPU \ubc14\uc6b4\ub4dc \uc791\uc5c5 \ube44\uad50\"\"\"\n\n    print(f\"\\n18. CPU \ubc14\uc6b4\ub4dc \uc791\uc5c5 \uc131\ub2a5 \ube44\uad50:\")\n\n    tasks = [2000000] * 4  # 4\uac1c\uc758 \ub3d9\uc77c\ud55c CPU \uc791\uc5c5\n\n    # 1. \uc21c\ucc28 \uc2e4\ud589\n    start_time = time.time()\n    sequential_results = [cpu_bound_sync(n) for n in tasks]\n    sequential_time = time.time() - start_time\n    print(f\"  \uc21c\ucc28 \uc2e4\ud589: {sequential_time:.2f}\ucd08\")\n\n    # 2. \uc2a4\ub808\ub4dc \ud480 (GIL\ub85c \uc778\ud574 \ud6a8\uacfc \uc81c\ud55c\uc801)\n    start_time = time.time()\n    with ThreadPoolExecutor(max_workers=4) as executor:\n        thread_results = list(executor.map(cpu_bound_sync, tasks))\n    thread_time = time.time() - start_time\n    print(f\"  \uc2a4\ub808\ub4dc \ud480: {thread_time:.2f}\ucd08 (\ube44\uc728: {thread_time/sequential_time:.2f})\")\n\n    # 3. \ud504\ub85c\uc138\uc2a4 \ud480\n    try:\n        start_time = time.time()\n        with ProcessPoolExecutor(max_workers=2) as executor:\n            process_results = list(executor.map(cpu_bound_sync, tasks))\n        process_time = time.time() - start_time\n        print(f\"  \ud504\ub85c\uc138\uc2a4 \ud480: {process_time:.2f}\ucd08 (\ud5a5\uc0c1: {sequential_time/process_time:.2f}\ubc30)\")\n    except:\n        print(f\"  \ud504\ub85c\uc138\uc2a4 \ud480: (\ud658\uacbd \uc81c\ud55c)\")\n\ncpu_bound_comparison()\n\ndef selection_guidelines():\n    \"\"\"\uc120\ud0dd \uac00\uc774\ub4dc\ub77c\uc778\"\"\"\n\n    print(f\"\\n19. \ub3d9\uc2dc\uc131 \ud328\ud134 \uc120\ud0dd \uac00\uc774\ub4dc\ub77c\uc778:\")\n\n    guidelines = {\n        \"I/O \ubc14\uc6b4\ub4dc + \uac04\ub2e8\ud55c \ub85c\uc9c1\": {\n            \"\ucd94\ucc9c\": \"\uc2a4\ub808\ub529 \ub610\ub294 \ube44\ub3d9\uae30\",\n            \"\uc774\uc720\": \"I/O \ub300\uae30 \uc2dc\uac04 \ub3d9\uc548 \ub2e4\ub978 \uc791\uc5c5 \uc218\ud589 \uac00\ub2a5\",\n            \"\uc608\uc2dc\": \"\ud30c\uc77c \uc77d\uae30/\uc4f0\uae30, \ub124\ud2b8\uc6cc\ud06c \uc694\uccad, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucffc\ub9ac\"\n        },\n        \"I/O \ubc14\uc6b4\ub4dc + \ubcf5\uc7a1\ud55c \ub85c\uc9c1\": {\n            \"\ucd94\ucc9c\": \"\ube44\ub3d9\uae30 (asyncio)\",\n            \"\uc774\uc720\": \"\uc138\ubc00\ud55c \uc81c\uc5b4 \uac00\ub2a5, \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\",\n            \"\uc608\uc2dc\": \"\uc6f9 \uc2a4\ud06c\ub798\ud551, API \uc11c\ubc84, \uc2e4\uc2dc\uac04 \ub370\uc774\ud130 \ucc98\ub9ac\"\n        },\n        \"CPU \ubc14\uc6b4\ub4dc\": {\n            \"\ucd94\ucc9c\": \"\uba40\ud2f0\ud504\ub85c\uc138\uc2f1\",\n            \"\uc774\uc720\": \"GIL \uc6b0\ud68c\ud558\uc5ec \uc9c4\uc815\ud55c \ubcd1\ub82c \ucc98\ub9ac\",\n            \"\uc608\uc2dc\": \"\uc218\ud559 \uacc4\uc0b0, \uc774\ubbf8\uc9c0/\ube44\ub514\uc624 \ucc98\ub9ac, \uc554\ud638\ud654\"\n        },\n        \"\ud63c\ud569 \uc791\uc5c5\": {\n            \"\ucd94\ucc9c\": \"\uc0c1\ud669\uc5d0 \ub530\ub77c \uc870\ud569\",\n            \"\uc774\uc720\": \"\uac01 \uc791\uc5c5 \uc720\ud615\uc5d0 \ucd5c\uc801\ud654\ub41c \ubc29\uc2dd \uc0ac\uc6a9\",\n            \"\uc608\uc2dc\": \"\ub370\uc774\ud130 \uc218\uc9d1(\ube44\ub3d9\uae30) + \ubd84\uc11d(\ud504\ub85c\uc138\uc2f1)\"\n        }\n    }\n\n    for scenario, info in guidelines.items():\n        print(f\"  {scenario}:\")\n        print(f\"    \ucd94\ucc9c: {info['\ucd94\ucc9c']}\")\n        print(f\"    \uc774\uc720: {info['\uc774\uc720']}\")\n        print(f\"    \uc608\uc2dc: {info['\uc608\uc2dc']}\")\n        print()\n\nselection_guidelines()\n\ndef resource_usage_comparison():\n    \"\"\"\ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\ub7c9 \ube44\uad50\"\"\"\n\n    print(f\"20. \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\ub7c9 \ud2b9\uc131:\")\n\n    characteristics = {\n        \"\uc2a4\ub808\ub529\": {\n            \"\uba54\ubaa8\ub9ac\": \"\uacf5\uc720 (\uc801\uc74c)\",\n            \"\uc0dd\uc131 \ube44\uc6a9\": \"\uc911\uac04\",\n            \"\ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d\": \"\ube60\ub984\",\n            \"\ud655\uc7a5\uc131\": \"\uc81c\ud55c\uc801 (\uc218\ubc31 \uac1c)\",\n            \"\ub514\ubc84\uae45\": \"\uc5b4\ub824\uc6c0 (\ub808\uc774\uc2a4 \ucee8\ub514\uc158)\"\n        },\n        \"\ud504\ub85c\uc138\uc2f1\": {\n            \"\uba54\ubaa8\ub9ac\": \"\ub3c5\ub9bd\uc801 (\ub9ce\uc74c)\",\n            \"\uc0dd\uc131 \ube44\uc6a9\": \"\ub192\uc74c\",\n            \"\ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d\": \"\ub290\ub9bc\",\n            \"\ud655\uc7a5\uc131\": \"CPU \ucf54\uc5b4 \uc218\uc5d0 \uc758\uc874\",\n            \"\ub514\ubc84\uae45\": \"\uc0c1\ub300\uc801\uc73c\ub85c \uc26c\uc6c0\"\n        },\n        \"\ube44\ub3d9\uae30\": {\n            \"\uba54\ubaa8\ub9ac\": \"\ub2e8\uc77c \uc2a4\ub808\ub4dc (\uc801\uc74c)\",\n            \"\uc0dd\uc131 \ube44\uc6a9\": \"\ub0ae\uc74c\",\n            \"\ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d\": \"\uc5c6\uc74c (\ud611\ub825\uc801)\",\n            \"\ud655\uc7a5\uc131\": \"\ub9e4\uc6b0 \ub192\uc74c (\uc218\ub9cc \uac1c)\",\n            \"\ub514\ubc84\uae45\": \"\uc911\uac04 (\ucf5c\ubc31 \uc9c0\uc625 \uc8fc\uc758)\"\n        }\n    }\n\n    for method, chars in characteristics.items():\n        print(f\"  {method}:\")\n        for aspect, value in chars.items():\n            print(f\"    {aspect}: {value}\")\n        print()\n\nresource_usage_comparison()\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#6","title":"6. \uc2e4\uc6a9\uc801\uc778 \ud65c\uc6a9 \uc608\uc81c","text":""},{"location":"tutorials/intermediate/chapter10_multithreading_async/#61","title":"6.1 \uc6f9 \uc2a4\ud06c\ub798\ud551 \uc2dc\uc2a4\ud15c","text":"<pre><code>print(\"\\n=== \uc2e4\uc6a9\uc801\uc778 \ud65c\uc6a9 \uc608\uc81c ===\")\n\nimport asyncio\nimport time\nimport random\nfrom dataclasses import dataclass\nfrom typing import List, Dict, Any\n\n@dataclass\nclass ScrapingResult:\n    \"\"\"\uc2a4\ud06c\ub798\ud551 \uacb0\uacfc\"\"\"\n    url: str\n    status: str\n    data: Dict[str, Any]\n    processing_time: float\n\ndef simulate_web_request(url: str) -&gt; ScrapingResult:\n    \"\"\"\uc6f9 \uc694\uccad \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n    start_time = time.time()\n\n    # \ub124\ud2b8\uc6cc\ud06c \uc9c0\uc5f0 \uc2dc\ubbac\ub808\uc774\uc158\n    delay = random.uniform(0.5, 2.0)\n    time.sleep(delay)\n\n    # \uc131\uacf5/\uc2e4\ud328 \uc2dc\ubbac\ub808\uc774\uc158\n    if random.random() &lt; 0.1:  # 10% \uc2e4\ud328\uc728\n        status = \"failed\"\n        data = {\"error\": \"Connection timeout\"}\n    else:\n        status = \"success\"\n        data = {\n            \"title\": f\"Title for {url}\",\n            \"content_length\": random.randint(1000, 5000),\n            \"links\": random.randint(10, 50)\n        }\n\n    processing_time = time.time() - start_time\n    return ScrapingResult(url, status, data, processing_time)\n\nasync def simulate_async_web_request(url: str) -&gt; ScrapingResult:\n    \"\"\"\ube44\ub3d9\uae30 \uc6f9 \uc694\uccad \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n    start_time = time.time()\n\n    # \ube44\ub3d9\uae30 \ub124\ud2b8\uc6cc\ud06c \uc9c0\uc5f0\n    delay = random.uniform(0.5, 2.0)\n    await asyncio.sleep(delay)\n\n    if random.random() &lt; 0.1:\n        status = \"failed\"\n        data = {\"error\": \"Connection timeout\"}\n    else:\n        status = \"success\"\n        data = {\n            \"title\": f\"Async Title for {url}\",\n            \"content_length\": random.randint(1000, 5000),\n            \"links\": random.randint(10, 50)\n        }\n\n    processing_time = time.time() - start_time\n    return ScrapingResult(url, status, data, processing_time)\n\ndef web_scraping_comparison():\n    \"\"\"\uc6f9 \uc2a4\ud06c\ub798\ud551 \ubc29\uc2dd \ube44\uad50\"\"\"\n\n    print(\"21. \uc6f9 \uc2a4\ud06c\ub798\ud551 \uc2dc\uc2a4\ud15c \ube44\uad50:\")\n\n    urls = [f\"https://example{i}.com\" for i in range(1, 11)]\n\n    # 1. \uc21c\ucc28 \uc2a4\ud06c\ub798\ud551\n    print(f\"  \uc21c\ucc28 \uc2a4\ud06c\ub798\ud551:\")\n    start_time = time.time()\n    sequential_results = []\n    for url in urls:\n        result = simulate_web_request(url)\n        sequential_results.append(result)\n    sequential_time = time.time() - start_time\n\n    success_count = sum(1 for r in sequential_results if r.status == \"success\")\n    print(f\"    \uc2dc\uac04: {sequential_time:.2f}\ucd08\")\n    print(f\"    \uc131\uacf5: {success_count}/{len(urls)}\")\n\n    # 2. \uc2a4\ub808\ub4dc \ud480 \uc2a4\ud06c\ub798\ud551\n    print(f\"\\n  \uc2a4\ub808\ub4dc \ud480 \uc2a4\ud06c\ub798\ud551:\")\n    start_time = time.time()\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        thread_results = list(executor.map(simulate_web_request, urls))\n    thread_time = time.time() - start_time\n\n    success_count = sum(1 for r in thread_results if r.status == \"success\")\n    print(f\"    \uc2dc\uac04: {thread_time:.2f}\ucd08 (\ud5a5\uc0c1: {sequential_time/thread_time:.2f}\ubc30)\")\n    print(f\"    \uc131\uacf5: {success_count}/{len(urls)}\")\n\n    # 3. \ube44\ub3d9\uae30 \uc2a4\ud06c\ub798\ud551\n    async def async_scraping():\n        start_time = time.time()\n        async_results = await asyncio.gather(\n            *[simulate_async_web_request(url) for url in urls],\n            return_exceptions=True\n        )\n        return time.time() - start_time, async_results\n\n    try:\n        async_time, async_results = asyncio.run(async_scraping())\n        success_count = sum(1 for r in async_results if isinstance(r, ScrapingResult) and r.status == \"success\")\n        print(f\"\\n  \ube44\ub3d9\uae30 \uc2a4\ud06c\ub798\ud551:\")\n        print(f\"    \uc2dc\uac04: {async_time:.2f}\ucd08 (\ud5a5\uc0c1: {sequential_time/async_time:.2f}\ubc30)\")\n        print(f\"    \uc131\uacf5: {success_count}/{len(urls)}\")\n    except:\n        print(f\"\\n  \ube44\ub3d9\uae30 \uc2a4\ud06c\ub798\ud551: (\ud658\uacbd \uc81c\ud55c)\")\n\nweb_scraping_comparison()\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#62","title":"6.2 \ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778","text":"<pre><code>print(\"\\n=== \ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778 ===\")\n\nimport queue\nimport threading\nimport time\nfrom typing import Generator, List\n\nclass DataProcessor:\n    \"\"\"\ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\"\"\"\n\n    def __init__(self, num_workers: int = 3):\n        self.num_workers = num_workers\n        self.input_queue = queue.Queue()\n        self.output_queue = queue.Queue()\n        self.workers = []\n        self.running = False\n\n    def worker(self, worker_id: int):\n        \"\"\"\uc6cc\ucee4 \uc2a4\ub808\ub4dc\"\"\"\n        while self.running:\n            try:\n                data = self.input_queue.get(timeout=1)\n                if data is None:  # \uc885\ub8cc \uc2e0\ud638\n                    break\n\n                # \ub370\uc774\ud130 \ucc98\ub9ac \uc2dc\ubbac\ub808\uc774\uc158\n                processed_data = self.process_data(data, worker_id)\n                self.output_queue.put(processed_data)\n                self.input_queue.task_done()\n\n            except queue.Empty:\n                continue\n            except Exception as e:\n                print(f\"    \uc6cc\ucee4 {worker_id} \uc624\ub958: {e}\")\n\n    def process_data(self, data: Dict[str, Any], worker_id: int) -&gt; Dict[str, Any]:\n        \"\"\"\ub370\uc774\ud130 \ucc98\ub9ac \ub85c\uc9c1\"\"\"\n        # \ucc98\ub9ac \uc2dc\uac04 \uc2dc\ubbac\ub808\uc774\uc158\n        processing_time = random.uniform(0.1, 0.5)\n        time.sleep(processing_time)\n\n        return {\n            'original': data,\n            'processed_by': f'worker_{worker_id}',\n            'processing_time': processing_time,\n            'processed_at': time.time(),\n            'value': data.get('value', 0) * 2  # \uac04\ub2e8\ud55c \ubcc0\ud658\n        }\n\n    def start(self):\n        \"\"\"\ud30c\uc774\ud504\ub77c\uc778 \uc2dc\uc791\"\"\"\n        self.running = True\n        for i in range(self.num_workers):\n            worker = threading.Thread(target=self.worker, args=(i+1,))\n            worker.start()\n            self.workers.append(worker)\n        print(f\"    \ud30c\uc774\ud504\ub77c\uc778 \uc2dc\uc791: {self.num_workers}\uac1c \uc6cc\ucee4\")\n\n    def stop(self):\n        \"\"\"\ud30c\uc774\ud504\ub77c\uc778 \uc815\uc9c0\"\"\"\n        self.running = False\n\n        # \uc885\ub8cc \uc2e0\ud638 \uc804\uc1a1\n        for _ in self.workers:\n            self.input_queue.put(None)\n\n        # \uc6cc\ucee4 \uc885\ub8cc \ub300\uae30\n        for worker in self.workers:\n            worker.join()\n\n        print(f\"    \ud30c\uc774\ud504\ub77c\uc778 \uc815\uc9c0\")\n\n    def add_data(self, data: Dict[str, Any]):\n        \"\"\"\ub370\uc774\ud130 \ucd94\uac00\"\"\"\n        self.input_queue.put(data)\n\n    def get_results(self) -&gt; List[Dict[str, Any]]:\n        \"\"\"\uacb0\uacfc \uc218\uc9d1\"\"\"\n        results = []\n        while not self.output_queue.empty():\n            results.append(self.output_queue.get())\n        return results\n\ndef data_pipeline_example():\n    \"\"\"\ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778 \uc608\uc81c\"\"\"\n\n    print(\"22. \ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778:\")\n\n    # \ud30c\uc774\ud504\ub77c\uc778 \uc0dd\uc131 \ubc0f \uc2dc\uc791\n    processor = DataProcessor(num_workers=3)\n    processor.start()\n\n    # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc0dd\uc131\n    test_data = [\n        {'id': i, 'value': random.randint(1, 100)}\n        for i in range(1, 16)\n    ]\n\n    print(f\"    {len(test_data)}\uac1c \ub370\uc774\ud130 \ucc98\ub9ac \uc2dc\uc791\")\n    start_time = time.time()\n\n    # \ub370\uc774\ud130 \ucd94\uac00\n    for data in test_data:\n        processor.add_data(data)\n\n    # \ubaa8\ub4e0 \uc791\uc5c5 \uc644\ub8cc \ub300\uae30\n    processor.input_queue.join()\n\n    # \uacb0\uacfc \uc218\uc9d1\n    results = processor.get_results()\n    processing_time = time.time() - start_time\n\n    print(f\"    \ucc98\ub9ac \uc644\ub8cc: {len(results)}\uac1c \uacb0\uacfc\")\n    print(f\"    \ucc98\ub9ac \uc2dc\uac04: {processing_time:.2f}\ucd08\")\n    print(f\"    \ud3c9\uade0 \ucc98\ub9ac \uc2dc\uac04: {processing_time/len(results):.3f}\ucd08/\uac74\")\n\n    # \ud30c\uc774\ud504\ub77c\uc778 \uc815\uc9c0\n    processor.stop()\n\n    # \uacb0\uacfc \ubd84\uc11d\n    if results:\n        worker_stats = {}\n        for result in results:\n            worker = result['processed_by']\n            worker_stats[worker] = worker_stats.get(worker, 0) + 1\n\n        print(f\"    \uc6cc\ucee4\ubcc4 \ucc98\ub9ac\ub7c9: {worker_stats}\")\n\ndata_pipeline_example()\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#63","title":"6.3 \uc2e4\uc2dc\uac04 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c","text":"<pre><code>print(\"\\n=== \uc2e4\uc2dc\uac04 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c ===\")\n\nimport asyncio\nimport time\nimport random\nfrom collections import deque\nfrom dataclasses import dataclass\nfrom typing import Deque, Dict, List\n\n@dataclass\nclass MetricData:\n    \"\"\"\uba54\ud2b8\ub9ad \ub370\uc774\ud130\"\"\"\n    timestamp: float\n    metric_name: str\n    value: float\n    source: str\n\nclass MonitoringSystem:\n    \"\"\"\uc2e4\uc2dc\uac04 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c\"\"\"\n\n    def __init__(self):\n        self.metrics_buffer: Deque[MetricData] = deque(maxsize=1000)\n        self.alerts: List[str] = []\n        self.running = False\n        self.stats = {\n            'total_metrics': 0,\n            'alerts_triggered': 0,\n            'sources': set()\n        }\n\n    async def metric_collector(self, source: str, interval: float):\n        \"\"\"\uba54\ud2b8\ub9ad \uc218\uc9d1\uae30\"\"\"\n        while self.running:\n            # \uc2dc\ubbac\ub808\uc774\uc158\ub41c \uba54\ud2b8\ub9ad \uc218\uc9d1\n            metrics = [\n                MetricData(\n                    timestamp=time.time(),\n                    metric_name=metric_type,\n                    value=self.generate_metric_value(metric_type),\n                    source=source\n                )\n                for metric_type in ['cpu_usage', 'memory_usage', 'disk_io']\n            ]\n\n            for metric in metrics:\n                self.metrics_buffer.append(metric)\n                self.stats['total_metrics'] += 1\n                self.stats['sources'].add(source)\n\n            await asyncio.sleep(interval)\n\n    def generate_metric_value(self, metric_type: str) -&gt; float:\n        \"\"\"\uba54\ud2b8\ub9ad \uac12 \uc0dd\uc131\"\"\"\n        base_values = {\n            'cpu_usage': 30.0,\n            'memory_usage': 50.0,\n            'disk_io': 20.0\n        }\n\n        base = base_values.get(metric_type, 50.0)\n        # \uc815\uc0c1 \ubc94\uc704\uc5d0\uc11c \ubcc0\ub3d9\n        return max(0, base + random.uniform(-20, 20))\n\n    async def alert_processor(self):\n        \"\"\"\uc54c\ub9bc \ucc98\ub9ac\uae30\"\"\"\n        alert_thresholds = {\n            'cpu_usage': 80.0,\n            'memory_usage': 85.0,\n            'disk_io': 70.0\n        }\n\n        while self.running:\n            # \ucd5c\uadfc \uba54\ud2b8\ub9ad \ud655\uc778\n            recent_metrics = list(self.metrics_buffer)[-10:]  # \ucd5c\uadfc 10\uac1c\n\n            for metric in recent_metrics:\n                threshold = alert_thresholds.get(metric.metric_name)\n                if threshold and metric.value &gt; threshold:\n                    alert_msg = (f\"ALERT: {metric.source}\uc758 {metric.metric_name} \"\n                               f\"{metric.value:.1f}% (\uc784\uacc4\uac12: {threshold}%)\")\n                    self.alerts.append(alert_msg)\n                    self.stats['alerts_triggered'] += 1\n                    print(f\"    \ud83d\udea8 {alert_msg}\")\n\n            await asyncio.sleep(2.0)  # 2\ucd08\ub9c8\ub2e4 \ud655\uc778\n\n    async def stats_reporter(self):\n        \"\"\"\ud1b5\uacc4 \ub9ac\ud3ec\ud130\"\"\"\n        while self.running:\n            await asyncio.sleep(5.0)  # 5\ucd08\ub9c8\ub2e4 \ub9ac\ud3ec\ud2b8\n\n            print(f\"    \ud83d\udcca \ud1b5\uacc4 \ub9ac\ud3ec\ud2b8:\")\n            print(f\"      \ucd1d \uba54\ud2b8\ub9ad: {self.stats['total_metrics']}\")\n            print(f\"      \uc54c\ub9bc \ubc1c\uc0dd: {self.stats['alerts_triggered']}\")\n            print(f\"      \ubaa8\ub2c8\ud130\ub9c1 \uc18c\uc2a4: {len(self.stats['sources'])}\uac1c\")\n\n            if self.metrics_buffer:\n                recent = list(self.metrics_buffer)[-5:]\n                print(f\"      \ucd5c\uadfc \uba54\ud2b8\ub9ad (5\uac1c):\")\n                for metric in recent:\n                    print(f\"        {metric.source}.{metric.metric_name}: {metric.value:.1f}\")\n\n    async def run_monitoring(self, duration: float = 10.0):\n        \"\"\"\ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c \uc2e4\ud589\"\"\"\n        self.running = True\n\n        print(f\"    \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c \uc2dc\uc791 ({duration}\ucd08 \ub3d9\uc548)\")\n\n        # \ub2e4\uc911 \uc18c\uc2a4\uc5d0\uc11c \uba54\ud2b8\ub9ad \uc218\uc9d1\n        collectors = [\n            self.metric_collector(\"server1\", 1.0),\n            self.metric_collector(\"server2\", 1.5),\n            self.metric_collector(\"database\", 2.0),\n        ]\n\n        # \ubaa8\ub4e0 \ucef4\ud3ec\ub10c\ud2b8 \ub3d9\uc2dc \uc2e4\ud589\n        await asyncio.wait_for(\n            asyncio.gather(\n                *collectors,\n                self.alert_processor(),\n                self.stats_reporter()\n            ),\n            timeout=duration\n        )\n\nasync def monitoring_system_example():\n    \"\"\"\ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c \uc608\uc81c\"\"\"\n\n    print(\"23. \uc2e4\uc2dc\uac04 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c:\")\n\n    system = MonitoringSystem()\n\n    try:\n        await system.run_monitoring(duration=8.0)\n    except asyncio.TimeoutError:\n        system.running = False\n        print(f\"    \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c \uc885\ub8cc\")\n\n        # \ucd5c\uc885 \ud1b5\uacc4\n        print(f\"\\n    \ucd5c\uc885 \ud1b5\uacc4:\")\n        print(f\"      \uc218\uc9d1\ub41c \uba54\ud2b8\ub9ad: {system.stats['total_metrics']}\uac1c\")\n        print(f\"      \ubc1c\uc0dd\ud55c \uc54c\ub9bc: {system.stats['alerts_triggered']}\uac1c\")\n        print(f\"      \ubaa8\ub2c8\ud130\ub9c1 \uc18c\uc2a4: {list(system.stats['sources'])}\")\n\ndef run_monitoring_example():\n    \"\"\"\ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c \uc2e4\ud589\"\"\"\n    try:\n        asyncio.run(monitoring_system_example())\n    except:\n        print(\"    (\ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c\uc740 \ud658\uacbd\uc5d0 \ub530\ub77c \uc81c\ud55c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4)\")\n\nrun_monitoring_example()\n</code></pre>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#7","title":"7. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter10_multithreading_async/#1_1","title":"\uc5f0\uc2b5 1: \ub2e4\uc6b4\ub85c\ub4dc \ub9e4\ub2c8\uc800","text":"<p>\uba40\ud2f0\uc2a4\ub808\ub529\uc744 \ud65c\uc6a9\ud55c \ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc \ub9e4\ub2c8\uc800\ub97c \uad6c\ud604\ud558\uc138\uc694. \uc9c4\ud589\ub960 \ud45c\uc2dc, \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1, \ub3d9\uc2dc \ub2e4\uc6b4\ub85c\ub4dc \uc218 \uc81c\ud55c \uae30\ub2a5\uc744 \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#2","title":"\uc5f0\uc2b5 2: \ub370\uc774\ud130 \ubd84\uc11d \ud30c\uc774\ud504\ub77c\uc778","text":"<p>\uba40\ud2f0\ud504\ub85c\uc138\uc2f1\uc744 \ud65c\uc6a9\ud55c \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ubd84\uc11d \ud30c\uc774\ud504\ub77c\uc778\uc744 \uad6c\ud604\ud558\uc138\uc694. \ub370\uc774\ud130 \ubd84\ud560, \ubcd1\ub82c \ucc98\ub9ac, \uacb0\uacfc \ubcd1\ud569 \uae30\ub2a5\uc744 \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#3-api","title":"\uc5f0\uc2b5 3: \uc6f9 API \ud074\ub77c\uc774\uc5b8\ud2b8","text":"<p>asyncio\ub97c \ud65c\uc6a9\ud55c \ube44\ub3d9\uae30 \uc6f9 API \ud074\ub77c\uc774\uc5b8\ud2b8\ub97c \uad6c\ud604\ud558\uc138\uc694. \ub808\uc774\ud2b8 \ub9ac\ubbf8\ud305, \uc7ac\uc2dc\ub3c4, \ubc30\uce58 \ucc98\ub9ac \uae30\ub2a5\uc744 \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#4","title":"\uc5f0\uc2b5 4: \uc2e4\uc2dc\uac04 \ucc44\ud305 \uc11c\ubc84","text":"<p>\ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ud65c\uc6a9\ud55c \uac04\ub2e8\ud55c \ucc44\ud305 \uc11c\ubc84\ub97c \uad6c\ud604\ud558\uc138\uc694. \ub2e4\uc911 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc9c0\uc6d0, \uba54\uc2dc\uc9c0 \ube0c\ub85c\ub4dc\uce90\uc2a4\ud305, \uc5f0\uacb0 \uad00\ub9ac \uae30\ub2a5\uc744 \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131: \uac1c\ub150\uc758 \ucc28\uc774\uc640 Python\uc5d0\uc11c\uc758 \uad6c\ud604 \ubc29\ubc95</li> <li>\uc2a4\ub808\ub529: \uae30\ubcf8 \uc0ac\uc6a9\ubc95, \ub3d9\uae30\ud654, \uc2a4\ub808\ub4dc \ud480 \ud65c\uc6a9</li> <li>\uba40\ud2f0\ud504\ub85c\uc138\uc2f1: \ud504\ub85c\uc138\uc2a4 \uc0dd\uc131, \ud1b5\uc2e0, \ud504\ub85c\uc138\uc2a4 \ud480 \uc0ac\uc6a9</li> <li>\ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d: asyncio\ub97c \ud65c\uc6a9\ud55c \ud6a8\uc728\uc801\uc778 I/O \ucc98\ub9ac</li> <li>GIL\uc758 \uc601\ud5a5: Python\uc758 \ud2b9\uc131\uacfc \uc801\uc808\ud55c \ud328\ud134 \uc120\ud0dd</li> <li>\uc131\ub2a5 \ucd5c\uc801\ud654: \uc791\uc5c5 \uc720\ud615\uc5d0 \ub530\ub978 \ucd5c\uc801 \ubc29\uc2dd \uc120\ud0dd</li> <li>\uc2e4\ubb34 \ud65c\uc6a9: \uc6f9 \uc2a4\ud06c\ub798\ud551, \ub370\uc774\ud130 \ucc98\ub9ac, \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \ud14c\uc2a4\ud305\uacfc \ub514\ubc84\uae45\uc5d0 \ub300\ud574 \ud559\uc2b5\ud558\uc5ec \uc548\uc815\uc801\uc774\uace0 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \ucf54\ub4dc \uc791\uc131 \ubc29\ubc95\uc744 \ubc30\uc6b0\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter10_multithreading_async/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>I/O \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc5d0\ub294 \uc2a4\ub808\ub529\uc774\ub098 \ube44\ub3d9\uae30\uac00 \ud6a8\uacfc\uc801\uc785\ub2c8\ub2e4</li> <li>CPU \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc5d0\ub294 \uba40\ud2f0\ud504\ub85c\uc138\uc2f1\uc744 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4</li> <li>GIL\ub85c \uc778\ud574 Python\uc5d0\uc11c \uba40\ud2f0\uc2a4\ub808\ub529\uc740 CPU \uc791\uc5c5\uc5d0 \uc81c\ud55c\uc801\uc785\ub2c8\ub2e4</li> <li>\ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \ub192\uc740 \ub3d9\uc2dc\uc131\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>\uc801\uc808\ud55c \ub3d9\uae30\ud654 \uba54\ucee4\ub2c8\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub808\uc774\uc2a4 \ucee8\ub514\uc158\uc744 \ubc29\uc9c0\ud574\uc57c \ud569\ub2c8\ub2e4</li> <li>\uc131\ub2a5 \uce21\uc815\uc744 \ud1b5\ud574 \ucd5c\uc801\uc758 \ub3d9\uc2dc\uc131 \ud328\ud134\uc744 \uc120\ud0dd\ud574\uc57c \ud569\ub2c8\ub2e4</li> <li>\uc2e4\ubb34\uc5d0\uc11c\ub294 \uc791\uc5c5\uc758 \ud2b9\uc131\uc744 \ubd84\uc11d\ud558\uc5ec \uc801\uc808\ud55c \ubc29\uc2dd\uc744 \uc870\ud569\ud574\uc57c \ud569\ub2c8\ub2e4</li> </ul>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/","title":"Chapter 11: \ud14c\uc2a4\ud305\uacfc \ub514\ubc84\uae45","text":""},{"location":"tutorials/intermediate/chapter11_testing_debugging/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - unittest \ubaa8\ub4c8\uc744 \ud65c\uc6a9\ud55c \uccb4\uacc4\uc801\uc778 \ud14c\uc2a4\ud2b8 \uc791\uc131\ud558\uae30 - pytest\ub97c \uc0ac\uc6a9\ud55c \ub354 \ud3b8\ub9ac\ud558\uace0 \uac15\ub825\ud55c \ud14c\uc2a4\ud2b8 \uad6c\ud604\ud558\uae30 - \ub2e4\uc591\ud55c \ud14c\uc2a4\ud305 \uae30\ubc95 (\ub2e8\uc704 \ud14c\uc2a4\ud2b8, \ud1b5\ud569 \ud14c\uc2a4\ud2b8, \ubaa8\ud0b9) \ud65c\uc6a9\ud558\uae30 - \ud6a8\uacfc\uc801\uc778 \ub514\ubc84\uae45 \uc804\ub7b5\uacfc \ub3c4\uad6c\ub4e4 \uc0ac\uc6a9\ud558\uae30 - \ud14c\uc2a4\ud2b8 \uc8fc\ub3c4 \uac1c\ubc1c(TDD)\uc758 \uac1c\ub150\uacfc \uc2e4\ubb34 \uc801\uc6a9\ud558\uae30 - \ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815\uacfc \ud488\uc9c8 \ud5a5\uc0c1 \uae30\ubc95 \uc774\ud574\ud558\uae30 - \uc9c0\uc18d\uc801 \ud1b5\ud569\uacfc \uc790\ub3d9\ud654\ub41c \ud14c\uc2a4\ud305 \ud658\uacbd \uad6c\ucd95\ud558\uae30</p>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#1","title":"1. \ud14c\uc2a4\ud305\uc758 \uae30\ubcf8 \uac1c\ub150","text":""},{"location":"tutorials/intermediate/chapter11_testing_debugging/#11","title":"1.1 \ud14c\uc2a4\ud305\uc758 \uc911\uc694\uc131\uacfc \uc885\ub958","text":"<pre><code>print(\"=== \ud14c\uc2a4\ud305\uc758 \uae30\ubcf8 \uac1c\ub150 ===\")\n\ndef demonstrate_testing_importance():\n    \"\"\"\ud14c\uc2a4\ud305\uc758 \uc911\uc694\uc131 \uc124\uba85\"\"\"\n\n    print(\"1. \ud14c\uc2a4\ud305\uc774 \ud544\uc694\ud55c \uc774\uc720:\")\n    print(\"  - \ubc84\uadf8 \uc870\uae30 \ubc1c\uacac\uacfc \uc218\uc815\")\n    print(\"  - \ucf54\ub4dc \ud488\uc9c8 \ud5a5\uc0c1\")\n    print(\"  - \ub9ac\ud329\ud1a0\ub9c1 \uc2dc \uc548\uc804\uc131 \ubcf4\uc7a5\")\n    print(\"  - \ubb38\uc11c\ud654 \uc5ed\ud560 (\ud14c\uc2a4\ud2b8\uac00 \uc2a4\ud399)\")\n    print(\"  - \ud611\uc5c5 \uc2dc \ucf54\ub4dc \uc2e0\ub8b0\uc131 \ud655\ubcf4\")\n    print()\n\n    print(\"2. \ud14c\uc2a4\ud2b8\uc758 \uc885\ub958:\")\n    print(\"  \ub2e8\uc704 \ud14c\uc2a4\ud2b8(Unit Test): \uac1c\ubcc4 \ud568\uc218/\uba54\uc11c\ub4dc \ud14c\uc2a4\ud2b8\")\n    print(\"  \ud1b5\ud569 \ud14c\uc2a4\ud2b8(Integration Test): \ubaa8\ub4c8 \uac04 \uc0c1\ud638\uc791\uc6a9 \ud14c\uc2a4\ud2b8\")\n    print(\"  \uc2dc\uc2a4\ud15c \ud14c\uc2a4\ud2b8(System Test): \uc804\uccb4 \uc2dc\uc2a4\ud15c \ud14c\uc2a4\ud2b8\")\n    print(\"  \uc778\uc218 \ud14c\uc2a4\ud2b8(Acceptance Test): \uc0ac\uc6a9\uc790 \uc694\uad6c\uc0ac\ud56d \ucda9\uc871 \ud14c\uc2a4\ud2b8\")\n    print()\n\n    print(\"3. \ud14c\uc2a4\ud2b8 \ud53c\ub77c\ubbf8\ub4dc:\")\n    print(\"  \u25b2 \uc778\uc218 \ud14c\uc2a4\ud2b8 (\uc801\uc74c, \ub290\ub9bc, \ub192\uc740 \uc218\uc900)\")\n    print(\"  \u25a0 \ud1b5\ud569 \ud14c\uc2a4\ud2b8 (\uc911\uac04)\")\n    print(\"  \u25a0\u25a0\u25a0 \ub2e8\uc704 \ud14c\uc2a4\ud2b8 (\ub9ce\uc74c, \ube60\ub984, \ub0ae\uc740 \uc218\uc900)\")\n\ndemonstrate_testing_importance()\n\n# \ud14c\uc2a4\ud2b8\ud560 \uc608\uc2dc \ud568\uc218\ub4e4\ndef calculate_area(length, width):\n    \"\"\"\uc9c1\uc0ac\uac01\ud615 \ub113\uc774 \uacc4\uc0b0\"\"\"\n    if length &lt;= 0 or width &lt;= 0:\n        raise ValueError(\"\uae38\uc774\uc640 \ub108\ube44\ub294 \uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4\")\n    return length * width\n\ndef is_prime(n):\n    \"\"\"\uc18c\uc218 \ud310\ubcc4\"\"\"\n    if n &lt; 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef validate_email(email):\n    \"\"\"\uac04\ub2e8\ud55c \uc774\uba54\uc77c \uac80\uc99d\"\"\"\n    if '@' not in email:\n        return False\n    parts = email.split('@')\n    if len(parts) != 2:\n        return False\n\n    local, domain = parts\n    if not local or not domain:\n        return False\n    if '.' not in domain:\n        return False\n\n    return True\n\nclass BankAccount:\n    \"\"\"\ud14c\uc2a4\ud2b8\uc6a9 \uc740\ud589 \uacc4\uc88c \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, initial_balance=0):\n        if initial_balance &lt; 0:\n            raise ValueError(\"\ucd08\uae30 \uc794\uc561\uc740 \uc74c\uc218\uc77c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n        self._balance = initial_balance\n        self._transaction_history = []\n\n    @property\n    def balance(self):\n        return self._balance\n\n    def deposit(self, amount):\n        if amount &lt;= 0:\n            raise ValueError(\"\uc785\uae08\uc561\uc740 \uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4\")\n        self._balance += amount\n        self._transaction_history.append(f\"\uc785\uae08: {amount}\")\n        return self._balance\n\n    def withdraw(self, amount):\n        if amount &lt;= 0:\n            raise ValueError(\"\ucd9c\uae08\uc561\uc740 \uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4\")\n        if amount &gt; self._balance:\n            raise ValueError(\"\uc794\uc561\uc774 \ubd80\uc871\ud569\ub2c8\ub2e4\")\n        self._balance -= amount\n        self._transaction_history.append(f\"\ucd9c\uae08: {amount}\")\n        return self._balance\n\n    def get_transaction_history(self):\n        return self._transaction_history.copy()\n\nprint(f\"\\n4. \ud14c\uc2a4\ud2b8 \ub300\uc0c1 \ud568\uc218\ub4e4:\")\nprint(f\"  calculate_area(5, 3): {calculate_area(5, 3)}\")\nprint(f\"  is_prime(17): {is_prime(17)}\")\nprint(f\"  validate_email('test@example.com'): {validate_email('test@example.com')}\")\n\naccount = BankAccount(1000)\naccount.deposit(500)\nprint(f\"  BankAccount \uc794\uc561: {account.balance}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#12","title":"1.2 \ud14c\uc2a4\ud2b8 \uc791\uc131 \uc6d0\uce59\uacfc \ubaa8\ubc94 \uc0ac\ub840","text":"<pre><code>print(\"\\n=== \ud14c\uc2a4\ud2b8 \uc791\uc131 \uc6d0\uce59 ===\")\n\ndef demonstrate_testing_principles():\n    \"\"\"\ud14c\uc2a4\ud2b8 \uc791\uc131 \uc6d0\uce59 \uc124\uba85\"\"\"\n\n    print(\"5. \uc88b\uc740 \ud14c\uc2a4\ud2b8\uc758 \ud2b9\uc9d5 (FIRST \uc6d0\uce59):\")\n    print(\"  Fast: \ube60\ub974\uac8c \uc2e4\ud589\")\n    print(\"  Independent: \ub3c5\ub9bd\uc801 (\ud14c\uc2a4\ud2b8 \uac04 \uc758\uc874\uc131 \uc5c6\uc74c)\")\n    print(\"  Repeatable: \ubc18\ubcf5 \uac00\ub2a5 (\ud658\uacbd\uc5d0 \uad00\uacc4\uc5c6\uc774 \ub3d9\uc77c\ud55c \uacb0\uacfc)\")\n    print(\"  Self-Validating: \uc790\uccb4 \uac80\uc99d (\uba85\ud655\ud55c \ud1b5\uacfc/\uc2e4\ud328)\")\n    print(\"  Timely: \uc801\uc2dc\uc131 (\ucf54\ub4dc\uc640 \ud568\uaed8 \uc791\uc131)\")\n    print()\n\n    print(\"6. AAA \ud328\ud134 (Arrange-Act-Assert):\")\n    print(\"  Arrange: \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc640 \ud658\uacbd \uc900\ube44\")\n    print(\"  Act: \ud14c\uc2a4\ud2b8\ud560 \ub3d9\uc791 \uc2e4\ud589\")\n    print(\"  Assert: \uacb0\uacfc \uac80\uc99d\")\n    print()\n\n    print(\"7. \ud14c\uc2a4\ud2b8 \uba85\uba85 \uaddc\uce59:\")\n    print(\"  test_\ud568\uc218\uba85_\uc870\uac74_\uc608\uc0c1\uacb0\uacfc() \ud615\ud0dc\")\n    print(\"  \uc608: test_calculate_area_positive_numbers_returns_product()\")\n    print()\n\n    print(\"8. \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uc124\uacc4:\")\n    print(\"  \uc815\uc0c1 \ucf00\uc774\uc2a4: \uc77c\ubc18\uc801\uc778 \uc785\ub825\uac12\")\n    print(\"  \uacbd\uacc4 \ucf00\uc774\uc2a4: \ucd5c\uc18c/\ucd5c\ub300\uac12, \ube48 \uac12\")\n    print(\"  \uc608\uc678 \ucf00\uc774\uc2a4: \uc798\ubabb\ub41c \uc785\ub825, \uc5d0\ub7ec \uc0c1\ud669\")\n\ndemonstrate_testing_principles()\n\n# \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uc124\uacc4 \uc608\uc81c\ndef demonstrate_test_case_design():\n    \"\"\"\ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uc124\uacc4 \uc608\uc81c\"\"\"\n\n    print(f\"\\n9. calculate_area \ud568\uc218 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uc124\uacc4:\")\n\n    # \uc815\uc0c1 \ucf00\uc774\uc2a4\n    test_cases_normal = [\n        (5, 3, 15),      # \uc77c\ubc18\uc801\uc778 \uc591\uc218\n        (10, 10, 100),   # \uc815\uc0ac\uac01\ud615\n        (0.5, 2, 1.0),   # \uc18c\uc218\uc810\n        (1, 1, 1),       # \ucd5c\uc18c \uc591\uc218\n    ]\n\n    print(\"  \uc815\uc0c1 \ucf00\uc774\uc2a4:\")\n    for length, width, expected in test_cases_normal:\n        result = calculate_area(length, width)\n        status = \"\u2713\" if result == expected else \"\u2717\"\n        print(f\"    {status} calculate_area({length}, {width}) = {result} (\uc608\uc0c1: {expected})\")\n\n    # \uc608\uc678 \ucf00\uc774\uc2a4\n    print(\"  \uc608\uc678 \ucf00\uc774\uc2a4:\")\n    exception_cases = [\n        (0, 5, \"\uae38\uc774\uac00 0\"),\n        (-1, 5, \"\uc74c\uc218 \uae38\uc774\"),\n        (5, -1, \"\uc74c\uc218 \ub108\ube44\"),\n        (0, 0, \"\ub458 \ub2e4 0\"),\n    ]\n\n    for length, width, description in exception_cases:\n        try:\n            result = calculate_area(length, width)\n            print(f\"    \u2717 {description}: \uc608\uc678\uac00 \ubc1c\uc0dd\ud574\uc57c \ud558\ub294\ub370 {result} \ubc18\ud658\")\n        except ValueError as e:\n            print(f\"    \u2713 {description}: \uc62c\ubc14\ub978 \uc608\uc678 \ubc1c\uc0dd ({e})\")\n\ndemonstrate_test_case_design()\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#2-unittest","title":"2. unittest \ubaa8\ub4c8 \ud65c\uc6a9","text":""},{"location":"tutorials/intermediate/chapter11_testing_debugging/#21-unittest","title":"2.1 \uae30\ubcf8 unittest \uc0ac\uc6a9\ubc95","text":"<pre><code>print(\"\\n=== unittest \ubaa8\ub4c8 \uae30\ubcf8 \uc0ac\uc6a9\ubc95 ===\")\n\nimport unittest\nfrom io import StringIO\nimport sys\n\nclass TestCalculateArea(unittest.TestCase):\n    \"\"\"calculate_area \ud568\uc218 \ud14c\uc2a4\ud2b8 \ud074\ub798\uc2a4\"\"\"\n\n    def setUp(self):\n        \"\"\"\uac01 \ud14c\uc2a4\ud2b8 \uba54\uc11c\ub4dc \uc2e4\ud589 \uc804 \ud638\ucd9c\"\"\"\n        print(\"    setUp: \ud14c\uc2a4\ud2b8 \uc900\ube44\")\n        self.test_data = [\n            (5, 3, 15),\n            (10, 10, 100),\n            (0.5, 2, 1.0),\n            (1, 1, 1),\n        ]\n\n    def tearDown(self):\n        \"\"\"\uac01 \ud14c\uc2a4\ud2b8 \uba54\uc11c\ub4dc \uc2e4\ud589 \ud6c4 \ud638\ucd9c\"\"\"\n        print(\"    tearDown: \ud14c\uc2a4\ud2b8 \uc815\ub9ac\")\n\n    def test_positive_numbers(self):\n        \"\"\"\uc591\uc218 \uc785\ub825 \ud14c\uc2a4\ud2b8\"\"\"\n        for length, width, expected in self.test_data:\n            with self.subTest(length=length, width=width):\n                result = calculate_area(length, width)\n                self.assertEqual(result, expected)\n                print(f\"      \u2713 {length} \u00d7 {width} = {result}\")\n\n    def test_zero_length_raises_error(self):\n        \"\"\"\uae38\uc774\uac00 0\uc77c \ub54c \uc608\uc678 \ubc1c\uc0dd \ud14c\uc2a4\ud2b8\"\"\"\n        with self.assertRaises(ValueError) as context:\n            calculate_area(0, 5)\n\n        self.assertIn(\"\uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4\", str(context.exception))\n        print(f\"      \u2713 \uae38\uc774 0 \uc608\uc678: {context.exception}\")\n\n    def test_negative_values_raise_error(self):\n        \"\"\"\uc74c\uc218 \uc785\ub825 \uc2dc \uc608\uc678 \ubc1c\uc0dd \ud14c\uc2a4\ud2b8\"\"\"\n        test_cases = [(-1, 5), (5, -1), (-1, -1)]\n\n        for length, width in test_cases:\n            with self.subTest(length=length, width=width):\n                with self.assertRaises(ValueError):\n                    calculate_area(length, width)\n                print(f\"      \u2713 \uc74c\uc218 \uc785\ub825 \uc608\uc678: ({length}, {width})\")\n\nclass TestIsPrime(unittest.TestCase):\n    \"\"\"is_prime \ud568\uc218 \ud14c\uc2a4\ud2b8 \ud074\ub798\uc2a4\"\"\"\n\n    def test_prime_numbers(self):\n        \"\"\"\uc18c\uc218 \ud310\ubcc4 \ud14c\uc2a4\ud2b8\"\"\"\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n        for num in primes:\n            with self.subTest(num=num):\n                self.assertTrue(is_prime(num))\n                print(f\"      \u2713 {num}\uc740 \uc18c\uc218\")\n\n    def test_non_prime_numbers(self):\n        \"\"\"\ud569\uc131\uc218 \ud310\ubcc4 \ud14c\uc2a4\ud2b8\"\"\"\n        non_primes = [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20]\n        for num in non_primes:\n            with self.subTest(num=num):\n                self.assertFalse(is_prime(num))\n                print(f\"      \u2713 {num}\uc740 \ud569\uc131\uc218\")\n\n    def test_edge_cases(self):\n        \"\"\"\uacbd\uacc4 \ucf00\uc774\uc2a4 \ud14c\uc2a4\ud2b8\"\"\"\n        edge_cases = [\n            (0, False, \"0\uc740 \uc18c\uc218\uac00 \uc544\ub2d8\"),\n            (1, False, \"1\uc740 \uc18c\uc218\uac00 \uc544\ub2d8\"),\n            (2, True, \"2\ub294 \uc18c\uc218\"),\n        ]\n\n        for num, expected, description in edge_cases:\n            with self.subTest(num=num):\n                self.assertEqual(is_prime(num), expected)\n                print(f\"      \u2713 {description}\")\n\ndef run_unittest_example():\n    \"\"\"unittest \uc2e4\ud589 \uc608\uc81c\"\"\"\n\n    print(\"10. unittest \uc2e4\ud589:\")\n\n    # \ud14c\uc2a4\ud2b8 \uc2a4\uc704\ud2b8 \uc0dd\uc131\n    loader = unittest.TestLoader()\n    suite = unittest.TestSuite()\n\n    # \ud14c\uc2a4\ud2b8 \ud074\ub798\uc2a4 \ucd94\uac00\n    suite.addTests(loader.loadTestsFromTestCase(TestCalculateArea))\n    suite.addTests(loader.loadTestsFromTestCase(TestIsPrime))\n\n    # \ud14c\uc2a4\ud2b8 \uc2e4\ud589\n    output = StringIO()\n    runner = unittest.TextTestRunner(stream=output, verbosity=2)\n    result = runner.run(suite)\n\n    print(f\"  \uc2e4\ud589\ub41c \ud14c\uc2a4\ud2b8: {result.testsRun}\uac1c\")\n    print(f\"  \uc2e4\ud328: {len(result.failures)}\uac1c\")\n    print(f\"  \uc5d0\ub7ec: {len(result.errors)}\uac1c\")\n    print(f\"  \uc131\uacf5\ub960: {((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100):.1f}%\")\n\nrun_unittest_example()\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#22-unittest","title":"2.2 \uace0\uae09 unittest \uae30\ubc95","text":"<pre><code>print(\"\\n=== \uace0\uae09 unittest \uae30\ubc95 ===\")\n\nimport unittest\nfrom unittest.mock import Mock, patch, MagicMock\nimport tempfile\nimport os\n\nclass TestBankAccount(unittest.TestCase):\n    \"\"\"BankAccount \ud074\ub798\uc2a4 \uace0\uae09 \ud14c\uc2a4\ud2b8\"\"\"\n\n    def setUp(self):\n        \"\"\"\ud14c\uc2a4\ud2b8 \uc900\ube44\"\"\"\n        self.account = BankAccount(1000)\n\n    def test_initial_balance(self):\n        \"\"\"\ucd08\uae30 \uc794\uc561 \ud14c\uc2a4\ud2b8\"\"\"\n        account = BankAccount(500)\n        self.assertEqual(account.balance, 500)\n        print(\"      \u2713 \ucd08\uae30 \uc794\uc561 \uc124\uc815\")\n\n    def test_deposit_increases_balance(self):\n        \"\"\"\uc785\uae08 \uc2dc \uc794\uc561 \uc99d\uac00 \ud14c\uc2a4\ud2b8\"\"\"\n        initial_balance = self.account.balance\n        deposit_amount = 200\n\n        result = self.account.deposit(deposit_amount)\n\n        self.assertEqual(result, initial_balance + deposit_amount)\n        self.assertEqual(self.account.balance, initial_balance + deposit_amount)\n        print(f\"      \u2713 \uc785\uae08 \ud6c4 \uc794\uc561: {self.account.balance}\")\n\n    def test_withdraw_decreases_balance(self):\n        \"\"\"\ucd9c\uae08 \uc2dc \uc794\uc561 \uac10\uc18c \ud14c\uc2a4\ud2b8\"\"\"\n        initial_balance = self.account.balance\n        withdraw_amount = 200\n\n        result = self.account.withdraw(withdraw_amount)\n\n        self.assertEqual(result, initial_balance - withdraw_amount)\n        self.assertEqual(self.account.balance, initial_balance - withdraw_amount)\n        print(f\"      \u2713 \ucd9c\uae08 \ud6c4 \uc794\uc561: {self.account.balance}\")\n\n    def test_withdraw_insufficient_funds(self):\n        \"\"\"\uc794\uc561 \ubd80\uc871 \uc2dc \ucd9c\uae08 \uc2e4\ud328 \ud14c\uc2a4\ud2b8\"\"\"\n        with self.assertRaises(ValueError) as context:\n            self.account.withdraw(2000)  # \uc794\uc561\ubcf4\ub2e4 \ub9ce\uc774 \ucd9c\uae08\n\n        self.assertIn(\"\uc794\uc561\uc774 \ubd80\uc871\", str(context.exception))\n        print(f\"      \u2713 \uc794\uc561 \ubd80\uc871 \uc608\uc678: {context.exception}\")\n\n    def test_transaction_history(self):\n        \"\"\"\uac70\ub798 \ub0b4\uc5ed \ud14c\uc2a4\ud2b8\"\"\"\n        self.account.deposit(500)\n        self.account.withdraw(200)\n\n        history = self.account.get_transaction_history()\n\n        self.assertEqual(len(history), 2)\n        self.assertIn(\"\uc785\uae08: 500\", history[0])\n        self.assertIn(\"\ucd9c\uae08: 200\", history[1])\n        print(f\"      \u2713 \uac70\ub798 \ub0b4\uc5ed: {history}\")\n\n    def test_multiple_operations(self):\n        \"\"\"\ubcf5\ud569 \uc5f0\uc0b0 \ud14c\uc2a4\ud2b8\"\"\"\n        operations = [\n            ('deposit', 500),\n            ('withdraw', 200),\n            ('deposit', 100),\n            ('withdraw', 50),\n        ]\n\n        expected_balance = 1000  # \ucd08\uae30 \uc794\uc561\n        for operation, amount in operations:\n            if operation == 'deposit':\n                self.account.deposit(amount)\n                expected_balance += amount\n            else:\n                self.account.withdraw(amount)\n                expected_balance -= amount\n\n        self.assertEqual(self.account.balance, expected_balance)\n        print(f\"      \u2713 \ubcf5\ud569 \uc5f0\uc0b0 \ud6c4 \uc794\uc561: {self.account.balance}\")\n\nclass TestWithMocking(unittest.TestCase):\n    \"\"\"\ubaa8\ud0b9\uc744 \ud65c\uc6a9\ud55c \ud14c\uc2a4\ud2b8\"\"\"\n\n    def test_file_operations_with_mock(self):\n        \"\"\"\ud30c\uc77c \uc5f0\uc0b0 \ubaa8\ud0b9 \ud14c\uc2a4\ud2b8\"\"\"\n\n        def read_config_file(filename):\n            \"\"\"\uc124\uc815 \ud30c\uc77c \uc77d\uae30 \ud568\uc218 (\ubaa8\ud0b9 \ub300\uc0c1)\"\"\"\n            with open(filename, 'r') as f:\n                return f.read()\n\n        # \ud30c\uc77c \uc77d\uae30 \ubaa8\ud0b9\n        mock_content = \"key=value\\nname=test\"\n\n        with patch('builtins.open', unittest.mock.mock_open(read_data=mock_content)):\n            result = read_config_file('config.txt')\n            self.assertEqual(result, mock_content)\n            print(\"      \u2713 \ud30c\uc77c \uc77d\uae30 \ubaa8\ud0b9 \uc131\uacf5\")\n\n    @patch('requests.get')\n    def test_api_call_with_mock(self, mock_get):\n        \"\"\"API \ud638\ucd9c \ubaa8\ud0b9 \ud14c\uc2a4\ud2b8\"\"\"\n\n        def fetch_user_data(user_id):\n            \"\"\"\uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \uac00\uc838\uc624\uae30 (\uc678\ubd80 API \ud638\ucd9c)\"\"\"\n            import requests\n            response = requests.get(f'https://api.example.com/users/{user_id}')\n            return response.json()\n\n        # Mock \uc751\ub2f5 \uc124\uc815\n        mock_response = Mock()\n        mock_response.json.return_value = {'id': 1, 'name': 'John Doe'}\n        mock_get.return_value = mock_response\n\n        # \ud14c\uc2a4\ud2b8 \uc2e4\ud589\n        result = fetch_user_data(1)\n\n        # \uac80\uc99d\n        self.assertEqual(result['name'], 'John Doe')\n        mock_get.assert_called_once_with('https://api.example.com/users/1')\n        print(f\"      \u2713 API \ubaa8\ud0b9 \uacb0\uacfc: {result}\")\n\ndef run_advanced_unittest():\n    \"\"\"\uace0\uae09 unittest \uc2e4\ud589\"\"\"\n\n    print(\"11. \uace0\uae09 unittest \uc2e4\ud589:\")\n\n    # \uac1c\ubcc4 \ud14c\uc2a4\ud2b8 \ud074\ub798\uc2a4 \uc2e4\ud589\n    test_classes = [TestBankAccount, TestWithMocking]\n\n    for test_class in test_classes:\n        print(f\"\\n  {test_class.__name__} \uc2e4\ud589:\")\n        suite = unittest.TestLoader().loadTestsFromTestCase(test_class)\n        runner = unittest.TextTestRunner(stream=StringIO(), verbosity=0)\n        result = runner.run(suite)\n\n        print(f\"    \ud14c\uc2a4\ud2b8 \uc218: {result.testsRun}\")\n        print(f\"    \uc131\uacf5\ub960: {((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100):.1f}%\")\n\nrun_advanced_unittest()\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#3-pytest","title":"3. pytest \ud504\ub808\uc784\uc6cc\ud06c","text":""},{"location":"tutorials/intermediate/chapter11_testing_debugging/#31-pytest","title":"3.1 pytest \uae30\ubcf8 \uc0ac\uc6a9\ubc95","text":"<pre><code>print(\"\\n=== pytest \uae30\ubcf8 \uc0ac\uc6a9\ubc95 ===\")\n\n# pytest\ub294 \uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ubbc0\ub85c \uc2dc\ubbac\ub808\uc774\uc158\uc73c\ub85c \uc124\uba85\ndef demonstrate_pytest_features():\n    \"\"\"pytest \ud2b9\uc9d5\uacfc \uc7a5\uc810 \uc124\uba85\"\"\"\n\n    print(\"12. pytest\uc758 \uc7a5\uc810:\")\n    print(\"  - \uac04\ub2e8\ud55c assert \ubb38 \uc0ac\uc6a9\")\n    print(\"  - \uc790\ub3d9 \ud14c\uc2a4\ud2b8 \ubc1c\uacac\")\n    print(\"  - \ud48d\ubd80\ud55c \ud50c\ub7ec\uadf8\uc778 \uc0dd\ud0dc\uacc4\")\n    print(\"  - \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud14c\uc2a4\ud2b8\")\n    print(\"  - \ud53d\uc2a4\ucc98(Fixture) \uc2dc\uc2a4\ud15c\")\n    print(\"  - \ub354 \uc77d\uae30 \uc26c\uc6b4 \ucd9c\ub825\")\n    print()\n\n    print(\"13. pytest \uc2a4\ud0c0\uc77c \ud14c\uc2a4\ud2b8 \uc608\uc81c:\")\n\ndemonstrate_pytest_features()\n\n# pytest \uc2a4\ud0c0\uc77c \ud14c\uc2a4\ud2b8 \ud568\uc218\ub4e4 (\uc2e4\uc81c\ub85c\ub294 pytest\ub85c \uc2e4\ud589)\ndef test_calculate_area_positive():\n    \"\"\"pytest \uc2a4\ud0c0\uc77c: \uc591\uc218 \ud14c\uc2a4\ud2b8\"\"\"\n    result = calculate_area(5, 3)\n    assert result == 15\n    print(\"      pytest: calculate_area(5, 3) == 15\")\n\ndef test_calculate_area_zero_raises_exception():\n    \"\"\"pytest \uc2a4\ud0c0\uc77c: \uc608\uc678 \ud14c\uc2a4\ud2b8\"\"\"\n    try:\n        calculate_area(0, 5)\n        assert False, \"\uc608\uc678\uac00 \ubc1c\uc0dd\ud574\uc57c \ud568\"\n    except ValueError:\n        assert True\n        print(\"      pytest: 0 \uc785\ub825 \uc2dc ValueError \ubc1c\uc0dd\")\n\ndef test_is_prime_with_various_numbers():\n    \"\"\"pytest \uc2a4\ud0c0\uc77c: \ub2e4\uc591\ud55c \uc785\ub825 \ud14c\uc2a4\ud2b8\"\"\"\n    test_cases = [\n        (2, True),\n        (3, True),\n        (4, False),\n        (17, True),\n        (18, False),\n    ]\n\n    for number, expected in test_cases:\n        result = is_prime(number)\n        assert result == expected\n        print(f\"      pytest: is_prime({number}) == {expected}\")\n\n# pytest \uc2a4\ud0c0\uc77c \ud074\ub798\uc2a4 \ud14c\uc2a4\ud2b8\nclass TestBankAccountPytest:\n    \"\"\"pytest \uc2a4\ud0c0\uc77c BankAccount \ud14c\uc2a4\ud2b8\"\"\"\n\n    def setup_method(self):\n        \"\"\"\uac01 \ud14c\uc2a4\ud2b8 \uba54\uc11c\ub4dc \uc804\uc5d0 \uc2e4\ud589\"\"\"\n        self.account = BankAccount(1000)\n        print(\"      pytest setup: \uacc4\uc88c \uc0dd\uc131\")\n\n    def test_deposit(self):\n        \"\"\"\uc785\uae08 \ud14c\uc2a4\ud2b8\"\"\"\n        result = self.account.deposit(500)\n        assert result == 1500\n        assert self.account.balance == 1500\n        print(\"      pytest: \uc785\uae08 \ud14c\uc2a4\ud2b8 \ud1b5\uacfc\")\n\n    def test_withdraw_sufficient_funds(self):\n        \"\"\"\ucda9\ubd84\ud55c \uc794\uc561 \ucd9c\uae08 \ud14c\uc2a4\ud2b8\"\"\"\n        result = self.account.withdraw(300)\n        assert result == 700\n        assert self.account.balance == 700\n        print(\"      pytest: \ucd9c\uae08 \ud14c\uc2a4\ud2b8 \ud1b5\uacfc\")\n\ndef run_pytest_style_tests():\n    \"\"\"pytest \uc2a4\ud0c0\uc77c \ud14c\uc2a4\ud2b8 \uc2e4\ud589 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n\n    print(\"14. pytest \uc2a4\ud0c0\uc77c \ud14c\uc2a4\ud2b8 \uc2e4\ud589:\")\n\n    # \ud568\uc218 \ud14c\uc2a4\ud2b8 \uc2e4\ud589\n    try:\n        test_calculate_area_positive()\n        test_calculate_area_zero_raises_exception()\n        test_is_prime_with_various_numbers()\n        print(\"  \u2713 \ud568\uc218 \ud14c\uc2a4\ud2b8 \ubaa8\ub450 \ud1b5\uacfc\")\n    except Exception as e:\n        print(f\"  \u2717 \ud568\uc218 \ud14c\uc2a4\ud2b8 \uc2e4\ud328: {e}\")\n\n    # \ud074\ub798\uc2a4 \ud14c\uc2a4\ud2b8 \uc2e4\ud589\n    try:\n        test_instance = TestBankAccountPytest()\n        test_instance.setup_method()\n        test_instance.test_deposit()\n\n        test_instance.setup_method()\n        test_instance.test_withdraw_sufficient_funds()\n        print(\"  \u2713 \ud074\ub798\uc2a4 \ud14c\uc2a4\ud2b8 \ubaa8\ub450 \ud1b5\uacfc\")\n    except Exception as e:\n        print(f\"  \u2717 \ud074\ub798\uc2a4 \ud14c\uc2a4\ud2b8 \uc2e4\ud328: {e}\")\n\nrun_pytest_style_tests()\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#32-pytest","title":"3.2 pytest \uace0\uae09 \uae30\ub2a5","text":"<pre><code>print(\"\\n=== pytest \uace0\uae09 \uae30\ub2a5 ===\")\n\n# \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud14c\uc2a4\ud2b8 \uc2dc\ubbac\ub808\uc774\uc158\ndef simulate_parametrized_test():\n    \"\"\"\ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud14c\uc2a4\ud2b8 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n\n    print(\"15. \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud14c\uc2a4\ud2b8:\")\n\n    # pytest.mark.parametrize\uc640 \uc720\uc0ac\ud55c \ud6a8\uacfc\n    test_data = [\n        (2, True, \"2\ub294 \uc18c\uc218\"),\n        (3, True, \"3\uc740 \uc18c\uc218\"),\n        (4, False, \"4\ub294 \ud569\uc131\uc218\"),\n        (17, True, \"17\uc740 \uc18c\uc218\"),\n        (18, False, \"18\uc740 \ud569\uc131\uc218\"),\n        (97, True, \"97\uc740 \uc18c\uc218\"),\n        (100, False, \"100\uc740 \ud569\uc131\uc218\"),\n    ]\n\n    print(\"  @pytest.mark.parametrize \uc2dc\ubbac\ub808\uc774\uc158:\")\n    for number, expected, description in test_data:\n        result = is_prime(number)\n        status = \"\u2713\" if result == expected else \"\u2717\"\n        print(f\"    {status} {description}: is_prime({number}) = {result}\")\n\nsimulate_parametrized_test()\n\n# \ud53d\uc2a4\ucc98 \uc2dc\ubbac\ub808\uc774\uc158\nclass PytestFixtureSimulation:\n    \"\"\"pytest \ud53d\uc2a4\ucc98 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n\n    def __init__(self):\n        self.fixtures = {}\n\n    def fixture(self, name, factory):\n        \"\"\"\ud53d\uc2a4\ucc98 \ub4f1\ub85d\"\"\"\n        self.fixtures[name] = factory\n\n    def get_fixture(self, name):\n        \"\"\"\ud53d\uc2a4\ucc98 \uac00\uc838\uc624\uae30\"\"\"\n        return self.fixtures[name]()\n\ndef simulate_fixtures():\n    \"\"\"pytest \ud53d\uc2a4\ucc98 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n\n    print(f\"\\n16. pytest \ud53d\uc2a4\ucc98 \uc2dc\ubbac\ub808\uc774\uc158:\")\n\n    fixture_manager = PytestFixtureSimulation()\n\n    # \ud53d\uc2a4\ucc98 \uc815\uc758\n    def sample_account():\n        \"\"\"\uacc4\uc88c \ud53d\uc2a4\ucc98\"\"\"\n        account = BankAccount(1000)\n        account.deposit(500)\n        return account\n\n    def sample_data():\n        \"\"\"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ud53d\uc2a4\ucc98\"\"\"\n        return {\n            'users': ['Alice', 'Bob', 'Charlie'],\n            'numbers': [1, 2, 3, 4, 5],\n            'config': {'debug': True, 'timeout': 30}\n        }\n\n    # \ud53d\uc2a4\ucc98 \ub4f1\ub85d\n    fixture_manager.fixture('account', sample_account)\n    fixture_manager.fixture('test_data', sample_data)\n\n    # \ud53d\uc2a4\ucc98 \uc0ac\uc6a9 \ud14c\uc2a4\ud2b8\n    print(\"  \ud53d\uc2a4\ucc98 \uae30\ubc18 \ud14c\uc2a4\ud2b8:\")\n\n    # \uacc4\uc88c \ud53d\uc2a4\ucc98 \uc0ac\uc6a9\n    account = fixture_manager.get_fixture('account')\n    print(f\"    \uacc4\uc88c \ud53d\uc2a4\ucc98 \uc794\uc561: {account.balance}\")\n\n    # \ub370\uc774\ud130 \ud53d\uc2a4\ucc98 \uc0ac\uc6a9\n    data = fixture_manager.get_fixture('test_data')\n    print(f\"    \ub370\uc774\ud130 \ud53d\uc2a4\ucc98 \uc0ac\uc6a9\uc790 \uc218: {len(data['users'])}\")\n\n    # \ud53d\uc2a4\ucc98\ub97c \ud65c\uc6a9\ud55c \ud14c\uc2a4\ud2b8\n    account.withdraw(200)\n    assert account.balance == 1300\n    print(\"    \u2713 \ud53d\uc2a4\ucc98 \uae30\ubc18 \ucd9c\uae08 \ud14c\uc2a4\ud2b8 \ud1b5\uacfc\")\n\nsimulate_fixtures()\n\ndef demonstrate_pytest_plugins():\n    \"\"\"pytest \ud50c\ub7ec\uadf8\uc778 \uae30\ub2a5 \uc124\uba85\"\"\"\n\n    print(f\"\\n17. pytest \uc8fc\uc694 \ud50c\ub7ec\uadf8\uc778:\")\n\n    plugins = {\n        'pytest-cov': '\ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815',\n        'pytest-mock': '\uac1c\uc120\ub41c \ubaa8\ud0b9 \uae30\ub2a5',\n        'pytest-xdist': '\ubcd1\ub82c \ud14c\uc2a4\ud2b8 \uc2e4\ud589',\n        'pytest-html': 'HTML \ud14c\uc2a4\ud2b8 \ub9ac\ud3ec\ud2b8',\n        'pytest-bdd': 'BDD \uc2a4\ud0c0\uc77c \ud14c\uc2a4\ud2b8',\n        'pytest-django': 'Django \ud14c\uc2a4\ud2b8 \uc9c0\uc6d0',\n        'pytest-asyncio': '\ube44\ub3d9\uae30 \ud14c\uc2a4\ud2b8 \uc9c0\uc6d0',\n    }\n\n    for plugin, description in plugins.items():\n        print(f\"  {plugin}: {description}\")\n\n    print(f\"\\n  \uc0ac\uc6a9 \uc608\uc2dc:\")\n    print(f\"    pip install pytest pytest-cov pytest-mock\")\n    print(f\"    pytest --cov=mypackage tests/\")\n    print(f\"    pytest -n 4  # 4\uac1c \ud504\ub85c\uc138\uc2a4\ub85c \ubcd1\ub82c \uc2e4\ud589\")\n\ndemonstrate_pytest_plugins()\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#4","title":"4. \ub514\ubc84\uae45 \uae30\ubc95\uacfc \ub3c4\uad6c","text":""},{"location":"tutorials/intermediate/chapter11_testing_debugging/#41","title":"4.1 \uae30\ubcf8 \ub514\ubc84\uae45 \uae30\ubc95","text":"<pre><code>print(\"\\n=== \uae30\ubcf8 \ub514\ubc84\uae45 \uae30\ubc95 ===\")\n\nimport logging\nimport traceback\nimport pdb\n\n# \ub514\ubc84\uae45\uc6a9 \uc608\uc81c \ud568\uc218\ub4e4\ndef buggy_function(numbers):\n    \"\"\"\ubc84\uadf8\uac00 \uc788\ub294 \ud568\uc218 (\ub514\ubc84\uae45 \uc608\uc81c\uc6a9)\"\"\"\n    total = 0\n    for i, num in enumerate(numbers):\n        if i == 0:\n            continue  # \uccab \ubc88\uc9f8 \uc694\uc18c \uac74\ub108\ub6f0\uae30 (\uc758\ub3c4\uc801 \ubc84\uadf8)\n        total += num / (i - 1)  # ZeroDivisionError \uac00\ub2a5\uc131\n    return total\n\ndef process_user_data(users):\n    \"\"\"\uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \ucc98\ub9ac (\ub514\ubc84\uae45 \uc608\uc81c\uc6a9)\"\"\"\n    processed = []\n    for user in users:\n        # \ud0a4 \uc5d0\ub7ec \uac00\ub2a5\uc131\n        full_name = f\"{user['first_name']} {user['last_name']}\"\n        age = user.get('age', 0)\n\n        if age &gt;= 18:\n            processed.append({\n                'name': full_name,\n                'status': 'adult',\n                'category': determine_category(age)\n            })\n    return processed\n\ndef determine_category(age):\n    \"\"\"\ub098\uc774\ubcc4 \uce74\ud14c\uace0\ub9ac \uacb0\uc815\"\"\"\n    if age &lt; 18:\n        return 'minor'\n    elif age &lt; 30:\n        return 'young_adult'\n    elif age &lt; 60:\n        return 'adult'\n    else:\n        return 'senior'\n\ndef demonstrate_print_debugging():\n    \"\"\"print \ub514\ubc84\uae45 \uae30\ubc95\"\"\"\n\n    print(\"18. print\ub97c \ud65c\uc6a9\ud55c \ub514\ubc84\uae45:\")\n\n    def debug_buggy_function(numbers):\n        \"\"\"\ub514\ubc84\uadf8 \ubc84\uc804\uc758 buggy_function\"\"\"\n        print(f\"  \ub514\ubc84\uadf8: \uc785\ub825 numbers = {numbers}\")\n        total = 0\n\n        for i, num in enumerate(numbers):\n            print(f\"  \ub514\ubc84\uadf8: \uc778\ub371\uc2a4 {i}, \uac12 {num}\")\n\n            if i == 0:\n                print(f\"  \ub514\ubc84\uadf8: \uccab \ubc88\uc9f8 \uc694\uc18c \uac74\ub108\ub6f0\uae30\")\n                continue\n\n            divisor = i - 1\n            print(f\"  \ub514\ubc84\uadf8: {num} / {divisor}\")\n\n            if divisor == 0:\n                print(f\"  \ub514\ubc84\uadf8: 0\uc73c\ub85c \ub098\ub204\uae30 \uac10\uc9c0! \uc218\uc815 \ud544\uc694\")\n                continue  # \ubc84\uadf8 \uc218\uc815\n\n            result = num / divisor\n            total += result\n            print(f\"  \ub514\ubc84\uadf8: \uc911\uac04 \ud569\uacc4 = {total}\")\n\n        print(f\"  \ub514\ubc84\uadf8: \ucd5c\uc885 \uacb0\uacfc = {total}\")\n        return total\n\n    # \ud14c\uc2a4\ud2b8 \uc2e4\ud589\n    test_numbers = [10, 20, 30, 40]\n    try:\n        result = debug_buggy_function(test_numbers)\n        print(f\"  \uacb0\uacfc: {result}\")\n    except Exception as e:\n        print(f\"  \uc5d0\ub7ec: {e}\")\n\ndemonstrate_print_debugging()\n\ndef demonstrate_logging_debugging():\n    \"\"\"\ub85c\uae45\uc744 \ud65c\uc6a9\ud55c \ub514\ubc84\uae45\"\"\"\n\n    print(f\"\\n19. logging\uc744 \ud65c\uc6a9\ud55c \ub514\ubc84\uae45:\")\n\n    # \ub85c\uac70 \uc124\uc815\n    logger = logging.getLogger('debug_logger')\n    logger.setLevel(logging.DEBUG)\n\n    # \ucf58\uc194 \ud578\ub4e4\ub7ec \uc124\uc815\n    if not logger.handlers:\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n            datefmt='%H:%M:%S'\n        )\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n\n    def debug_process_user_data(users):\n        \"\"\"\ub85c\uae45 \ubc84\uc804\uc758 process_user_data\"\"\"\n        logger.info(f\"\uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \ucc98\ub9ac \uc2dc\uc791: {len(users)}\uba85\")\n        processed = []\n\n        for i, user in enumerate(users):\n            logger.debug(f\"\uc0ac\uc6a9\uc790 {i+1} \ucc98\ub9ac \uc911: {user}\")\n\n            try:\n                # \ud544\uc218 \ud544\ub4dc \uac80\uc99d\n                if 'first_name' not in user or 'last_name' not in user:\n                    logger.warning(f\"\uc0ac\uc6a9\uc790 {i+1}: \uc774\ub984 \ud544\ub4dc \ub204\ub77d\")\n                    continue\n\n                full_name = f\"{user['first_name']} {user['last_name']}\"\n                age = user.get('age', 0)\n\n                logger.debug(f\"\ucc98\ub9ac\ub41c \uc774\ub984: {full_name}, \ub098\uc774: {age}\")\n\n                if age &gt;= 18:\n                    category = determine_category(age)\n                    user_data = {\n                        'name': full_name,\n                        'status': 'adult',\n                        'category': category\n                    }\n                    processed.append(user_data)\n                    logger.info(f\"\uc131\uc778 \uc0ac\uc6a9\uc790 \ucd94\uac00: {full_name} ({category})\")\n                else:\n                    logger.info(f\"\ubbf8\uc131\ub144\uc790 \uc81c\uc678: {full_name}\")\n\n            except Exception as e:\n                logger.error(f\"\uc0ac\uc6a9\uc790 {i+1} \ucc98\ub9ac \uc911 \uc624\ub958: {e}\")\n                logger.debug(f\"\uc624\ub958 \uc0c1\uc138:\", exc_info=True)\n\n        logger.info(f\"\ucc98\ub9ac \uc644\ub8cc: {len(processed)}\uba85 \ucc98\ub9ac\ub428\")\n        return processed\n\n    # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\n    test_users = [\n        {'first_name': 'John', 'last_name': 'Doe', 'age': 25},\n        {'first_name': 'Jane', 'last_name': 'Smith', 'age': 17},\n        {'first_name': 'Bob', 'last_name': 'Wilson', 'age': 35},\n        {'first_name': 'Alice'},  # last_name \ub204\ub77d\n        {'last_name': 'Brown', 'age': 45},  # first_name \ub204\ub77d\n    ]\n\n    result = debug_process_user_data(test_users)\n    print(f\"  \ucc98\ub9ac\ub41c \uc0ac\uc6a9\uc790 \uc218: {len(result)}\")\n\ndemonstrate_logging_debugging()\n\ndef demonstrate_assertion_debugging():\n    \"\"\"assert\ub97c \ud65c\uc6a9\ud55c \ub514\ubc84\uae45\"\"\"\n\n    print(f\"\\n20. assert\ub97c \ud65c\uc6a9\ud55c \ub514\ubc84\uae45:\")\n\n    def safe_divide(a, b, debug=True):\n        \"\"\"\uc548\uc804\ud55c \ub098\ub217\uc148 (assertion \ud3ec\ud568)\"\"\"\n        if debug:\n            assert isinstance(a, (int, float)), f\"a\ub294 \uc22b\uc790\uc5ec\uc57c \ud568: {type(a)}\"\n            assert isinstance(b, (int, float)), f\"b\ub294 \uc22b\uc790\uc5ec\uc57c \ud568: {type(b)}\"\n            assert b != 0, f\"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc74c: b = {b}\"\n\n        result = a / b\n\n        if debug:\n            assert result == a / b, \"\uacc4\uc0b0 \uacb0\uacfc \uac80\uc99d \uc2e4\ud328\"\n\n        return result\n\n    # \ud14c\uc2a4\ud2b8\n    test_cases = [\n        (10, 2, \"\uc815\uc0c1 \ucf00\uc774\uc2a4\"),\n        (15, 3, \"\uc815\uc0c1 \ucf00\uc774\uc2a4 2\"),\n        # (10, 0, \"0\uc73c\ub85c \ub098\ub204\uae30\"),  # \uc8fc\uc11d \ucc98\ub9ac (\uc5d0\ub7ec \ubc29\uc9c0)\n        # (\"10\", 2, \"\ubb38\uc790\uc5f4 \uc785\ub825\"),  # \uc8fc\uc11d \ucc98\ub9ac (\uc5d0\ub7ec \ubc29\uc9c0)\n    ]\n\n    for a, b, description in test_cases:\n        try:\n            result = safe_divide(a, b)\n            print(f\"  \u2713 {description}: {a} / {b} = {result}\")\n        except AssertionError as e:\n            print(f\"  \u2717 {description}: \uac80\uc99d \uc2e4\ud328 - {e}\")\n        except Exception as e:\n            print(f\"  \u2717 {description}: \uc624\ub958 - {e}\")\n\ndemonstrate_assertion_debugging()\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#42","title":"4.2 \uace0\uae09 \ub514\ubc84\uae45 \ub3c4\uad6c","text":"<pre><code>print(\"\\n=== \uace0\uae09 \ub514\ubc84\uae45 \ub3c4\uad6c ===\")\n\nimport sys\nimport traceback\nimport cProfile\nimport time\n\ndef demonstrate_traceback_debugging():\n    \"\"\"traceback\uc744 \ud65c\uc6a9\ud55c \ub514\ubc84\uae45\"\"\"\n\n    print(\"21. traceback\uc744 \ud65c\uc6a9\ud55c \uc624\ub958 \ucd94\uc801:\")\n\n    def level1():\n        level2()\n\n    def level2():\n        level3()\n\n    def level3():\n        # \uc758\ub3c4\uc801 \uc624\ub958 \ubc1c\uc0dd\n        raise ValueError(\"\uc758\ub3c4\uc801 \uc624\ub958\")\n\n    try:\n        level1()\n    except Exception:\n        print(\"  \uc2a4\ud0dd \ucd94\uc801 \uc815\ubcf4:\")\n        tb_str = traceback.format_exc()\n        print(\"    \" + tb_str.replace('\\n', '\\n    '))\n\n        print(\"  \uc2a4\ud0dd \ud504\ub808\uc784 \ubd84\uc11d:\")\n        tb = sys.exc_info()[2]\n        while tb:\n            frame = tb.tb_frame\n            print(f\"    \ud30c\uc77c: {frame.f_code.co_filename}\")\n            print(f\"    \ud568\uc218: {frame.f_code.co_name}\")\n            print(f\"    \ub77c\uc778: {tb.tb_lineno}\")\n            print()\n            tb = tb.tb_next\n\ndemonstrate_traceback_debugging()\n\ndef demonstrate_profiling():\n    \"\"\"\ud504\ub85c\ud30c\uc77c\ub9c1\uc744 \ud65c\uc6a9\ud55c \uc131\ub2a5 \ub514\ubc84\uae45\"\"\"\n\n    print(\"22. \uc131\ub2a5 \ud504\ub85c\ud30c\uc77c\ub9c1:\")\n\n    def slow_function():\n        \"\"\"\ub290\ub9b0 \ud568\uc218 (\ucd5c\uc801\ud654 \ub300\uc0c1)\"\"\"\n        result = []\n        for i in range(10000):\n            # \ube44\ud6a8\uc728\uc801\uc778 \ubb38\uc790\uc5f4 \uc5f0\uacb0\n            temp = \"\"\n            for j in range(100):\n                temp += str(j)\n            result.append(temp)\n        return result\n\n    def optimized_function():\n        \"\"\"\ucd5c\uc801\ud654\ub41c \ud568\uc218\"\"\"\n        result = []\n        for i in range(10000):\n            # \ud6a8\uc728\uc801\uc778 \ubb38\uc790\uc5f4 \uc5f0\uacb0\n            temp = ''.join(str(j) for j in range(100))\n            result.append(temp)\n        return result\n\n    # \uc2e4\ud589 \uc2dc\uac04 \uce21\uc815\n    print(\"  \uc2e4\ud589 \uc2dc\uac04 \ube44\uad50:\")\n\n    start_time = time.time()\n    slow_result = slow_function()\n    slow_time = time.time() - start_time\n    print(f\"    \ub290\ub9b0 \ud568\uc218: {slow_time:.4f}\ucd08\")\n\n    start_time = time.time()\n    optimized_result = optimized_function()\n    optimized_time = time.time() - start_time\n    print(f\"    \ucd5c\uc801\ud654\ub41c \ud568\uc218: {optimized_time:.4f}\ucd08\")\n\n    if slow_time &gt; 0:\n        improvement = slow_time / optimized_time\n        print(f\"    \uc131\ub2a5 \ud5a5\uc0c1: {improvement:.2f}\ubc30\")\n\ndemonstrate_profiling()\n\nclass DebugContext:\n    \"\"\"\ub514\ubc84\uae45 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n\n    def __init__(self, name, debug=True):\n        self.name = name\n        self.debug = debug\n        self.start_time = None\n\n    def __enter__(self):\n        if self.debug:\n            self.start_time = time.time()\n            print(f\"  \ub514\ubc84\uadf8: {self.name} \uc2dc\uc791\")\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if self.debug:\n            end_time = time.time()\n            duration = end_time - self.start_time\n\n            if exc_type:\n                print(f\"  \ub514\ubc84\uadf8: {self.name} \uc2e4\ud328 ({duration:.4f}\ucd08)\")\n                print(f\"  \ub514\ubc84\uadf8: \uc608\uc678 \ud0c0\uc785: {exc_type.__name__}\")\n                print(f\"  \ub514\ubc84\uadf8: \uc608\uc678 \uba54\uc2dc\uc9c0: {exc_val}\")\n            else:\n                print(f\"  \ub514\ubc84\uadf8: {self.name} \uc644\ub8cc ({duration:.4f}\ucd08)\")\n\ndef demonstrate_debug_context():\n    \"\"\"\ub514\ubc84\uae45 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc0ac\uc6a9\"\"\"\n\n    print(f\"\\n23. \ub514\ubc84\uae45 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800:\")\n\n    with DebugContext(\"\ub370\uc774\ud130 \ucc98\ub9ac\"):\n        # \uc815\uc0c1 \ucc98\ub9ac\n        data = [i for i in range(1000)]\n        result = sum(data)\n        print(f\"    \ucc98\ub9ac \uacb0\uacfc: {result}\")\n\n    try:\n        with DebugContext(\"\uc624\ub958 \ubc1c\uc0dd \uc791\uc5c5\"):\n            # \uc758\ub3c4\uc801 \uc624\ub958\n            raise RuntimeError(\"\ud14c\uc2a4\ud2b8 \uc624\ub958\")\n    except RuntimeError:\n        pass  # \uc624\ub958 \ubb34\uc2dc (\ub370\ubaa8\uc6a9)\n\ndemonstrate_debug_context()\n\ndef demonstrate_debugging_best_practices():\n    \"\"\"\ub514\ubc84\uae45 \ubaa8\ubc94 \uc0ac\ub840\"\"\"\n\n    print(f\"\\n24. \ub514\ubc84\uae45 \ubaa8\ubc94 \uc0ac\ub840:\")\n\n    practices = [\n        \"\uc791\uc740 \ub2e8\uc704\ub85c \ud14c\uc2a4\ud2b8\ud558\uae30\",\n        \"\ub85c\uadf8 \ub808\ubca8\uc744 \uc801\uc808\ud788 \uc0ac\uc6a9\ud558\uae30 (DEBUG, INFO, WARNING, ERROR)\",\n        \"\uc7ac\ud604 \uac00\ub2a5\ud55c \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \ub9cc\ub4e4\uae30\",\n        \"\ucf54\ub4dc \ub9ac\ubdf0\ub97c \ud1b5\ud55c \uc0ac\uc804 \ubc84\uadf8 \ubc29\uc9c0\",\n        \"\uc790\ub3d9\ud654\ub41c \ud14c\uc2a4\ud2b8\ub85c \ud68c\uadc0 \ubc84\uadf8 \ubc29\uc9c0\",\n        \"\uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \uba85\ud655\ud558\uace0 \ub3c4\uc6c0\uc774 \ub418\ub3c4\ub85d \uc791\uc131\",\n        \"\ub514\ubc84\uae45 \uc815\ubcf4\ub294 \ud504\ub85c\ub355\uc158\uc5d0\uc11c \uc81c\uac70\ud558\uae30\",\n        \"\ubc84\uadf8 \uc218\uc815 \ud6c4 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \ucd94\uac00\ud558\uae30\"\n    ]\n\n    for i, practice in enumerate(practices, 1):\n        print(f\"  {i}. {practice}\")\n\ndemonstrate_debugging_best_practices()\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#5-tdd","title":"5. \ud14c\uc2a4\ud2b8 \uc8fc\ub3c4 \uac1c\ubc1c (TDD)","text":""},{"location":"tutorials/intermediate/chapter11_testing_debugging/#51-tdd","title":"5.1 TDD \uae30\ubcf8 \uac1c\ub150\uacfc \uc0ac\uc774\ud074","text":"<pre><code>print(\"\\n=== \ud14c\uc2a4\ud2b8 \uc8fc\ub3c4 \uac1c\ubc1c (TDD) ===\")\n\ndef demonstrate_tdd_concept():\n    \"\"\"TDD \uac1c\ub150 \uc124\uba85\"\"\"\n\n    print(\"25. TDD (Test-Driven Development) \uac1c\ub150:\")\n    print(\"  Red-Green-Refactor \uc0ac\uc774\ud074:\")\n    print(\"    \ud83d\udd34 Red: \uc2e4\ud328\ud558\ub294 \ud14c\uc2a4\ud2b8 \uc791\uc131\")\n    print(\"    \ud83d\udfe2 Green: \ud14c\uc2a4\ud2b8\ub97c \ud1b5\uacfc\ud558\ub294 \ucd5c\uc18c\ud55c\uc758 \ucf54\ub4dc \uc791\uc131\")\n    print(\"    \ud83d\udd35 Refactor: \ucf54\ub4dc \uac1c\uc120 (\uae30\ub2a5\uc740 \uc720\uc9c0)\")\n    print()\n\n    print(\"26. TDD\uc758 \uc7a5\uc810:\")\n    print(\"  - \uc694\uad6c\uc0ac\ud56d\uc744 \uba85\ud655\ud788 \uc774\ud574\")\n    print(\"  - \ubc84\uadf8 \uc870\uae30 \ubc1c\uacac\")\n    print(\"  - \ub9ac\ud329\ud1a0\ub9c1 \uc548\uc804\uc131\")\n    print(\"  - \ucf54\ub4dc \ud488\uc9c8 \ud5a5\uc0c1\")\n    print(\"  - \ubb38\uc11c\ud654 \ud6a8\uacfc\")\n\ndemonstrate_tdd_concept()\n\n# TDD \uc608\uc81c: \uac04\ub2e8\ud55c \uacc4\uc0b0\uae30 \ud074\ub798\uc2a4 \uac1c\ubc1c\nclass CalculatorTDD:\n    \"\"\"TDD\ub85c \uac1c\ubc1c\ud558\ub294 \uacc4\uc0b0\uae30 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        self.result = 0\n        self.history = []\n\n    def add(self, value):\n        \"\"\"\ub367\uc148\"\"\"\n        old_result = self.result\n        self.result += value\n        self.history.append(f\"{old_result} + {value} = {self.result}\")\n        return self.result\n\n    def subtract(self, value):\n        \"\"\"\ube84\uc148\"\"\"\n        old_result = self.result\n        self.result -= value\n        self.history.append(f\"{old_result} - {value} = {self.result}\")\n        return self.result\n\n    def multiply(self, value):\n        \"\"\"\uacf1\uc148\"\"\"\n        old_result = self.result\n        self.result *= value\n        self.history.append(f\"{old_result} \u00d7 {value} = {self.result}\")\n        return self.result\n\n    def divide(self, value):\n        \"\"\"\ub098\ub217\uc148\"\"\"\n        if value == 0:\n            raise ValueError(\"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n\n        old_result = self.result\n        self.result /= value\n        self.history.append(f\"{old_result} \u00f7 {value} = {self.result}\")\n        return self.result\n\n    def clear(self):\n        \"\"\"\ucd08\uae30\ud654\"\"\"\n        self.result = 0\n        self.history.clear()\n\n    def get_history(self):\n        \"\"\"\uacc4\uc0b0 \uc774\ub825 \ubc18\ud658\"\"\"\n        return self.history.copy()\n\ndef demonstrate_tdd_cycle():\n    \"\"\"TDD \uc0ac\uc774\ud074 \uc2dc\uc5f0\"\"\"\n\n    print(f\"\\n27. TDD \uc0ac\uc774\ud074 \uc2dc\uc5f0 (\uacc4\uc0b0\uae30 \uac1c\ubc1c):\")\n\n    # Step 1: Red - \uc2e4\ud328\ud558\ub294 \ud14c\uc2a4\ud2b8 \uc791\uc131\n    print(\"  \ud83d\udd34 Red Phase: \ud14c\uc2a4\ud2b8 \uc791\uc131\")\n\n    def test_calculator_initial_state():\n        \"\"\"\ucd08\uae30 \uc0c1\ud0dc \ud14c\uc2a4\ud2b8\"\"\"\n        calc = CalculatorTDD()\n        assert calc.result == 0\n        print(\"    \u2713 \ucd08\uae30 \uacb0\uacfc\uac12 0 \ud14c\uc2a4\ud2b8\")\n\n    def test_calculator_add():\n        \"\"\"\ub367\uc148 \ud14c\uc2a4\ud2b8\"\"\"\n        calc = CalculatorTDD()\n        result = calc.add(5)\n        assert result == 5\n        assert calc.result == 5\n        print(\"    \u2713 \ub367\uc148 \ud14c\uc2a4\ud2b8 (0 + 5 = 5)\")\n\n    def test_calculator_chain_operations():\n        \"\"\"\uc5f0\uc18d \uc5f0\uc0b0 \ud14c\uc2a4\ud2b8\"\"\"\n        calc = CalculatorTDD()\n        calc.add(10)\n        calc.subtract(3)\n        calc.multiply(2)\n        assert calc.result == 14  # (0 + 10 - 3) * 2 = 14\n        print(\"    \u2713 \uc5f0\uc18d \uc5f0\uc0b0 \ud14c\uc2a4\ud2b8\")\n\n    def test_calculator_divide_by_zero():\n        \"\"\"0\uc73c\ub85c \ub098\ub204\uae30 \uc608\uc678 \ud14c\uc2a4\ud2b8\"\"\"\n        calc = CalculatorTDD()\n        calc.add(10)\n        try:\n            calc.divide(0)\n            assert False, \"\uc608\uc678\uac00 \ubc1c\uc0dd\ud574\uc57c \ud568\"\n        except ValueError:\n            assert True\n            print(\"    \u2713 0\uc73c\ub85c \ub098\ub204\uae30 \uc608\uc678 \ud14c\uc2a4\ud2b8\")\n\n    def test_calculator_history():\n        \"\"\"\uacc4\uc0b0 \uc774\ub825 \ud14c\uc2a4\ud2b8\"\"\"\n        calc = CalculatorTDD()\n        calc.add(5)\n        calc.multiply(3)\n\n        history = calc.get_history()\n        assert len(history) == 2\n        assert \"0 + 5 = 5\" in history[0]\n        assert \"5 \u00d7 3 = 15\" in history[1]\n        print(\"    \u2713 \uacc4\uc0b0 \uc774\ub825 \ud14c\uc2a4\ud2b8\")\n\n    # Step 2: Green - \ud14c\uc2a4\ud2b8 \ud1b5\uacfc\ud558\ub294 \ucf54\ub4dc \uc791\uc131 (\uc774\ubbf8 \uad6c\ud604\ub428)\n    print(\"  \ud83d\udfe2 Green Phase: \ud14c\uc2a4\ud2b8 \ud1b5\uacfc \ud655\uc778\")\n\n    tests = [\n        test_calculator_initial_state,\n        test_calculator_add,\n        test_calculator_chain_operations,\n        test_calculator_divide_by_zero,\n        test_calculator_history,\n    ]\n\n    passed_tests = 0\n    for test in tests:\n        try:\n            test()\n            passed_tests += 1\n        except Exception as e:\n            print(f\"    \u2717 \ud14c\uc2a4\ud2b8 \uc2e4\ud328: {test.__name__} - {e}\")\n\n    print(f\"    \ud1b5\uacfc\ud55c \ud14c\uc2a4\ud2b8: {passed_tests}/{len(tests)}\")\n\n    # Step 3: Refactor - \ucf54\ub4dc \uac1c\uc120\n    print(\"  \ud83d\udd35 Refactor Phase: \ucf54\ub4dc \uac1c\uc120 \uac00\ub2a5\ud55c \ubd80\ubd84\")\n    print(\"    - \uc5f0\uc0b0 \uba54\uc11c\ub4dc\uc758 \uc911\ubcf5 \ucf54\ub4dc \uc81c\uac70\")\n    print(\"    - \uc774\ub825 \uc800\uc7a5 \ub85c\uc9c1 \ubd84\ub9ac\")\n    print(\"    - \ub354 \uba85\ud655\ud55c \uc5d0\ub7ec \uba54\uc2dc\uc9c0\")\n    print(\"    - \ud0c0\uc785 \ud78c\ud2b8 \ucd94\uac00\")\n\ndemonstrate_tdd_cycle()\n\n# TDD\ub85c \uac1c\ubc1c\ud55c \uac1c\uc120\ub41c \ubc84\uc804\nclass ImprovedCalculatorTDD:\n    \"\"\"TDD\ub85c \uac1c\ubc1c\ud55c \uac1c\uc120\ub41c \uacc4\uc0b0\uae30\"\"\"\n\n    def __init__(self):\n        self.result = 0.0\n        self.history = []\n\n    def _record_operation(self, old_value, operator, operand, new_value):\n        \"\"\"\uc5f0\uc0b0 \uae30\ub85d\"\"\"\n        self.history.append(f\"{old_value} {operator} {operand} = {new_value}\")\n\n    def _perform_operation(self, value, operation, operator_symbol):\n        \"\"\"\uacf5\ud1b5 \uc5f0\uc0b0 \uc218\ud589\"\"\"\n        old_result = self.result\n        self.result = operation(self.result, value)\n        self._record_operation(old_result, operator_symbol, value, self.result)\n        return self.result\n\n    def add(self, value: float) -&gt; float:\n        \"\"\"\ub367\uc148\"\"\"\n        return self._perform_operation(value, lambda x, y: x + y, \"+\")\n\n    def subtract(self, value: float) -&gt; float:\n        \"\"\"\ube84\uc148\"\"\"\n        return self._perform_operation(value, lambda x, y: x - y, \"-\")\n\n    def multiply(self, value: float) -&gt; float:\n        \"\"\"\uacf1\uc148\"\"\"\n        return self._perform_operation(value, lambda x, y: x * y, \"\u00d7\")\n\n    def divide(self, value: float) -&gt; float:\n        \"\"\"\ub098\ub217\uc148\"\"\"\n        if value == 0:\n            raise ValueError(\"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n        return self._perform_operation(value, lambda x, y: x / y, \"\u00f7\")\n\ndef test_improved_calculator():\n    \"\"\"\uac1c\uc120\ub41c \uacc4\uc0b0\uae30 \ud14c\uc2a4\ud2b8\"\"\"\n\n    print(f\"\\n28. \ub9ac\ud329\ud1a0\ub9c1\ub41c \uacc4\uc0b0\uae30 \ud14c\uc2a4\ud2b8:\")\n\n    calc = ImprovedCalculatorTDD()\n\n    # \ubcf5\ud569 \uc5f0\uc0b0 \ud14c\uc2a4\ud2b8\n    calc.add(100)\n    calc.subtract(25)\n    calc.multiply(2)\n    calc.divide(5)\n\n    expected_result = ((100 - 25) * 2) / 5  # 30\n\n    print(f\"  \ucd5c\uc885 \uacb0\uacfc: {calc.result}\")\n    print(f\"  \uc608\uc0c1 \uacb0\uacfc: {expected_result}\")\n    print(f\"  \uc815\ud655\uc131: {'\u2713' if abs(calc.result - expected_result) &lt; 0.001 else '\u2717'}\")\n\n    print(f\"  \uacc4\uc0b0 \uc774\ub825:\")\n    for i, operation in enumerate(calc.history, 1):\n        print(f\"    {i}. {operation}\")\n\ntest_improved_calculator()\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#52-tdd","title":"5.2 TDD \uc2e4\uc2b5 \uc608\uc81c","text":"<pre><code>print(\"\\n=== TDD \uc2e4\uc2b5 \uc608\uc81c ===\")\n\n# TDD\ub85c \uac1c\ubc1c\ud560 \ud074\ub798\uc2a4: WordCounter\n# \uc694\uad6c\uc0ac\ud56d: \ud14d\uc2a4\ud2b8\uc5d0\uc11c \ub2e8\uc5b4 \ube48\ub3c4\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4\n\ndef demonstrate_tdd_word_counter():\n    \"\"\"TDD\ub85c WordCounter \uac1c\ubc1c\"\"\"\n\n    print(\"29. TDD \uc2e4\uc2b5: WordCounter \uac1c\ubc1c\")\n    print(\"  \uc694\uad6c\uc0ac\ud56d:\")\n    print(\"    - \ud14d\uc2a4\ud2b8\uc5d0\uc11c \ub2e8\uc5b4 \ube48\ub3c4 \uacc4\uc0b0\")\n    print(\"    - \ub300\uc18c\ubb38\uc790 \uad6c\ubd84 \uc5c6\uc74c\")\n    print(\"    - \uad6c\ub450\uc810 \uc81c\uac70\")\n    print(\"    - \uac00\uc7a5 \ube48\ub3c4 \ub192\uc740 \ub2e8\uc5b4 \ubc18\ud658\")\n    print(\"    - \ub2e8\uc5b4 \uae38\uc774\ubcc4 \ud1b5\uacc4\")\n    print()\n\n# 1\ub2e8\uacc4: \ud14c\uc2a4\ud2b8 \uc791\uc131 (Red)\ndef test_word_counter_creation():\n    \"\"\"WordCounter \uc0dd\uc131 \ud14c\uc2a4\ud2b8\"\"\"\n    counter = WordCounter()\n    assert hasattr(counter, 'count_words')\n    print(\"    \u2713 WordCounter \uc0dd\uc131 \ud14c\uc2a4\ud2b8\")\n\ndef test_word_counter_simple_text():\n    \"\"\"\uac04\ub2e8\ud55c \ud14d\uc2a4\ud2b8 \ucc98\ub9ac \ud14c\uc2a4\ud2b8\"\"\"\n    counter = WordCounter()\n    text = \"hello world hello\"\n    result = counter.count_words(text)\n\n    expected = {'hello': 2, 'world': 1}\n    assert result == expected\n    print(\"    \u2713 \uac04\ub2e8\ud55c \ud14d\uc2a4\ud2b8 \ucc98\ub9ac \ud14c\uc2a4\ud2b8\")\n\ndef test_word_counter_case_insensitive():\n    \"\"\"\ub300\uc18c\ubb38\uc790 \uad6c\ubd84 \uc5c6\uc74c \ud14c\uc2a4\ud2b8\"\"\"\n    counter = WordCounter()\n    text = \"Hello HELLO hello\"\n    result = counter.count_words(text)\n\n    expected = {'hello': 3}\n    assert result == expected\n    print(\"    \u2713 \ub300\uc18c\ubb38\uc790 \uad6c\ubd84 \uc5c6\uc74c \ud14c\uc2a4\ud2b8\")\n\ndef test_word_counter_punctuation():\n    \"\"\"\uad6c\ub450\uc810 \uc81c\uac70 \ud14c\uc2a4\ud2b8\"\"\"\n    counter = WordCounter()\n    text = \"Hello, world! How are you?\"\n    result = counter.count_words(text)\n\n    expected = {'hello': 1, 'world': 1, 'how': 1, 'are': 1, 'you': 1}\n    assert result == expected\n    print(\"    \u2713 \uad6c\ub450\uc810 \uc81c\uac70 \ud14c\uc2a4\ud2b8\")\n\n# 2\ub2e8\uacc4: \uad6c\ud604 (Green)\nimport re\nfrom collections import Counter\n\nclass WordCounter:\n    \"\"\"\ub2e8\uc5b4 \ube48\ub3c4 \uacc4\uc0b0 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        self.word_counts = {}\n        self.total_words = 0\n\n    def count_words(self, text):\n        \"\"\"\ud14d\uc2a4\ud2b8\uc5d0\uc11c \ub2e8\uc5b4 \ube48\ub3c4 \uacc4\uc0b0\"\"\"\n        if not text:\n            return {}\n\n        # \ud14d\uc2a4\ud2b8 \uc815\ub9ac: \uc18c\ubb38\uc790 \ubcc0\ud658, \uad6c\ub450\uc810 \uc81c\uac70\n        cleaned_text = re.sub(r'[^\\w\\s]', ' ', text.lower())\n\n        # \ub2e8\uc5b4 \ubd84\ub9ac\n        words = cleaned_text.split()\n\n        # \ube48 \ub2e8\uc5b4 \uc81c\uac70\n        words = [word for word in words if word]\n\n        # \ube48\ub3c4 \uacc4\uc0b0\n        self.word_counts = dict(Counter(words))\n        self.total_words = len(words)\n\n        return self.word_counts\n\n    def get_most_common(self, n=1):\n        \"\"\"\uac00\uc7a5 \ube48\ub3c4 \ub192\uc740 \ub2e8\uc5b4 \ubc18\ud658\"\"\"\n        if not self.word_counts:\n            return []\n\n        return Counter(self.word_counts).most_common(n)\n\n    def get_word_length_stats(self):\n        \"\"\"\ub2e8\uc5b4 \uae38\uc774\ubcc4 \ud1b5\uacc4\"\"\"\n        if not self.word_counts:\n            return {}\n\n        length_counts = {}\n        for word, count in self.word_counts.items():\n            length = len(word)\n            length_counts[length] = length_counts.get(length, 0) + count\n\n        return length_counts\n\n    def get_total_words(self):\n        \"\"\"\ucd1d \ub2e8\uc5b4 \uc218 \ubc18\ud658\"\"\"\n        return self.total_words\n\n    def get_unique_words(self):\n        \"\"\"\uace0\uc720 \ub2e8\uc5b4 \uc218 \ubc18\ud658\"\"\"\n        return len(self.word_counts)\n\n# \ucd94\uac00 \ud14c\uc2a4\ud2b8\ub4e4\ndef test_word_counter_most_common():\n    \"\"\"\uac00\uc7a5 \ube48\ub3c4 \ub192\uc740 \ub2e8\uc5b4 \ud14c\uc2a4\ud2b8\"\"\"\n    counter = WordCounter()\n    text = \"apple banana apple cherry apple banana\"\n    counter.count_words(text)\n\n    most_common = counter.get_most_common(2)\n    assert most_common[0] == ('apple', 3)\n    assert most_common[1] == ('banana', 2)\n    print(\"    \u2713 \uac00\uc7a5 \ube48\ub3c4 \ub192\uc740 \ub2e8\uc5b4 \ud14c\uc2a4\ud2b8\")\n\ndef test_word_counter_length_stats():\n    \"\"\"\ub2e8\uc5b4 \uae38\uc774\ubcc4 \ud1b5\uacc4 \ud14c\uc2a4\ud2b8\"\"\"\n    counter = WordCounter()\n    text = \"a bb ccc dddd\"\n    counter.count_words(text)\n\n    length_stats = counter.get_word_length_stats()\n    expected = {1: 1, 2: 1, 3: 1, 4: 1}\n    assert length_stats == expected\n    print(\"    \u2713 \ub2e8\uc5b4 \uae38\uc774\ubcc4 \ud1b5\uacc4 \ud14c\uc2a4\ud2b8\")\n\ndef run_word_counter_tests():\n    \"\"\"WordCounter \ud14c\uc2a4\ud2b8 \uc2e4\ud589\"\"\"\n\n    print(\"  \ud83d\udd34 Red \u2192 \ud83d\udfe2 Green Phase: \ud14c\uc2a4\ud2b8 \uc2e4\ud589\")\n\n    tests = [\n        test_word_counter_creation,\n        test_word_counter_simple_text,\n        test_word_counter_case_insensitive,\n        test_word_counter_punctuation,\n        test_word_counter_most_common,\n        test_word_counter_length_stats,\n    ]\n\n    passed = 0\n    for test in tests:\n        try:\n            test()\n            passed += 1\n        except Exception as e:\n            print(f\"    \u2717 {test.__name__} \uc2e4\ud328: {e}\")\n\n    print(f\"  \ud1b5\uacfc\ud55c \ud14c\uc2a4\ud2b8: {passed}/{len(tests)}\")\n\n    # \uc2e4\uc81c \uc0ac\uc6a9 \uc608\uc81c\n    print(f\"\\n  WordCounter \uc0ac\uc6a9 \uc608\uc81c:\")\n    counter = WordCounter()\n    sample_text = \"\"\"\n    Python is a great programming language. \n    Python is easy to learn and Python is powerful.\n    Many developers love Python programming.\n    \"\"\"\n\n    result = counter.count_words(sample_text)\n    print(f\"    \ub2e8\uc5b4 \ube48\ub3c4: {dict(list(result.items())[:5])}...\")\n    print(f\"    \ucd1d \ub2e8\uc5b4 \uc218: {counter.get_total_words()}\")\n    print(f\"    \uace0\uc720 \ub2e8\uc5b4 \uc218: {counter.get_unique_words()}\")\n    print(f\"    \uac00\uc7a5 \ube48\ub3c4 \ub192\uc740 \ub2e8\uc5b4: {counter.get_most_common(3)}\")\n\nrun_word_counter_tests()\n\ndemonstrate_tdd_word_counter()\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#6","title":"6. \ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0\uc640 \ud488\uc9c8 \uce21\uc815","text":""},{"location":"tutorials/intermediate/chapter11_testing_debugging/#61","title":"6.1 \ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0 \uac1c\ub150","text":"<pre><code>print(\"\\n=== \ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0\uc640 \ud488\uc9c8 \uce21\uc815 ===\")\n\ndef demonstrate_coverage_concept():\n    \"\"\"\ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0 \uac1c\ub150 \uc124\uba85\"\"\"\n\n    print(\"30. \ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0 \uc720\ud615:\")\n    print(\"  Line Coverage: \uc2e4\ud589\ub41c \ucf54\ub4dc \ub77c\uc778 \ube44\uc728\")\n    print(\"  Branch Coverage: \uc2e4\ud589\ub41c \ubd84\uae30 \ube44\uc728\")\n    print(\"  Function Coverage: \ud638\ucd9c\ub41c \ud568\uc218 \ube44\uc728\")\n    print(\"  Statement Coverage: \uc2e4\ud589\ub41c \ubb38\uc7a5 \ube44\uc728\")\n    print()\n\n    print(\"31. \ucee4\ubc84\ub9ac\uc9c0 \ubaa9\ud45c:\")\n    print(\"  - \ub2e8\uc704 \ud14c\uc2a4\ud2b8: 80-90% \uc774\uc0c1\")\n    print(\"  - \ud1b5\ud569 \ud14c\uc2a4\ud2b8: 70-80% \uc774\uc0c1\")\n    print(\"  - \uc804\uccb4 \ud504\ub85c\uc81d\ud2b8: 75-85% \uc774\uc0c1\")\n    print(\"  - 100% \ucee4\ubc84\ub9ac\uc9c0\uac00 \uc644\ubcbd\ud55c \ud14c\uc2a4\ud2b8\ub97c \uc758\ubbf8\ud558\uc9c0\ub294 \uc54a\uc74c\")\n\ndemonstrate_coverage_concept()\n\n# \ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815 \uc608\uc81c \ud568\uc218\ndef complex_function(x, y, option='default'):\n    \"\"\"\ubcf5\uc7a1\ud55c \ud568\uc218 (\ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815\uc6a9)\"\"\"\n    result = 0\n\n    # \ubd84\uae30 1: x \uac12 \uac80\uc0ac\n    if x &gt; 0:\n        result += x * 2\n    elif x &lt; 0:\n        result += x * -1\n    else:\n        result = 1\n\n    # \ubd84\uae30 2: y \uac12 \uac80\uc0ac\n    if y &gt; 10:\n        result *= 2\n\n    # \ubd84\uae30 3: \uc635\uc158 \ucc98\ub9ac\n    if option == 'double':\n        result *= 2\n    elif option == 'square':\n        result = result ** 2\n    elif option == 'negative':\n        result = -result\n    # default\ub294 \uadf8\ub300\ub85c\n\n    # \ubd84\uae30 4: \uacb0\uacfc\uac12 \ud6c4\ucc98\ub9ac\n    if result &gt; 100:\n        return min(result, 1000)\n    elif result &lt; -100:\n        return max(result, -1000)\n    else:\n        return result\n\nclass CoverageTracker:\n    \"\"\"\uac04\ub2e8\ud55c \ucee4\ubc84\ub9ac\uc9c0 \ucd94\uc801\uae30\"\"\"\n\n    def __init__(self):\n        self.executed_lines = set()\n        self.total_lines = set()\n        self.executed_branches = set()\n        self.total_branches = set()\n\n    def record_line(self, line_num):\n        \"\"\"\ub77c\uc778 \uc2e4\ud589 \uae30\ub85d\"\"\"\n        self.executed_lines.add(line_num)\n        self.total_lines.add(line_num)\n\n    def record_branch(self, branch_id, taken=True):\n        \"\"\"\ubd84\uae30 \uc2e4\ud589 \uae30\ub85d\"\"\"\n        self.total_branches.add(branch_id)\n        if taken:\n            self.executed_branches.add(branch_id)\n\n    def get_line_coverage(self):\n        \"\"\"\ub77c\uc778 \ucee4\ubc84\ub9ac\uc9c0 \uacc4\uc0b0\"\"\"\n        if not self.total_lines:\n            return 0.0\n        return len(self.executed_lines) / len(self.total_lines) * 100\n\n    def get_branch_coverage(self):\n        \"\"\"\ubd84\uae30 \ucee4\ubc84\ub9ac\uc9c0 \uacc4\uc0b0\"\"\"\n        if not self.total_branches:\n            return 0.0\n        return len(self.executed_branches) / len(self.total_branches) * 100\n\ndef demonstrate_coverage_tracking():\n    \"\"\"\ucee4\ubc84\ub9ac\uc9c0 \ucd94\uc801 \uc2dc\uc5f0\"\"\"\n\n    print(f\"\\n32. \ucee4\ubc84\ub9ac\uc9c0 \ucd94\uc801 \uc2dc\uc5f0:\")\n\n    tracker = CoverageTracker()\n\n    def tracked_complex_function(x, y, option='default'):\n        \"\"\"\ucee4\ubc84\ub9ac\uc9c0 \ucd94\uc801\uc774 \ud3ec\ud568\ub41c complex_function\"\"\"\n        tracker.record_line(1)  # \ud568\uc218 \uc2dc\uc791\n        result = 0\n\n        # \ubd84\uae30 1: x \uac12 \uac80\uc0ac\n        tracker.record_line(2)\n        if x &gt; 0:\n            tracker.record_branch('x_positive', True)\n            tracker.record_line(3)\n            result += x * 2\n        elif x &lt; 0:\n            tracker.record_branch('x_negative', x &lt; 0)\n            if x &lt; 0:\n                tracker.record_line(4)\n                result += x * -1\n        else:\n            tracker.record_branch('x_zero', x == 0)\n            if x == 0:\n                tracker.record_line(5)\n                result = 1\n\n        # \ubd84\uae30 2: y \uac12 \uac80\uc0ac\n        tracker.record_line(6)\n        tracker.record_branch('y_greater_10', y &gt; 10)\n        if y &gt; 10:\n            tracker.record_line(7)\n            result *= 2\n\n        # \ubd84\uae30 3: \uc635\uc158 \ucc98\ub9ac\n        tracker.record_line(8)\n        if option == 'double':\n            tracker.record_branch('option_double', True)\n            tracker.record_line(9)\n            result *= 2\n        elif option == 'square':\n            tracker.record_branch('option_square', option == 'square')\n            tracker.record_line(10)\n            result = result ** 2\n        elif option == 'negative':\n            tracker.record_branch('option_negative', option == 'negative')\n            tracker.record_line(11)\n            result = -result\n\n        # \ubd84\uae30 4: \uacb0\uacfc\uac12 \ud6c4\ucc98\ub9ac\n        tracker.record_line(12)\n        if result &gt; 100:\n            tracker.record_branch('result_high', result &gt; 100)\n            tracker.record_line(13)\n            return min(result, 1000)\n        elif result &lt; -100:\n            tracker.record_branch('result_low', result &lt; -100)\n            tracker.record_line(14)\n            return max(result, -1000)\n        else:\n            tracker.record_branch('result_normal', -100 &lt;= result &lt;= 100)\n            tracker.record_line(15)\n            return result\n\n    # \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub4e4\n    test_cases = [\n        (5, 5, 'default', \"\uc591\uc218, \uc791\uc740 y, \uae30\ubcf8 \uc635\uc158\"),\n        (-3, 15, 'double', \"\uc74c\uc218, \ud070 y, double \uc635\uc158\"),\n        (0, 8, 'square', \"0, \uc791\uc740 y, square \uc635\uc158\"),\n        (10, 12, 'negative', \"\uc591\uc218, \ud070 y, negative \uc635\uc158\"),\n    ]\n\n    print(\"  \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uc2e4\ud589:\")\n    for x, y, option, description in test_cases:\n        result = tracked_complex_function(x, y, option)\n        print(f\"    {description}: f({x}, {y}, '{option}') = {result}\")\n\n    # \ucee4\ubc84\ub9ac\uc9c0 \ubcf4\uace0\uc11c\n    print(f\"\\n  \ucee4\ubc84\ub9ac\uc9c0 \ubcf4\uace0\uc11c:\")\n    print(f\"    \ub77c\uc778 \ucee4\ubc84\ub9ac\uc9c0: {tracker.get_line_coverage():.1f}%\")\n    print(f\"    \ubd84\uae30 \ucee4\ubc84\ub9ac\uc9c0: {tracker.get_branch_coverage():.1f}%\")\n    print(f\"    \uc2e4\ud589\ub41c \ub77c\uc778: {len(tracker.executed_lines)}/{len(tracker.total_lines)}\")\n    print(f\"    \uc2e4\ud589\ub41c \ubd84\uae30: {len(tracker.executed_branches)}/{len(tracker.total_branches)}\")\n\n    # \ubbf8\uc2e4\ud589 \ubd84\uae30 \ubd84\uc11d\n    missing_branches = tracker.total_branches - tracker.executed_branches\n    if missing_branches:\n        print(f\"    \ubbf8\uc2e4\ud589 \ubd84\uae30: {missing_branches}\")\n        print(f\"    \u2192 \ucd94\uac00 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \ud544\uc694\")\n\ndemonstrate_coverage_tracking()\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#62","title":"6.2 \ud488\uc9c8 \uba54\ud2b8\ub9ad\uacfc \uc815\uc801 \ubd84\uc11d","text":"<pre><code>print(\"\\n=== \ud488\uc9c8 \uba54\ud2b8\ub9ad\uacfc \uc815\uc801 \ubd84\uc11d ===\")\n\ndef demonstrate_quality_metrics():\n    \"\"\"\ucf54\ub4dc \ud488\uc9c8 \uba54\ud2b8\ub9ad \uc124\uba85\"\"\"\n\n    print(\"33. \uc8fc\uc694 \ud488\uc9c8 \uba54\ud2b8\ub9ad:\")\n    print(\"  Cyclomatic Complexity: \uc21c\ud658 \ubcf5\uc7a1\ub3c4 (\ubd84\uae30 \uc218)\")\n    print(\"  Lines of Code (LOC): \ucf54\ub4dc \ub77c\uc778 \uc218\")\n    print(\"  Maintainability Index: \uc720\uc9c0\ubcf4\uc218 \uc9c0\uc218\")\n    print(\"  Code Duplication: \ucf54\ub4dc \uc911\ubcf5\ub960\")\n    print(\"  Technical Debt: \uae30\uc220 \ubd80\ucc44\")\n    print()\n\n    print(\"34. \ud488\uc9c8 \uae30\uc900:\")\n    print(\"  \uc21c\ud658 \ubcf5\uc7a1\ub3c4: \ud568\uc218\ub2f9 10 \uc774\ud558 \uad8c\uc7a5\")\n    print(\"  \ud568\uc218 \uae38\uc774: 20-50\uc904 \uad8c\uc7a5\")\n    print(\"  \ud074\ub798\uc2a4 \uae38\uc774: 500\uc904 \uc774\ud558 \uad8c\uc7a5\")\n    print(\"  \uc911\ubcf5\ub960: 5% \uc774\ud558 \uad8c\uc7a5\")\n\ndemonstrate_quality_metrics()\n\ndef calculate_cyclomatic_complexity(func_code):\n    \"\"\"\uc21c\ud658 \ubcf5\uc7a1\ub3c4 \uacc4\uc0b0 (\uac04\ub2e8\ud55c \ubc84\uc804)\"\"\"\n    # \uc2e4\uc81c\ub85c\ub294 AST\ub97c \ubd84\uc11d\ud574\uc57c \ud558\uc9c0\ub9cc, \uac04\ub2e8\ud55c \ud0a4\uc6cc\ub4dc \uce74\uc6b4\ud305\uc73c\ub85c \uadfc\uc0ac\n    keywords = ['if', 'elif', 'while', 'for', 'except', 'and', 'or']\n    complexity = 1  # \uae30\ubcf8 \ubcf5\uc7a1\ub3c4\n\n    for keyword in keywords:\n        complexity += func_code.count(keyword)\n\n    return complexity\n\ndef analyze_code_quality():\n    \"\"\"\ucf54\ub4dc \ud488\uc9c8 \ubd84\uc11d \uc608\uc81c\"\"\"\n\n    print(f\"\\n35. \ucf54\ub4dc \ud488\uc9c8 \ubd84\uc11d \uc608\uc81c:\")\n\n    # \ubd84\uc11d\ud560 \ud568\uc218\ub4e4\n    functions_to_analyze = {\n        'simple_function': '''\ndef simple_add(a, b):\n    return a + b\n        ''',\n\n        'complex_function': '''\ndef complex_processor(data, options):\n    if not data:\n        return None\n\n    result = []\n    for item in data:\n        if item &gt; 0:\n            if options.get('double'):\n                result.append(item * 2)\n            elif options.get('square'):\n                result.append(item ** 2)\n            else:\n                result.append(item)\n        elif item &lt; 0:\n            if options.get('abs'):\n                result.append(abs(item))\n\n    if len(result) &gt; 10 and options.get('limit'):\n        result = result[:10]\n\n    return result\n        ''',\n\n        'very_complex_function': '''\ndef process_orders(orders, user, settings):\n    if not orders or not user:\n        return None\n\n    processed = []\n    total = 0\n\n    for order in orders:\n        if order.status == 'pending':\n            if user.is_premium:\n                if order.amount &gt; 100:\n                    discount = 0.1\n                elif order.amount &gt; 50:\n                    discount = 0.05\n                else:\n                    discount = 0.02\n            else:\n                if order.amount &gt; 200:\n                    discount = 0.05\n                else:\n                    discount = 0.01\n\n            final_amount = order.amount * (1 - discount)\n\n            if settings.get('apply_tax'):\n                tax_rate = settings.get('tax_rate', 0.1)\n                final_amount *= (1 + tax_rate)\n\n            if final_amount &gt; 0:\n                processed.append({\n                    'order_id': order.id,\n                    'amount': final_amount,\n                    'discount': discount\n                })\n                total += final_amount\n\n        elif order.status == 'cancelled' and settings.get('include_cancelled'):\n            processed.append({\n                'order_id': order.id,\n                'amount': 0,\n                'status': 'cancelled'\n            })\n\n    return {\n        'orders': processed,\n        'total': total,\n        'count': len(processed)\n    }\n        '''\n    }\n\n    print(\"  \ud568\uc218\ubcc4 \ubcf5\uc7a1\ub3c4 \ubd84\uc11d:\")\n    for func_name, code in functions_to_analyze.items():\n        complexity = calculate_cyclomatic_complexity(code)\n        lines = len([line for line in code.strip().split('\\n') if line.strip()])\n\n        # \ubcf5\uc7a1\ub3c4 \ud3c9\uac00\n        if complexity &lt;= 5:\n            complexity_level = \"\ub0ae\uc74c (\uc88b\uc74c)\"\n        elif complexity &lt;= 10:\n            complexity_level = \"\ubcf4\ud1b5\"\n        elif complexity &lt;= 15:\n            complexity_level = \"\ub192\uc74c (\uc8fc\uc758)\"\n        else:\n            complexity_level = \"\ub9e4\uc6b0 \ub192\uc74c (\ub9ac\ud329\ud1a0\ub9c1 \ud544\uc694)\"\n\n        print(f\"    {func_name}:\")\n        print(f\"      \uc21c\ud658 \ubcf5\uc7a1\ub3c4: {complexity} ({complexity_level})\")\n        print(f\"      \ucf54\ub4dc \ub77c\uc778 \uc218: {lines}\")\n\n        if complexity &gt; 10:\n            print(f\"      \uad8c\uc7a5\uc0ac\ud56d: \ud568\uc218 \ubd84\ub9ac, \uc870\uac74\ubb38 \ub2e8\uc21c\ud654\")\n\nanalyze_code_quality()\n\ndef demonstrate_refactoring_for_quality():\n    \"\"\"\ud488\uc9c8 \ud5a5\uc0c1\uc744 \uc704\ud55c \ub9ac\ud329\ud1a0\ub9c1 \uc608\uc81c\"\"\"\n\n    print(f\"\\n36. \ub9ac\ud329\ud1a0\ub9c1\uc744 \ud1b5\ud55c \ud488\uc9c8 \ud5a5\uc0c1:\")\n\n    # \ubcf5\uc7a1\ud55c \ud568\uc218 (\ub9ac\ud329\ud1a0\ub9c1 \uc804)\n    def calculate_shipping_cost_before(weight, distance, is_premium, is_express, country):\n        \"\"\"\ub9ac\ud329\ud1a0\ub9c1 \uc804: \ubcf5\uc7a1\ud55c \ubc30\uc1a1\ube44 \uacc4\uc0b0\"\"\"\n        if weight &lt;= 0 or distance &lt;= 0:\n            return 0\n\n        base_cost = 5.0\n\n        if weight &gt; 10:\n            if weight &gt; 50:\n                if weight &gt; 100:\n                    base_cost += 50\n                else:\n                    base_cost += 25\n            else:\n                base_cost += 10\n        elif weight &gt; 5:\n            base_cost += 5\n\n        if distance &gt; 1000:\n            if distance &gt; 5000:\n                distance_cost = distance * 0.02\n            else:\n                distance_cost = distance * 0.015\n        elif distance &gt; 500:\n            distance_cost = distance * 0.01\n        else:\n            distance_cost = distance * 0.005\n\n        total = base_cost + distance_cost\n\n        if is_premium:\n            if is_express:\n                total *= 1.5\n            else:\n                total *= 1.2\n        else:\n            if is_express:\n                total *= 2.0\n            else:\n                total *= 1.3\n\n        if country == 'US':\n            total *= 1.0\n        elif country == 'CA':\n            total *= 1.1\n        elif country in ['UK', 'EU']:\n            total *= 1.3\n        else:\n            total *= 1.5\n\n        return round(total, 2)\n\n    # \ub9ac\ud329\ud1a0\ub9c1 \ud6c4: \ud568\uc218 \ubd84\ub9ac\uc640 \ub2e8\uc21c\ud654\n    class ShippingCalculator:\n        \"\"\"\ub9ac\ud329\ud1a0\ub9c1 \ud6c4: \ubc30\uc1a1\ube44 \uacc4\uc0b0 \ud074\ub798\uc2a4\"\"\"\n\n        WEIGHT_TIERS = [\n            (100, 50),\n            (50, 25),\n            (10, 10),\n            (5, 5),\n            (0, 0)\n        ]\n\n        DISTANCE_RATES = [\n            (5000, 0.02),\n            (1000, 0.015),\n            (500, 0.01),\n            (0, 0.005)\n        ]\n\n        COUNTRY_MULTIPLIERS = {\n            'US': 1.0,\n            'CA': 1.1,\n            'UK': 1.3,\n            'EU': 1.3\n        }\n\n        @staticmethod\n        def calculate_weight_cost(weight):\n            \"\"\"\ubb34\uac8c\ubcc4 \uae30\ubcf8 \ube44\uc6a9 \uacc4\uc0b0\"\"\"\n            base_cost = 5.0\n            for threshold, additional_cost in ShippingCalculator.WEIGHT_TIERS:\n                if weight &gt; threshold:\n                    return base_cost + additional_cost\n            return base_cost\n\n        @staticmethod\n        def calculate_distance_cost(distance):\n            \"\"\"\uac70\ub9ac\ubcc4 \ube44\uc6a9 \uacc4\uc0b0\"\"\"\n            for threshold, rate in ShippingCalculator.DISTANCE_RATES:\n                if distance &gt; threshold:\n                    return distance * rate\n            return distance * 0.005\n\n        @staticmethod\n        def apply_service_multiplier(cost, is_premium, is_express):\n            \"\"\"\uc11c\ube44\uc2a4 \uc720\ud615\ubcc4 \ubc30\uc728 \uc801\uc6a9\"\"\"\n            if is_premium:\n                return cost * (1.5 if is_express else 1.2)\n            else:\n                return cost * (2.0 if is_express else 1.3)\n\n        @staticmethod\n        def apply_country_multiplier(cost, country):\n            \"\"\"\uad6d\uac00\ubcc4 \ubc30\uc728 \uc801\uc6a9\"\"\"\n            multiplier = ShippingCalculator.COUNTRY_MULTIPLIERS.get(country, 1.5)\n            return cost * multiplier\n\n        @classmethod\n        def calculate_shipping_cost(cls, weight, distance, is_premium, is_express, country):\n            \"\"\"\uac1c\uc120\ub41c \ubc30\uc1a1\ube44 \uacc4\uc0b0\"\"\"\n            if weight &lt;= 0 or distance &lt;= 0:\n                return 0\n\n            weight_cost = cls.calculate_weight_cost(weight)\n            distance_cost = cls.calculate_distance_cost(distance)\n            base_total = weight_cost + distance_cost\n\n            with_service = cls.apply_service_multiplier(base_total, is_premium, is_express)\n            final_cost = cls.apply_country_multiplier(with_service, country)\n\n            return round(final_cost, 2)\n\n    # \ube44\uad50 \ud14c\uc2a4\ud2b8\n    test_cases = [\n        (15, 800, True, False, 'US'),\n        (75, 3000, False, True, 'UK'),\n        (3, 200, True, True, 'CA'),\n    ]\n\n    print(\"  \ub9ac\ud329\ud1a0\ub9c1 \uc804\ud6c4 \uacb0\uacfc \ube44\uad50:\")\n    for weight, distance, is_premium, is_express, country in test_cases:\n        before = calculate_shipping_cost_before(weight, distance, is_premium, is_express, country)\n        after = ShippingCalculator.calculate_shipping_cost(weight, distance, is_premium, is_express, country)\n\n        print(f\"    \ubb34\uac8c:{weight}kg, \uac70\ub9ac:{distance}km, \ud504\ub9ac\ubbf8\uc5c4:{is_premium}, \ud2b9\uae09:{is_express}, \uad6d\uac00:{country}\")\n        print(f\"      \ub9ac\ud329\ud1a0\ub9c1 \uc804: ${before}\")\n        print(f\"      \ub9ac\ud329\ud1a0\ub9c1 \ud6c4: ${after}\")\n        print(f\"      \uc77c\uce58: {'\u2713' if abs(before - after) &lt; 0.01 else '\u2717'}\")\n\n    print(f\"\\n  \ub9ac\ud329\ud1a0\ub9c1 \uc7a5\uc810:\")\n    print(f\"    - \ud568\uc218\ubcc4 \ub2e8\uc77c \ucc45\uc784\")\n    print(f\"    - \ud14c\uc2a4\ud2b8 \uc6a9\uc774\uc131 \ud5a5\uc0c1\")\n    print(f\"    - \uac00\ub3c5\uc131 \uac1c\uc120\")\n    print(f\"    - \ud655\uc7a5\uc131 \uc99d\ub300\")\n    print(f\"    - \uc21c\ud658 \ubcf5\uc7a1\ub3c4 \uac10\uc18c\")\n\ndemonstrate_refactoring_for_quality()\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#7","title":"7. \uc9c0\uc18d\uc801 \ud1b5\ud569\uacfc \uc790\ub3d9\ud654","text":""},{"location":"tutorials/intermediate/chapter11_testing_debugging/#71-cicd","title":"7.1 CI/CD \ud30c\uc774\ud504\ub77c\uc778\uc5d0\uc11c\uc758 \ud14c\uc2a4\ud305","text":"<pre><code>print(\"\\n=== \uc9c0\uc18d\uc801 \ud1b5\ud569\uacfc \uc790\ub3d9\ud654 ===\")\n\ndef demonstrate_ci_cd_testing():\n    \"\"\"CI/CD\uc5d0\uc11c\uc758 \ud14c\uc2a4\ud305 \uac1c\ub150\"\"\"\n\n    print(\"37. CI/CD \ud30c\uc774\ud504\ub77c\uc778\uc5d0\uc11c\uc758 \ud14c\uc2a4\ud305:\")\n    print(\"  \ucee4\ubc0b \ub2e8\uacc4:\")\n    print(\"    - \ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uc790\ub3d9 \uc2e4\ud589\")\n    print(\"    - \ucf54\ub4dc \uc2a4\ud0c0\uc77c \uac80\uc0ac (pylint, flake8)\")\n    print(\"    - \ud0c0\uc785 \uccb4\ud06c (mypy)\")\n    print()\n    print(\"  \ube4c\ub4dc \ub2e8\uacc4:\")\n    print(\"    - \ud1b5\ud569 \ud14c\uc2a4\ud2b8 \uc2e4\ud589\")\n    print(\"    - \ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815\")\n    print(\"    - \ubcf4\uc548 \ucde8\uc57d\uc810 \uc2a4\uce94\")\n    print()\n    print(\"  \ubc30\ud3ec \ub2e8\uacc4:\")\n    print(\"    - \uc2a4\ubaa8\ud06c \ud14c\uc2a4\ud2b8\")\n    print(\"    - \uc131\ub2a5 \ud14c\uc2a4\ud2b8\")\n    print(\"    - \uc0ac\uc6a9\uc790 \uc778\uc218 \ud14c\uc2a4\ud2b8\")\n\ndemonstrate_ci_cd_testing()\n\n# CI/CD \ud30c\uc774\ud504\ub77c\uc778 \uc2dc\ubbac\ub808\uc774\uc158\nclass CIPipeline:\n    \"\"\"CI \ud30c\uc774\ud504\ub77c\uc778 \uc2dc\ubbac\ub808\uc774\ud130\"\"\"\n\n    def __init__(self):\n        self.stages = []\n        self.failed_stages = []\n        self.test_results = {}\n\n    def add_stage(self, name, function):\n        \"\"\"\ud30c\uc774\ud504\ub77c\uc778 \ub2e8\uacc4 \ucd94\uac00\"\"\"\n        self.stages.append((name, function))\n\n    def run_pipeline(self):\n        \"\"\"\ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589\"\"\"\n        print(\"  CI \ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589:\")\n\n        for stage_name, stage_function in self.stages:\n            print(f\"    {stage_name} \uc2e4\ud589 \uc911...\")\n\n            try:\n                result = stage_function()\n                self.test_results[stage_name] = result\n                print(f\"      \u2713 {stage_name} \uc131\uacf5\")\n            except Exception as e:\n                self.failed_stages.append(stage_name)\n                self.test_results[stage_name] = {'error': str(e)}\n                print(f\"      \u2717 {stage_name} \uc2e4\ud328: {e}\")\n                break  # \uc2e4\ud328 \uc2dc \ud30c\uc774\ud504\ub77c\uc778 \uc911\ub2e8\n\n        self.print_summary()\n\n    def print_summary(self):\n        \"\"\"\uacb0\uacfc \uc694\uc57d\"\"\"\n        print(f\"\\n  \ud30c\uc774\ud504\ub77c\uc778 \uacb0\uacfc:\")\n        print(f\"    \uc2e4\ud589\ub41c \ub2e8\uacc4: {len(self.test_results)}/{len(self.stages)}\")\n        print(f\"    \uc2e4\ud328\ud55c \ub2e8\uacc4: {len(self.failed_stages)}\")\n\n        if not self.failed_stages:\n            print(f\"    \uc0c1\ud0dc: \u2713 \uc131\uacf5 - \ubc30\ud3ec \uac00\ub2a5\")\n        else:\n            print(f\"    \uc0c1\ud0dc: \u2717 \uc2e4\ud328 - \uc218\uc815 \ud544\uc694\")\n\ndef simulate_ci_pipeline():\n    \"\"\"CI \ud30c\uc774\ud504\ub77c\uc778 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n\n    print(f\"\\n38. CI \ud30c\uc774\ud504\ub77c\uc778 \uc2dc\ubbac\ub808\uc774\uc158:\")\n\n    pipeline = CIPipeline()\n\n    # \ud30c\uc774\ud504\ub77c\uc778 \ub2e8\uacc4\ub4e4\n    def lint_check():\n        \"\"\"\ucf54\ub4dc \uc2a4\ud0c0\uc77c \uac80\uc0ac\"\"\"\n        # \uc2e4\uc81c\ub85c\ub294 pylint, flake8 \ub4f1 \uc2e4\ud589\n        issues = ['line too long', 'unused import']\n        if issues:\n            return {'status': 'warning', 'issues': issues}\n        return {'status': 'passed'}\n\n    def unit_tests():\n        \"\"\"\ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uc2e4\ud589\"\"\"\n        # \uc55e\uc11c \ub9cc\ub4e0 \ud14c\uc2a4\ud2b8\ub4e4 \uc2e4\ud589\n        calc = CalculatorTDD()\n        calc.add(10)\n        calc.subtract(5)\n\n        if calc.result == 5:\n            return {'status': 'passed', 'tests': 15, 'failures': 0}\n        else:\n            raise Exception(\"\ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uc2e4\ud328\")\n\n    def coverage_check():\n        \"\"\"\ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815\"\"\"\n        coverage = 85.5  # \uc2dc\ubbac\ub808\uc774\uc158\n        threshold = 80\n\n        if coverage &gt;= threshold:\n            return {'status': 'passed', 'coverage': coverage}\n        else:\n            raise Exception(f\"\ucee4\ubc84\ub9ac\uc9c0 \ubd80\uc871: {coverage}% &lt; {threshold}%\")\n\n    def integration_tests():\n        \"\"\"\ud1b5\ud569 \ud14c\uc2a4\ud2b8\"\"\"\n        # \uc2dc\ubbac\ub808\uc774\uc158: \ub370\uc774\ud130\ubca0\uc774\uc2a4, API \uc5f0\ub3d9 \ud14c\uc2a4\ud2b8\n        return {'status': 'passed', 'tests': 8, 'failures': 0}\n\n    def security_scan():\n        \"\"\"\ubcf4\uc548 \uc2a4\uce94\"\"\"\n        # \uc2dc\ubbac\ub808\uc774\uc158: bandit \ub4f1 \ubcf4\uc548 \ub3c4\uad6c\n        vulnerabilities = []  # \ucde8\uc57d\uc810 \uc5c6\uc74c\n        if vulnerabilities:\n            raise Exception(f\"\ubcf4\uc548 \ucde8\uc57d\uc810 \ubc1c\uacac: {vulnerabilities}\")\n        return {'status': 'passed', 'vulnerabilities': 0}\n\n    def performance_test():\n        \"\"\"\uc131\ub2a5 \ud14c\uc2a4\ud2b8\"\"\"\n        # \uc2dc\ubbac\ub808\uc774\uc158: \uc751\ub2f5 \uc2dc\uac04 \uce21\uc815\n        avg_response_time = 120  # ms\n        threshold = 200  # ms\n\n        if avg_response_time &lt;= threshold:\n            return {'status': 'passed', 'avg_response_time': avg_response_time}\n        else:\n            raise Exception(f\"\uc131\ub2a5 \uae30\uc900 \ubbf8\ub2ec: {avg_response_time}ms &gt; {threshold}ms\")\n\n    # \ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc131\n    pipeline.add_stage(\"\ucf54\ub4dc \uc2a4\ud0c0\uc77c \uac80\uc0ac\", lint_check)\n    pipeline.add_stage(\"\ub2e8\uc704 \ud14c\uc2a4\ud2b8\", unit_tests)\n    pipeline.add_stage(\"\ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815\", coverage_check)\n    pipeline.add_stage(\"\ud1b5\ud569 \ud14c\uc2a4\ud2b8\", integration_tests)\n    pipeline.add_stage(\"\ubcf4\uc548 \uc2a4\uce94\", security_scan)\n    pipeline.add_stage(\"\uc131\ub2a5 \ud14c\uc2a4\ud2b8\", performance_test)\n\n    # \ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589\n    pipeline.run_pipeline()\n\nsimulate_ci_pipeline()\n\ndef demonstrate_automated_testing_tools():\n    \"\"\"\uc790\ub3d9\ud654\ub41c \ud14c\uc2a4\ud305 \ub3c4\uad6c\ub4e4\"\"\"\n\n    print(f\"\\n39. \uc790\ub3d9\ud654\ub41c \ud14c\uc2a4\ud305 \ub3c4\uad6c\ub4e4:\")\n\n    tools = {\n        '\ub2e8\uc704 \ud14c\uc2a4\ud2b8': {\n            'pytest': '\uac00\uc7a5 \uc778\uae30 \uc788\ub294 \ud14c\uc2a4\ud2b8 \ud504\ub808\uc784\uc6cc\ud06c',\n            'unittest': 'Python \ub0b4\uc7a5 \ud14c\uc2a4\ud2b8 \ud504\ub808\uc784\uc6cc\ud06c',\n            'nose2': 'unittest \ud655\uc7a5'\n        },\n        '\ucf54\ub4dc \ud488\uc9c8': {\n            'pylint': '\ucf54\ub4dc \uc2a4\ud0c0\uc77c\uacfc \ud488\uc9c8 \uac80\uc0ac',\n            'flake8': '\uac00\ubcbc\uc6b4 \ucf54\ub4dc \uc2a4\ud0c0\uc77c \uac80\uc0ac',\n            'black': '\uc790\ub3d9 \ucf54\ub4dc \ud3ec\ub9f7\ud305',\n            'mypy': '\uc815\uc801 \ud0c0\uc785 \uac80\uc0ac'\n        },\n        '\ucee4\ubc84\ub9ac\uc9c0': {\n            'coverage.py': '\ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815',\n            'pytest-cov': 'pytest\uc6a9 \ucee4\ubc84\ub9ac\uc9c0 \ud50c\ub7ec\uadf8\uc778'\n        },\n        '\ubcf4\uc548': {\n            'bandit': 'Python \ubcf4\uc548 \ucde8\uc57d\uc810 \uc2a4\uce94',\n            'safety': '\uc758\uc874\uc131 \ubcf4\uc548 \uac80\uc0ac'\n        },\n        '\uc131\ub2a5': {\n            'pytest-benchmark': '\uc131\ub2a5 \ubca4\uce58\ub9c8\ud06c \ud14c\uc2a4\ud2b8',\n            'locust': '\ubd80\ud558 \ud14c\uc2a4\ud2b8',\n            'py-spy': '\ud504\ub85c\ud30c\uc77c\ub9c1'\n        },\n        'CI/CD': {\n            'GitHub Actions': 'GitHub \ud1b5\ud569 CI/CD',\n            'Jenkins': '\ubc94\uc6a9 CI/CD \ub3c4\uad6c',\n            'GitLab CI': 'GitLab \ud1b5\ud569 CI/CD',\n            'Travis CI': '\ud074\ub77c\uc6b0\ub4dc CI \uc11c\ube44\uc2a4'\n        }\n    }\n\n    for category, category_tools in tools.items():\n        print(f\"  {category}:\")\n        for tool, description in category_tools.items():\n            print(f\"    {tool}: {description}\")\n        print()\n\n    print(f\"\\n  \uc0ac\uc6a9 \uc608\uc2dc:\")\n    print(f\"    pip install pytest pytest-cov pytest-mock\")\n    print(f\"    pytest --cov=mypackage tests/\")\n    print(f\"    pytest -n 4  # 4\uac1c \ud504\ub85c\uc138\uc2a4\ub85c \ubcd1\ub82c \uc2e4\ud589\")\n\ndemonstrate_automated_testing_tools()\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#8","title":"8. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter11_testing_debugging/#1_1","title":"\uc5f0\uc2b5 1: \ud14c\uc2a4\ud2b8 \uc2a4\uc704\ud2b8 \uc791\uc131","text":"<p>\ub2e4\uc74c \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \uc644\uc804\ud55c \ud14c\uc2a4\ud2b8 \uc2a4\uc704\ud2b8\ub97c \uc791\uc131\ud558\uc138\uc694: - \uc815\uc0c1 \ucf00\uc774\uc2a4, \uacbd\uacc4 \ucf00\uc774\uc2a4, \uc608\uc678 \ucf00\uc774\uc2a4 \ubaa8\ub450 \ud3ec\ud568 - unittest\uc640 pytest \uc2a4\ud0c0\uc77c \ubaa8\ub450 \uc0ac\uc6a9 - \ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0 90% \uc774\uc0c1 \ub2ec\uc131</p> <pre><code>class ShoppingCart:\n    def __init__(self):\n        self.items = {}\n        self.discount_rate = 0.0\n\n    def add_item(self, name, price, quantity=1):\n        if price &lt; 0 or quantity &lt;= 0:\n            raise ValueError(\"\uac00\uaca9\uc740 \uc74c\uc218\uc77c \uc218 \uc5c6\uace0 \uc218\ub7c9\uc740 \uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4\")\n\n        if name in self.items:\n            self.items[name]['quantity'] += quantity\n        else:\n            self.items[name] = {'price': price, 'quantity': quantity}\n\n    def remove_item(self, name):\n        if name not in self.items:\n            raise KeyError(f\"'{name}' \ud56d\ubaa9\uc774 \uc7a5\ubc14\uad6c\ub2c8\uc5d0 \uc5c6\uc2b5\ub2c8\ub2e4\")\n        del self.items[name]\n\n    def update_quantity(self, name, quantity):\n        if name not in self.items:\n            raise KeyError(f\"'{name}' \ud56d\ubaa9\uc774 \uc7a5\ubc14\uad6c\ub2c8\uc5d0 \uc5c6\uc2b5\ub2c8\ub2e4\")\n        if quantity &lt;= 0:\n            raise ValueError(\"\uc218\ub7c9\uc740 \uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4\")\n        self.items[name]['quantity'] = quantity\n\n    def apply_discount(self, rate):\n        if not 0 &lt;= rate &lt;= 1:\n            raise ValueError(\"\ud560\uc778\uc728\uc740 0\uacfc 1 \uc0ac\uc774\uc5ec\uc57c \ud569\ub2c8\ub2e4\")\n        self.discount_rate = rate\n\n    def get_total(self):\n        subtotal = sum(item['price'] * item['quantity'] for item in self.items.values())\n        return subtotal * (1 - self.discount_rate)\n\n    def get_item_count(self):\n        return sum(item['quantity'] for item in self.items.values())\n</code></pre>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#2-tdd","title":"\uc5f0\uc2b5 2: TDD\ub85c \ud074\ub798\uc2a4 \uac1c\ubc1c","text":"<p>TDD \ubc29\uc2dd\uc73c\ub85c \ub2e4\uc74c \uc694\uad6c\uc0ac\ud56d\uc744 \ub9cc\uc871\ud558\ub294 <code>PasswordValidator</code> \ud074\ub798\uc2a4\ub97c \uac1c\ubc1c\ud558\uc138\uc694: - \ucd5c\uc18c 8\uc790 \uc774\uc0c1 - \ub300\ubb38\uc790, \uc18c\ubb38\uc790, \uc22b\uc790, \ud2b9\uc218\ubb38\uc790 \uac01\uac01 \ucd5c\uc18c 1\uac1c \ud3ec\ud568 - \uc5f0\uc18d\ub41c \ubb38\uc790 3\uac1c \uc774\uc0c1 \uae08\uc9c0 (\uc608: \"abc\", \"123\") - \uc77c\ubc18\uc801\uc778 \uc57d\ud55c \ube44\ubc00\ubc88\ud638 \ub9ac\uc2a4\ud2b8 \uccb4\ud06c - \uac15\ub3c4 \uc810\uc218 \uacc4\uc0b0 (0-100\uc810)</p>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#3","title":"\uc5f0\uc2b5 3: \uc131\ub2a5 \ud14c\uc2a4\ud2b8 \ubc0f \ucd5c\uc801\ud654","text":"<p>\ub2e4\uc74c \ud568\uc218\uc758 \uc131\ub2a5\uc744 \uce21\uc815\ud558\uace0 \ucd5c\uc801\ud654\ud558\uc138\uc694: <pre><code>def find_prime_numbers(limit):\n    primes = []\n    for num in range(2, limit + 1):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n</code></pre></p>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#4_1","title":"\uc5f0\uc2b5 4: \ud1b5\ud569 \ud14c\uc2a4\ud2b8 \uc2dc\ub098\ub9ac\uc624","text":"<p>\ub2e4\uc74c \ud074\ub798\uc2a4\ub4e4\uc758 \uc0c1\ud638\uc791\uc6a9\uc744 \ud14c\uc2a4\ud2b8\ud558\ub294 \ud1b5\ud569 \ud14c\uc2a4\ud2b8\ub97c \uc791\uc131\ud558\uc138\uc694: <pre><code>class Database:\n    def __init__(self):\n        self.data = {}\n\n    def save(self, key, value):\n        self.data[key] = value\n\n    def get(self, key):\n        return self.data.get(key)\n\nclass UserService:\n    def __init__(self, database):\n        self.db = database\n\n    def create_user(self, username, email):\n        if self.db.get(username):\n            raise ValueError(\"\uc0ac\uc6a9\uc790\uac00 \uc774\ubbf8 \uc874\uc7ac\ud569\ub2c8\ub2e4\")\n\n        user = {'username': username, 'email': email}\n        self.db.save(username, user)\n        return user\n\n    def get_user(self, username):\n        return self.db.get(username)\n\nclass NotificationService:\n    def __init__(self, user_service):\n        self.user_service = user_service\n\n    def send_welcome_email(self, username):\n        user = self.user_service.get_user(username)\n        if not user:\n            raise ValueError(\"\uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n\n        # \uc774\uba54\uc77c \ubc1c\uc1a1 \uc2dc\ubbac\ub808\uc774\uc158\n        return f\"Welcome email sent to {user['email']}\"\n</code></pre></p>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>\ud14c\uc2a4\ud2b8 \uae30\ucd08: \ud14c\uc2a4\ud2b8 \uc885\ub958, \uc791\uc131 \uc6d0\uce59, AAA \ud328\ud134</li> <li>unittest \ubaa8\ub4c8: \uae30\ubcf8 \uc0ac\uc6a9\ubc95, \uace0\uae09 \uae30\ubc95, \ubaa8\ud0b9</li> <li>pytest \ud504\ub808\uc784\uc6cc\ud06c: \uc7a5\uc810, \ud53d\uc2a4\ucc98, \ub9e4\uac1c\ubcc0\uc218\ud654, \ud50c\ub7ec\uadf8\uc778</li> <li>\ub514\ubc84\uae45 \uae30\ubc95: print, logging, assertion, traceback, \ud504\ub85c\ud30c\uc77c\ub9c1</li> <li>TDD: Red-Green-Refactor \uc0ac\uc774\ud074, \uc2e4\ubb34 \uc801\uc6a9</li> <li>\ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0\uc640 \ud488\uc9c8 \uce21\uc815: \ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815, \ud488\uc9c8 \uba54\ud2b8\ub9ad, \ub9ac\ud329\ud1a0\ub9c1</li> <li>CI/CD \ud1b5\ud569: \uc790\ub3d9\ud654\ub41c \ud14c\uc2a4\ud2b8, \ud30c\uc774\ud504\ub77c\uc778 \uad6c\ucd95</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9\uc5d0 \ub300\ud574 \ud559\uc2b5\ud558\uc5ec \uc2e4\uc81c \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uac1c\ubc1c\uc5d0 \ud544\uc694\ud55c \ub370\uc774\ud130 \uad00\ub9ac \uae30\ubc95\uc744 \ubc30\uc6b0\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter11_testing_debugging/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ud14c\uc2a4\ud2b8\ub294 \ucf54\ub4dc \ud488\uc9c8\uacfc \uc2e0\ub8b0\uc131\uc758 \ud575\uc2ec\uc785\ub2c8\ub2e4</li> <li>TDD\ub294 \uc694\uad6c\uc0ac\ud56d \uc774\ud574\uc640 \uc124\uacc4 \uac1c\uc120\uc5d0 \ub3c4\uc6c0\uc774 \ub429\ub2c8\ub2e4</li> <li>\uc801\uc808\ud55c \ucee4\ubc84\ub9ac\uc9c0\uc640 \ud488\uc9c8 \uba54\ud2b8\ub9ad\uc774 \uc911\uc694\ud569\ub2c8\ub2e4</li> <li>\uc790\ub3d9\ud654\ub41c \ud14c\uc2a4\ud2b8\ub85c \ud68c\uadc0 \ubc84\uadf8 \ubc29\uc9c0</li> <li>\ub514\ubc84\uae45\uc740 \uccb4\uacc4\uc801\uc778 \uc811\uadfc\uc774 \ud544\uc694\ud569\ub2c8\ub2e4</li> <li>CI/CD \ud30c\uc774\ud504\ub77c\uc778\uc5d0\uc11c \ud14c\uc2a4\ud2b8\ub294 \ud544\uc218 \uc694\uc18c\uc785\ub2c8\ub2e4 </li> </ul>"},{"location":"tutorials/intermediate/chapter12_database_integration/","title":"Chapter 12: \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9","text":""},{"location":"tutorials/intermediate/chapter12_database_integration/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - SQLite3\ub97c \ud65c\uc6a9\ud55c \uae30\ubcf8\uc801\uc778 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc870\uc791\ud558\uae30 - Python\uc5d0\uc11c SQL \ucffc\ub9ac \uc2e4\ud589\uacfc \uacb0\uacfc \ucc98\ub9ac\ud558\uae30 - \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158\uacfc \uc5d0\ub7ec \ucc98\ub9ac \uad6c\ud604\ud558\uae30 - ORM(SQLAlchemy) \uae30\ucd08\uc640 \ud65c\uc6a9\ubc95 \uc774\ud574\ud558\uae30 - \uc5f0\uacb0 \ud480\ub9c1\uacfc \uc131\ub2a5 \ucd5c\uc801\ud654 \uae30\ubc95 \uc801\uc6a9\ud558\uae30 - NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4(MongoDB) \uae30\ucd08 \ud65c\uc6a9\ud558\uae30 - \uc2e4\ubb34\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uacc4 \ud328\ud134 \uc774\ud574\ud558\uae30</p>"},{"location":"tutorials/intermediate/chapter12_database_integration/#1-sqlite3","title":"1. SQLite3 \uae30\ubcf8 \uc0ac\uc6a9\ubc95","text":""},{"location":"tutorials/intermediate/chapter12_database_integration/#11","title":"1.1 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uae30\ucd08 \uac1c\ub150","text":"<pre><code>print(\"=== \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uae30\ucd08 \uac1c\ub150 ===\")\n\ndef demonstrate_database_concepts():\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uae30\ubcf8 \uac1c\ub150 \uc124\uba85\"\"\"\n\n    print(\"1. \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub780?\")\n    print(\"  - \uad6c\uc870\ud654\ub41c \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \uc2dc\uc2a4\ud15c\")\n    print(\"  - \uad00\uacc4\ud615(RDBMS)\uacfc \ube44\uad00\uacc4\ud615(NoSQL) \ub370\uc774\ud130\ubca0\uc774\uc2a4\")\n    print(\"  - ACID \uc18d\uc131: \uc6d0\uc790\uc131, \uc77c\uad00\uc131, \uaca9\ub9ac\uc131, \uc9c0\uc18d\uc131\")\n    print()\n\n    print(\"2. SQLite\uc758 \ud2b9\uc9d5:\")\n    print(\"  - \uc11c\ubc84\uac00 \ud544\uc694 \uc5c6\ub294 \uacbd\ub7c9 \ub370\uc774\ud130\ubca0\uc774\uc2a4\")\n    print(\"  - \ub2e8\uc77c \ud30c\uc77c\ub85c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc800\uc7a5\")\n    print(\"  - Python \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \ud3ec\ud568\")\n    print(\"  - \uc791\uc740 \uaddc\ubaa8 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \uc801\ud569\")\n    print()\n\n    print(\"3. SQL \uae30\ubcf8 \uba85\ub839\uc5b4:\")\n    print(\"  - DDL (Data Definition Language): CREATE, ALTER, DROP\")\n    print(\"  - DML (Data Manipulation Language): INSERT, UPDATE, DELETE\")\n    print(\"  - DQL (Data Query Language): SELECT\")\n    print(\"  - DCL (Data Control Language): GRANT, REVOKE\")\n\ndemonstrate_database_concepts()\n\nimport sqlite3\nimport os\nfrom datetime import datetime, date\nimport json\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud30c\uc77c \uc0dd\uc131 \ubc0f \uc5f0\uacb0\ndef create_sample_database():\n    \"\"\"\uc0d8\ud50c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0dd\uc131\"\"\"\n\n    print(f\"\\n4. SQLite \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0dd\uc131:\")\n\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 (\ud30c\uc77c\uc774 \uc5c6\uc73c\uba74 \uc790\ub3d9 \uc0dd\uc131)\n    conn = sqlite3.connect('sample_company.db')\n    cursor = conn.cursor()\n\n    # \uc9c1\uc6d0 \ud14c\uc774\ube14 \uc0dd\uc131\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS employees (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            email TEXT UNIQUE NOT NULL,\n            department TEXT NOT NULL,\n            salary REAL NOT NULL,\n            hire_date DATE NOT NULL,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n    ''')\n\n    # \ubd80\uc11c \ud14c\uc774\ube14 \uc0dd\uc131\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS departments (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT UNIQUE NOT NULL,\n            budget REAL NOT NULL,\n            manager_id INTEGER,\n            FOREIGN KEY (manager_id) REFERENCES employees (id)\n        )\n    ''')\n\n    # \ud504\ub85c\uc81d\ud2b8 \ud14c\uc774\ube14 \uc0dd\uc131\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS projects (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            description TEXT,\n            start_date DATE NOT NULL,\n            end_date DATE,\n            budget REAL NOT NULL,\n            status TEXT DEFAULT 'active' CHECK (status IN ('active', 'completed', 'cancelled'))\n        )\n    ''')\n\n    # \uc9c1\uc6d0-\ud504\ub85c\uc81d\ud2b8 \uad00\uacc4 \ud14c\uc774\ube14 (\ub2e4\ub300\ub2e4 \uad00\uacc4)\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS employee_projects (\n            employee_id INTEGER,\n            project_id INTEGER,\n            role TEXT NOT NULL,\n            assigned_date DATE DEFAULT CURRENT_DATE,\n            PRIMARY KEY (employee_id, project_id),\n            FOREIGN KEY (employee_id) REFERENCES employees (id),\n            FOREIGN KEY (project_id) REFERENCES projects (id)\n        )\n    ''')\n\n    conn.commit()\n    print(\"  \u2713 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \ud14c\uc774\ube14 \uc0dd\uc131 \uc644\ub8cc\")\n\n    return conn, cursor\n\n# \uc0d8\ud50c \ub370\uc774\ud130 \uc0bd\uc785\ndef insert_sample_data(conn, cursor):\n    \"\"\"\uc0d8\ud50c \ub370\uc774\ud130 \uc0bd\uc785\"\"\"\n\n    print(f\"\\n5. \uc0d8\ud50c \ub370\uc774\ud130 \uc0bd\uc785:\")\n\n    # \uc9c1\uc6d0 \ub370\uc774\ud130\n    employees_data = [\n        ('\uae40\ucca0\uc218', 'kim@company.com', 'Engineering', 75000, '2023-01-15'),\n        ('\uc774\uc601\ud76c', 'lee@company.com', 'Marketing', 65000, '2023-02-01'),\n        ('\ubc15\ubbfc\uc218', 'park@company.com', 'Engineering', 80000, '2022-11-10'),\n        ('\ucd5c\uc9c0\uc601', 'choi@company.com', 'HR', 60000, '2023-03-20'),\n        ('\uc815\ud558\ub298', 'jung@company.com', 'Sales', 70000, '2023-01-05'),\n    ]\n\n    cursor.executemany('''\n        INSERT OR IGNORE INTO employees (name, email, department, salary, hire_date)\n        VALUES (?, ?, ?, ?, ?)\n    ''', employees_data)\n\n    # \ubd80\uc11c \ub370\uc774\ud130\n    departments_data = [\n        ('Engineering', 500000, 3),  # \ubc15\ubbfc\uc218\uac00 \ub9e4\ub2c8\uc800\n        ('Marketing', 300000, 2),    # \uc774\uc601\ud76c\uac00 \ub9e4\ub2c8\uc800\n        ('HR', 200000, 4),           # \ucd5c\uc9c0\uc601\uc774 \ub9e4\ub2c8\uc800\n        ('Sales', 400000, 5),        # \uc815\ud558\ub298\uc774 \ub9e4\ub2c8\uc800\n    ]\n\n    cursor.executemany('''\n        INSERT OR IGNORE INTO departments (name, budget, manager_id)\n        VALUES (?, ?, ?)\n    ''', departments_data)\n\n    # \ud504\ub85c\uc81d\ud2b8 \ub370\uc774\ud130\n    projects_data = [\n        ('\uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uac1c\ubc1c', '\uace0\uac1d \uad00\ub9ac \uc2dc\uc2a4\ud15c \uac1c\ubc1c', '2023-01-01', '2023-06-30', 150000, 'active'),\n        ('\ub9c8\ucf00\ud305 \ucea0\ud398\uc778', '\uc2e0\uc81c\ud488 \ub7f0\uce6d \ucea0\ud398\uc778', '2023-03-01', '2023-05-31', 80000, 'completed'),\n        ('\uc2dc\uc2a4\ud15c \ucd5c\uc801\ud654', '\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc131\ub2a5 \uac1c\uc120', '2023-04-01', None, 100000, 'active'),\n        ('\ubaa8\ubc14\uc77c \uc571 \uac1c\ubc1c', 'iOS/Android \uc571 \uac1c\ubc1c', '2023-02-15', '2023-08-15', 200000, 'active'),\n    ]\n\n    cursor.executemany('''\n        INSERT OR IGNORE INTO projects (name, description, start_date, end_date, budget, status)\n        VALUES (?, ?, ?, ?, ?, ?)\n    ''', projects_data)\n\n    # \uc9c1\uc6d0-\ud504\ub85c\uc81d\ud2b8 \ud560\ub2f9\n    assignments_data = [\n        (1, 1, 'Developer', '2023-01-01'),     # \uae40\ucca0\uc218 -&gt; \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\n        (3, 1, 'Lead Developer', '2023-01-01'), # \ubc15\ubbfc\uc218 -&gt; \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\n        (2, 2, 'Marketing Lead', '2023-03-01'), # \uc774\uc601\ud76c -&gt; \ub9c8\ucf00\ud305 \ucea0\ud398\uc778\n        (3, 3, 'Tech Lead', '2023-04-01'),      # \ubc15\ubbfc\uc218 -&gt; \uc2dc\uc2a4\ud15c \ucd5c\uc801\ud654\n        (1, 4, 'Mobile Developer', '2023-02-15'), # \uae40\ucca0\uc218 -&gt; \ubaa8\ubc14\uc77c \uc571\n        (5, 2, 'Sales Coordinator', '2023-03-01'), # \uc815\ud558\ub298 -&gt; \ub9c8\ucf00\ud305 \ucea0\ud398\uc778\n    ]\n\n    cursor.executemany('''\n        INSERT OR IGNORE INTO employee_projects (employee_id, project_id, role, assigned_date)\n        VALUES (?, ?, ?, ?)\n    ''', assignments_data)\n\n    conn.commit()\n    print(\"  \u2713 \uc0d8\ud50c \ub370\uc774\ud130 \uc0bd\uc785 \uc644\ub8cc\")\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0dd\uc131 \ubc0f \ub370\uc774\ud130 \uc0bd\uc785 \uc2e4\ud589\nconn, cursor = create_sample_database()\ninsert_sample_data(conn, cursor)\n</code></pre>"},{"location":"tutorials/intermediate/chapter12_database_integration/#12-crud","title":"1.2 \uae30\ubcf8 CRUD \uc5f0\uc0b0","text":"<pre><code>print(\"\\n=== \uae30\ubcf8 CRUD \uc5f0\uc0b0 ===\")\n\nclass EmployeeDatabase:\n    \"\"\"\uc9c1\uc6d0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uad00\ub9ac \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, db_path='sample_company.db'):\n        self.db_path = db_path\n\n    def get_connection(self):\n        \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc0dd\uc131\"\"\"\n        return sqlite3.connect(self.db_path)\n\n    def create_employee(self, name, email, department, salary, hire_date):\n        \"\"\"\uc9c1\uc6d0 \uc0dd\uc131 (CREATE)\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n\n        try:\n            cursor.execute('''\n                INSERT INTO employees (name, email, department, salary, hire_date)\n                VALUES (?, ?, ?, ?, ?)\n            ''', (name, email, department, salary, hire_date))\n\n            employee_id = cursor.lastrowid\n            conn.commit()\n            print(f\"    \u2713 \uc0c8 \uc9c1\uc6d0 \ucd94\uac00: {name} (ID: {employee_id})\")\n            return employee_id\n\n        except sqlite3.IntegrityError as e:\n            print(f\"    \u2717 \uc9c1\uc6d0 \ucd94\uac00 \uc2e4\ud328: {e}\")\n            return None\n        finally:\n            conn.close()\n\n    def read_employees(self, department=None, limit=None):\n        \"\"\"\uc9c1\uc6d0 \uc870\ud68c (READ)\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n\n        query = \"SELECT * FROM employees\"\n        params = []\n\n        if department:\n            query += \" WHERE department = ?\"\n            params.append(department)\n\n        query += \" ORDER BY hire_date DESC\"\n\n        if limit:\n            query += \" LIMIT ?\"\n            params.append(limit)\n\n        cursor.execute(query, params)\n        employees = cursor.fetchall()\n        conn.close()\n\n        return employees\n\n    def update_employee_salary(self, employee_id, new_salary):\n        \"\"\"\uc9c1\uc6d0 \uae09\uc5ec \uc218\uc815 (UPDATE)\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            UPDATE employees \n            SET salary = ? \n            WHERE id = ?\n        ''', (new_salary, employee_id))\n\n        if cursor.rowcount &gt; 0:\n            conn.commit()\n            print(f\"    \u2713 \uc9c1\uc6d0 ID {employee_id}\uc758 \uae09\uc5ec\ub97c {new_salary}\ub85c \uc5c5\ub370\uc774\ud2b8\")\n        else:\n            print(f\"    \u2717 \uc9c1\uc6d0 ID {employee_id}\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc74c\")\n\n        conn.close()\n        return cursor.rowcount &gt; 0\n\n    def delete_employee(self, employee_id):\n        \"\"\"\uc9c1\uc6d0 \uc0ad\uc81c (DELETE)\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n\n        # \uba3c\uc800 \uad00\ub828 \ub370\uc774\ud130 \ud655\uc778\n        cursor.execute('''\n            SELECT COUNT(*) FROM employee_projects WHERE employee_id = ?\n        ''', (employee_id,))\n\n        project_count = cursor.fetchone()[0]\n\n        if project_count &gt; 0:\n            print(f\"    \u2717 \uc9c1\uc6d0 ID {employee_id}\ub294 {project_count}\uac1c \ud504\ub85c\uc81d\ud2b8\uc5d0 \ud560\ub2f9\ub418\uc5b4 \uc0ad\uc81c\ud560 \uc218 \uc5c6\uc74c\")\n            conn.close()\n            return False\n\n        cursor.execute('DELETE FROM employees WHERE id = ?', (employee_id,))\n\n        if cursor.rowcount &gt; 0:\n            conn.commit()\n            print(f\"    \u2713 \uc9c1\uc6d0 ID {employee_id} \uc0ad\uc81c \uc644\ub8cc\")\n        else:\n            print(f\"    \u2717 \uc9c1\uc6d0 ID {employee_id}\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc74c\")\n\n        conn.close()\n        return cursor.rowcount &gt; 0\n\n    def get_employee_projects(self, employee_id):\n        \"\"\"\uc9c1\uc6d0\uc758 \ud504\ub85c\uc81d\ud2b8 \uc870\ud68c (JOIN)\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            SELECT e.name as employee_name, p.name as project_name, \n                   ep.role, ep.assigned_date, p.status\n            FROM employees e\n            JOIN employee_projects ep ON e.id = ep.employee_id\n            JOIN projects p ON ep.project_id = p.id\n            WHERE e.id = ?\n            ORDER BY ep.assigned_date DESC\n        ''', (employee_id,))\n\n        projects = cursor.fetchall()\n        conn.close()\n\n        return projects\n\ndef demonstrate_crud_operations():\n    \"\"\"CRUD \uc5f0\uc0b0 \uc2dc\uc5f0\"\"\"\n\n    print(\"6. CRUD \uc5f0\uc0b0 \uc2dc\uc5f0:\")\n\n    db = EmployeeDatabase()\n\n    # CREATE - \uc0c8 \uc9c1\uc6d0 \ucd94\uac00\n    print(\"  CREATE \uc5f0\uc0b0:\")\n    new_id = db.create_employee(\n        '\ud64d\uae38\ub3d9', 'hong@company.com', 'Engineering', 72000, '2023-05-01'\n    )\n\n    # READ - \uc9c1\uc6d0 \uc870\ud68c\n    print(f\"\\n  READ \uc5f0\uc0b0:\")\n    print(\"    Engineering \ubd80\uc11c \uc9c1\uc6d0\ub4e4:\")\n    eng_employees = db.read_employees(department='Engineering', limit=3)\n    for emp in eng_employees:\n        print(f\"      ID: {emp[0]}, \uc774\ub984: {emp[1]}, \uae09\uc5ec: {emp[4]:,}\uc6d0\")\n\n    # UPDATE - \uae09\uc5ec \uc218\uc815\n    print(f\"\\n  UPDATE \uc5f0\uc0b0:\")\n    if new_id:\n        db.update_employee_salary(new_id, 75000)\n\n    # \ud504\ub85c\uc81d\ud2b8 \uc815\ubcf4 \uc870\ud68c (JOIN)\n    print(f\"\\n  JOIN \uc5f0\uc0b0 (\uc9c1\uc6d0\uc758 \ud504\ub85c\uc81d\ud2b8):\")\n    projects = db.get_employee_projects(1)  # \uae40\ucca0\uc218\uc758 \ud504\ub85c\uc81d\ud2b8\n    if projects:\n        print(f\"    {projects[0][0]}\ub2d8\uc758 \ud504\ub85c\uc81d\ud2b8:\")\n        for proj in projects:\n            print(f\"      \ud504\ub85c\uc81d\ud2b8: {proj[1]}, \uc5ed\ud560: {proj[2]}, \uc0c1\ud0dc: {proj[4]}\")\n\n    # DELETE - \uc9c1\uc6d0 \uc0ad\uc81c (\ucc38\uc870 \ubb34\uacb0\uc131 \ud655\uc778)\n    print(f\"\\n  DELETE \uc5f0\uc0b0:\")\n    if new_id:\n        db.delete_employee(new_id)  # \ud504\ub85c\uc81d\ud2b8 \ud560\ub2f9\uc774 \uc5c6\uc5b4\uc11c \uc0ad\uc81c \uac00\ub2a5\n\ndemonstrate_crud_operations()\n</code></pre>"},{"location":"tutorials/intermediate/chapter12_database_integration/#13","title":"1.3 \uace0\uae09 \ucffc\ub9ac\uc640 \uc9d1\uacc4 \ud568\uc218","text":"<pre><code>print(\"\\n=== \uace0\uae09 \ucffc\ub9ac\uc640 \uc9d1\uacc4 \ud568\uc218 ===\")\n\nclass AdvancedQueries:\n    \"\"\"\uace0\uae09 SQL \ucffc\ub9ac \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, db_path='sample_company.db'):\n        self.db_path = db_path\n\n    def get_connection(self):\n        return sqlite3.connect(self.db_path)\n\n    def department_statistics(self):\n        \"\"\"\ubd80\uc11c\ubcc4 \ud1b5\uacc4\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            SELECT \n                department,\n                COUNT(*) as employee_count,\n                AVG(salary) as avg_salary,\n                MIN(salary) as min_salary,\n                MAX(salary) as max_salary,\n                SUM(salary) as total_salary\n            FROM employees\n            GROUP BY department\n            ORDER BY avg_salary DESC\n        ''')\n\n        stats = cursor.fetchall()\n        conn.close()\n\n        return stats\n\n    def project_progress_report(self):\n        \"\"\"\ud504\ub85c\uc81d\ud2b8 \uc9c4\ud589 \ud604\ud669 \ubcf4\uace0\uc11c\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            SELECT \n                p.name as project_name,\n                p.status,\n                p.budget,\n                COUNT(ep.employee_id) as team_size,\n                GROUP_CONCAT(e.name, ', ') as team_members,\n                CASE \n                    WHEN p.end_date IS NULL THEN 'Ongoing'\n                    WHEN DATE(p.end_date) &gt; DATE('now') THEN 'In Progress'\n                    ELSE 'Completed'\n                END as progress_status\n            FROM projects p\n            LEFT JOIN employee_projects ep ON p.id = ep.project_id\n            LEFT JOIN employees e ON ep.employee_id = e.id\n            GROUP BY p.id\n            ORDER BY p.budget DESC\n        ''')\n\n        reports = cursor.fetchall()\n        conn.close()\n\n        return reports\n\n    def high_performers(self, salary_threshold=70000):\n        \"\"\"\uace0\uc131\uacfc\uc790 \uc870\ud68c (\uae09\uc5ec \uae30\uc900)\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            SELECT \n                e.name,\n                e.department,\n                e.salary,\n                COUNT(ep.project_id) as project_count,\n                ROUND(\n                    julianday('now') - julianday(e.hire_date)\n                ) as days_employed\n            FROM employees e\n            LEFT JOIN employee_projects ep ON e.id = ep.employee_id\n            WHERE e.salary &gt;= ?\n            GROUP BY e.id\n            ORDER BY e.salary DESC, project_count DESC\n        ''', (salary_threshold,))\n\n        performers = cursor.fetchall()\n        conn.close()\n\n        return performers\n\n    def project_budget_analysis(self):\n        \"\"\"\ud504\ub85c\uc81d\ud2b8 \uc608\uc0b0 \ubd84\uc11d\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            WITH project_costs AS (\n                SELECT \n                    p.id,\n                    p.name,\n                    p.budget,\n                    COUNT(ep.employee_id) * \n                    (julianday(COALESCE(p.end_date, 'now')) - julianday(p.start_date)) / 30 * \n                    AVG(e.salary) / 12 as estimated_cost\n                FROM projects p\n                LEFT JOIN employee_projects ep ON p.id = ep.project_id\n                LEFT JOIN employees e ON ep.employee_id = e.id\n                GROUP BY p.id\n            )\n            SELECT \n                name,\n                budget,\n                ROUND(estimated_cost, 2) as estimated_cost,\n                ROUND(budget - estimated_cost, 2) as budget_remaining,\n                ROUND((budget - estimated_cost) / budget * 100, 1) as budget_utilization_pct\n            FROM project_costs\n            WHERE estimated_cost IS NOT NULL\n            ORDER BY budget_utilization_pct ASC\n        ''')\n\n        analysis = cursor.fetchall()\n        conn.close()\n\n        return analysis\n\ndef demonstrate_advanced_queries():\n    \"\"\"\uace0\uae09 \ucffc\ub9ac \uc2dc\uc5f0\"\"\"\n\n    print(\"7. \uace0\uae09 \ucffc\ub9ac\uc640 \uc9d1\uacc4 \ud568\uc218:\")\n\n    queries = AdvancedQueries()\n\n    # \ubd80\uc11c\ubcc4 \ud1b5\uacc4\n    print(\"  \ubd80\uc11c\ubcc4 \ud1b5\uacc4:\")\n    stats = queries.department_statistics()\n    for stat in stats:\n        dept, count, avg_sal, min_sal, max_sal, total_sal = stat\n        print(f\"    {dept}: {count}\uba85, \ud3c9\uade0\uae09\uc5ec: {avg_sal:,.0f}\uc6d0, \ucd1d\uae09\uc5ec: {total_sal:,.0f}\uc6d0\")\n\n    # \ud504\ub85c\uc81d\ud2b8 \uc9c4\ud589 \ud604\ud669\n    print(f\"\\n  \ud504\ub85c\uc81d\ud2b8 \uc9c4\ud589 \ud604\ud669:\")\n    reports = queries.project_progress_report()\n    for report in reports:\n        name, status, budget, team_size, members, progress = report\n        print(f\"    {name}: \uc608\uc0b0 {budget:,}\uc6d0, \ud300\uc6d0 {team_size}\uba85, \uc0c1\ud0dc: {progress}\")\n        if members:\n            print(f\"      \ud300\uc6d0: {members}\")\n\n    # \uace0\uc131\uacfc\uc790 \ubd84\uc11d\n    print(f\"\\n  \uace0\uc131\uacfc\uc790 \ubd84\uc11d (\uae09\uc5ec 70,000\uc6d0 \uc774\uc0c1):\")\n    performers = queries.high_performers()\n    for perf in performers:\n        name, dept, salary, proj_count, days = perf\n        print(f\"    {name} ({dept}): {salary:,}\uc6d0, {proj_count}\uac1c \ud504\ub85c\uc81d\ud2b8, \uadfc\ubb34 {days}\uc77c\")\n\n    # \ud504\ub85c\uc81d\ud2b8 \uc608\uc0b0 \ubd84\uc11d\n    print(f\"\\n  \ud504\ub85c\uc81d\ud2b8 \uc608\uc0b0 \ubd84\uc11d:\")\n    analysis = queries.project_budget_analysis()\n    for item in analysis:\n        name, budget, cost, remaining, util_pct = item\n        print(f\"    {name}: \uc608\uc0b0 {budget:,}\uc6d0, \uc608\uc0c1\ube44\uc6a9 {cost:,}\uc6d0, \uc794\uc5ec {remaining:,}\uc6d0 ({util_pct}%)\")\n\ndemonstrate_advanced_queries()\n</code></pre>"},{"location":"tutorials/intermediate/chapter12_database_integration/#2","title":"2. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158\uacfc \uc5d0\ub7ec \ucc98\ub9ac","text":""},{"location":"tutorials/intermediate/chapter12_database_integration/#21","title":"2.1 \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac","text":"<pre><code>print(\"\\n=== \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158\uacfc \uc5d0\ub7ec \ucc98\ub9ac ===\")\n\nimport sqlite3\nfrom contextlib import contextmanager\nimport logging\n\n# \ub85c\uae45 \uc124\uc815\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\nclass TransactionManager:\n    \"\"\"\ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, db_path='sample_company.db'):\n        self.db_path = db_path\n\n    @contextmanager\n    def transaction(self):\n        \"\"\"\ud2b8\ub79c\uc7ad\uc158 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\"\"\"\n        conn = sqlite3.connect(self.db_path)\n        conn.execute('BEGIN')\n\n        try:\n            yield conn\n            conn.commit()\n            logger.info(\"\ud2b8\ub79c\uc7ad\uc158 \ucee4\ubc0b \uc644\ub8cc\")\n        except Exception as e:\n            conn.rollback()\n            logger.error(f\"\ud2b8\ub79c\uc7ad\uc158 \ub864\ubc31: {e}\")\n            raise\n        finally:\n            conn.close()\n\n    def transfer_employee_between_projects(self, employee_id, from_project_id, to_project_id, new_role):\n        \"\"\"\uc9c1\uc6d0\uc758 \ud504\ub85c\uc81d\ud2b8 \uc774\ub3d9 (\ud2b8\ub79c\uc7ad\uc158 \uc0ac\uc6a9)\"\"\"\n\n        print(f\"8. \ud2b8\ub79c\uc7ad\uc158 \uc608\uc81c - \uc9c1\uc6d0 \ud504\ub85c\uc81d\ud2b8 \uc774\ub3d9:\")\n\n        try:\n            with self.transaction() as conn:\n                cursor = conn.cursor()\n\n                # 1. \ud604\uc7ac \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uc81c\uac70\n                cursor.execute('''\n                    DELETE FROM employee_projects \n                    WHERE employee_id = ? AND project_id = ?\n                ''', (employee_id, from_project_id))\n\n                if cursor.rowcount == 0:\n                    raise ValueError(f\"\uc9c1\uc6d0 {employee_id}\uac00 \ud504\ub85c\uc81d\ud2b8 {from_project_id}\uc5d0 \ud560\ub2f9\ub418\uc9c0 \uc54a\uc74c\")\n\n                # 2. \uc0c8 \ud504\ub85c\uc81d\ud2b8\uc5d0 \ud560\ub2f9\n                cursor.execute('''\n                    INSERT INTO employee_projects (employee_id, project_id, role, assigned_date)\n                    VALUES (?, ?, ?, DATE('now'))\n                ''', (employee_id, to_project_id, new_role))\n\n                # 3. \ub85c\uadf8 \uae30\ub85d\uc6a9 \uc815\ubcf4 \uc870\ud68c\n                cursor.execute('SELECT name FROM employees WHERE id = ?', (employee_id,))\n                emp_name = cursor.fetchone()[0]\n\n                cursor.execute('SELECT name FROM projects WHERE id = ?', (from_project_id,))\n                from_proj = cursor.fetchone()[0]\n\n                cursor.execute('SELECT name FROM projects WHERE id = ?', (to_project_id,))\n                to_proj = cursor.fetchone()[0]\n\n                print(f\"    \u2713 {emp_name}\ub2d8\uc744 '{from_proj}'\uc5d0\uc11c '{to_proj}'\ub85c \uc774\ub3d9 ({new_role})\")\n\n        except Exception as e:\n            print(f\"    \u2717 \ud504\ub85c\uc81d\ud2b8 \uc774\ub3d9 \uc2e4\ud328: {e}\")\n            return False\n\n        return True\n\n    def batch_salary_update(self, updates):\n        \"\"\"\uc77c\uad04 \uae09\uc5ec \uc870\uc815 (\ud2b8\ub79c\uc7ad\uc158 \uc0ac\uc6a9)\"\"\"\n\n        print(f\"\\n9. \uc77c\uad04 \ucc98\ub9ac \ud2b8\ub79c\uc7ad\uc158:\")\n\n        try:\n            with self.transaction() as conn:\n                cursor = conn.cursor()\n\n                for employee_id, new_salary, reason in updates:\n                    # \ud604\uc7ac \uae09\uc5ec \ud655\uc778\n                    cursor.execute('SELECT name, salary FROM employees WHERE id = ?', (employee_id,))\n                    result = cursor.fetchone()\n\n                    if not result:\n                        raise ValueError(f\"\uc9c1\uc6d0 ID {employee_id}\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc74c\")\n\n                    name, current_salary = result\n\n                    # \uae09\uc5ec \uc5c5\ub370\uc774\ud2b8\n                    cursor.execute('''\n                        UPDATE employees \n                        SET salary = ? \n                        WHERE id = ?\n                    ''', (new_salary, employee_id))\n\n                    print(f\"    \u2713 {name}: {current_salary:,}\uc6d0 \u2192 {new_salary:,}\uc6d0 ({reason})\")\n\n                print(f\"    \ucd1d {len(updates)}\uba85\uc758 \uae09\uc5ec \uc870\uc815 \uc644\ub8cc\")\n\n        except Exception as e:\n            print(f\"    \u2717 \uc77c\uad04 \uae09\uc5ec \uc870\uc815 \uc2e4\ud328: {e}\")\n            return False\n\n        return True\n\n# \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc5f0\ndef demonstrate_transactions():\n    \"\"\"\ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc5f0\"\"\"\n\n    tm = TransactionManager()\n\n    # \ud504\ub85c\uc81d\ud2b8 \uc774\ub3d9 (\uc131\uacf5 \ucf00\uc774\uc2a4)\n    tm.transfer_employee_between_projects(\n        employee_id=1,\n        from_project_id=1,\n        to_project_id=3,\n        new_role='Senior Developer'\n    )\n\n    # \uc77c\uad04 \uae09\uc5ec \uc870\uc815\n    salary_updates = [\n        (1, 78000, '\uc131\uacfc \uc778\uc0c1'),\n        (2, 68000, '\uc2dc\uc7a5 \uc870\uc815'),\n        (3, 85000, '\uc2b9\uc9c4'),\n    ]\n\n    tm.batch_salary_update(salary_updates)\n\ndemonstrate_transactions()\n</code></pre>"},{"location":"tutorials/intermediate/chapter12_database_integration/#22","title":"2.2 \uc5f0\uacb0 \ud480\ub9c1\uacfc \uc131\ub2a5 \ucd5c\uc801\ud654","text":"<pre><code>print(\"\\n=== \uc5f0\uacb0 \ud480\ub9c1\uacfc \uc131\ub2a5 \ucd5c\uc801\ud654 ===\")\n\nimport threading\nimport time\nimport queue\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ConnectionPool:\n    \"\"\"\uac04\ub2e8\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ud480\"\"\"\n\n    def __init__(self, db_path, pool_size=5):\n        self.db_path = db_path\n        self.pool_size = pool_size\n        self.pool = queue.Queue(maxsize=pool_size)\n        self.lock = threading.Lock()\n\n        # \uc5f0\uacb0 \ud480 \ucd08\uae30\ud654\n        for _ in range(pool_size):\n            conn = sqlite3.connect(db_path, check_same_thread=False)\n            conn.execute('PRAGMA journal_mode=WAL')  # \uc131\ub2a5 \uac1c\uc120\n            conn.execute('PRAGMA synchronous=NORMAL')  # \uc131\ub2a5 \uac1c\uc120\n            self.pool.put(conn)\n\n    @contextmanager\n    def get_connection(self, timeout=10):\n        \"\"\"\uc5f0\uacb0 \ud480\uc5d0\uc11c \uc5f0\uacb0 \uac00\uc838\uc624\uae30\"\"\"\n        try:\n            conn = self.pool.get(timeout=timeout)\n            yield conn\n        finally:\n            self.pool.put(conn)\n\n    def close_all(self):\n        \"\"\"\ubaa8\ub4e0 \uc5f0\uacb0 \ub2eb\uae30\"\"\"\n        while not self.pool.empty():\n            conn = self.pool.get()\n            conn.close()\n\nclass OptimizedDatabase:\n    \"\"\"\ucd5c\uc801\ud654\ub41c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, db_path='sample_company.db', pool_size=5):\n        self.pool = ConnectionPool(db_path, pool_size)\n        self.prepare_optimizations()\n\n    def prepare_optimizations(self):\n        \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucd5c\uc801\ud654 \uc124\uc815\"\"\"\n\n        print(\"10. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucd5c\uc801\ud654 \uc124\uc815:\")\n\n        with self.pool.get_connection() as conn:\n            cursor = conn.cursor()\n\n            # \uc778\ub371\uc2a4 \uc0dd\uc131\n            indexes = [\n                \"CREATE INDEX IF NOT EXISTS idx_emp_department ON employees(department)\",\n                \"CREATE INDEX IF NOT EXISTS idx_emp_salary ON employees(salary)\",\n                \"CREATE INDEX IF NOT EXISTS idx_emp_hire_date ON employees(hire_date)\",\n                \"CREATE INDEX IF NOT EXISTS idx_proj_status ON projects(status)\",\n                \"CREATE INDEX IF NOT EXISTS idx_emp_proj_emp_id ON employee_projects(employee_id)\",\n                \"CREATE INDEX IF NOT EXISTS idx_emp_proj_proj_id ON employee_projects(project_id)\",\n            ]\n\n            for index_sql in indexes:\n                cursor.execute(index_sql)\n\n            # \ud1b5\uacc4 \uc815\ubcf4 \uc5c5\ub370\uc774\ud2b8\n            cursor.execute(\"ANALYZE\")\n            conn.commit()\n\n            print(\"    \u2713 \uc778\ub371\uc2a4 \uc0dd\uc131 \ubc0f \ud1b5\uacc4 \uc815\ubcf4 \uc5c5\ub370\uc774\ud2b8 \uc644\ub8cc\")\n\n    def bulk_insert_employees(self, employee_data_list):\n        \"\"\"\ub300\ub7c9 \uc9c1\uc6d0 \ub370\uc774\ud130 \uc0bd\uc785 (\ucd5c\uc801\ud654)\"\"\"\n\n        print(f\"\\n11. \ub300\ub7c9 \ub370\uc774\ud130 \uc0bd\uc785 \ucd5c\uc801\ud654:\")\n\n        start_time = time.time()\n\n        with self.pool.get_connection() as conn:\n            cursor = conn.cursor()\n\n            # WAL \ubaa8\ub4dc\uc5d0\uc11c \ub300\ub7c9 \uc0bd\uc785 \ucd5c\uc801\ud654\n            cursor.execute('PRAGMA cache_size = 10000')\n            cursor.execute('PRAGMA temp_store = MEMORY')\n\n            # executemany\ub97c \uc0ac\uc6a9\ud55c \uc77c\uad04 \uc0bd\uc785\n            cursor.executemany('''\n                INSERT OR IGNORE INTO employees (name, email, department, salary, hire_date)\n                VALUES (?, ?, ?, ?, ?)\n            ''', employee_data_list)\n\n            conn.commit()\n\n            inserted_count = cursor.rowcount\n            elapsed_time = time.time() - start_time\n\n            print(f\"    \u2713 {len(employee_data_list)}\uac1c \ub808\ucf54\ub4dc \uc0bd\uc785 \uc2dc\ub3c4\")\n            print(f\"    \u2713 {inserted_count}\uac1c \ub808\ucf54\ub4dc \uc2e4\uc81c \uc0bd\uc785\")\n            print(f\"    \u2713 \uc18c\uc694 \uc2dc\uac04: {elapsed_time:.3f}\ucd08\")\n\n            return inserted_count\n\n    def concurrent_queries(self, query_func_list):\n        \"\"\"\ub3d9\uc2dc \ucffc\ub9ac \uc2e4\ud589\"\"\"\n\n        print(f\"\\n12. \ub3d9\uc2dc \ucffc\ub9ac \uc2e4\ud589:\")\n\n        start_time = time.time()\n        results = []\n\n        with ThreadPoolExecutor(max_workers=3) as executor:\n            # \ucffc\ub9ac \uc81c\ucd9c\n            future_to_query = {\n                executor.submit(query_func): query_func.__name__ \n                for query_func in query_func_list\n            }\n\n            # \uacb0\uacfc \uc218\uc9d1\n            for future in as_completed(future_to_query):\n                query_name = future_to_query[future]\n                try:\n                    result = future.result()\n                    results.append((query_name, result))\n                    print(f\"    \u2713 {query_name} \uc644\ub8cc\")\n                except Exception as e:\n                    print(f\"    \u2717 {query_name} \uc2e4\ud328: {e}\")\n\n        elapsed_time = time.time() - start_time\n        print(f\"    \ucd1d \uc18c\uc694 \uc2dc\uac04: {elapsed_time:.3f}\ucd08\")\n\n        return results\n\n    def query_department_stats(self):\n        \"\"\"\ubd80\uc11c \ud1b5\uacc4 \ucffc\ub9ac\"\"\"\n        with self.pool.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                SELECT department, COUNT(*), AVG(salary)\n                FROM employees\n                GROUP BY department\n            ''')\n            return cursor.fetchall()\n\n    def query_recent_hires(self):\n        \"\"\"\ucd5c\uadfc \uc785\uc0ac\uc790 \ucffc\ub9ac\"\"\"\n        with self.pool.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                SELECT name, hire_date\n                FROM employees\n                WHERE hire_date &gt;= DATE('now', '-6 months')\n                ORDER BY hire_date DESC\n            ''')\n            return cursor.fetchall()\n\n    def query_project_summary(self):\n        \"\"\"\ud504\ub85c\uc81d\ud2b8 \uc694\uc57d \ucffc\ub9ac\"\"\"\n        with self.pool.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                SELECT status, COUNT(*), SUM(budget)\n                FROM projects\n                GROUP BY status\n            ''')\n            return cursor.fetchall()\n\n    def close(self):\n        \"\"\"\uc5f0\uacb0 \ud480 \uc815\ub9ac\"\"\"\n        self.pool.close_all()\n\ndef demonstrate_optimization():\n    \"\"\"\uc131\ub2a5 \ucd5c\uc801\ud654 \uc2dc\uc5f0\"\"\"\n\n    opt_db = OptimizedDatabase()\n\n    # \ub300\ub7c9 \ub370\uc774\ud130 \uc0dd\uc131\n    import random\n    departments = ['Engineering', 'Marketing', 'Sales', 'HR', 'Finance']\n\n    bulk_data = [\n        (\n            f'Employee_{i:04d}',\n            f'emp{i:04d}@company.com',\n            random.choice(departments),\n            random.randint(50000, 100000),\n            f'2023-{random.randint(1,12):02d}-{random.randint(1,28):02d}'\n        )\n        for i in range(100, 200)  # 100\uac1c \ub808\ucf54\ub4dc\n    ]\n\n    # \ub300\ub7c9 \uc0bd\uc785 \ud14c\uc2a4\ud2b8\n    opt_db.bulk_insert_employees(bulk_data)\n\n    # \ub3d9\uc2dc \ucffc\ub9ac \uc2e4\ud589 \ud14c\uc2a4\ud2b8\n    query_functions = [\n        opt_db.query_department_stats,\n        opt_db.query_recent_hires,\n        opt_db.query_project_summary,\n    ]\n\n    results = opt_db.concurrent_queries(query_functions)\n\n    # \uacb0\uacfc \ucd9c\ub825\n    for query_name, result in results:\n        print(f\"    {query_name} \uacb0\uacfc: {len(result)}\uac1c \ub808\ucf54\ub4dc\")\n\n    opt_db.close()\n\ndemonstrate_optimization()\n</code></pre>"},{"location":"tutorials/intermediate/chapter12_database_integration/#3-orm-sqlalchemy","title":"3. ORM\uacfc SQLAlchemy \uae30\ucd08","text":""},{"location":"tutorials/intermediate/chapter12_database_integration/#31-sqlalchemy","title":"3.1 SQLAlchemy \ubaa8\ub378 \uc815\uc758","text":"<pre><code>print(\"\\n=== ORM\uacfc SQLAlchemy \uae30\ucd08 ===\")\n\n# SQLAlchemy\uac00 \uc124\uce58\ub418\uc9c0 \uc54a\uc558\uc744 \uc218 \uc788\uc73c\ubbc0\ub85c \uc2dc\ubbac\ub808\uc774\uc158\uc73c\ub85c \uc124\uba85\ndef demonstrate_sqlalchemy_concepts():\n    \"\"\"SQLAlchemy \uac1c\ub150 \uc124\uba85\"\"\"\n\n    print(\"13. ORM (Object-Relational Mapping) \uac1c\ub150:\")\n    print(\"  - \uac1d\uccb4\uc640 \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14 \uac04\uc758 \ub9e4\ud551\")\n    print(\"  - SQL\uc744 \uc9c1\uc811 \uc791\uc131\ud558\uc9c0 \uc54a\uace0 \uac1d\uccb4 \uba54\uc11c\ub4dc\ub85c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc870\uc791\")\n    print(\"  - \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub3c5\ub9bd\uc131\uacfc \ucf54\ub4dc \uc7ac\uc0ac\uc6a9\uc131 \ud5a5\uc0c1\")\n    print(\"  - SQLAlchemy\ub294 Python\uc758 \ub300\ud45c\uc801\uc778 ORM \ub77c\uc774\ube0c\ub7ec\ub9ac\")\n    print()\n\n    print(\"14. SQLAlchemy \uc8fc\uc694 \uad6c\uc131 \uc694\uc18c:\")\n    print(\"  - Engine: \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uad00\ub9ac\")\n    print(\"  - Session: \ud2b8\ub79c\uc7ad\uc158\uacfc \uac1d\uccb4 \uc0c1\ud0dc \uad00\ub9ac\")\n    print(\"  - Model: \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14\uacfc \ub9e4\ud551\ub418\ub294 \ud074\ub798\uc2a4\")\n    print(\"  - Query: \ub370\uc774\ud130 \uc870\ud68c\uc640 \uc870\uc791\")\n\ndemonstrate_sqlalchemy_concepts()\n\n# SQLAlchemy \uc2a4\ud0c0\uc77c \ubaa8\ub378 \uc2dc\ubbac\ub808\uc774\uc158\nclass SQLAlchemySimulation:\n    \"\"\"SQLAlchemy \uc0ac\uc6a9\ubc95 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n\n    def __init__(self):\n        self.db_path = 'sample_company.db'\n\n    def demonstrate_model_definition(self):\n        \"\"\"SQLAlchemy \ubaa8\ub378 \uc815\uc758 \uc608\uc81c\"\"\"\n\n        print(f\"\\n15. SQLAlchemy \ubaa8\ub378 \uc815\uc758 \uc608\uc81c:\")\n\n        model_code = '''\nfrom sqlalchemy import create_engine, Column, Integer, String, Float, Date, ForeignKey, Table\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship, sessionmaker\nfrom datetime import date\n\nBase = declarative_base()\n\n# \ub2e4\ub300\ub2e4 \uad00\uacc4\ub97c \uc704\ud55c \uc5f0\uad00 \ud14c\uc774\ube14\nemployee_project_table = Table(\n    'employee_projects', Base.metadata,\n    Column('employee_id', Integer, ForeignKey('employees.id'), primary_key=True),\n    Column('project_id', Integer, ForeignKey('projects.id'), primary_key=True),\n    Column('role', String(50), nullable=False)\n)\n\nclass Employee(Base):\n    __tablename__ = 'employees'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String(100), nullable=False)\n    email = Column(String(100), unique=True, nullable=False)\n    department = Column(String(50), nullable=False)\n    salary = Column(Float, nullable=False)\n    hire_date = Column(Date, nullable=False)\n\n    # \uad00\uacc4 \uc815\uc758\n    projects = relationship('Project', secondary=employee_project_table, back_populates='employees')\n\n    def __repr__(self):\n        return f\"&lt;Employee(name='{self.name}', department='{self.department}')&gt;\"\n\nclass Project(Base):\n    __tablename__ = 'projects'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String(100), nullable=False)\n    description = Column(String(500))\n    start_date = Column(Date, nullable=False)\n    end_date = Column(Date)\n    budget = Column(Float, nullable=False)\n    status = Column(String(20), default='active')\n\n    # \uad00\uacc4 \uc815\uc758\n    employees = relationship('Employee', secondary=employee_project_table, back_populates='projects')\n\n    def __repr__(self):\n        return f\"&lt;Project(name='{self.name}', status='{self.status}')&gt;\"\n\n# \uc5d4\uc9c4\uacfc \uc138\uc158 \uc124\uc815\nengine = create_engine('sqlite:///company_orm.db', echo=True)\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n        '''\n\n        print(\"    SQLAlchemy \ubaa8\ub378 \uc815\uc758:\")\n        print(\"    \" + model_code.replace('\\n', '\\n    '))\n\n    def demonstrate_orm_operations(self):\n        \"\"\"ORM \uc5f0\uc0b0 \uc608\uc81c\"\"\"\n\n        print(f\"\\n16. SQLAlchemy ORM \uc5f0\uc0b0 \uc608\uc81c:\")\n\n        operations_code = '''\n# \uc138\uc158 \uc0dd\uc131\nsession = Session()\n\n# CREATE - \uc0c8 \uc9c1\uc6d0 \uc0dd\uc131\nnew_employee = Employee(\n    name='\uae40\uac1c\ubc1c',\n    email='kim.dev@company.com',\n    department='Engineering',\n    salary=75000,\n    hire_date=date(2023, 6, 1)\n)\n\nsession.add(new_employee)\nsession.commit()\n\n# READ - \uc9c1\uc6d0 \uc870\ud68c\n# \ubaa8\ub4e0 \uc9c1\uc6d0\nall_employees = session.query(Employee).all()\n\n# \ud544\ud130\ub9c1\neng_employees = session.query(Employee).filter(\n    Employee.department == 'Engineering'\n).all()\n\n# \uc815\ub82c\uacfc \uc81c\ud55c\ntop_earners = session.query(Employee).order_by(\n    Employee.salary.desc()\n).limit(5).all()\n\n# JOIN \ucffc\ub9ac\nemployees_with_projects = session.query(Employee).join(\n    Employee.projects\n).filter(Project.status == 'active').all()\n\n# UPDATE - \uae09\uc5ec \uc778\uc0c1\nsession.query(Employee).filter(\n    Employee.department == 'Engineering'\n).update({Employee.salary: Employee.salary * 1.1})\n\n# DELETE - \uc9c1\uc6d0 \uc0ad\uc81c\nsession.query(Employee).filter(\n    Employee.email == 'old.employee@company.com'\n).delete()\n\nsession.commit()\n\n# \uad00\uacc4 \ud65c\uc6a9\nemployee = session.query(Employee).first()\nfor project in employee.projects:\n    print(f\"{employee.name}\ub294 {project.name} \ud504\ub85c\uc81d\ud2b8\uc5d0 \ucc38\uc5ec\")\n\nsession.close()\n        '''\n\n        print(\"    ORM \uc5f0\uc0b0 \uc608\uc81c:\")\n        print(\"    \" + operations_code.replace('\\n', '\\n    '))\n\n    def demonstrate_advanced_orm(self):\n        \"\"\"\uace0\uae09 ORM \ud328\ud134\"\"\"\n\n        print(f\"\\n17. \uace0\uae09 SQLAlchemy \ud328\ud134:\")\n\n        advanced_code = '''\n# 1. \ucffc\ub9ac \ucd5c\uc801\ud654 - Eager Loading\nemployees_with_projects = session.query(Employee).options(\n    joinedload(Employee.projects)\n).all()\n\n# 2. \uc9d1\uacc4 \ucffc\ub9ac\nfrom sqlalchemy import func\n\ndept_stats = session.query(\n    Employee.department,\n    func.count(Employee.id).label('employee_count'),\n    func.avg(Employee.salary).label('avg_salary')\n).group_by(Employee.department).all()\n\n# 3. \uc11c\ube0c\ucffc\ub9ac\nhigh_budget_projects = session.query(Project.id).filter(\n    Project.budget &gt; 100000\n).subquery()\n\nemployees_on_high_budget = session.query(Employee).join(\n    Employee.projects\n).filter(Project.id.in_(high_budget_projects)).all()\n\n# 4. Raw SQL \uc2e4\ud589\nresult = session.execute(\n    \"SELECT department, COUNT(*) FROM employees GROUP BY department\"\n).fetchall()\n\n# 5. \ubc8c\ud06c \uc5f0\uc0b0\nsession.bulk_insert_mappings(Employee, [\n    {'name': f'Bulk Employee {i}', 'email': f'bulk{i}@company.com', \n     'department': 'Engineering', 'salary': 70000, 'hire_date': date(2023, 7, 1)}\n    for i in range(10)\n])\n\n# 6. \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac\ntry:\n    with session.begin():\n        # \uc5ec\ub7ec \uc5f0\uc0b0 \uc218\ud589\n        new_project = Project(name='New Project', budget=150000, \n                            start_date=date(2023, 8, 1))\n        session.add(new_project)\n\n        # \uc9c1\uc6d0 \ud560\ub2f9\n        employee = session.query(Employee).first()\n        employee.projects.append(new_project)\n\n        # \uc790\ub3d9 \ucee4\ubc0b\ub428\nexcept Exception as e:\n    # \uc790\ub3d9 \ub864\ubc31\ub428\n    print(f\"Transaction failed: {e}\")\n        '''\n\n        print(\"    \uace0\uae09 ORM \ud328\ud134:\")\n        print(\"    \" + advanced_code.replace('\\n', '\\n    '))\n\n# SQLAlchemy \uc2dc\ubbac\ub808\uc774\uc158 \uc2e4\ud589\nsqlalchemy_sim = SQLAlchemySimulation()\nsqlalchemy_sim.demonstrate_model_definition()\nsqlalchemy_sim.demonstrate_orm_operations()\nsqlalchemy_sim.demonstrate_advanced_orm()\n</code></pre>"},{"location":"tutorials/intermediate/chapter12_database_integration/#32-orm","title":"3.2 \uc2e4\uc6a9\uc801\uc778 ORM \ud328\ud134","text":"<pre><code>print(\"\\n=== \uc2e4\uc6a9\uc801\uc778 ORM \ud328\ud134 ===\")\n\n# SQLite\ub97c \uc0ac\uc6a9\ud55c \uac04\ub2e8\ud55c ORM \ud328\ud134 \uad6c\ud604\nclass SimpleORM:\n    \"\"\"\uac04\ub2e8\ud55c ORM \ud328\ud134 \uad6c\ud604\"\"\"\n\n    def __init__(self, db_path='sample_company.db'):\n        self.db_path = db_path\n\n    def get_connection(self):\n        return sqlite3.connect(self.db_path)\n\nclass BaseModel:\n    \"\"\"\uae30\ubcf8 \ubaa8\ub378 \ud074\ub798\uc2a4\"\"\"\n\n    table_name = None\n    fields = {}\n\n    def __init__(self, orm_instance, **kwargs):\n        self.orm = orm_instance\n        for field, value in kwargs.items():\n            setattr(self, field, value)\n\n    def save(self):\n        \"\"\"\uac1d\uccb4 \uc800\uc7a5\"\"\"\n        conn = self.orm.get_connection()\n        cursor = conn.cursor()\n\n        if hasattr(self, 'id') and self.id:\n            # UPDATE\n            set_clause = ', '.join([f\"{field} = ?\" for field in self.fields.keys() if field != 'id'])\n            values = [getattr(self, field) for field in self.fields.keys() if field != 'id']\n            values.append(self.id)\n\n            cursor.execute(f'''\n                UPDATE {self.table_name} \n                SET {set_clause} \n                WHERE id = ?\n            ''', values)\n        else:\n            # INSERT\n            fields = list(self.fields.keys())\n            if 'id' in fields:\n                fields.remove('id')  # AUTO INCREMENT\n\n            placeholders = ', '.join(['?' for _ in fields])\n            field_names = ', '.join(fields)\n            values = [getattr(self, field, None) for field in fields]\n\n            cursor.execute(f'''\n                INSERT INTO {self.table_name} ({field_names})\n                VALUES ({placeholders})\n            ''', values)\n\n            self.id = cursor.lastrowid\n\n        conn.commit()\n        conn.close()\n        return self\n\n    def delete(self):\n        \"\"\"\uac1d\uccb4 \uc0ad\uc81c\"\"\"\n        if not hasattr(self, 'id') or not self.id:\n            raise ValueError(\"Cannot delete object without id\")\n\n        conn = self.orm.get_connection()\n        cursor = conn.cursor()\n\n        cursor.execute(f'DELETE FROM {self.table_name} WHERE id = ?', (self.id,))\n        conn.commit()\n        conn.close()\n\n    @classmethod\n    def find_by_id(cls, orm_instance, obj_id):\n        \"\"\"ID\ub85c \uac1d\uccb4 \ucc3e\uae30\"\"\"\n        conn = orm_instance.get_connection()\n        cursor = conn.cursor()\n\n        cursor.execute(f'SELECT * FROM {cls.table_name} WHERE id = ?', (obj_id,))\n        row = cursor.fetchone()\n        conn.close()\n\n        if row:\n            field_names = list(cls.fields.keys())\n            data = dict(zip(field_names, row))\n            return cls(orm_instance, **data)\n        return None\n\n    @classmethod\n    def find_all(cls, orm_instance, where_clause=None, params=None):\n        \"\"\"\ubaa8\ub4e0 \uac1d\uccb4 \ucc3e\uae30\"\"\"\n        conn = orm_instance.get_connection()\n        cursor = conn.cursor()\n\n        query = f'SELECT * FROM {cls.table_name}'\n        if where_clause:\n            query += f' WHERE {where_clause}'\n\n        cursor.execute(query, params or [])\n        rows = cursor.fetchall()\n        conn.close()\n\n        field_names = list(cls.fields.keys())\n        objects = []\n        for row in rows:\n            data = dict(zip(field_names, row))\n            objects.append(cls(orm_instance, **data))\n\n        return objects\n\nclass EmployeeModel(BaseModel):\n    \"\"\"\uc9c1\uc6d0 \ubaa8\ub378\"\"\"\n\n    table_name = 'employees'\n    fields = {\n        'id': int,\n        'name': str,\n        'email': str,\n        'department': str,\n        'salary': float,\n        'hire_date': str,\n        'created_at': str,\n    }\n\n    def get_projects(self):\n        \"\"\"\uc9c1\uc6d0\uc758 \ud504\ub85c\uc81d\ud2b8 \uc870\ud68c\"\"\"\n        conn = self.orm.get_connection()\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            SELECT p.*, ep.role \n            FROM projects p\n            JOIN employee_projects ep ON p.id = ep.project_id\n            WHERE ep.employee_id = ?\n        ''', (self.id,))\n\n        projects = cursor.fetchall()\n        conn.close()\n\n        return projects\n\n    def assign_to_project(self, project_id, role):\n        \"\"\"\ud504\ub85c\uc81d\ud2b8\uc5d0 \ud560\ub2f9\"\"\"\n        conn = self.orm.get_connection()\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            INSERT OR REPLACE INTO employee_projects (employee_id, project_id, role, assigned_date)\n            VALUES (?, ?, ?, DATE('now'))\n        ''', (self.id, project_id, role))\n\n        conn.commit()\n        conn.close()\n\n    def __repr__(self):\n        return f\"&lt;Employee(id={self.id}, name='{self.name}', department='{self.department}')&gt;\"\n\nclass ProjectModel(BaseModel):\n    \"\"\"\ud504\ub85c\uc81d\ud2b8 \ubaa8\ub378\"\"\"\n\n    table_name = 'projects'\n    fields = {\n        'id': int,\n        'name': str,\n        'description': str,\n        'start_date': str,\n        'end_date': str,\n        'budget': float,\n        'status': str,\n    }\n\n    def get_team_members(self):\n        \"\"\"\ud504\ub85c\uc81d\ud2b8 \ud300\uc6d0 \uc870\ud68c\"\"\"\n        conn = self.orm.get_connection()\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            SELECT e.*, ep.role \n            FROM employees e\n            JOIN employee_projects ep ON e.id = ep.employee_id\n            WHERE ep.project_id = ?\n        ''', (self.id,))\n\n        members = cursor.fetchall()\n        conn.close()\n\n        return members\n\n    def add_team_member(self, employee_id, role):\n        \"\"\"\ud300\uc6d0 \ucd94\uac00\"\"\"\n        conn = self.orm.get_connection()\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            INSERT OR REPLACE INTO employee_projects (employee_id, project_id, role, assigned_date)\n            VALUES (?, ?, ?, DATE('now'))\n        ''', (employee_id, self.id, role))\n\n        conn.commit()\n        conn.close()\n\n    def __repr__(self):\n        return f\"&lt;Project(id={self.id}, name='{self.name}', status='{self.status}')&gt;\"\n\ndef demonstrate_simple_orm():\n    \"\"\"\uac04\ub2e8\ud55c ORM \ud328\ud134 \uc2dc\uc5f0\"\"\"\n\n    print(\"18. \uac04\ub2e8\ud55c ORM \ud328\ud134 \uad6c\ud604:\")\n\n    orm = SimpleORM()\n\n    # \uc0c8 \uc9c1\uc6d0 \uc0dd\uc131\n    print(\"  \uac1d\uccb4 \uc0dd\uc131\uacfc \uc800\uc7a5:\")\n    new_employee = EmployeeModel(\n        orm,\n        name='\uc774ORM',\n        email='orm@company.com',\n        department='Engineering',\n        salary=72000,\n        hire_date='2023-06-15'\n    )\n\n    new_employee.save()\n    print(f\"    \u2713 \uc0c8 \uc9c1\uc6d0 \uc0dd\uc131: {new_employee}\")\n\n    # \uc9c1\uc6d0 \uc870\ud68c\n    print(f\"\\n  \uac1d\uccb4 \uc870\ud68c:\")\n    employee = EmployeeModel.find_by_id(orm, new_employee.id)\n    if employee:\n        print(f\"    \u2713 ID\ub85c \uc870\ud68c: {employee}\")\n\n    # \uc870\uac74\ubd80 \uc870\ud68c\n    eng_employees = EmployeeModel.find_all(\n        orm, \n        where_clause=\"department = ?\", \n        params=['Engineering']\n    )\n    print(f\"    \u2713 Engineering \ubd80\uc11c: {len(eng_employees)}\uba85\")\n\n    # \ud504\ub85c\uc81d\ud2b8 \uc870\ud68c\n    print(f\"\\n  \uad00\uacc4 \ub370\uc774\ud130 \uc870\ud68c:\")\n    projects = ProjectModel.find_all(orm, where_clause=\"status = ?\", params=['active'])\n    if projects:\n        project = projects[0]\n        print(f\"    \u2713 \ud65c\uc131 \ud504\ub85c\uc81d\ud2b8: {project}\")\n\n        # \uc9c1\uc6d0\uc744 \ud504\ub85c\uc81d\ud2b8\uc5d0 \ud560\ub2f9\n        employee.assign_to_project(project.id, 'ORM Developer')\n        print(f\"    \u2713 {employee.name}\uc744 {project.name}\uc5d0 \ud560\ub2f9\")\n\n        # \ud504\ub85c\uc81d\ud2b8 \ud300\uc6d0 \uc870\ud68c\n        team_members = project.get_team_members()\n        print(f\"    \u2713 {project.name} \ud300\uc6d0: {len(team_members)}\uba85\")\n\n    # \uae09\uc5ec \uc5c5\ub370\uc774\ud2b8\n    print(f\"\\n  \uac1d\uccb4 \uc218\uc815:\")\n    employee.salary = 75000\n    employee.save()\n    print(f\"    \u2713 \uae09\uc5ec \uc5c5\ub370\uc774\ud2b8: {employee.salary:,}\uc6d0\")\n\ndemonstrate_simple_orm()\n</code></pre>"},{"location":"tutorials/intermediate/chapter12_database_integration/#4-nosql","title":"4. NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uae30\ucd08","text":""},{"location":"tutorials/intermediate/chapter12_database_integration/#41-mongodb","title":"4.1 MongoDB \uc2dc\ubbac\ub808\uc774\uc158","text":"<pre><code>print(\"\\n=== NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uae30\ucd08 ===\")\n\nimport json\nfrom datetime import datetime\nfrom collections import defaultdict\n\n# MongoDB \uc2a4\ud0c0\uc77c \ubb38\uc11c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc2dc\ubbac\ub808\uc774\uc158\nclass DocumentDatabase:\n    \"\"\"\ubb38\uc11c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc2dc\ubbac\ub808\uc774\uc158 (MongoDB \uc2a4\ud0c0\uc77c)\"\"\"\n\n    def __init__(self):\n        self.collections = defaultdict(list)\n        self.indexes = defaultdict(dict)\n        self.next_id = 1\n\n    def insert_one(self, collection_name, document):\n        \"\"\"\ub2e8\uc77c \ubb38\uc11c \uc0bd\uc785\"\"\"\n        doc = document.copy()\n        doc['_id'] = self.next_id\n        doc['created_at'] = datetime.now().isoformat()\n\n        self.collections[collection_name].append(doc)\n        self.next_id += 1\n\n        return doc['_id']\n\n    def insert_many(self, collection_name, documents):\n        \"\"\"\uc5ec\ub7ec \ubb38\uc11c \uc0bd\uc785\"\"\"\n        inserted_ids = []\n        for doc in documents:\n            doc_id = self.insert_one(collection_name, doc)\n            inserted_ids.append(doc_id)\n        return inserted_ids\n\n    def find_one(self, collection_name, query=None):\n        \"\"\"\ub2e8\uc77c \ubb38\uc11c \uc870\ud68c\"\"\"\n        for doc in self.collections[collection_name]:\n            if self._match_query(doc, query or {}):\n                return doc\n        return None\n\n    def find(self, collection_name, query=None, sort=None, limit=None):\n        \"\"\"\uc5ec\ub7ec \ubb38\uc11c \uc870\ud68c\"\"\"\n        results = []\n        for doc in self.collections[collection_name]:\n            if self._match_query(doc, query or {}):\n                results.append(doc)\n\n        # \uc815\ub82c\n        if sort:\n            for field, direction in reversed(sort):\n                results.sort(key=lambda x: x.get(field, 0), reverse=(direction == -1))\n\n        # \uc81c\ud55c\n        if limit:\n            results = results[:limit]\n\n        return results\n\n    def update_one(self, collection_name, query, update):\n        \"\"\"\ub2e8\uc77c \ubb38\uc11c \uc5c5\ub370\uc774\ud2b8\"\"\"\n        for doc in self.collections[collection_name]:\n            if self._match_query(doc, query):\n                if '$set' in update:\n                    doc.update(update['$set'])\n                if '$inc' in update:\n                    for field, value in update['$inc'].items():\n                        doc[field] = doc.get(field, 0) + value\n                doc['updated_at'] = datetime.now().isoformat()\n                return True\n        return False\n\n    def delete_one(self, collection_name, query):\n        \"\"\"\ub2e8\uc77c \ubb38\uc11c \uc0ad\uc81c\"\"\"\n        for i, doc in enumerate(self.collections[collection_name]):\n            if self._match_query(doc, query):\n                del self.collections[collection_name][i]\n                return True\n        return False\n\n    def aggregate(self, collection_name, pipeline):\n        \"\"\"\uc9d1\uacc4 \ud30c\uc774\ud504\ub77c\uc778 (\uac04\ub2e8\ud55c \uad6c\ud604)\"\"\"\n        docs = self.collections[collection_name][:]\n\n        for stage in pipeline:\n            if '$match' in stage:\n                docs = [doc for doc in docs if self._match_query(doc, stage['$match'])]\n\n            elif '$group' in stage:\n                group_spec = stage['$group']\n                group_id = group_spec['_id']\n                groups = defaultdict(list)\n\n                for doc in docs:\n                    key = doc.get(group_id.replace('$', '')) if group_id.startswith('$') else group_id\n                    groups[key].append(doc)\n\n                new_docs = []\n                for key, group_docs in groups.items():\n                    new_doc = {'_id': key}\n\n                    for field, operation in group_spec.items():\n                        if field == '_id':\n                            continue\n\n                        if isinstance(operation, dict) and '$sum' in operation:\n                            sum_field = operation['$sum'].replace('$', '')\n                            if sum_field == '1':\n                                new_doc[field] = len(group_docs)\n                            else:\n                                new_doc[field] = sum(doc.get(sum_field, 0) for doc in group_docs)\n\n                        elif isinstance(operation, dict) and '$avg' in operation:\n                            avg_field = operation['$avg'].replace('$', '')\n                            values = [doc.get(avg_field, 0) for doc in group_docs]\n                            new_doc[field] = sum(values) / len(values) if values else 0\n\n                    new_docs.append(new_doc)\n\n                docs = new_docs\n\n            elif '$sort' in stage:\n                sort_spec = stage['$sort']\n                for field, direction in reversed(list(sort_spec.items())):\n                    docs.sort(key=lambda x: x.get(field, 0), reverse=(direction == -1))\n\n            elif '$limit' in stage:\n                docs = docs[:stage['$limit']]\n\n        return docs\n\n    def _match_query(self, document, query):\n        \"\"\"\ucffc\ub9ac \ub9e4\uce6d \ud655\uc778\"\"\"\n        for field, condition in query.items():\n            doc_value = document.get(field)\n\n            if isinstance(condition, dict):\n                for operator, value in condition.items():\n                    if operator == '$gte' and not (doc_value &gt;= value):\n                        return False\n                    elif operator == '$lte' and not (doc_value &lt;= value):\n                        return False\n                    elif operator == '$gt' and not (doc_value &gt; value):\n                        return False\n                    elif operator == '$lt' and not (doc_value &lt; value):\n                        return False\n                    elif operator == '$ne' and not (doc_value != value):\n                        return False\n                    elif operator == '$in' and doc_value not in value:\n                        return False\n            else:\n                if doc_value != condition:\n                    return False\n\n        return True\n\n    def get_collection_stats(self, collection_name):\n        \"\"\"\uceec\ub809\uc158 \ud1b5\uacc4\"\"\"\n        docs = self.collections[collection_name]\n        if not docs:\n            return {'count': 0}\n\n        return {\n            'count': len(docs),\n            'avg_size': sum(len(json.dumps(doc)) for doc in docs) / len(docs),\n            'total_size': sum(len(json.dumps(doc)) for doc in docs),\n        }\n\ndef demonstrate_nosql_database():\n    \"\"\"NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc2dc\uc5f0\"\"\"\n\n    print(\"19. NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uac1c\ub150:\")\n    print(\"  - \uc2a4\ud0a4\ub9c8\uac00 \uc5c6\ub294 \uc720\uc5f0\ud55c \ub370\uc774\ud130 \uad6c\uc870\")\n    print(\"  - JSON \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc11c \uc800\uc7a5\")\n    print(\"  - \uc218\ud3c9\uc801 \ud655\uc7a5\uc131 (Horizontal Scaling)\")\n    print(\"  - \ube60\ub978 \uc77d\uae30/\uc4f0\uae30 \uc131\ub2a5\")\n    print(\"  - \ubcf5\uc7a1\ud55c \uc870\uc778 \ub300\uc2e0 \ubb38\uc11c\uc5d0 \ub370\uc774\ud130 \ud3ec\ud568\")\n\n    print(f\"\\n20. MongoDB \uc2a4\ud0c0\uc77c \ubb38\uc11c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc2dc\uc5f0:\")\n\n    db = DocumentDatabase()\n\n    # \uc9c1\uc6d0 \ubb38\uc11c \uc0bd\uc785 (\uc911\ucca9\ub41c \uad6c\uc870)\n    employees = [\n        {\n            'name': '\uae40\ubb38\uc11c',\n            'email': 'kim.doc@company.com',\n            'department': 'Engineering',\n            'salary': 75000,\n            'skills': ['Python', 'JavaScript', 'MongoDB'],\n            'address': {\n                'city': '\uc11c\uc6b8',\n                'district': '\uac15\ub0a8\uad6c',\n                'zipcode': '12345'\n            },\n            'projects': [\n                {'name': '\uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158', 'role': 'Developer', 'start_date': '2023-01-01'},\n                {'name': '\ubaa8\ubc14\uc77c \uc571', 'role': 'Backend Developer', 'start_date': '2023-03-01'}\n            ],\n            'performance_reviews': [\n                {'year': 2022, 'score': 4.2, 'comments': '\uc6b0\uc218\ud55c \uc131\uacfc'},\n                {'year': 2023, 'score': 4.5, 'comments': '\ud0c1\uc6d4\ud55c \uae30\uc220\ub825'}\n            ]\n        },\n        {\n            'name': '\uc774NoSQL',\n            'email': 'lee.nosql@company.com',\n            'department': 'Data Science',\n            'salary': 80000,\n            'skills': ['Python', 'R', 'MongoDB', 'Machine Learning'],\n            'address': {\n                'city': '\uc11c\uc6b8',\n                'district': '\uc11c\ucd08\uad6c',\n                'zipcode': '54321'\n            },\n            'projects': [\n                {'name': '\ub370\uc774\ud130 \ubd84\uc11d', 'role': 'Data Scientist', 'start_date': '2023-02-01'}\n            ],\n            'performance_reviews': [\n                {'year': 2023, 'score': 4.8, 'comments': '\ub6f0\uc5b4\ub09c \ubd84\uc11d \ub2a5\ub825'}\n            ]\n        }\n    ]\n\n    # \ubb38\uc11c \uc0bd\uc785\n    print(\"  \ubb38\uc11c \uc0bd\uc785:\")\n    inserted_ids = db.insert_many('employees', employees)\n    print(f\"    \u2713 {len(inserted_ids)}\uac1c \uc9c1\uc6d0 \ubb38\uc11c \uc0bd\uc785\")\n\n    # \ub2e8\uc21c \uc870\ud68c\n    print(f\"\\n  \ubb38\uc11c \uc870\ud68c:\")\n    all_employees = db.find('employees')\n    print(f\"    \u2713 \uc804\uccb4 \uc9c1\uc6d0: {len(all_employees)}\uba85\")\n\n    # \uc870\uac74\ubd80 \uc870\ud68c\n    eng_employees = db.find('employees', {'department': 'Engineering'})\n    print(f\"    \u2713 Engineering \ubd80\uc11c: {len(eng_employees)}\uba85\")\n\n    # \ubcf5\uc7a1\ud55c \uc870\ud68c (\ubc30\uc5f4 \ub0b4 \uac80\uc0c9)\n    python_developers = db.find('employees', {'skills': 'Python'})\n    print(f\"    \u2713 Python \uac1c\ubc1c\uc790: {len(python_developers)}\uba85\")\n\n    # \uc911\ucca9 \ud544\ub4dc \uc870\ud68c\n    seoul_employees = db.find('employees', {'address.city': '\uc11c\uc6b8'})\n    print(f\"    \u2713 \uc11c\uc6b8 \uac70\uc8fc\uc790: {len(seoul_employees)}\uba85\")\n\n    # \ubc94\uc704 \uc870\ud68c\n    high_earners = db.find('employees', {'salary': {'$gte': 75000}})\n    print(f\"    \u2713 \uace0\uc18c\ub4dd\uc790 (75000\uc6d0 \uc774\uc0c1): {len(high_earners)}\uba85\")\n\n    # \uc815\ub82c\uacfc \uc81c\ud55c\n    top_earners = db.find('employees', sort=[('salary', -1)], limit=1)\n    if top_earners:\n        print(f\"    \u2713 \ucd5c\uace0 \uc5f0\ubd09\uc790: {top_earners[0]['name']} ({top_earners[0]['salary']:,}\uc6d0)\")\n\n    # \ubb38\uc11c \uc5c5\ub370\uc774\ud2b8\n    print(f\"\\n  \ubb38\uc11c \uc5c5\ub370\uc774\ud2b8:\")\n    updated = db.update_one(\n        'employees', \n        {'name': '\uae40\ubb38\uc11c'}, \n        {'$set': {'salary': 78000}, '$inc': {'projects_count': 1}}\n    )\n    if updated:\n        print(f\"    \u2713 \uae40\ubb38\uc11c\ub2d8 \uae09\uc5ec \uc778\uc0c1\")\n\n    # \uc9d1\uacc4 \ucffc\ub9ac\n    print(f\"\\n  \uc9d1\uacc4 \ucffc\ub9ac:\")\n    dept_stats = db.aggregate('employees', [\n        {'$group': {\n            '_id': '$department',\n            'count': {'$sum': 1},\n            'avg_salary': {'$avg': '$salary'}\n        }},\n        {'$sort': {'avg_salary': -1}}\n    ])\n\n    print(f\"    \ubd80\uc11c\ubcc4 \ud1b5\uacc4:\")\n    for stat in dept_stats:\n        dept, count, avg_sal = stat\n        print(f\"      {dept}: {count}\uba85, \ud3c9\uade0\uae09\uc5ec: {avg_sal:,.0f}\uc6d0\")\n\n    # \uceec\ub809\uc158 \ud1b5\uacc4\n    print(f\"\\n  \uceec\ub809\uc158 \ud1b5\uacc4:\")\n    stats = db.get_collection_stats('employees')\n    print(f\"    \u2713 \ubb38\uc11c \uc218: {stats['count']}\")\n    print(f\"    \u2713 \ud3c9\uade0 \ubb38\uc11c \ud06c\uae30: {stats['avg_size']:.0f} bytes\")\n    print(f\"    \u2713 \ucd1d \ud06c\uae30: {stats['total_size']} bytes\")\n\ndemonstrate_nosql_database()\n</code></pre>"},{"location":"tutorials/intermediate/chapter12_database_integration/#42-nosql-vs-sql","title":"4.2 NoSQL vs SQL \ube44\uad50","text":"<pre><code>print(\"\\n=== NoSQL vs SQL \ube44\uad50 ===\")\n\ndef demonstrate_nosql_vs_sql():\n    \"\"\"NoSQL\uacfc SQL \ube44\uad50\"\"\"\n\n    print(\"21. NoSQL vs SQL \ube44\uad50:\")\n\n    comparison = {\n        '\ub370\uc774\ud130 \ubaa8\ub378': {\n            'SQL': '\ud14c\uc774\ube14, \ud589, \uc5f4\uc758 \uad00\uacc4\ud615 \uad6c\uc870',\n            'NoSQL': '\ubb38\uc11c, \ud0a4-\uac12, \uadf8\ub798\ud504 \ub4f1 \ub2e4\uc591\ud55c \uad6c\uc870'\n        },\n        '\uc2a4\ud0a4\ub9c8': {\n            'SQL': '\uc5c4\uaca9\ud55c \uc2a4\ud0a4\ub9c8, \uc0ac\uc804 \uc815\uc758 \ud544\uc694',\n            'NoSQL': '\uc720\uc5f0\ud55c \uc2a4\ud0a4\ub9c8, \ub3d9\uc801 \ubcc0\uacbd \uac00\ub2a5'\n        },\n        '\ud655\uc7a5\uc131': {\n            'SQL': '\uc218\uc9c1\uc801 \ud655\uc7a5 (\ub354 \uac15\ub825\ud55c \uc11c\ubc84)',\n            'NoSQL': '\uc218\ud3c9\uc801 \ud655\uc7a5 (\ub354 \ub9ce\uc740 \uc11c\ubc84)'\n        },\n        '\uc77c\uad00\uc131': {\n            'SQL': 'ACID \ubcf4\uc7a5, \uac15\ud55c \uc77c\uad00\uc131',\n            'NoSQL': 'BASE \ubaa8\ub378, \ucd5c\uc885 \uc77c\uad00\uc131'\n        },\n        '\ucffc\ub9ac \uc5b8\uc5b4': {\n            'SQL': '\ud45c\uc900 SQL \ubb38\ubc95',\n            'NoSQL': '\uac01 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ubcc4 \uace0\uc720 API'\n        },\n        '\ubcf5\uc7a1\ud55c \uc870\uc778': {\n            'SQL': '\uc5ec\ub7ec \ud14c\uc774\ube14 \uc870\uc778 \uc9c0\uc6d0',\n            'NoSQL': '\uc81c\ud55c\uc801 \uc870\uc778, \ubb38\uc11c\uc5d0 \ub370\uc774\ud130 \ud3ec\ud568'\n        },\n        '\uc0ac\uc6a9 \uc0ac\ub840': {\n            'SQL': '\ubcf5\uc7a1\ud55c \uad00\uacc4, \ud2b8\ub79c\uc7ad\uc158 \uc911\uc694',\n            'NoSQL': '\ube60\ub978 \uac1c\ubc1c, \ub300\uc6a9\ub7c9 \ub370\uc774\ud130, \ub2e8\uc21c \uad6c\uc870'\n        }\n    }\n\n    for aspect, details in comparison.items():\n        print(f\"\\n  {aspect}:\")\n        print(f\"    SQL:    {details['SQL']}\")\n        print(f\"    NoSQL:  {details['NoSQL']}\")\n\n    print(f\"\\n22. \uc5b8\uc81c \ubb34\uc5c7\uc744 \uc0ac\uc6a9\ud560\uae4c?\")\n\n    use_cases = {\n        'SQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0ac\uc6a9 \uc2dc\uae30': [\n            '\ubcf5\uc7a1\ud55c \uad00\uacc4\uc640 \uc870\uc778\uc774 \ud544\uc694\ud55c \uacbd\uc6b0',\n            '\uac15\ud55c \uc77c\uad00\uc131\uacfc ACID \ud2b8\ub79c\uc7ad\uc158\uc774 \uc911\uc694\ud55c \uacbd\uc6b0',\n            '\ubcf5\uc7a1\ud55c \ucffc\ub9ac\uc640 \ub9ac\ud3ec\ud305\uc774 \ud544\uc694\ud55c \uacbd\uc6b0',\n            '\uae30\uc874 SQL \uc9c0\uc2dd\uacfc \ub3c4\uad6c\ub97c \ud65c\uc6a9\ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0',\n            '\uc608: \uae08\uc735 \uc2dc\uc2a4\ud15c, ERP, \uc804\uc790\uc0c1\uac70\ub798'\n        ],\n        'NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0ac\uc6a9 \uc2dc\uae30': [\n            '\ube60\ub978 \uac1c\ubc1c\uacfc \uc720\uc5f0\ud55c \uc2a4\ud0a4\ub9c8\uac00 \ud544\uc694\ud55c \uacbd\uc6b0',\n            '\ub300\uc6a9\ub7c9 \ub370\uc774\ud130\uc640 \ub192\uc740 \ucc98\ub9ac\ub7c9\uc774 \ud544\uc694\ud55c \uacbd\uc6b0',\n            '\uc218\ud3c9\uc801 \ud655\uc7a5\uc774 \uc911\uc694\ud55c \uacbd\uc6b0',\n            '\ubcf5\uc7a1\ud55c \uac1d\uccb4 \uad6c\uc870\ub97c \uc800\uc7a5\ud574\uc57c \ud558\ub294 \uacbd\uc6b0',\n            '\uc608: \uc18c\uc15c \ubbf8\ub514\uc5b4, IoT, \uc2e4\uc2dc\uac04 \ubd84\uc11d, \ucf58\ud150\uce20 \uad00\ub9ac'\n        ]\n    }\n\n    for category, cases in use_cases.items():\n        print(f\"\\n  {category}:\")\n        for case in cases:\n            print(f\"    - {case}\")\n\ndemonstrate_nosql_vs_sql()\n</code></pre>"},{"location":"tutorials/intermediate/chapter12_database_integration/#5","title":"5. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uacc4 \ud328\ud134\uacfc \ubaa8\ubc94 \uc0ac\ub840","text":""},{"location":"tutorials/intermediate/chapter12_database_integration/#51","title":"5.1 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uacc4 \uc6d0\uce59","text":"<pre><code>print(\"\\n=== \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uacc4 \ud328\ud134\uacfc \ubaa8\ubc94 \uc0ac\ub840 ===\")\n\ndef demonstrate_design_principles():\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uacc4 \uc6d0\uce59 \uc124\uba85\"\"\"\n\n    print(\"23. \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uacc4 \uc6d0\uce59:\")\n\n    principles = {\n        '\uc815\uaddc\ud654 (Normalization)': {\n            '1\ucc28 \uc815\uaddc\ud654': '\uc6d0\uc790\uac12\ub9cc \ud3ec\ud568, \ubc18\ubcf5 \uadf8\ub8f9 \uc81c\uac70',\n            '2\ucc28 \uc815\uaddc\ud654': '\ubd80\ubd84 \ud568\uc218 \uc885\uc18d \uc81c\uac70',\n            '3\ucc28 \uc815\uaddc\ud654': '\uc774\ud589 \ud568\uc218 \uc885\uc18d \uc81c\uac70',\n            '\uc7a5\uc810': '\ub370\uc774\ud130 \uc911\ubcf5 \ucd5c\uc18c\ud654, \uc77c\uad00\uc131 \ubcf4\uc7a5',\n            '\ub2e8\uc810': '\uc870\uc778 \uc99d\uac00\ub85c \uc131\ub2a5 \uc800\ud558 \uac00\ub2a5'\n        },\n        '\ubc18\uc815\uaddc\ud654 (Denormalization)': {\n            '\ubaa9\uc801': '\uc131\ub2a5 \ud5a5\uc0c1\uc744 \uc704\ud55c \uc758\ub3c4\uc801 \uc911\ubcf5',\n            '\ubc29\ubc95': '\uc790\uc8fc \uc870\uc778\ub418\ub294 \ud14c\uc774\ube14 \ud1b5\ud569',\n            '\uc8fc\uc758\uc810': '\ub370\uc774\ud130 \uc77c\uad00\uc131 \uad00\ub9ac \ud544\uc694'\n        },\n        '\uc778\ub371\uc2a4 \uc124\uacc4': {\n            '\ud074\ub7ec\uc2a4\ud130 \uc778\ub371\uc2a4': '\ub370\uc774\ud130 \ubb3c\ub9ac\uc801 \uc815\ub82c',\n            '\ube44\ud074\ub7ec\uc2a4\ud130 \uc778\ub371\uc2a4': '\ubcc4\ub3c4\uc758 \uc778\ub371\uc2a4 \uad6c\uc870',\n            '\ubcf5\ud569 \uc778\ub371\uc2a4': '\uc5ec\ub7ec \uceec\ub7fc \uc870\ud569',\n            '\uc8fc\uc758\uc810': '\uc4f0\uae30 \uc131\ub2a5 \uc800\ud558, \uc800\uc7a5\uacf5\uac04 \uc99d\uac00'\n        }\n    }\n\n    for principle, details in principles.items():\n        print(f\"\\n  {principle}:\")\n        for key, value in details.items():\n            print(f\"    {key}: {value}\")\n\ndemonstrate_design_principles()\n\nclass DatabaseDesignPatterns:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uacc4 \ud328\ud134\"\"\"\n\n    def __init__(self, db_path='design_patterns.db'):\n        self.db_path = db_path\n        self.setup_examples()\n\n    def setup_examples(self):\n        \"\"\"\uc608\uc81c \ud14c\uc774\ube14 \uc124\uc815\"\"\"\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        # 1. \uacc4\uce35 \uad6c\uc870 \ud328\ud134 - \uc870\uc9c1\ub3c4\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS organization (\n                id INTEGER PRIMARY KEY,\n                name TEXT NOT NULL,\n                parent_id INTEGER,\n                level INTEGER,\n                path TEXT,\n                FOREIGN KEY (parent_id) REFERENCES organization (id)\n            )\n        ''')\n\n        # 2. \uc774\ub825 \uad00\ub9ac \ud328\ud134 - \uae09\uc5ec \uc774\ub825\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS salary_history (\n                id INTEGER PRIMARY KEY,\n                employee_id INTEGER NOT NULL,\n                salary REAL NOT NULL,\n                effective_date DATE NOT NULL,\n                end_date DATE,\n                is_current BOOLEAN DEFAULT 1,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            )\n        ''')\n\n        # 3. \ud0dc\uadf8 \uc2dc\uc2a4\ud15c \ud328\ud134\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS tags (\n                id INTEGER PRIMARY KEY,\n                name TEXT UNIQUE NOT NULL\n            )\n        ''')\n\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS employee_tags (\n                employee_id INTEGER,\n                tag_id INTEGER,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                PRIMARY KEY (employee_id, tag_id),\n                FOREIGN KEY (employee_id) REFERENCES employees (id),\n                FOREIGN KEY (tag_id) REFERENCES tags (id)\n            )\n        ''')\n\n        # 4. \uc124\uc815 \uad00\ub9ac \ud328\ud134\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS app_settings (\n                key TEXT PRIMARY KEY,\n                value TEXT NOT NULL,\n                data_type TEXT DEFAULT 'string',\n                description TEXT,\n                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            )\n        ''')\n\n        # 5. \ub85c\uadf8 \ud328\ud134\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS audit_log (\n                id INTEGER PRIMARY KEY,\n                table_name TEXT NOT NULL,\n                record_id INTEGER NOT NULL,\n                action TEXT NOT NULL,  -- INSERT, UPDATE, DELETE\n                old_values TEXT,       -- JSON\n                new_values TEXT,       -- JSON\n                user_id INTEGER,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            )\n        ''')\n\n        conn.commit()\n        conn.close()\n\n    def demonstrate_hierarchy_pattern(self):\n        \"\"\"\uacc4\uce35 \uad6c\uc870 \ud328\ud134 \uc2dc\uc5f0\"\"\"\n\n        print(f\"\\n24. \uacc4\uce35 \uad6c\uc870 \ud328\ud134 (\uc870\uc9c1\ub3c4):\")\n\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        # \uc870\uc9c1 \ub370\uc774\ud130 \uc0bd\uc785\n        org_data = [\n            (1, 'CEO', None, 1, '/1'),\n            (2, 'CTO', 1, 2, '/1/2'),\n            (3, 'Engineering Team', 2, 3, '/1/2/3'),\n            (4, 'Senior Developer', 3, 4, '/1/2/3/4'),\n            (5, 'Junior Developer', 3, 4, '/1/2/3/5'),\n            (6, 'CMO', 1, 2, '/1/6'),\n            (7, 'Marketing Team', 6, 3, '/1/6/7'),\n        ]\n\n        cursor.executemany('''\n            INSERT OR REPLACE INTO organization (id, name, parent_id, level, path)\n            VALUES (?, ?, ?, ?, ?)\n        ''', org_data)\n\n        # \uacc4\uce35 \uad6c\uc870 \uc870\ud68c\n        print(\"  \uc870\uc9c1 \uacc4\uce35 \uad6c\uc870:\")\n        cursor.execute('''\n            SELECT name, level, path\n            FROM organization\n            ORDER BY path\n        ''')\n\n        for row in cursor.fetchall():\n            name, level, path = row\n            indent = '  ' * (level - 1)\n            print(f\"    {indent}\u2022 {name}\")\n\n        # \ud2b9\uc815 \ubd80\uc11c\uc758 \ud558\uc704 \uc870\uc9c1 \uc870\ud68c\n        print(f\"\\n  CTO \ud558\uc704 \uc870\uc9c1:\")\n        cursor.execute('''\n            SELECT name, level\n            FROM organization\n            WHERE path LIKE '/1/2/%'\n            ORDER BY path\n        ''')\n\n        for row in cursor.fetchall():\n            name, level = row\n            indent = '  ' * (level - 2)\n            print(f\"    {indent}\u2022 {name}\")\n\n        conn.close()\n\n    def demonstrate_history_pattern(self):\n        \"\"\"\uc774\ub825 \uad00\ub9ac \ud328\ud134 \uc2dc\uc5f0\"\"\"\n\n        print(f\"\\n25. \uc774\ub825 \uad00\ub9ac \ud328\ud134 (\uae09\uc5ec \uc774\ub825):\")\n\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        # \uae09\uc5ec \uc774\ub825 \ub370\uc774\ud130\n        salary_data = [\n            (1, 1, 60000, '2022-01-01', '2022-06-30', 0),\n            (2, 1, 65000, '2022-07-01', '2023-01-31', 0),\n            (3, 1, 70000, '2023-02-01', '2023-07-31', 0),\n            (4, 1, 75000, '2023-08-01', None, 1),  # \ud604\uc7ac \uae09\uc5ec\n        ]\n\n        cursor.executemany('''\n            INSERT OR REPLACE INTO salary_history \n            (id, employee_id, salary, effective_date, end_date, is_current)\n            VALUES (?, ?, ?, ?, ?, ?)\n        ''', salary_data)\n\n        # \ud604\uc7ac \uae09\uc5ec \uc870\ud68c\n        print(\"  \ud604\uc7ac \uae09\uc5ec:\")\n        cursor.execute('''\n            SELECT employee_id, salary, effective_date\n            FROM salary_history\n            WHERE is_current = 1\n        ''')\n\n        for row in cursor.fetchall():\n            emp_id, salary, effective_date = row\n            print(f\"    \uc9c1\uc6d0 {emp_id}: {salary:,}\uc6d0 (\uc2dc\uc791\uc77c: {effective_date})\")\n\n        # \uae09\uc5ec \uc774\ub825 \uc870\ud68c\n        print(f\"\\n  \uae09\uc5ec \ubcc0\uacbd \uc774\ub825:\")\n        cursor.execute('''\n            SELECT salary, effective_date, end_date\n            FROM salary_history\n            WHERE employee_id = 1\n            ORDER BY effective_date\n        ''')\n\n        for row in cursor.fetchall():\n            salary, start_date, end_date = row\n            end_info = end_date if end_date else '\ud604\uc7ac'\n            print(f\"    {salary:,}\uc6d0 ({start_date} ~ {end_info})\")\n\n        conn.close()\n\n    def demonstrate_tagging_pattern(self):\n        \"\"\"\ud0dc\uadf8 \uc2dc\uc2a4\ud15c \ud328\ud134 \uc2dc\uc5f0\"\"\"\n\n        print(f\"\\n26. \ud0dc\uadf8 \uc2dc\uc2a4\ud15c \ud328\ud134:\")\n\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        # \ud0dc\uadf8 \ub370\uc774\ud130\n        tags_data = [\n            ('Python', ), ('JavaScript', ), ('React', ), ('Node.js', ),\n            ('Senior', ), ('Junior', ), ('Team Lead', ), ('Full Stack', )\n        ]\n\n        cursor.executemany('INSERT OR IGNORE INTO tags (name) VALUES (?)', tags_data)\n\n        # \uc9c1\uc6d0-\ud0dc\uadf8 \ub9e4\ud551\n        employee_tags_data = [\n            (1, 1), (1, 2), (1, 5),  # \uc9c1\uc6d0 1: Python, JavaScript, Senior\n            (2, 1), (2, 3), (2, 8),  # \uc9c1\uc6d0 2: Python, React, Full Stack\n            (3, 1), (3, 4), (3, 7),  # \uc9c1\uc6d0 3: Python, Node.js, Team Lead\n        ]\n\n        cursor.executemany('''\n            INSERT OR IGNORE INTO employee_tags (employee_id, tag_id) VALUES (?, ?)\n        ''', employee_tags_data)\n\n        # \ud0dc\uadf8\ubcc4 \uc9c1\uc6d0 \uc870\ud68c\n        print(\"  \ud0dc\uadf8\ubcc4 \uc9c1\uc6d0 \uc218:\")\n        cursor.execute('''\n            SELECT t.name, COUNT(et.employee_id) as employee_count\n            FROM tags t\n            LEFT JOIN employee_tags et ON t.id = et.tag_id\n            GROUP BY t.id, t.name\n            ORDER BY employee_count DESC\n        ''')\n\n        for row in cursor.fetchall():\n            tag_name, count = row\n            print(f\"    {tag_name}: {count}\uba85\")\n\n        # \ud2b9\uc815 \ud0dc\uadf8\ub97c \uac00\uc9c4 \uc9c1\uc6d0 \uc870\ud68c\n        print(f\"\\n  Python \ud0dc\uadf8\ub97c \uac00\uc9c4 \uc9c1\uc6d0:\")\n        cursor.execute('''\n            SELECT DISTINCT et.employee_id\n            FROM employee_tags et\n            JOIN tags t ON et.tag_id = t.id\n            WHERE t.name = 'Python'\n        ''')\n\n        python_devs = cursor.fetchall()\n        print(f\"    {len(python_devs)}\uba85\uc758 Python \uac1c\ubc1c\uc790\")\n\n        conn.close()\n\n    def demonstrate_settings_pattern(self):\n        \"\"\"\uc124\uc815 \uad00\ub9ac \ud328\ud134 \uc2dc\uc5f0\"\"\"\n\n        print(f\"\\n27. \uc124\uc815 \uad00\ub9ac \ud328\ud134:\")\n\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        # \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uc815\n        settings_data = [\n            ('max_login_attempts', '3', 'integer', '\ucd5c\ub300 \ub85c\uadf8\uc778 \uc2dc\ub3c4 \ud69f\uc218'),\n            ('session_timeout', '30', 'integer', '\uc138\uc158 \ud0c0\uc784\uc544\uc6c3 (\ubd84)'),\n            ('enable_notifications', 'true', 'boolean', '\uc54c\ub9bc \ud65c\uc131\ud654'),\n            ('company_name', 'Tech Company', 'string', '\ud68c\uc0ac\uba85'),\n            ('default_salary', '60000.0', 'float', '\uae30\ubcf8 \uae09\uc5ec'),\n        ]\n\n        cursor.executemany('''\n            INSERT OR REPLACE INTO app_settings (key, value, data_type, description)\n            VALUES (?, ?, ?, ?)\n        ''', settings_data)\n\n        # \uc124\uc815 \uc870\ud68c\n        print(\"  \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uc815:\")\n        cursor.execute('SELECT key, value, data_type, description FROM app_settings')\n\n        for row in cursor.fetchall():\n            key, value, data_type, desc = row\n            print(f\"    {key}: {value} ({data_type}) - {desc}\")\n\n        # \ud0c0\uc785\ubcc4 \uc124\uc815 \uc870\ud68c \ud568\uc218\n        def get_setting(key, default=None):\n            cursor.execute('SELECT value, data_type FROM app_settings WHERE key = ?', (key,))\n            result = cursor.fetchone()\n\n            if not result:\n                return default\n\n            value, data_type = result\n\n            if data_type == 'integer':\n                return int(value)\n            elif data_type == 'float':\n                return float(value)\n            elif data_type == 'boolean':\n                return value.lower() == 'true'\n            else:\n                return value\n\n        print(f\"\\n  \uc124\uc815 \uc0ac\uc6a9 \uc608\uc81c:\")\n        print(f\"    \ucd5c\ub300 \ub85c\uadf8\uc778 \uc2dc\ub3c4: {get_setting('max_login_attempts')}\ud68c\")\n        print(f\"    \uc54c\ub9bc \ud65c\uc131\ud654: {get_setting('enable_notifications')}\")\n        print(f\"    \ud68c\uc0ac\uba85: {get_setting('company_name')}\")\n\n        conn.close()\n\ndef demonstrate_design_patterns():\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uacc4 \ud328\ud134 \uc2dc\uc5f0\"\"\"\n\n    patterns = DatabaseDesignPatterns()\n\n    patterns.demonstrate_hierarchy_pattern()\n    patterns.demonstrate_history_pattern()\n    patterns.demonstrate_tagging_pattern()\n    patterns.demonstrate_settings_pattern()\n\ndemonstrate_design_patterns()\n</code></pre>"},{"location":"tutorials/intermediate/chapter12_database_integration/#52","title":"5.2 \uc131\ub2a5 \ucd5c\uc801\ud654\uc640 \ubaa8\ub2c8\ud130\ub9c1","text":"<pre><code>print(\"\\n=== \uc131\ub2a5 \ucd5c\uc801\ud654\uc640 \ubaa8\ub2c8\ud130\ub9c1 ===\")\n\nimport time\nimport psutil\nimport os\n\nclass DatabasePerformanceMonitor:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1\"\"\"\n\n    def __init__(self, db_path='sample_company.db'):\n        self.db_path = db_path\n\n    def analyze_query_performance(self, query, params=None, iterations=100):\n        \"\"\"\ucffc\ub9ac \uc131\ub2a5 \ubd84\uc11d\"\"\"\n\n        print(f\"28. \ucffc\ub9ac \uc131\ub2a5 \ubd84\uc11d:\")\n        print(f\"  \ucffc\ub9ac: {query[:50]}...\")\n\n        times = []\n\n        for i in range(iterations):\n            conn = sqlite3.connect(self.db_path)\n            start_time = time.time()\n\n            cursor = conn.cursor()\n            cursor.execute(query, params or [])\n            results = cursor.fetchall()\n\n            end_time = time.time()\n            times.append(end_time - start_time)\n            conn.close()\n\n        avg_time = sum(times) / len(times)\n        min_time = min(times)\n        max_time = max(times)\n\n        print(f\"  \ubc18\ubcf5 \ud69f\uc218: {iterations}\")\n        print(f\"  \ud3c9\uade0 \uc2e4\ud589 \uc2dc\uac04: {avg_time*1000:.2f}ms\")\n        print(f\"  \ucd5c\uc18c \uc2e4\ud589 \uc2dc\uac04: {min_time*1000:.2f}ms\")\n        print(f\"  \ucd5c\ub300 \uc2e4\ud589 \uc2dc\uac04: {max_time*1000:.2f}ms\")\n        print(f\"  \uacb0\uacfc \ud589 \uc218: {len(results) if i == 0 else 'N/A'}\")\n\n        return avg_time\n\n    def compare_queries(self, query_pairs):\n        \"\"\"\ucffc\ub9ac \uc131\ub2a5 \ube44\uad50\"\"\"\n\n        print(f\"\\n29. \ucffc\ub9ac \uc131\ub2a5 \ube44\uad50:\")\n\n        for description, queries in query_pairs.items():\n            print(f\"\\n  {description}:\")\n\n            for name, query in queries.items():\n                avg_time = self.analyze_query_performance(query, iterations=50)\n                print(f\"    {name}: {avg_time*1000:.2f}ms\")\n\n    def database_size_analysis(self):\n        \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud06c\uae30 \ubd84\uc11d\"\"\"\n\n        print(f\"\\n30. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud06c\uae30 \ubd84\uc11d:\")\n\n        if os.path.exists(self.db_path):\n            file_size = os.path.getsize(self.db_path)\n            print(f\"  \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud30c\uc77c \ud06c\uae30: {file_size:,} bytes ({file_size/1024:.1f} KB)\")\n\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        # \ud14c\uc774\ube14\ubcc4 \ub808\ucf54\ub4dc \uc218\n        cursor.execute('''\n            SELECT name FROM sqlite_master \n            WHERE type='table' AND name NOT LIKE 'sqlite_%'\n        ''')\n\n        tables = cursor.fetchall()\n\n        print(f\"  \ud14c\uc774\ube14\ubcc4 \ub808\ucf54\ub4dc \uc218:\")\n        total_records = 0\n\n        for table_name, in tables:\n            cursor.execute(f'SELECT COUNT(*) FROM {table_name}')\n            count = cursor.fetchone()[0]\n            print(f\"    {table_name}: {count:,}\uac1c\")\n            total_records += count\n\n        print(f\"  \ucd1d \ub808\ucf54\ub4dc \uc218: {total_records:,}\uac1c\")\n\n        # \uc778\ub371\uc2a4 \uc815\ubcf4\n        print(f\"\\n  \uc778\ub371\uc2a4 \uc815\ubcf4:\")\n        cursor.execute('''\n            SELECT name, tbl_name FROM sqlite_master \n            WHERE type='index' AND name NOT LIKE 'sqlite_%'\n        ''')\n\n        indexes = cursor.fetchall()\n        for index_name, table_name in indexes:\n            print(f\"    {index_name} (\ud14c\uc774\ube14: {table_name})\")\n\n        conn.close()\n\n    def system_resource_monitoring(self):\n        \"\"\"\uc2dc\uc2a4\ud15c \ub9ac\uc18c\uc2a4 \ubaa8\ub2c8\ud130\ub9c1\"\"\"\n\n        print(f\"\\n31. \uc2dc\uc2a4\ud15c \ub9ac\uc18c\uc2a4 \ubaa8\ub2c8\ud130\ub9c1:\")\n\n        # CPU \uc0ac\uc6a9\ub960\n        cpu_percent = psutil.cpu_percent(interval=1)\n        print(f\"  CPU \uc0ac\uc6a9\ub960: {cpu_percent}%\")\n\n        # \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub960\n        memory = psutil.virtual_memory()\n        print(f\"  \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub960: {memory.percent}%\")\n        print(f\"  \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uba54\ubaa8\ub9ac: {memory.available / 1024 / 1024:.1f} MB\")\n\n        # \ub514\uc2a4\ud06c \uc0ac\uc6a9\ub960\n        disk = psutil.disk_usage('/')\n        print(f\"  \ub514\uc2a4\ud06c \uc0ac\uc6a9\ub960: {disk.percent}%\")\n        print(f\"  \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub514\uc2a4\ud06c: {disk.free / 1024 / 1024 / 1024:.1f} GB\")\n\ndef demonstrate_performance_optimization():\n    \"\"\"\uc131\ub2a5 \ucd5c\uc801\ud654 \uc2dc\uc5f0\"\"\"\n\n    monitor = DatabasePerformanceMonitor()\n\n    # \ucffc\ub9ac \uc131\ub2a5 \ube44\uad50\n    query_comparisons = {\n        '\uc778\ub371\uc2a4 \uc720\ubb34 \ube44\uad50': {\n            '\uc778\ub371\uc2a4 \uc5c6\ub294 \uac80\uc0c9': 'SELECT * FROM employees WHERE salary &gt; 70000',\n            '\uc778\ub371\uc2a4 \uc788\ub294 \uac80\uc0c9': 'SELECT * FROM employees WHERE salary &gt; 70000',  # \uc774\ubbf8 \uc778\ub371\uc2a4 \uc0dd\uc131\ub428\n        },\n        '\uc870\uc778 vs \uc11c\ube0c\ucffc\ub9ac': {\n            'JOIN \uc0ac\uc6a9': '''\n                SELECT e.name, p.name \n                FROM employees e \n                JOIN employee_projects ep ON e.id = ep.employee_id \n                JOIN projects p ON ep.project_id = p.id\n            ''',\n            '\uc11c\ube0c\ucffc\ub9ac \uc0ac\uc6a9': '''\n                SELECT e.name, \n                       (SELECT p.name FROM projects p \n                        JOIN employee_projects ep ON p.id = ep.project_id \n                        WHERE ep.employee_id = e.id LIMIT 1) as project_name\n                FROM employees e\n            '''\n        }\n    }\n\n    monitor.compare_queries(query_comparisons)\n    monitor.database_size_analysis()\n    monitor.system_resource_monitoring()\n\ndef demonstrate_best_practices():\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ubc94 \uc0ac\ub840\"\"\"\n\n    print(f\"\\n32. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ubc94 \uc0ac\ub840:\")\n\n    best_practices = {\n        '\uc131\ub2a5 \ucd5c\uc801\ud654': [\n            '\uc801\uc808\ud55c \uc778\ub371\uc2a4 \uc0dd\uc131 (\uacfc\ub3c4\ud55c \uc778\ub371\uc2a4\ub294 \uc4f0\uae30 \uc131\ub2a5 \uc800\ud558)',\n            '\ucffc\ub9ac \ucd5c\uc801\ud654 (\ubd88\ud544\uc694\ud55c \uceec\ub7fc \uc870\ud68c \ud53c\ud558\uae30)',\n            '\ud398\uc774\uc9d5 \ucc98\ub9ac (LIMIT\uacfc OFFSET \ud65c\uc6a9)',\n            '\uc5f0\uacb0 \ud480\ub9c1 \uc0ac\uc6a9',\n            '\ubc30\uce58 \ucc98\ub9ac\ub85c \ub300\ub7c9 \uc791\uc5c5 \uc218\ud589',\n        ],\n        '\ubcf4\uc548': [\n            'SQL \uc778\uc81d\uc158 \ubc29\uc9c0 (\ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ucffc\ub9ac \uc0ac\uc6a9)',\n            '\ucd5c\uc18c \uad8c\ud55c \uc6d0\uce59 (\ud544\uc694\ud55c \uad8c\ud55c\ub9cc \ubd80\uc5ec)',\n            '\ub370\uc774\ud130 \uc554\ud638\ud654 (\ubbfc\uac10 \uc815\ubcf4 \ubcf4\ud638)',\n            '\uc815\uae30\uc801\uc778 \ubc31\uc5c5\uacfc \ubcf5\uad6c \ud14c\uc2a4\ud2b8',\n            '\uc811\uadfc \ub85c\uadf8 \ubc0f \uac10\uc0ac \ucd94\uc801',\n        ],\n        '\uc720\uc9c0\ubcf4\uc218\uc131': [\n            '\uba85\ud655\ud55c \uba85\uba85 \uaddc\uce59 (\ud14c\uc774\ube14, \uceec\ub7fc\uba85)',\n            '\uc678\ub798 \ud0a4 \uc81c\uc57d \uc870\uac74 \ud65c\uc6a9',\n            '\ubb38\uc11c\ud654 (\uc2a4\ud0a4\ub9c8, \uad00\uacc4\ub3c4)',\n            '\ubc84\uc804 \uad00\ub9ac (\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc2a4\ud06c\ub9bd\ud2b8)',\n            '\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc640 \ud504\ub85c\ub355\uc158 \ub370\uc774\ud130 \ubd84\ub9ac',\n        ],\n        '\ud655\uc7a5\uc131': [\n            '\uc815\uaddc\ud654\uc640 \ubc18\uc815\uaddc\ud654\uc758 \uc801\uc808\ud55c \uade0\ud615',\n            '\ud30c\ud2f0\uc154\ub2dd \uace0\ub824 (\ub300\uc6a9\ub7c9 \ud14c\uc774\ube14)',\n            '\uc77d\uae30 \uc804\uc6a9 \ubcf5\uc81c\ubcf8 \ud65c\uc6a9',\n            '\uce90\uc2f1 \uc804\ub7b5 \uc218\ub9bd',\n            '\uc544\ud0a4\ud14d\ucc98 \ud655\uc7a5\uc131 \uace0\ub824',\n        ]\n    }\n\n    for category, practices in best_practices.items():\n        print(f\"\\n  {category}:\")\n        for practice in practices:\n            print(f\"    \u2022 {practice}\")\n\ndemonstrate_performance_optimization()\ndemonstrate_best_practices()\n</code></pre>"},{"location":"tutorials/intermediate/chapter12_database_integration/#6","title":"6. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter12_database_integration/#1","title":"\uc5f0\uc2b5 1: \ub3c4\uc11c\uad00 \uad00\ub9ac \uc2dc\uc2a4\ud15c","text":"<p>SQLite3\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc644\uc804\ud55c \ub3c4\uc11c\uad00 \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694: - \ub3c4\uc11c, \ud68c\uc6d0, \ub300\ucd9c \ud14c\uc774\ube14 \uc124\uacc4 - \ub300\ucd9c/\ubc18\ub0a9 \uae30\ub2a5 \uad6c\ud604 - \uc5f0\uccb4\ub8cc \uacc4\uc0b0 \uc2dc\uc2a4\ud15c - \ud1b5\uacc4 \ubc0f \ubcf4\uace0\uc11c \uae30\ub2a5</p>"},{"location":"tutorials/intermediate/chapter12_database_integration/#2-orm","title":"\uc5f0\uc2b5 2: ORM \ud328\ud134 \uad6c\ud604","text":"<p>\uac04\ub2e8\ud55c ORM \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uad6c\ud604\ud558\uc138\uc694: - \ubaa8\ub378 \ud074\ub798\uc2a4 \uae30\ubc18 \ud14c\uc774\ube14 \ub9e4\ud551 - CRUD \uc5f0\uc0b0 \uc9c0\uc6d0 - \uad00\uacc4 \ub9e4\ud551 (1:N, N:M) - \ucffc\ub9ac \ube4c\ub354 \ud328\ud134</p>"},{"location":"tutorials/intermediate/chapter12_database_integration/#3-nosql","title":"\uc5f0\uc2b5 3: NoSQL \ubb38\uc11c \ub370\uc774\ud130\ubca0\uc774\uc2a4","text":"<p>MongoDB \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc11c \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uad6c\ud604\ud558\uc138\uc694: - JSON \ubb38\uc11c \uc800\uc7a5/\uc870\ud68c - \uc778\ub371\uc2f1 \uc2dc\uc2a4\ud15c - \uc9d1\uacc4 \ucffc\ub9ac \uc9c0\uc6d0 - \ubc31\uc5c5/\ubcf5\uc6d0 \uae30\ub2a5</p>"},{"location":"tutorials/intermediate/chapter12_database_integration/#4","title":"\uc5f0\uc2b5 4: \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c","text":"<p>\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694: - \ucffc\ub9ac \uc2e4\ud589 \uc2dc\uac04 \uce21\uc815 - \uc2ac\ub85c\uc6b0 \ucffc\ub9ac \ub85c\uae45 - \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\ub7c9 \ubaa8\ub2c8\ud130\ub9c1 - \uc131\ub2a5 \ubcf4\uace0\uc11c \uc0dd\uc131</p>"},{"location":"tutorials/intermediate/chapter12_database_integration/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>SQLite3 \uae30\ucd08: \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0dd\uc131, CRUD \uc5f0\uc0b0, \uace0\uae09 \ucffc\ub9ac</li> <li>\ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac: \ud2b8\ub79c\uc7ad\uc158 \ud328\ud134, \uc5d0\ub7ec \ucc98\ub9ac, \uc5f0\uacb0 \ud480\ub9c1</li> <li>ORM \uae30\ucd08: SQLAlchemy \uac1c\ub150, \ubaa8\ub378 \uc815\uc758, ORM \ud328\ud134</li> <li>NoSQL \uae30\ucd08: \ubb38\uc11c \ub370\uc774\ud130\ubca0\uc774\uc2a4, MongoDB \uc2a4\ud0c0\uc77c API</li> <li>\uc124\uacc4 \ud328\ud134: \uacc4\uce35 \uad6c\uc870, \uc774\ub825 \uad00\ub9ac, \ud0dc\uadf8 \uc2dc\uc2a4\ud15c, \uc124\uc815 \uad00\ub9ac</li> <li>\uc131\ub2a5 \ucd5c\uc801\ud654: \uc778\ub371\uc2f1, \ucffc\ub9ac \ucd5c\uc801\ud654, \ubaa8\ub2c8\ud130\ub9c1</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 \uc6f9 \uc2a4\ud06c\ub798\ud551\uacfc API \ud65c\uc6a9\uc5d0 \ub300\ud574 \ud559\uc2b5\ud558\uc5ec \uc678\ubd80 \ub370\uc774\ud130 \uc18c\uc2a4\uc640\uc758 \uc5f0\ub3d9 \ubc29\ubc95\uc744 \ubc30\uc6b0\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter12_database_integration/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\ub370\uc774\ud130\ubca0\uc774\uc2a4\ub294 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ud575\uc2ec \uad6c\uc131 \uc694\uc18c\uc785\ub2c8\ub2e4</li> <li>\uc801\uc808\ud55c \uc124\uacc4\uc640 \ucd5c\uc801\ud654\uac00 \uc131\ub2a5\uc5d0 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce69\ub2c8\ub2e4</li> <li>SQL\uacfc NoSQL\uc758 \ud2b9\uc131\uc744 \uc774\ud574\ud558\uace0 \uc801\uc808\ud788 \uc120\ud0dd\ud574\uc57c \ud569\ub2c8\ub2e4</li> <li>\ud2b8\ub79c\uc7ad\uc158\uacfc \uc77c\uad00\uc131 \uad00\ub9ac\uac00 \uc911\uc694\ud569\ub2c8\ub2e4</li> <li>\ubcf4\uc548\uacfc \uc131\ub2a5\uc744 \uade0\ud615\uc788\uac8c \uace0\ub824\ud574\uc57c \ud569\ub2c8\ub2e4</li> <li>ORM\uc740 \uc0dd\uc0b0\uc131\uc744 \ub192\uc774\uc9c0\ub9cc \uc131\ub2a5\uc744 \uace0\ub824\ud574\uc57c \ud569\ub2c8\ub2e4  </li> </ul>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/","title":"Chapter 13: \uc6f9 \uc2a4\ud06c\ub798\ud551\uacfc API \ud65c\uc6a9","text":""},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - HTTP \ud504\ub85c\ud1a0\ucf5c\uacfc requests \ub77c\uc774\ube0c\ub7ec\ub9ac \ud65c\uc6a9\ud558\uae30 - BeautifulSoup\uc744 \uc0ac\uc6a9\ud55c \uc6f9 \uc2a4\ud06c\ub798\ud551 \uad6c\ud604\ud558\uae30 - \ub3d9\uc801 \ucf58\ud150\uce20 \ucc98\ub9ac\uc640 Selenium \ud65c\uc6a9\ud558\uae30 - REST API \ud638\ucd9c\uacfc \ub370\uc774\ud130 \ucc98\ub9ac\ud558\uae30 - API \uc778\uc99d\uacfc \ubcf4\uc548 \uad6c\ud604\ud558\uae30 - \ube44\ub3d9\uae30 HTTP \uc694\uccad\uc73c\ub85c \uc131\ub2a5 \ucd5c\uc801\ud654\ud558\uae30 - \uc6f9 \ud06c\ub864\ub9c1 \uc5d0\ud2f0\ucf13\uacfc \ubaa8\ubc94 \uc0ac\ub840 \uc801\uc6a9\ud558\uae30</p>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#1-http-requests","title":"1. HTTP \uae30\ucd08\uc640 requests \ub77c\uc774\ube0c\ub7ec\ub9ac","text":""},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#11-http","title":"1.1 HTTP \ud504\ub85c\ud1a0\ucf5c \uc774\ud574","text":"<pre><code>print(\"=== HTTP \uae30\ucd08\uc640 requests \ub77c\uc774\ube0c\ub7ec\ub9ac ===\")\n\nimport requests\nimport json\nfrom urllib.parse import urljoin, urlparse\nimport time\nfrom datetime import datetime\n\ndef demonstrate_http_basics():\n    \"\"\"HTTP \uae30\ubcf8 \uac1c\ub150\uacfc requests \uc0ac\uc6a9\ubc95\"\"\"\n\n    print(\"1. HTTP \uae30\ubcf8 \uac1c\ub150:\")\n    print(\"  - HTTP (HyperText Transfer Protocol): \uc6f9\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc8fc\uace0\ubc1b\ub294 \ud504\ub85c\ud1a0\ucf5c\")\n    print(\"  - \uc694\uccad(Request)\uacfc \uc751\ub2f5(Response) \uad6c\uc870\")\n    print(\"  - \uc0c1\ud0dc \ucf54\ub4dc: 200(\uc131\uacf5), 404(Not Found), 500(\uc11c\ubc84 \uc624\ub958) \ub4f1\")\n    print(\"  - \ud5e4\ub354: Content-Type, User-Agent, Authorization \ub4f1\")\n    print(\"  - HTTP \uba54\uc11c\ub4dc: GET, POST, PUT, DELETE, PATCH\")\n    print()\n\n    print(\"2. requests \ub77c\uc774\ube0c\ub7ec\ub9ac \uae30\ubcf8 \uc0ac\uc6a9\ubc95:\")\n\n    # \uac04\ub2e8\ud55c GET \uc694\uccad\n    try:\n        response = requests.get('https://httpbin.org/get', timeout=10)\n        print(f\"  \uc0c1\ud0dc \ucf54\ub4dc: {response.status_code}\")\n        print(f\"  \uc751\ub2f5 \ud5e4\ub354 Content-Type: {response.headers.get('content-type')}\")\n        print(f\"  \uc751\ub2f5 \uc2dc\uac04: {response.elapsed.total_seconds():.2f}\ucd08\")\n\n        # JSON \uc751\ub2f5 \ucc98\ub9ac\n        if response.headers.get('content-type', '').startswith('application/json'):\n            data = response.json()\n            print(f\"  \uc694\uccad URL: {data.get('url')}\")\n            print(f\"  \uc0ac\uc6a9\uc790 \uc5d0\uc774\uc804\ud2b8: {data.get('headers', {}).get('User-Agent', '')[:50]}...\")\n\n    except requests.exceptions.RequestException as e:\n        print(f\"  \uc694\uccad \uc2e4\ud328: {e}\")\n\ndemonstrate_http_basics()\n\nclass HTTPClient:\n    \"\"\"HTTP \ud074\ub77c\uc774\uc5b8\ud2b8 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, base_url=None, timeout=30):\n        self.base_url = base_url\n        self.timeout = timeout\n        self.session = requests.Session()\n\n        # \uae30\ubcf8 \ud5e4\ub354 \uc124\uc815\n        self.session.headers.update({\n            'User-Agent': 'Python-Tutorial-Bot/1.0',\n            'Accept': 'application/json, text/html, */*',\n            'Accept-Language': 'ko-KR,ko;q=0.9,en;q=0.8'\n        })\n\n    def get(self, url, params=None, **kwargs):\n        \"\"\"GET \uc694\uccad\"\"\"\n        full_url = urljoin(self.base_url, url) if self.base_url else url\n\n        try:\n            response = self.session.get(\n                full_url, \n                params=params, \n                timeout=self.timeout,\n                **kwargs\n            )\n            response.raise_for_status()  # 4xx, 5xx \uc5d0\ub7ec \uc2dc \uc608\uc678 \ubc1c\uc0dd\n            return response\n\n        except requests.exceptions.RequestException as e:\n            print(f\"GET \uc694\uccad \uc2e4\ud328 ({full_url}): {e}\")\n            return None\n\n    def post(self, url, data=None, json_data=None, **kwargs):\n        \"\"\"POST \uc694\uccad\"\"\"\n        full_url = urljoin(self.base_url, url) if self.base_url else url\n\n        try:\n            response = self.session.post(\n                full_url,\n                data=data,\n                json=json_data,\n                timeout=self.timeout,\n                **kwargs\n            )\n            response.raise_for_status()\n            return response\n\n        except requests.exceptions.RequestException as e:\n            print(f\"POST \uc694\uccad \uc2e4\ud328 ({full_url}): {e}\")\n            return None\n\n    def download_file(self, url, filename, chunk_size=8192):\n        \"\"\"\ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc\"\"\"\n        response = self.get(url, stream=True)\n        if not response:\n            return False\n\n        try:\n            total_size = int(response.headers.get('content-length', 0))\n            downloaded = 0\n\n            with open(filename, 'wb') as f:\n                for chunk in response.iter_content(chunk_size=chunk_size):\n                    if chunk:\n                        f.write(chunk)\n                        downloaded += len(chunk)\n\n                        if total_size &gt; 0:\n                            progress = (downloaded / total_size) * 100\n                            print(f\"    \ub2e4\uc6b4\ub85c\ub4dc \uc9c4\ud589: {progress:.1f}%\", end='\\r')\n\n            print(f\"\\n    \ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc \uc644\ub8cc: {filename} ({downloaded:,} bytes)\")\n            return True\n\n        except Exception as e:\n            print(f\"    \ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc \uc2e4\ud328: {e}\")\n            return False\n\n    def close(self):\n        \"\"\"\uc138\uc158 \uc885\ub8cc\"\"\"\n        self.session.close()\n\ndef demonstrate_http_client():\n    \"\"\"HTTP \ud074\ub77c\uc774\uc5b8\ud2b8 \uc2dc\uc5f0\"\"\"\n\n    print(f\"\\n3. HTTP \ud074\ub77c\uc774\uc5b8\ud2b8 \ud65c\uc6a9:\")\n\n    client = HTTPClient(base_url='https://httpbin.org')\n\n    # GET \uc694\uccad with \ud30c\ub77c\ubbf8\ud130\n    print(\"  GET \uc694\uccad (\ud30c\ub77c\ubbf8\ud130 \ud3ec\ud568):\")\n    response = client.get('/get', params={\n        'name': '\ud30c\uc774\uc36c',\n        'level': 'intermediate',\n        'chapter': 13\n    })\n\n    if response:\n        data = response.json()\n        print(f\"    \uc694\uccad URL: {data.get('url')}\")\n        print(f\"    \ud30c\ub77c\ubbf8\ud130: {data.get('args')}\")\n\n    # POST \uc694\uccad with JSON\n    print(f\"\\n  POST \uc694\uccad (JSON \ub370\uc774\ud130):\")\n    post_data = {\n        'user': 'student',\n        'action': 'learn_web_scraping',\n        'timestamp': datetime.now().isoformat()\n    }\n\n    response = client.post('/post', json_data=post_data)\n    if response:\n        data = response.json()\n        print(f\"    \uc804\uc1a1\ub41c JSON: {data.get('json')}\")\n\n    client.close()\n\ndemonstrate_http_client()\n</code></pre>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#12","title":"1.2 \uc138\uc158\uacfc \ucfe0\ud0a4 \uad00\ub9ac","text":"<pre><code>print(\"\\n=== \uc138\uc158\uacfc \ucfe0\ud0a4 \uad00\ub9ac ===\")\n\nclass SessionManager:\n    \"\"\"\uc138\uc158\uacfc \ucfe0\ud0a4 \uad00\ub9ac \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        self.session = requests.Session()\n        self.login_status = False\n\n    def set_cookies(self, cookies_dict):\n        \"\"\"\ucfe0\ud0a4 \uc124\uc815\"\"\"\n        for name, value in cookies_dict.items():\n            self.session.cookies.set(name, value)\n\n    def get_cookies(self):\n        \"\"\"\ud604\uc7ac \ucfe0\ud0a4 \uc870\ud68c\"\"\"\n        return dict(self.session.cookies)\n\n    def simulate_login(self, username, password):\n        \"\"\"\ub85c\uadf8\uc778 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        print(f\"4. \uc138\uc158 \uae30\ubc18 \ub85c\uadf8\uc778 \uc2dc\ubbac\ub808\uc774\uc158:\")\n\n        # \ub85c\uadf8\uc778 \ud398\uc774\uc9c0 \uc811\uadfc (\ucfe0\ud0a4 \ubc1b\uae30)\n        response = self.session.get('https://httpbin.org/cookies/set/session_id/abc123')\n        print(f\"  \ub85c\uadf8\uc778 \ud398\uc774\uc9c0 \uc811\uadfc: {response.status_code}\")\n\n        # \ub85c\uadf8\uc778 \ub370\uc774\ud130 \uc804\uc1a1\n        login_data = {\n            'username': username,\n            'password': password,\n            'remember_me': True\n        }\n\n        response = self.session.post('https://httpbin.org/post', data=login_data)\n\n        if response.status_code == 200:\n            self.login_status = True\n            print(f\"  \ub85c\uadf8\uc778 \uc131\uacf5: {username}\")\n            print(f\"  \ud604\uc7ac \ucfe0\ud0a4: {self.get_cookies()}\")\n        else:\n            print(f\"  \ub85c\uadf8\uc778 \uc2e4\ud328\")\n\n        return self.login_status\n\n    def make_authenticated_request(self, url):\n        \"\"\"\uc778\uc99d\ub41c \uc694\uccad\"\"\"\n        if not self.login_status:\n            print(\"  \uc778\uc99d\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc785\ub2c8\ub2e4.\")\n            return None\n\n        response = self.session.get(url)\n        return response\n\n    def logout(self):\n        \"\"\"\ub85c\uadf8\uc544\uc6c3\"\"\"\n        self.session.cookies.clear()\n        self.login_status = False\n        print(\"  \ub85c\uadf8\uc544\uc6c3 \uc644\ub8cc\")\n\ndef demonstrate_session_management():\n    \"\"\"\uc138\uc158 \uad00\ub9ac \uc2dc\uc5f0\"\"\"\n\n    session_mgr = SessionManager()\n\n    # \ub85c\uadf8\uc778 \uc2dc\ub3c4\n    session_mgr.simulate_login('python_student', 'secure_password')\n\n    # \uc778\uc99d\ub41c \uc694\uccad\n    print(f\"\\n  \uc778\uc99d\ub41c \uc694\uccad:\")\n    response = session_mgr.make_authenticated_request('https://httpbin.org/cookies')\n    if response:\n        data = response.json()\n        print(f\"    \uc11c\ubc84\uc5d0\uc11c \ubc1b\uc740 \ucfe0\ud0a4: {data.get('cookies')}\")\n\n    # \ub85c\uadf8\uc544\uc6c3\n    session_mgr.logout()\n\ndemonstrate_session_management()\n</code></pre>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#2-beautifulsoup","title":"2. \uc6f9 \uc2a4\ud06c\ub798\ud551 \uae30\ucd08 (BeautifulSoup)","text":""},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#21-html","title":"2.1 HTML \ud30c\uc2f1\uacfc \uc694\uc18c \uc120\ud0dd","text":"<pre><code>print(\"\\n=== \uc6f9 \uc2a4\ud06c\ub798\ud551 \uae30\ucd08 (BeautifulSoup) ===\")\n\nfrom bs4 import BeautifulSoup\nimport re\n\n# BeautifulSoup\uc774 \uc5c6\ub294 \uacbd\uc6b0\ub97c \uc704\ud55c \uc2dc\ubbac\ub808\uc774\uc158\nclass MockBeautifulSoup:\n    \"\"\"BeautifulSoup \uc2dc\ubbac\ub808\uc774\uc158 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, html_content):\n        self.html = html_content\n        self.elements = self._parse_html(html_content)\n\n    def _parse_html(self, html):\n        \"\"\"\uac04\ub2e8\ud55c HTML \ud30c\uc2f1 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        # \uc2e4\uc81c\ub85c\ub294 BeautifulSoup\uc744 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4\n        return {\n            'title': self._extract_text(html, r'&lt;title&gt;(.*?)&lt;/title&gt;'),\n            'links': self._extract_links(html),\n            'paragraphs': self._extract_text_all(html, r'&lt;p[^&gt;]*&gt;(.*?)&lt;/p&gt;'),\n            'headers': self._extract_headers(html)\n        }\n\n    def _extract_text(self, html, pattern):\n        \"\"\"\ud14d\uc2a4\ud2b8 \ucd94\ucd9c\"\"\"\n        match = re.search(pattern, html, re.IGNORECASE | re.DOTALL)\n        return match.group(1).strip() if match else None\n\n    def _extract_text_all(self, html, pattern):\n        \"\"\"\ubaa8\ub4e0 \ub9e4\uce6d \ud14d\uc2a4\ud2b8 \ucd94\ucd9c\"\"\"\n        matches = re.findall(pattern, html, re.IGNORECASE | re.DOTALL)\n        return [text.strip() for text in matches]\n\n    def _extract_links(self, html):\n        \"\"\"\ub9c1\ud06c \ucd94\ucd9c\"\"\"\n        pattern = r'&lt;a[^&gt;]*href=[\"\\']([^\"\\']*)[\"\\'][^&gt;]*&gt;(.*?)&lt;/a&gt;'\n        matches = re.findall(pattern, html, re.IGNORECASE | re.DOTALL)\n        return [{'url': url, 'text': text.strip()} for url, text in matches]\n\n    def _extract_headers(self, html):\n        \"\"\"\ud5e4\ub354 \ucd94\ucd9c (h1-h6)\"\"\"\n        headers = []\n        for i in range(1, 7):\n            pattern = f'&lt;h{i}[^&gt;]*&gt;(.*?)&lt;/h{i}&gt;'\n            matches = re.findall(pattern, html, re.IGNORECASE | re.DOTALL)\n            for match in matches:\n                headers.append({\n                    'level': i,\n                    'text': match.strip()\n                })\n        return headers\n\n    def find(self, tag, **kwargs):\n        \"\"\"\uc694\uc18c \ucc3e\uae30 (\uccab \ubc88\uc9f8)\"\"\"\n        if tag == 'title':\n            return type('Element', (), {'text': self.elements['title']})()\n        return None\n\n    def find_all(self, tag, **kwargs):\n        \"\"\"\ubaa8\ub4e0 \uc694\uc18c \ucc3e\uae30\"\"\"\n        results = []\n        if tag == 'a':\n            for link in self.elements['links']:\n                element = type('Element', (), {\n                    'get': lambda attr: link['url'] if attr == 'href' else None,\n                    'text': link['text']\n                })()\n                results.append(element)\n        elif tag == 'p':\n            for text in self.elements['paragraphs']:\n                element = type('Element', (), {'text': text})()\n                results.append(element)\n        return results\n\nclass WebScraper:\n    \"\"\"\uc6f9 \uc2a4\ud06c\ub798\ud551 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        self.session = requests.Session()\n        self.session.headers.update({\n            'User-Agent': 'Mozilla/5.0 (compatible; WebScraper/1.0)'\n        })\n\n    def get_page(self, url):\n        \"\"\"\uc6f9 \ud398\uc774\uc9c0 \uac00\uc838\uc624\uae30\"\"\"\n        try:\n            response = self.session.get(url, timeout=10)\n            response.raise_for_status()\n            response.encoding = response.apparent_encoding\n            return response.text\n        except requests.exceptions.RequestException as e:\n            print(f\"\ud398\uc774\uc9c0 \uac00\uc838\uc624\uae30 \uc2e4\ud328: {e}\")\n            return None\n\n    def parse_html(self, html_content):\n        \"\"\"HTML \ud30c\uc2f1\"\"\"\n        try:\n            # \uc2e4\uc81c\ub85c\ub294 BeautifulSoup\uc744 \uc0ac\uc6a9\n            # soup = BeautifulSoup(html_content, 'html.parser')\n            soup = MockBeautifulSoup(html_content)\n            return soup\n        except Exception as e:\n            print(f\"HTML \ud30c\uc2f1 \uc2e4\ud328: {e}\")\n            return None\n\n    def extract_data(self, soup, selectors):\n        \"\"\"\ub370\uc774\ud130 \ucd94\ucd9c\"\"\"\n        data = {}\n\n        for key, selector in selectors.items():\n            try:\n                if key == 'title':\n                    element = soup.find('title')\n                    data[key] = element.text if element else None\n\n                elif key == 'links':\n                    elements = soup.find_all('a')\n                    data[key] = []\n                    for element in elements:\n                        link_data = {\n                            'url': element.get('href') if hasattr(element, 'get') else None,\n                            'text': element.text if hasattr(element, 'text') else str(element)\n                        }\n                        data[key].append(link_data)\n\n                elif key == 'paragraphs':\n                    elements = soup.find_all('p')\n                    data[key] = [element.text for element in elements if hasattr(element, 'text')]\n\n            except Exception as e:\n                print(f\"\ub370\uc774\ud130 \ucd94\ucd9c \uc2e4\ud328 ({key}): {e}\")\n                data[key] = None\n\n        return data\n\ndef demonstrate_web_scraping():\n    \"\"\"\uc6f9 \uc2a4\ud06c\ub798\ud551 \uc2dc\uc5f0\"\"\"\n\n    print(\"5. \uc6f9 \uc2a4\ud06c\ub798\ud551 \uae30\ubcf8 \uc0ac\uc6a9\ubc95:\")\n\n    # \uc0d8\ud50c HTML (\uc2e4\uc81c\ub85c\ub294 \uc6f9\uc0ac\uc774\ud2b8\uc5d0\uc11c \uac00\uc838\uc634)\n    sample_html = \"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Python \ud29c\ud1a0\ub9ac\uc5bc \uc608\uc81c \ud398\uc774\uc9c0&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;\uc6f9 \uc2a4\ud06c\ub798\ud551 \ud559\uc2b5&lt;/h1&gt;\n        &lt;p&gt;\uc774\uac83\uc740 \uccab \ubc88\uc9f8 \ub2e8\ub77d\uc785\ub2c8\ub2e4.&lt;/p&gt;\n        &lt;p&gt;\ub450 \ubc88\uc9f8 \ub2e8\ub77d\uc5d0\ub294 &lt;a href=\"https://python.org\"&gt;Python \uacf5\uc2dd \uc0ac\uc774\ud2b8&lt;/a&gt; \ub9c1\ud06c\uac00 \uc788\uc2b5\ub2c8\ub2e4.&lt;/p&gt;\n        &lt;div class=\"content\"&gt;\n            &lt;h2&gt;\uc720\uc6a9\ud55c \ub9c1\ud06c\ub4e4&lt;/h2&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"https://docs.python.org\"&gt;Python \ubb38\uc11c&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"https://github.com\"&gt;GitHub&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"https://stackoverflow.com\"&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n        &lt;p&gt;\ub9c8\uc9c0\ub9c9 \ub2e8\ub77d\uc785\ub2c8\ub2e4.&lt;/p&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n\n    scraper = WebScraper()\n    soup = scraper.parse_html(sample_html)\n\n    if soup:\n        # \ub370\uc774\ud130 \ucd94\ucd9c \uc124\uc815\n        selectors = {\n            'title': 'title',\n            'links': 'a',\n            'paragraphs': 'p'\n        }\n\n        data = scraper.extract_data(soup, selectors)\n\n        print(f\"  \ud398\uc774\uc9c0 \uc81c\ubaa9: {data.get('title')}\")\n        print(f\"  \ub2e8\ub77d \uc218: {len(data.get('paragraphs', []))}\")\n        print(f\"  \ub9c1\ud06c \uc218: {len(data.get('links', []))}\")\n\n        # \ub9c1\ud06c \uc815\ubcf4 \ucd9c\ub825\n        print(f\"\\n  \ubc1c\uacac\ub41c \ub9c1\ud06c\ub4e4:\")\n        for i, link in enumerate(data.get('links', [])[:3], 1):  # \ucd5c\ub300 3\uac1c\ub9cc \ud45c\uc2dc\n            print(f\"    {i}. {link.get('text', '')} -&gt; {link.get('url', '')}\")\n\ndemonstrate_web_scraping()\n</code></pre>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#22","title":"2.2 \uace0\uae09 \uc2a4\ud06c\ub798\ud551 \uae30\ubc95","text":"<pre><code>print(\"\\n=== \uace0\uae09 \uc2a4\ud06c\ub798\ud551 \uae30\ubc95 ===\")\n\nimport time\nimport random\nfrom urllib.robotparser import RobotFileParser\nfrom urllib.parse import urljoin, urlparse\n\nclass AdvancedScraper:\n    \"\"\"\uace0\uae09 \uc6f9 \uc2a4\ud06c\ub798\ud551 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, delay_range=(1, 3), respect_robots=True):\n        self.session = requests.Session()\n        self.delay_range = delay_range\n        self.respect_robots = respect_robots\n        self.robots_cache = {}\n\n        # \ub2e4\uc591\ud55c User-Agent \ud480\n        self.user_agents = [\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n        ]\n\n    def _random_delay(self):\n        \"\"\"\ub79c\ub364 \uc9c0\uc5f0\"\"\"\n        delay = random.uniform(*self.delay_range)\n        time.sleep(delay)\n\n    def _rotate_user_agent(self):\n        \"\"\"User-Agent \ub85c\ud14c\uc774\uc158\"\"\"\n        user_agent = random.choice(self.user_agents)\n        self.session.headers.update({'User-Agent': user_agent})\n\n    def _check_robots_txt(self, url):\n        \"\"\"robots.txt \ud655\uc778\"\"\"\n        if not self.respect_robots:\n            return True\n\n        parsed_url = urlparse(url)\n        base_url = f\"{parsed_url.scheme}://{parsed_url.netloc}\"\n\n        if base_url not in self.robots_cache:\n            try:\n                rp = RobotFileParser()\n                rp.set_url(urljoin(base_url, '/robots.txt'))\n                rp.read()\n                self.robots_cache[base_url] = rp\n            except:\n                self.robots_cache[base_url] = None\n\n        rp = self.robots_cache[base_url]\n        if rp:\n            return rp.can_fetch('*', url)\n        return True\n\n    def scrape_with_retry(self, url, max_retries=3):\n        \"\"\"\uc7ac\uc2dc\ub3c4 \uae30\ub2a5\uc774 \uc788\ub294 \uc2a4\ud06c\ub798\ud551\"\"\"\n\n        print(f\"6. \uace0\uae09 \uc2a4\ud06c\ub798\ud551 \uae30\ubc95 \uc2dc\uc5f0:\")\n\n        if not self._check_robots_txt(url):\n            print(f\"  robots.txt\uc5d0 \uc758\ud574 \ucc28\ub2e8\ub41c URL: {url}\")\n            return None\n\n        for attempt in range(max_retries):\n            try:\n                # User-Agent \ub85c\ud14c\uc774\uc158\n                self._rotate_user_agent()\n\n                # \uc694\uccad \uc804 \uc9c0\uc5f0\n                if attempt &gt; 0:\n                    print(f\"  \uc7ac\uc2dc\ub3c4 {attempt + 1}/{max_retries}\")\n                    self._random_delay()\n\n                response = self.session.get(url, timeout=10)\n                response.raise_for_status()\n\n                print(f\"  \uc131\uacf5\uc801\uc73c\ub85c \ud398\uc774\uc9c0 \uac00\uc838\uc634: {url}\")\n                print(f\"  \uc0ac\uc6a9\ub41c User-Agent: {self.session.headers.get('User-Agent')[:50]}...\")\n\n                return response.text\n\n            except requests.exceptions.RequestException as e:\n                print(f\"  \uc2dc\ub3c4 {attempt + 1} \uc2e4\ud328: {e}\")\n                if attempt == max_retries - 1:\n                    print(f\"  \ucd5c\ub300 \uc7ac\uc2dc\ub3c4 \ud69f\uc218 \ucd08\uacfc\")\n                    return None\n\n        return None\n\n    def extract_with_fallback(self, html, primary_selector, fallback_selectors):\n        \"\"\"\ud3f4\ubc31 \uc120\ud0dd\uc790\ub97c \uc0ac\uc6a9\ud55c \ucd94\ucd9c\"\"\"\n        soup = MockBeautifulSoup(html)\n\n        # \uc8fc\uc694 \uc120\ud0dd\uc790 \uc2dc\ub3c4\n        try:\n            if primary_selector == 'title':\n                result = soup.elements.get('title')\n                if result:\n                    return result\n        except:\n            pass\n\n        # \ud3f4\ubc31 \uc120\ud0dd\uc790\ub4e4 \uc2dc\ub3c4\n        for selector in fallback_selectors:\n            try:\n                if selector == 'h1':\n                    headers = soup.elements.get('headers', [])\n                    h1_headers = [h for h in headers if h.get('level') == 1]\n                    if h1_headers:\n                        return h1_headers[0]['text']\n                elif selector == 'first_paragraph':\n                    paragraphs = soup.elements.get('paragraphs', [])\n                    if paragraphs:\n                        return paragraphs[0]\n            except:\n                continue\n\n        return None\n\ndef demonstrate_advanced_scraping():\n    \"\"\"\uace0\uae09 \uc2a4\ud06c\ub798\ud551 \uc2dc\uc5f0\"\"\"\n\n    scraper = AdvancedScraper(delay_range=(0.5, 1.0))\n\n    # \uc2dc\ubbac\ub808\uc774\uc158\uc6a9 HTML\n    sample_html = \"\"\"\n    &lt;html&gt;\n    &lt;head&gt;&lt;title&gt;\uace0\uae09 \uc2a4\ud06c\ub798\ud551 \uc608\uc81c&lt;/title&gt;&lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;\uba54\uc778 \uc81c\ubaa9&lt;/h1&gt;\n        &lt;p&gt;\uccab \ubc88\uc9f8 \ub2e8\ub77d\uc785\ub2c8\ub2e4.&lt;/p&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n\n    # \ud3f4\ubc31 \uc120\ud0dd\uc790\ub97c \uc0ac\uc6a9\ud55c \uc81c\ubaa9 \ucd94\ucd9c\n    title = scraper.extract_with_fallback(\n        sample_html,\n        primary_selector='title',\n        fallback_selectors=['h1', 'first_paragraph']\n    )\n\n    print(f\"  \ucd94\ucd9c\ub41c \uc81c\ubaa9: {title}\")\n\n    # robots.txt \uccb4\ud06c \uc2dc\ubbac\ub808\uc774\uc158\n    test_url = \"https://httpbin.org/html\"\n    allowed = scraper._check_robots_txt(test_url)\n    print(f\"  robots.txt \ud5c8\uc6a9 \uc5ec\ubd80: {allowed}\")\n\ndemonstrate_advanced_scraping()\n</code></pre>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#3","title":"3. \ub3d9\uc801 \ucf58\ud150\uce20 \ucc98\ub9ac","text":""},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#31-javascript","title":"3.1 JavaScript \ub80c\ub354\ub9c1 \ucc98\ub9ac","text":"<pre><code>print(\"\\n=== \ub3d9\uc801 \ucf58\ud150\uce20 \ucc98\ub9ac ===\")\n\n# Selenium\uc774 \uc5c6\ub294 \uacbd\uc6b0\ub97c \uc704\ud55c \uc2dc\ubbac\ub808\uc774\uc158\nclass MockWebDriver:\n    \"\"\"Selenium WebDriver \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n\n    def __init__(self, headless=True):\n        self.headless = headless\n        self.current_url = None\n        self.page_source = None\n        print(f\"  Mock WebDriver \ucd08\uae30\ud654 (headless={headless})\")\n\n    def get(self, url):\n        \"\"\"\ud398\uc774\uc9c0 \ub85c\ub4dc\"\"\"\n        self.current_url = url\n        print(f\"  \ud398\uc774\uc9c0 \ub85c\ub4dc: {url}\")\n\n        # \ub3d9\uc801 \ucf58\ud150\uce20 \uc2dc\ubbac\ub808\uc774\uc158\n        self.page_source = f\"\"\"\n        &lt;html&gt;\n        &lt;head&gt;&lt;title&gt;\ub3d9\uc801 \ud398\uc774\uc9c0 \uc608\uc81c&lt;/title&gt;&lt;/head&gt;\n        &lt;body&gt;\n            &lt;div id=\"content\"&gt;\n                &lt;h1&gt;JavaScript\ub85c \ub85c\ub4dc\ub41c \uc81c\ubaa9&lt;/h1&gt;\n                &lt;div class=\"dynamic-data\"&gt;\n                    &lt;p&gt;AJAX\ub85c \ub85c\ub4dc\ub41c \ub370\uc774\ud130&lt;/p&gt;\n                    &lt;ul id=\"dynamic-list\"&gt;\n                        &lt;li&gt;\ud56d\ubaa9 1&lt;/li&gt;\n                        &lt;li&gt;\ud56d\ubaa9 2&lt;/li&gt;\n                        &lt;li&gt;\ud56d\ubaa9 3&lt;/li&gt;\n                    &lt;/ul&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;script&gt;\n                // \uc774 \ubd80\ubd84\uc740 \uc2e4\uc81c\ub85c\ub294 JavaScript\ub85c DOM\uc744 \uc218\uc815\ud568\n                console.log('\ud398\uc774\uc9c0 \ub85c\ub4dc \uc644\ub8cc');\n            &lt;/script&gt;\n        &lt;/body&gt;\n        &lt;/html&gt;\n        \"\"\"\n        time.sleep(1)  # \ub85c\ub529 \uc2dc\ubbac\ub808\uc774\uc158\n\n    def find_element(self, by, value):\n        \"\"\"\uc694\uc18c \ucc3e\uae30\"\"\"\n        element = MockWebElement(value)\n        return element\n\n    def find_elements(self, by, value):\n        \"\"\"\uc694\uc18c\ub4e4 \ucc3e\uae30\"\"\"\n        # \uc2dc\ubbac\ub808\uc774\uc158: 3\uac1c \uc694\uc18c \ubc18\ud658\n        return [MockWebElement(f\"{value}_{i}\") for i in range(3)]\n\n    def execute_script(self, script):\n        \"\"\"JavaScript \uc2e4\ud589\"\"\"\n        print(f\"  JavaScript \uc2e4\ud589: {script[:50]}...\")\n        return \"\uc2e4\ud589 \uc644\ub8cc\"\n\n    def quit(self):\n        \"\"\"\ube0c\ub77c\uc6b0\uc800 \uc885\ub8cc\"\"\"\n        print(\"  Mock WebDriver \uc885\ub8cc\")\n\nclass MockWebElement:\n    \"\"\"Selenium WebElement \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n\n    def __init__(self, identifier):\n        self.identifier = identifier\n        self.text = f\"\ud14d\uc2a4\ud2b8 \ub0b4\uc6a9 ({identifier})\"\n\n    def click(self):\n        print(f\"  \uc694\uc18c \ud074\ub9ad: {self.identifier}\")\n\n    def send_keys(self, text):\n        print(f\"  \ud14d\uc2a4\ud2b8 \uc785\ub825: {text}\")\n\n    def get_attribute(self, name):\n        return f\"attribute_{name}\"\n\nclass DynamicContentScraper:\n    \"\"\"\ub3d9\uc801 \ucf58\ud150\uce20 \uc2a4\ud06c\ub798\ud551 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, headless=True, wait_timeout=10):\n        self.headless = headless\n        self.wait_timeout = wait_timeout\n        self.driver = None\n\n    def start_browser(self):\n        \"\"\"\ube0c\ub77c\uc6b0\uc800 \uc2dc\uc791\"\"\"\n        print(\"7. \ub3d9\uc801 \ucf58\ud150\uce20 \uc2a4\ud06c\ub798\ud551:\")\n\n        try:\n            # \uc2e4\uc81c\ub85c\ub294 Selenium\uc744 \uc0ac\uc6a9\n            # from selenium import webdriver\n            # options = webdriver.ChromeOptions()\n            # if self.headless:\n            #     options.add_argument('--headless')\n            # self.driver = webdriver.Chrome(options=options)\n\n            self.driver = MockWebDriver(self.headless)\n            print(\"  \ube0c\ub77c\uc6b0\uc800 \uc2dc\uc791 \uc644\ub8cc\")\n            return True\n\n        except Exception as e:\n            print(f\"  \ube0c\ub77c\uc6b0\uc800 \uc2dc\uc791 \uc2e4\ud328: {e}\")\n            return False\n\n    def wait_for_element(self, selector, timeout=None):\n        \"\"\"\uc694\uc18c \ub300\uae30\"\"\"\n        timeout = timeout or self.wait_timeout\n        print(f\"  \uc694\uc18c \ub300\uae30: {selector} (\ucd5c\ub300 {timeout}\ucd08)\")\n\n        # \uc2e4\uc81c\ub85c\ub294 WebDriverWait\ub97c \uc0ac\uc6a9\n        time.sleep(1)  # \uc2dc\ubbac\ub808\uc774\uc158\n        return True\n\n    def scrape_spa_page(self, url):\n        \"\"\"SPA(Single Page Application) \uc2a4\ud06c\ub798\ud551\"\"\"\n        if not self.driver:\n            print(\"  \ube0c\ub77c\uc6b0\uc800\uac00 \uc2dc\uc791\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.\")\n            return None\n\n        try:\n            # \ud398\uc774\uc9c0 \ub85c\ub4dc\n            self.driver.get(url)\n\n            # \ub3d9\uc801 \ucf58\ud150\uce20 \ub85c\ub4dc \ub300\uae30\n            self.wait_for_element('#content')\n\n            # JavaScript \uc2e4\ud589 \ud6c4 \ub370\uc774\ud130 \ucd94\ucd9c\n            self.driver.execute_script(\"\"\"\n                // \ucd94\uac00 \ub370\uc774\ud130 \ub85c\ub4dc \uc2dc\ubbac\ub808\uc774\uc158\n                var list = document.getElementById('dynamic-list');\n                if (list) {\n                    var newItem = document.createElement('li');\n                    newItem.textContent = 'JavaScript\ub85c \ucd94\uac00\ub41c \ud56d\ubaa9';\n                    list.appendChild(newItem);\n                }\n            \"\"\")\n\n            # \ud398\uc774\uc9c0 \uc18c\uc2a4 \uac00\uc838\uc624\uae30\n            html_content = self.driver.page_source\n\n            # BeautifulSoup\uc73c\ub85c \ud30c\uc2f1\n            soup = MockBeautifulSoup(html_content)\n\n            return {\n                'title': soup.elements.get('title'),\n                'dynamic_data': len(soup.elements.get('paragraphs', [])),\n                'list_items': 4  # \uc2dc\ubbac\ub808\uc774\uc158\n            }\n\n        except Exception as e:\n            print(f\"  SPA \uc2a4\ud06c\ub798\ud551 \uc2e4\ud328: {e}\")\n            return None\n\n    def handle_pagination(self, base_url, max_pages=5):\n        \"\"\"\ud398\uc774\uc9c0\ub124\uc774\uc158 \ucc98\ub9ac\"\"\"\n        print(f\"\\n8. \ud398\uc774\uc9c0\ub124\uc774\uc158 \ucc98\ub9ac:\")\n\n        all_data = []\n\n        for page in range(1, max_pages + 1):\n            try:\n                url = f\"{base_url}?page={page}\"\n                print(f\"  \ud398\uc774\uc9c0 {page} \ucc98\ub9ac \uc911...\")\n\n                if self.driver:\n                    self.driver.get(url)\n\n                    # \ud398\uc774\uc9c0 \ub85c\ub4dc \ub300\uae30\n                    time.sleep(1)\n\n                    # \ub370\uc774\ud130 \ucd94\ucd9c \uc2dc\ubbac\ub808\uc774\uc158\n                    page_data = {\n                        'page': page,\n                        'items': [f\"\uc544\uc774\ud15c {page}_{i}\" for i in range(1, 6)],\n                        'total_items': 5\n                    }\n\n                    all_data.extend(page_data['items'])\n                    print(f\"    \ud398\uc774\uc9c0 {page}: {page_data['total_items']}\uac1c \uc544\uc774\ud15c \uc218\uc9d1\")\n\n                    # \ub2e4\uc74c \ud398\uc774\uc9c0 \ubc84\ud2bc \ud655\uc778\n                    if page == max_pages:\n                        print(f\"    \ucd5c\ub300 \ud398\uc774\uc9c0({max_pages})\uc5d0 \ub3c4\ub2ec\")\n                        break\n\n            except Exception as e:\n                print(f\"  \ud398\uc774\uc9c0 {page} \ucc98\ub9ac \uc2e4\ud328: {e}\")\n                break\n\n        print(f\"  \ucd1d \uc218\uc9d1\ub41c \uc544\uc774\ud15c: {len(all_data)}\uac1c\")\n        return all_data\n\n    def close_browser(self):\n        \"\"\"\ube0c\ub77c\uc6b0\uc800 \uc885\ub8cc\"\"\"\n        if self.driver:\n            self.driver.quit()\n            self.driver = None\n\ndef demonstrate_dynamic_scraping():\n    \"\"\"\ub3d9\uc801 \uc2a4\ud06c\ub798\ud551 \uc2dc\uc5f0\"\"\"\n\n    scraper = DynamicContentScraper(headless=True)\n\n    if scraper.start_browser():\n        # SPA \ud398\uc774\uc9c0 \uc2a4\ud06c\ub798\ud551\n        result = scraper.scrape_spa_page(\"https://example-spa.com\")\n        if result:\n            print(f\"  \uc2a4\ud06c\ub798\ud551 \uacb0\uacfc: {result}\")\n\n        # \ud398\uc774\uc9c0\ub124\uc774\uc158 \ucc98\ub9ac\n        pagination_data = scraper.handle_pagination(\"https://example.com/data\", max_pages=3)\n\n        scraper.close_browser()\n\ndemonstrate_dynamic_scraping()\n</code></pre>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#4-rest-api","title":"4. REST API \ud65c\uc6a9","text":""},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#41-api","title":"4.1 API \ud638\ucd9c\uacfc \uc751\ub2f5 \ucc98\ub9ac","text":"<pre><code>print(\"\\n=== REST API \ud65c\uc6a9 ===\")\n\nimport json\nfrom datetime import datetime, timedelta\nimport hashlib\nimport hmac\nimport base64\n\nclass APIClient:\n    \"\"\"REST API \ud074\ub77c\uc774\uc5b8\ud2b8\"\"\"\n\n    def __init__(self, base_url, api_key=None, timeout=30):\n        self.base_url = base_url.rstrip('/')\n        self.api_key = api_key\n        self.timeout = timeout\n        self.session = requests.Session()\n\n        # \uae30\ubcf8 \ud5e4\ub354 \uc124\uc815\n        if api_key:\n            self.session.headers.update({\n                'Authorization': f'Bearer {api_key}',\n                'Content-Type': 'application/json'\n            })\n\n    def _make_request(self, method, endpoint, **kwargs):\n        \"\"\"\uacf5\ud1b5 \uc694\uccad \uba54\uc11c\ub4dc\"\"\"\n        url = f\"{self.base_url}/{endpoint.lstrip('/')}\"\n\n        try:\n            response = self.session.request(\n                method, url, timeout=self.timeout, **kwargs\n            )\n            response.raise_for_status()\n            return response\n\n        except requests.exceptions.RequestException as e:\n            print(f\"API \uc694\uccad \uc2e4\ud328 ({method} {endpoint}): {e}\")\n            return None\n\n    def get(self, endpoint, params=None):\n        \"\"\"GET \uc694\uccad\"\"\"\n        return self._make_request('GET', endpoint, params=params)\n\n    def post(self, endpoint, data=None, json_data=None):\n        \"\"\"POST \uc694\uccad\"\"\"\n        return self._make_request('POST', endpoint, data=data, json=json_data)\n\n    def put(self, endpoint, data=None, json_data=None):\n        \"\"\"PUT \uc694\uccad\"\"\"\n        return self._make_request('PUT', endpoint, data=data, json=json_data)\n\n    def delete(self, endpoint):\n        \"\"\"DELETE \uc694\uccad\"\"\"\n        return self._make_request('DELETE', endpoint)\n\n    def paginated_get(self, endpoint, params=None, page_param='page', \n                     per_page_param='per_page', per_page=20, max_pages=None):\n        \"\"\"\ud398\uc774\uc9c0\ub124\uc774\uc158\ub41c GET \uc694\uccad\"\"\"\n        all_data = []\n        page = 1\n\n        while True:\n            current_params = params.copy() if params else {}\n            current_params.update({\n                page_param: page,\n                per_page_param: per_page\n            })\n\n            response = self.get(endpoint, params=current_params)\n            if not response:\n                break\n\n            try:\n                data = response.json()\n\n                # \ub370\uc774\ud130 \uad6c\uc870\uc5d0 \ub530\ub77c \uc870\uc815 \ud544\uc694\n                if isinstance(data, list):\n                    items = data\n                elif isinstance(data, dict):\n                    items = data.get('data', data.get('items', data.get('results', [])))\n                else:\n                    break\n\n                if not items:\n                    break\n\n                all_data.extend(items)\n\n                print(f\"  \ud398\uc774\uc9c0 {page}: {len(items)}\uac1c \ud56d\ubaa9 \uc218\uc9d1\")\n\n                # \ub9c8\uc9c0\ub9c9 \ud398\uc774\uc9c0 \uccb4\ud06c\n                if len(items) &lt; per_page:\n                    break\n\n                if max_pages and page &gt;= max_pages:\n                    break\n\n                page += 1\n\n            except (ValueError, KeyError) as e:\n                print(f\"\uc751\ub2f5 \ud30c\uc2f1 \uc2e4\ud328: {e}\")\n                break\n\n        return all_data\n\nclass GitHubAPIClient(APIClient):\n    \"\"\"GitHub API \ud074\ub77c\uc774\uc5b8\ud2b8 \uc608\uc81c\"\"\"\n\n    def __init__(self, token=None):\n        super().__init__('https://api.github.com', api_key=token)\n\n    def get_user_info(self, username):\n        \"\"\"\uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc870\ud68c\"\"\"\n        response = self.get(f'/users/{username}')\n        return response.json() if response else None\n\n    def get_user_repos(self, username, sort='updated', per_page=10):\n        \"\"\"\uc0ac\uc6a9\uc790 \uc800\uc7a5\uc18c \uc870\ud68c\"\"\"\n        params = {\n            'sort': sort,\n            'direction': 'desc'\n        }\n\n        repos = self.paginated_get(\n            f'/users/{username}/repos',\n            params=params,\n            per_page=per_page,\n            max_pages=1  # \uccab \ud398\uc774\uc9c0\ub9cc\n        )\n\n        return repos\n\n    def search_repositories(self, query, sort='stars', per_page=10):\n        \"\"\"\uc800\uc7a5\uc18c \uac80\uc0c9\"\"\"\n        params = {\n            'q': query,\n            'sort': sort,\n            'order': 'desc'\n        }\n\n        response = self.get('/search/repositories', params=params)\n        if response:\n            data = response.json()\n            return data.get('items', [])[:per_page]\n        return []\n\ndef demonstrate_api_usage():\n    \"\"\"API \uc0ac\uc6a9 \uc2dc\uc5f0\"\"\"\n\n    print(\"9. REST API \uae30\ubcf8 \uc0ac\uc6a9\ubc95:\")\n\n    # HTTPBin API \ud14c\uc2a4\ud2b8\n    api_client = APIClient('https://httpbin.org')\n\n    # GET \uc694\uccad\n    response = api_client.get('/get', params={'test': 'value'})\n    if response:\n        data = response.json()\n        print(f\"  GET \uc694\uccad \uc131\uacf5: {data.get('args')}\")\n\n    # POST \uc694\uccad\n    post_data = {\n        'name': 'Python Student',\n        'skill': 'Web Scraping',\n        'timestamp': datetime.now().isoformat()\n    }\n\n    response = api_client.post('/post', json_data=post_data)\n    if response:\n        data = response.json()\n        print(f\"  POST \uc694\uccad \uc131\uacf5: \ub370\uc774\ud130 \uc804\uc1a1\ub428\")\n\n    print(f\"\\n10. GitHub API \uc2dc\ubbac\ub808\uc774\uc158:\")\n\n    # GitHub API \uc2dc\ubbac\ub808\uc774\uc158\n    github_client = GitHubAPIClient()\n\n    # \uc2e4\uc81c API \ud638\ucd9c \ub300\uc2e0 \uc2dc\ubbac\ub808\uc774\uc158 \ub370\uc774\ud130\n    simulated_user = {\n        'login': 'example-user',\n        'name': 'Example User',\n        'public_repos': 42,\n        'followers': 123,\n        'following': 87\n    }\n\n    print(f\"  \uc0ac\uc6a9\uc790 \uc815\ubcf4: {simulated_user['name']}\")\n    print(f\"  \uacf5\uac1c \uc800\uc7a5\uc18c: {simulated_user['public_repos']}\uac1c\")\n    print(f\"  \ud314\ub85c\uc6cc: {simulated_user['followers']}\uba85\")\n\n    # \uc800\uc7a5\uc18c \uc2dc\ubbac\ub808\uc774\uc158\n    simulated_repos = [\n        {'name': 'awesome-project', 'stars': 256, 'language': 'Python'},\n        {'name': 'web-scraper', 'stars': 89, 'language': 'Python'},\n        {'name': 'data-analysis', 'stars': 45, 'language': 'R'}\n    ]\n\n    print(f\"  \uc778\uae30 \uc800\uc7a5\uc18c:\")\n    for repo in simulated_repos:\n        print(f\"    {repo['name']}: {repo['stars']}\u2b50 ({repo['language']})\")\n\ndemonstrate_api_usage()\n</code></pre>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#42-api","title":"4.2 API \uc778\uc99d\uacfc \ubcf4\uc548","text":"<pre><code>print(\"\\n=== API \uc778\uc99d\uacfc \ubcf4\uc548 ===\")\n\nclass AuthenticatedAPIClient:\n    \"\"\"\uc778\uc99d\uc774 \ud3ec\ud568\ub41c API \ud074\ub77c\uc774\uc5b8\ud2b8\"\"\"\n\n    def __init__(self, base_url):\n        self.base_url = base_url\n        self.session = requests.Session()\n        self.access_token = None\n        self.refresh_token = None\n        self.token_expires_at = None\n\n    def oauth2_login(self, client_id, client_secret, username, password):\n        \"\"\"OAuth2 \ub85c\uadf8\uc778 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        print(\"11. OAuth2 \uc778\uc99d \uc2dc\ubbac\ub808\uc774\uc158:\")\n\n        # \uc2e4\uc81c\ub85c\ub294 OAuth2 \ud50c\ub85c\uc6b0\ub97c \ub530\ub984\n        login_data = {\n            'grant_type': 'password',\n            'client_id': client_id,\n            'client_secret': client_secret,\n            'username': username,\n            'password': password\n        }\n\n        try:\n            response = self.session.post(\n                f\"{self.base_url}/oauth/token\",\n                data=login_data\n            )\n\n            # \uc2dc\ubbac\ub808\uc774\uc158: \uc131\uacf5 \uc751\ub2f5\n            token_data = {\n                'access_token': 'simulated_access_token_12345',\n                'refresh_token': 'simulated_refresh_token_67890',\n                'expires_in': 3600,\n                'token_type': 'Bearer'\n            }\n\n            self.access_token = token_data['access_token']\n            self.refresh_token = token_data['refresh_token']\n            self.token_expires_at = datetime.now() + timedelta(seconds=token_data['expires_in'])\n\n            # Authorization \ud5e4\ub354 \uc124\uc815\n            self.session.headers.update({\n                'Authorization': f\"Bearer {self.access_token}\"\n            })\n\n            print(f\"  \ub85c\uadf8\uc778 \uc131\uacf5\")\n            print(f\"  \ud1a0\ud070 \ub9cc\ub8cc \uc2dc\uac04: {self.token_expires_at}\")\n            return True\n\n        except Exception as e:\n            print(f\"  \ub85c\uadf8\uc778 \uc2e4\ud328: {e}\")\n            return False\n\n    def api_key_auth(self, api_key, api_secret=None):\n        \"\"\"API \ud0a4 \uc778\uc99d\"\"\"\n        print(f\"\\n12. API \ud0a4 \uc778\uc99d:\")\n\n        if api_secret:\n            # HMAC \uc11c\uba85\uc744 \uc0ac\uc6a9\ud55c \uc778\uc99d\n            timestamp = str(int(datetime.now().timestamp()))\n            message = f\"{timestamp}{api_key}\"\n            signature = hmac.new(\n                api_secret.encode(),\n                message.encode(),\n                hashlib.sha256\n            ).hexdigest()\n\n            self.session.headers.update({\n                'X-API-Key': api_key,\n                'X-Timestamp': timestamp,\n                'X-Signature': signature\n            })\n\n            print(f\"  HMAC \uc11c\uba85 \uae30\ubc18 \uc778\uc99d \uc124\uc815\")\n            print(f\"  \uc11c\uba85: {signature[:20]}...\")\n        else:\n            # \ub2e8\uc21c API \ud0a4 \uc778\uc99d\n            self.session.headers.update({\n                'X-API-Key': api_key\n            })\n            print(f\"  API \ud0a4 \uc778\uc99d \uc124\uc815\")\n\n    def refresh_access_token(self):\n        \"\"\"\uc561\uc138\uc2a4 \ud1a0\ud070 \uac31\uc2e0\"\"\"\n        if not self.refresh_token:\n            print(\"  \ub9ac\ud504\ub808\uc2dc \ud1a0\ud070\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n            return False\n\n        try:\n            refresh_data = {\n                'grant_type': 'refresh_token',\n                'refresh_token': self.refresh_token\n            }\n\n            # \uc2dc\ubbac\ub808\uc774\uc158: \ud1a0\ud070 \uac31\uc2e0\n            new_token_data = {\n                'access_token': 'new_simulated_access_token_54321',\n                'expires_in': 3600\n            }\n\n            self.access_token = new_token_data['access_token']\n            self.token_expires_at = datetime.now() + timedelta(seconds=new_token_data['expires_in'])\n\n            self.session.headers.update({\n                'Authorization': f\"Bearer {self.access_token}\"\n            })\n\n            print(f\"  \ud1a0\ud070 \uac31\uc2e0 \uc131\uacf5\")\n            return True\n\n        except Exception as e:\n            print(f\"  \ud1a0\ud070 \uac31\uc2e0 \uc2e4\ud328: {e}\")\n            return False\n\n    def make_secure_request(self, method, endpoint, **kwargs):\n        \"\"\"\ubcf4\uc548 \uc694\uccad\"\"\"\n        # \ud1a0\ud070 \ub9cc\ub8cc \uccb4\ud06c\n        if self.token_expires_at and datetime.now() &gt;= self.token_expires_at:\n            print(\"  \ud1a0\ud070\uc774 \ub9cc\ub8cc\ub418\uc5b4 \uac31\uc2e0\ud569\ub2c8\ub2e4...\")\n            if not self.refresh_access_token():\n                print(\"  \ud1a0\ud070 \uac31\uc2e0 \uc2e4\ud328\")\n                return None\n\n        # \uc694\uccad \uc2e4\ud589\n        url = f\"{self.base_url}/{endpoint.lstrip('/')}\"\n\n        try:\n            response = self.session.request(method, url, **kwargs)\n            response.raise_for_status()\n            return response\n        except requests.exceptions.RequestException as e:\n            print(f\"  \ubcf4\uc548 \uc694\uccad \uc2e4\ud328: {e}\")\n            return None\n\ndef demonstrate_api_authentication():\n    \"\"\"API \uc778\uc99d \uc2dc\uc5f0\"\"\"\n\n    auth_client = AuthenticatedAPIClient('https://api.example.com')\n\n    # OAuth2 \ub85c\uadf8\uc778 \uc2dc\ubbac\ub808\uc774\uc158\n    success = auth_client.oauth2_login(\n        client_id='my_app_client_id',\n        client_secret='my_app_client_secret',\n        username='test_user',\n        password='secure_password'\n    )\n\n    if success:\n        # \uc778\uc99d\ub41c \uc694\uccad \uc2dc\ubbac\ub808\uc774\uc158\n        print(f\"\\n  \uc778\uc99d\ub41c API \uc694\uccad \uc2dc\ubbac\ub808\uc774\uc158:\")\n        print(f\"    \ud604\uc7ac \uc561\uc138\uc2a4 \ud1a0\ud070: {auth_client.access_token[:20]}...\")\n\n    # API \ud0a4 \uc778\uc99d \uc608\uc81c\n    auth_client.api_key_auth(\n        api_key='my_api_key_12345',\n        api_secret='my_api_secret_67890'\n    )\n\ndemonstrate_api_authentication()\n</code></pre>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#5-http","title":"5. \ube44\ub3d9\uae30 HTTP \uc694\uccad","text":""},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#51-aiohttp","title":"5.1 aiohttp\ub97c \uc0ac\uc6a9\ud55c \ube44\ub3d9\uae30 \uc2a4\ud06c\ub798\ud551","text":"<pre><code>print(\"\\n=== \ube44\ub3d9\uae30 HTTP \uc694\uccad ===\")\n\nimport asyncio\nimport concurrent.futures\nfrom concurrent.futures import ThreadPoolExecutor\n\n# aiohttp\uac00 \uc5c6\ub294 \uacbd\uc6b0\ub97c \uc704\ud55c \uc2dc\ubbac\ub808\uc774\uc158\nclass AsyncHTTPSimulator:\n    \"\"\"\ube44\ub3d9\uae30 HTTP \uc2dc\ubbac\ub808\uc774\ud130\"\"\"\n\n    def __init__(self):\n        self.session = None\n\n    async def create_session(self):\n        \"\"\"\uc138\uc158 \uc0dd\uc131 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        print(\"  \ube44\ub3d9\uae30 \uc138\uc158 \uc0dd\uc131\")\n        await asyncio.sleep(0.1)  # \uc2dc\ubbac\ub808\uc774\uc158 \uc9c0\uc5f0\n        self.session = \"simulated_session\"\n\n    async def get(self, url):\n        \"\"\"\ube44\ub3d9\uae30 GET \uc694\uccad \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        # \uc2e4\uc81c \ub124\ud2b8\uc6cc\ud06c \uc9c0\uc5f0 \uc2dc\ubbac\ub808\uc774\uc158\n        await asyncio.sleep(0.5 + len(url) % 3 * 0.1)\n\n        return {\n            'url': url,\n            'status': 200,\n            'content': f\"Content from {url}\",\n            'headers': {'content-type': 'text/html'}\n        }\n\n    async def close(self):\n        \"\"\"\uc138\uc158 \uc885\ub8cc\"\"\"\n        print(\"  \ube44\ub3d9\uae30 \uc138\uc158 \uc885\ub8cc\")\n        await asyncio.sleep(0.1)\n\nclass AsyncWebScraper:\n    \"\"\"\ube44\ub3d9\uae30 \uc6f9 \uc2a4\ud06c\ub798\ud37c\"\"\"\n\n    def __init__(self, max_concurrent=10):\n        self.max_concurrent = max_concurrent\n        self.http_client = AsyncHTTPSimulator()\n        self.semaphore = asyncio.Semaphore(max_concurrent)\n\n    async def fetch_page(self, url):\n        \"\"\"\ub2e8\uc77c \ud398\uc774\uc9c0 \uac00\uc838\uc624\uae30\"\"\"\n        async with self.semaphore:  # \ub3d9\uc2dc \uc694\uccad \uc218 \uc81c\ud55c\n            try:\n                response = await self.http_client.get(url)\n                return {\n                    'url': url,\n                    'status': 'success',\n                    'data': response\n                }\n            except Exception as e:\n                return {\n                    'url': url,\n                    'status': 'error',\n                    'error': str(e)\n                }\n\n    async def fetch_multiple_pages(self, urls):\n        \"\"\"\uc5ec\ub7ec \ud398\uc774\uc9c0 \ub3d9\uc2dc \uac00\uc838\uc624\uae30\"\"\"\n        print(\"13. \ube44\ub3d9\uae30 \uc6f9 \uc2a4\ud06c\ub798\ud551:\")\n        print(f\"  {len(urls)}\uac1c URL\uc744 \ub3d9\uc2dc\uc5d0 \ucc98\ub9ac\ud569\ub2c8\ub2e4 (\ucd5c\ub300 {self.max_concurrent}\uac1c \ub3d9\uc2dc \uc694\uccad)\")\n\n        start_time = asyncio.get_event_loop().time()\n\n        # \uc138\uc158 \uc0dd\uc131\n        await self.http_client.create_session()\n\n        # \ubaa8\ub4e0 URL\uc744 \ube44\ub3d9\uae30\ub85c \ucc98\ub9ac\n        tasks = [self.fetch_page(url) for url in urls]\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        end_time = asyncio.get_event_loop().time()\n\n        # \uacb0\uacfc \ubd84\uc11d\n        successful = [r for r in results if isinstance(r, dict) and r.get('status') == 'success']\n        failed = [r for r in results if isinstance(r, dict) and r.get('status') == 'error']\n\n        print(f\"  \ucd1d \ucc98\ub9ac \uc2dc\uac04: {end_time - start_time:.2f}\ucd08\")\n        print(f\"  \uc131\uacf5: {len(successful)}\uac1c, \uc2e4\ud328: {len(failed)}\uac1c\")\n\n        # \uc138\uc158 \uc885\ub8cc\n        await self.http_client.close()\n\n        return results\n\n    async def scrape_with_rate_limiting(self, urls, requests_per_second=2):\n        \"\"\"\uc18d\ub3c4 \uc81c\ud55c\uc774 \uc788\ub294 \uc2a4\ud06c\ub798\ud551\"\"\"\n        print(f\"\\n14. \uc18d\ub3c4 \uc81c\ud55c \uc2a4\ud06c\ub798\ud551 (\ucd08\ub2f9 {requests_per_second}\uac1c \uc694\uccad):\")\n\n        interval = 1.0 / requests_per_second\n        results = []\n\n        await self.http_client.create_session()\n\n        for i, url in enumerate(urls):\n            if i &gt; 0:\n                await asyncio.sleep(interval)\n\n            result = await self.fetch_page(url)\n            results.append(result)\n            print(f\"  \uc9c4\ud589: {i+1}/{len(urls)} - {url}\")\n\n        await self.http_client.close()\n\n        return results\n\nasync def demonstrate_async_scraping():\n    \"\"\"\ube44\ub3d9\uae30 \uc2a4\ud06c\ub798\ud551 \uc2dc\uc5f0\"\"\"\n\n    scraper = AsyncWebScraper(max_concurrent=5)\n\n    # \ud14c\uc2a4\ud2b8 URL \ubaa9\ub85d\n    test_urls = [\n        'https://example.com/page1',\n        'https://example.com/page2',\n        'https://example.com/page3',\n        'https://example.com/page4',\n        'https://example.com/page5',\n        'https://example.com/page6',\n        'https://example.com/page7',\n        'https://example.com/page8'\n    ]\n\n    # \ub3d9\uc2dc \uc2a4\ud06c\ub798\ud551\n    results = await scraper.fetch_multiple_pages(test_urls[:5])\n\n    # \uc18d\ub3c4 \uc81c\ud55c \uc2a4\ud06c\ub798\ud551\n    limited_results = await scraper.scrape_with_rate_limiting(test_urls[:3], requests_per_second=1)\n\n# \ube44\ub3d9\uae30 \ud568\uc218 \uc2e4\ud589\ntry:\n    asyncio.run(demonstrate_async_scraping())\nexcept Exception as e:\n    print(f\"\ube44\ub3d9\uae30 \uc2e4\ud589 \uc624\ub958: {e}\")\n</code></pre>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#52-","title":"5.2 \ub3d9\uae30-\ube44\ub3d9\uae30 \ud558\uc774\ube0c\ub9ac\ub4dc \uc811\uadfc","text":"<pre><code>print(\"\\n=== \ub3d9\uae30-\ube44\ub3d9\uae30 \ud558\uc774\ube0c\ub9ac\ub4dc \uc811\uadfc ===\")\n\nclass HybridScraper:\n    \"\"\"\ub3d9\uae30/\ube44\ub3d9\uae30 \ud558\uc774\ube0c\ub9ac\ub4dc \uc2a4\ud06c\ub798\ud37c\"\"\"\n\n    def __init__(self, max_workers=4):\n        self.max_workers = max_workers\n        self.session = requests.Session()\n\n    def fetch_single_url(self, url):\n        \"\"\"\ub3d9\uae30 \ubc29\uc2dd\uc73c\ub85c \ub2e8\uc77c URL \ucc98\ub9ac\"\"\"\n        try:\n            response = self.session.get(url, timeout=10)\n            return {\n                'url': url,\n                'status_code': response.status_code,\n                'content_length': len(response.content),\n                'success': True\n            }\n        except Exception as e:\n            return {\n                'url': url,\n                'error': str(e),\n                'success': False\n            }\n\n    def parallel_scraping_with_threads(self, urls):\n        \"\"\"\uc2a4\ub808\ub4dc\ud480\uc744 \uc0ac\uc6a9\ud55c \ubcd1\ub82c \uc2a4\ud06c\ub798\ud551\"\"\"\n        print(\"15. \uc2a4\ub808\ub4dc\ud480 \uae30\ubc18 \ubcd1\ub82c \uc2a4\ud06c\ub798\ud551:\")\n\n        start_time = time.time()\n\n        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:\n            # \ubaa8\ub4e0 URL\uc744 \uc2a4\ub808\ub4dc\ud480\uc5d0 \uc81c\ucd9c\n            future_to_url = {\n                executor.submit(self.fetch_single_url, url): url \n                for url in urls\n            }\n\n            results = []\n\n            # \uc644\ub8cc\ub41c \uc791\uc5c5\ub4e4 \uc218\uc9d1\n            for future in concurrent.futures.as_completed(future_to_url):\n                url = future_to_url[future]\n                try:\n                    result = future.result()\n                    results.append(result)\n\n                    status = \"\uc131\uacf5\" if result['success'] else \"\uc2e4\ud328\"\n                    print(f\"  {url}: {status}\")\n\n                except Exception as e:\n                    print(f\"  {url}: \uc608\uc678 \ubc1c\uc0dd - {e}\")\n                    results.append({\n                        'url': url,\n                        'error': str(e),\n                        'success': False\n                    })\n\n        end_time = time.time()\n\n        successful = [r for r in results if r.get('success')]\n        failed = [r for r in results if not r.get('success')]\n\n        print(f\"  \ucd1d \ucc98\ub9ac \uc2dc\uac04: {end_time - start_time:.2f}\ucd08\")\n        print(f\"  \uc131\uacf5: {len(successful)}\uac1c, \uc2e4\ud328: {len(failed)}\uac1c\")\n\n        return results\n\n    def adaptive_scraping(self, urls, fast_threshold=100):\n        \"\"\"\uc801\uc751\ud615 \uc2a4\ud06c\ub798\ud551 (\ube60\ub978 \uc751\ub2f5\uc740 \ub3d9\uae30, \ub290\ub9b0 \uc751\ub2f5\uc740 \ube44\ub3d9\uae30)\"\"\"\n        print(f\"\\n16. \uc801\uc751\ud615 \uc2a4\ud06c\ub798\ud551:\")\n\n        fast_urls = []\n        slow_urls = []\n\n        # URL \ubd84\ub958 (\uc2e4\uc81c\ub85c\ub294 \uc774\uc804 \uc131\ub2a5 \ub370\uc774\ud130 \uae30\ubc18)\n        for i, url in enumerate(urls):\n            # \uc2dc\ubbac\ub808\uc774\uc158: \uc9e7\uc740 URL\uc740 \ube60\ub974\ub2e4\uace0 \uac00\uc815\n            if len(url) &lt; fast_threshold:\n                fast_urls.append(url)\n            else:\n                slow_urls.append(url)\n\n        print(f\"  \ube60\ub978 \ucc98\ub9ac URL: {len(fast_urls)}\uac1c\")\n        print(f\"  \ub290\ub9b0 \ucc98\ub9ac URL: {len(slow_urls)}\uac1c\")\n\n        results = []\n\n        # \ube60\ub978 URL\ub4e4\uc740 \ub3d9\uae30\uc801\uc73c\ub85c \ucc98\ub9ac\n        if fast_urls:\n            print(f\"  \ube60\ub978 URL\ub4e4\uc744 \ub3d9\uae30\uc801\uc73c\ub85c \ucc98\ub9ac...\")\n            for url in fast_urls:\n                result = self.fetch_single_url(url)\n                results.append(result)\n\n        # \ub290\ub9b0 URL\ub4e4\uc740 \ubcd1\ub82c\ub85c \ucc98\ub9ac\n        if slow_urls:\n            print(f\"  \ub290\ub9b0 URL\ub4e4\uc744 \ubcd1\ub82c\ub85c \ucc98\ub9ac...\")\n            parallel_results = self.parallel_scraping_with_threads(slow_urls)\n            results.extend(parallel_results)\n\n        return results\n\ndef demonstrate_hybrid_scraping():\n    \"\"\"\ud558\uc774\ube0c\ub9ac\ub4dc \uc2a4\ud06c\ub798\ud551 \uc2dc\uc5f0\"\"\"\n\n    scraper = HybridScraper(max_workers=3)\n\n    # \ud14c\uc2a4\ud2b8 URL (\uc2e4\uc81c\ub85c\ub294 \uc678\ubd80 API \ud638\ucd9c)\n    test_urls = [\n        'https://httpbin.org/delay/1',  # 1\ucd08 \uc9c0\uc5f0\n        'https://httpbin.org/delay/2',  # 2\ucd08 \uc9c0\uc5f0\n        'https://httpbin.org/get',      # \ube60\ub978 \uc751\ub2f5\n        'https://httpbin.org/json',     # \ube60\ub978 \uc751\ub2f5\n        'https://httpbin.org/delay/1'   # 1\ucd08 \uc9c0\uc5f0\n    ]\n\n    # \uc2dc\ubbac\ub808\uc774\uc158\uc744 \uc704\ud574 \uac04\ub2e8\ud55c URL \uc0ac\uc6a9\n    simple_urls = [\n        'https://example.com/fast1',\n        'https://example.com/fast2',\n        'https://very-long-domain-name-that-simulates-slow-response.com/slow1',\n        'https://another-very-long-domain-name-for-slow-response.com/slow2'\n    ]\n\n    # \uc2a4\ub808\ub4dc\ud480 \ubcd1\ub82c \uc2a4\ud06c\ub798\ud551 \uc2dc\ubbac\ub808\uc774\uc158\n    print(\"  \uc2a4\ub808\ub4dc\ud480 \ubcd1\ub82c \ucc98\ub9ac \uc2dc\ubbac\ub808\uc774\uc158:\")\n    simulated_results = []\n    for url in simple_urls:\n        result = {\n            'url': url,\n            'status_code': 200,\n            'content_length': 1024,\n            'success': True\n        }\n        simulated_results.append(result)\n        print(f\"    {url}: \uc131\uacf5\")\n\n    print(f\"    \ucd1d {len(simulated_results)}\uac1c URL \ucc98\ub9ac \uc644\ub8cc\")\n\n    # \uc801\uc751\ud615 \uc2a4\ud06c\ub798\ud551 \uc2dc\ubbac\ub808\uc774\uc158\n    adaptive_results = scraper.adaptive_scraping(simple_urls)\n\ndemonstrate_hybrid_scraping()\n</code></pre>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#6","title":"6. \uc6f9 \ud06c\ub864\ub9c1 \uc5d0\ud2f0\ucf13\uacfc \ubaa8\ubc94 \uc0ac\ub840","text":""},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#61","title":"6.1 \ud06c\ub864\ub9c1 \uc5d0\ud2f0\ucf13","text":"<pre><code>print(\"\\n=== \uc6f9 \ud06c\ub864\ub9c1 \uc5d0\ud2f0\ucf13\uacfc \ubaa8\ubc94 \uc0ac\ub840 ===\")\n\nimport time\nimport random\nfrom urllib.robotparser import RobotFileParser\nfrom collections import defaultdict\n\nclass EthicalScraper:\n    \"\"\"\uc724\ub9ac\uc801 \uc2a4\ud06c\ub798\ud551 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, user_agent=\"EthicalBot/1.0\", respect_robots=True):\n        self.user_agent = user_agent\n        self.respect_robots = respect_robots\n        self.session = requests.Session()\n        self.session.headers.update({'User-Agent': user_agent})\n\n        # \uc694\uccad \uc81c\ud55c\n        self.request_history = defaultdict(list)\n        self.min_delay = 1.0  # \ucd5c\uc18c 1\ucd08 \uc9c0\uc5f0\n        self.max_requests_per_minute = 30\n\n        # robots.txt \uce90\uc2dc\n        self.robots_cache = {}\n\n    def check_robots_txt(self, url):\n        \"\"\"robots.txt \ud655\uc778\"\"\"\n        print(\"17. robots.txt \uc900\uc218:\")\n\n        if not self.respect_robots:\n            return True\n\n        try:\n            parsed_url = urlparse(url)\n            base_url = f\"{parsed_url.scheme}://{parsed_url.netloc}\"\n\n            if base_url not in self.robots_cache:\n                robots_url = urljoin(base_url, '/robots.txt')\n                print(f\"  robots.txt \ud655\uc778: {robots_url}\")\n\n                # \uc2dc\ubbac\ub808\uc774\uc158: robots.txt \ub0b4\uc6a9\n                simulated_robots = \"\"\"\nUser-agent: *\nDisallow: /admin/\nDisallow: /private/\nAllow: /public/\nCrawl-delay: 1\n\nUser-agent: EthicalBot\nAllow: /\nCrawl-delay: 2\n                \"\"\".strip()\n\n                print(f\"  robots.txt \ub0b4\uc6a9 (\uc2dc\ubbac\ub808\uc774\uc158):\")\n                for line in simulated_robots.split('\\n')[:6]:\n                    print(f\"    {line}\")\n\n                # \uc2e4\uc81c\ub85c\ub294 RobotFileParser \uc0ac\uc6a9\n                # rp = RobotFileParser()\n                # rp.set_url(robots_url)\n                # rp.read()\n                # self.robots_cache[base_url] = rp\n\n                # \uc2dc\ubbac\ub808\uc774\uc158: \ud5c8\uc6a9\ub41c \uacbd\ub85c \uccb4\ud06c\n                if '/admin/' in url or '/private/' in url:\n                    print(f\"  \ucc28\ub2e8\ub41c \uacbd\ub85c: {url}\")\n                    return False\n                else:\n                    print(f\"  \ud5c8\uc6a9\ub41c \uacbd\ub85c: {url}\")\n                    return True\n\n        except Exception as e:\n            print(f\"  robots.txt \ud655\uc778 \uc2e4\ud328: {e}\")\n            return True  # \ud655\uc778 \uc2e4\ud328 \uc2dc \ud5c8\uc6a9\n\n        return True\n\n    def rate_limit_check(self, domain):\n        \"\"\"\uc694\uccad \uc81c\ud55c \ud655\uc778\"\"\"\n        current_time = time.time()\n\n        # 1\ubd84 \uc774\ub0b4\uc758 \uc694\uccad \uae30\ub85d\ub9cc \uc720\uc9c0\n        self.request_history[domain] = [\n            req_time for req_time in self.request_history[domain]\n            if current_time - req_time &lt; 60\n        ]\n\n        # \ubd84\ub2f9 \uc694\uccad \uc218 \ud655\uc778\n        if len(self.request_history[domain]) &gt;= self.max_requests_per_minute:\n            wait_time = 60 - (current_time - self.request_history[domain][0])\n            print(f\"  \uc694\uccad \uc81c\ud55c \ub3c4\ub2ec. {wait_time:.1f}\ucd08 \ub300\uae30 \ud544\uc694\")\n            return False\n\n        # \ub9c8\uc9c0\ub9c9 \uc694\uccad\uc73c\ub85c\ubd80\ud130 \ucd5c\uc18c \uc9c0\uc5f0 \uc2dc\uac04 \ud655\uc778\n        if self.request_history[domain]:\n            last_request = self.request_history[domain][-1]\n            time_since_last = current_time - last_request\n\n            if time_since_last &lt; self.min_delay:\n                wait_time = self.min_delay - time_since_last\n                print(f\"  \ucd5c\uc18c \uc9c0\uc5f0 \uc2dc\uac04 \ubbf8\ucda9\uc871. {wait_time:.1f}\ucd08 \ub300\uae30\")\n                time.sleep(wait_time)\n\n        return True\n\n    def polite_request(self, url):\n        \"\"\"\uc815\uc911\ud55c \uc694\uccad\"\"\"\n        print(f\"\\n18. \uc815\uc911\ud55c \ud06c\ub864\ub9c1:\")\n\n        parsed_url = urlparse(url)\n        domain = parsed_url.netloc\n\n        # robots.txt \ud655\uc778\n        if not self.check_robots_txt(url):\n            return None\n\n        # \uc694\uccad \uc81c\ud55c \ud655\uc778\n        if not self.rate_limit_check(domain):\n            return None\n\n        try:\n            # \uc694\uccad \uc2e4\ud589\n            print(f\"  \uc694\uccad \uc2e4\ud589: {url}\")\n            response = self.session.get(url, timeout=10)\n\n            # \uc694\uccad \uae30\ub85d\n            self.request_history[domain].append(time.time())\n\n            # \uc11c\ubc84 \ubd80\ud558 \ud655\uc778\n            if response.status_code == 429:  # Too Many Requests\n                retry_after = response.headers.get('Retry-After', 60)\n                print(f\"  \uc11c\ubc84 \uacfc\ubd80\ud558 \uac10\uc9c0. {retry_after}\ucd08 \ud6c4 \uc7ac\uc2dc\ub3c4\")\n                time.sleep(int(retry_after))\n                return None\n\n            print(f\"  \uc751\ub2f5 \uc218\uc2e0: {response.status_code}\")\n            return response\n\n        except Exception as e:\n            print(f\"  \uc694\uccad \uc2e4\ud328: {e}\")\n            return None\n\n    def bulk_scraping_with_ethics(self, urls):\n        \"\"\"\uc724\ub9ac\uc801 \ub300\ub7c9 \uc2a4\ud06c\ub798\ud551\"\"\"\n        print(f\"\\n19. \uc724\ub9ac\uc801 \ub300\ub7c9 \uc2a4\ud06c\ub798\ud551:\")\n        print(f\"  \ucd1d {len(urls)}\uac1c URL \ucc98\ub9ac \uc608\uc815\")\n\n        results = []\n\n        for i, url in enumerate(urls):\n            print(f\"  \uc9c4\ud589: {i+1}/{len(urls)}\")\n\n            response = self.polite_request(url)\n\n            if response:\n                results.append({\n                    'url': url,\n                    'status': 'success',\n                    'status_code': response.status_code\n                })\n            else:\n                results.append({\n                    'url': url,\n                    'status': 'skipped'\n                })\n\n            # \ubc30\uce58 \uac04 \ud734\uc2dd\n            if (i + 1) % 10 == 0:\n                print(f\"  \ubc30\uce58 \uc644\ub8cc. 5\ucd08 \ud734\uc2dd...\")\n                time.sleep(5)\n\n        successful = [r for r in results if r['status'] == 'success']\n        print(f\"  \uc644\ub8cc: \uc131\uacf5 {len(successful)}\uac1c, \uac74\ub108\ub700 {len(results) - len(successful)}\uac1c\")\n\n        return results\n\ndef demonstrate_ethical_scraping():\n    \"\"\"\uc724\ub9ac\uc801 \uc2a4\ud06c\ub798\ud551 \uc2dc\uc5f0\"\"\"\n\n    scraper = EthicalScraper(\n        user_agent=\"PythonTutorial-EthicalBot/1.0 (+https://example.com/bot-info)\",\n        respect_robots=True\n    )\n\n    # \ud14c\uc2a4\ud2b8 URL\ub4e4\n    test_urls = [\n        'https://example.com/public/page1',\n        'https://example.com/public/page2',\n        'https://example.com/admin/secret',  # robots.txt\uc5d0\uc11c \ucc28\ub2e8\n        'https://example.com/public/page3'\n    ]\n\n    # \uc724\ub9ac\uc801 \uc2a4\ud06c\ub798\ud551 \uc2e4\ud589\n    results = scraper.bulk_scraping_with_ethics(test_urls[:2])  # \ucc98\uc74c 2\uac1c\ub9cc \ud14c\uc2a4\ud2b8\n\ndemonstrate_ethical_scraping()\n</code></pre>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#62","title":"6.2 \uc5d0\ub7ec \ucc98\ub9ac\uc640 \ubcf5\uad6c \uc804\ub7b5","text":"<pre><code>print(\"\\n=== \uc5d0\ub7ec \ucc98\ub9ac\uc640 \ubcf5\uad6c \uc804\ub7b5 ===\")\n\nclass RobustScraper:\n    \"\"\"\uacac\uace0\ud55c \uc2a4\ud06c\ub798\ud551 \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self):\n        self.session = requests.Session()\n        self.retry_config = {\n            'max_retries': 3,\n            'backoff_factor': 2,\n            'retry_status_codes': [500, 502, 503, 504, 429]\n        }\n\n    def exponential_backoff(self, attempt):\n        \"\"\"\uc9c0\uc218 \ubc31\uc624\ud504 \uacc4\uc0b0\"\"\"\n        delay = self.retry_config['backoff_factor'] ** attempt\n        jitter = random.uniform(0, 0.1) * delay  # \uc9c0\ud130 \ucd94\uac00\n        return delay + jitter\n\n    def robust_request(self, url, max_retries=None):\n        \"\"\"\uacac\uace0\ud55c \uc694\uccad (\uc7ac\uc2dc\ub3c4 \ud3ec\ud568)\"\"\"\n        print(f\"20. \uacac\uace0\ud55c \uc694\uccad \ucc98\ub9ac:\")\n\n        max_retries = max_retries or self.retry_config['max_retries']\n\n        for attempt in range(max_retries + 1):\n            try:\n                print(f\"  \uc2dc\ub3c4 {attempt + 1}/{max_retries + 1}: {url}\")\n\n                response = self.session.get(url, timeout=10)\n\n                # \uc7ac\uc2dc\ub3c4\uac00 \ud544\uc694\ud55c \uc0c1\ud0dc \ucf54\ub4dc \ud655\uc778\n                if response.status_code in self.retry_config['retry_status_codes']:\n                    if attempt &lt; max_retries:\n                        delay = self.exponential_backoff(attempt)\n                        print(f\"    \uc0c1\ud0dc \ucf54\ub4dc {response.status_code}: {delay:.1f}\ucd08 \ud6c4 \uc7ac\uc2dc\ub3c4\")\n                        time.sleep(delay)\n                        continue\n                    else:\n                        print(f\"    \ucd5c\ub300 \uc7ac\uc2dc\ub3c4 \ud69f\uc218 \ucd08\uacfc (\uc0c1\ud0dc \ucf54\ub4dc: {response.status_code})\")\n                        return None\n\n                # \uc131\uacf5\uc801\uc778 \uc751\ub2f5\n                response.raise_for_status()\n                print(f\"    \uc131\uacf5: {response.status_code}\")\n                return response\n\n            except requests.exceptions.Timeout:\n                if attempt &lt; max_retries:\n                    delay = self.exponential_backoff(attempt)\n                    print(f\"    \ud0c0\uc784\uc544\uc6c3: {delay:.1f}\ucd08 \ud6c4 \uc7ac\uc2dc\ub3c4\")\n                    time.sleep(delay)\n                else:\n                    print(f\"    \ud0c0\uc784\uc544\uc6c3: \ucd5c\ub300 \uc7ac\uc2dc\ub3c4 \ud69f\uc218 \ucd08\uacfc\")\n                    return None\n\n            except requests.exceptions.ConnectionError as e:\n                if attempt &lt; max_retries:\n                    delay = self.exponential_backoff(attempt)\n                    print(f\"    \uc5f0\uacb0 \uc624\ub958: {delay:.1f}\ucd08 \ud6c4 \uc7ac\uc2dc\ub3c4\")\n                    time.sleep(delay)\n                else:\n                    print(f\"    \uc5f0\uacb0 \uc624\ub958: \ucd5c\ub300 \uc7ac\uc2dc\ub3c4 \ud69f\uc218 \ucd08\uacfc - {e}\")\n                    return None\n\n            except requests.exceptions.RequestException as e:\n                print(f\"    \uc694\uccad \uc2e4\ud328: {e}\")\n                return None\n\n        return None\n\n    def circuit_breaker_scraping(self, urls, failure_threshold=0.5):\n        \"\"\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ud328\ud134\uc744 \uc0ac\uc6a9\ud55c \uc2a4\ud06c\ub798\ud551\"\"\"\n        print(f\"\\n21. \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ud328\ud134:\")\n\n        results = []\n        failures = 0\n        total_attempts = 0\n        circuit_open = False\n\n        for url in urls:\n            total_attempts += 1\n\n            # \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc0c1\ud0dc \ud655\uc778\n            if circuit_open:\n                failure_rate = failures / total_attempts\n                if failure_rate &gt; failure_threshold:\n                    print(f\"  \uc11c\ud0b7 \uc5f4\ub9bc: \uc2e4\ud328\uc728 {failure_rate:.1%} (\uc784\uacc4\uac12: {failure_threshold:.1%})\")\n                    results.append({\n                        'url': url,\n                        'status': 'circuit_open',\n                        'error': 'Circuit breaker is open'\n                    })\n                    continue\n                else:\n                    print(f\"  \uc11c\ud0b7 \ub2eb\ud798: \uc2e4\ud328\uc728\uc774 \uc784\uacc4\uac12 \uc774\ud558\")\n                    circuit_open = False\n\n            # \uc694\uccad \uc2dc\ub3c4\n            response = self.robust_request(url, max_retries=1)\n\n            if response:\n                results.append({\n                    'url': url,\n                    'status': 'success',\n                    'status_code': response.status_code\n                })\n            else:\n                failures += 1\n                failure_rate = failures / total_attempts\n\n                if failure_rate &gt; failure_threshold:\n                    circuit_open = True\n\n                results.append({\n                    'url': url,\n                    'status': 'failed',\n                    'error': 'Request failed'\n                })\n\n        successful = [r for r in results if r['status'] == 'success']\n        failed = [r for r in results if r['status'] == 'failed']\n        skipped = [r for r in results if r['status'] == 'circuit_open']\n\n        print(f\"  \ucd5c\uc885 \uacb0\uacfc: \uc131\uacf5 {len(successful)}\uac1c, \uc2e4\ud328 {len(failed)}\uac1c, \uac74\ub108\ub700 {len(skipped)}\uac1c\")\n\n        return results\n\ndef demonstrate_robust_scraping():\n    \"\"\"\uacac\uace0\ud55c \uc2a4\ud06c\ub798\ud551 \uc2dc\uc5f0\"\"\"\n\n    scraper = RobustScraper()\n\n    # \ub2e4\uc591\ud55c \uc0c1\ud669 \uc2dc\ubbac\ub808\uc774\uc158 URL\n    test_scenarios = [\n        'https://httpbin.org/status/200',  # \uc131\uacf5\n        'https://httpbin.org/status/500',  # \uc11c\ubc84 \uc624\ub958 (\uc7ac\uc2dc\ub3c4)\n        'https://httpbin.org/status/404',  # \ud074\ub77c\uc774\uc5b8\ud2b8 \uc624\ub958 (\uc7ac\uc2dc\ub3c4 \uc548\ud568)\n        'https://invalid-domain-that-does-not-exist.com',  # \uc5f0\uacb0 \uc624\ub958\n    ]\n\n    # \uc2dc\ubbac\ub808\uc774\uc158\uc744 \uc704\ud574 \uac04\ub2e8\ud55c URL \uc0ac\uc6a9\n    simple_test_urls = [\n        'https://example.com/success',\n        'https://example.com/server-error',\n        'https://example.com/not-found',\n        'https://invalid-domain.test'\n    ]\n\n    print(\"  \uacac\uace0\ud55c \uc694\uccad \uc2dc\ubbac\ub808\uc774\uc158:\")\n    for url in simple_test_urls[:2]:\n        if 'server-error' in url:\n            print(f\"    {url}: \uc11c\ubc84 \uc624\ub958 \uc2dc\ubbac\ub808\uc774\uc158 (\uc7ac\uc2dc\ub3c4 \ud544\uc694)\")\n        else:\n            print(f\"    {url}: \uc131\uacf5 \uc2dc\ubbac\ub808\uc774\uc158\")\n\n    # \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc2dc\ubbac\ub808\uc774\uc158\n    circuit_test_urls = [\n        'https://example.com/good1',\n        'https://example.com/bad1',\n        'https://example.com/bad2',\n        'https://example.com/good2',\n        'https://example.com/bad3'\n    ]\n\n    print(f\"\\n  \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc2dc\ubbac\ub808\uc774\uc158:\")\n    simulated_results = []\n    failures = 0\n\n    for i, url in enumerate(circuit_test_urls):\n        is_bad = 'bad' in url\n\n        if is_bad:\n            failures += 1\n            status = 'failed'\n            print(f\"    {url}: \uc2e4\ud328 \uc2dc\ubbac\ub808\uc774\uc158\")\n        else:\n            status = 'success'\n            print(f\"    {url}: \uc131\uacf5 \uc2dc\ubbac\ub808\uc774\uc158\")\n\n        failure_rate = failures / (i + 1)\n        if failure_rate &gt; 0.5 and i &gt;= 2:\n            print(f\"      \uc11c\ud0b7 \uc5f4\ub9bc (\uc2e4\ud328\uc728: {failure_rate:.1%})\")\n\n        simulated_results.append({\n            'url': url,\n            'status': status\n        })\n\n    successful = [r for r in simulated_results if r['status'] == 'success']\n    failed = [r for r in simulated_results if r['status'] == 'failed']\n    print(f\"    \uacb0\uacfc: \uc131\uacf5 {len(successful)}\uac1c, \uc2e4\ud328 {len(failed)}\uac1c\")\n\ndemonstrate_robust_scraping()\n</code></pre>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#7","title":"7. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#1","title":"\uc5f0\uc2b5 1: \ub274\uc2a4 \uc0ac\uc774\ud2b8 \uc2a4\ud06c\ub798\ud37c","text":"<p>\uc5ec\ub7ec \ub274\uc2a4 \uc0ac\uc774\ud2b8\uc5d0\uc11c \ud5e4\ub4dc\ub77c\uc778\uc744 \uc218\uc9d1\ud558\ub294 \uc2a4\ud06c\ub798\ud37c\ub97c \uad6c\ud604\ud558\uc138\uc694: - \ub2e4\uc591\ud55c \ub274\uc2a4 \uc0ac\uc774\ud2b8 \uc9c0\uc6d0 - \uc911\ubcf5 \uc81c\uac70 \ubc0f \ub370\uc774\ud130 \uc815\uaddc\ud654 - \ud06c\ub864\ub9c1 \uc5d0\ud2f0\ucf13 \uc900\uc218 - \uacb0\uacfc\ub97c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc800\uc7a5</p>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#2-api","title":"\uc5f0\uc2b5 2: API \ub370\uc774\ud130 \uc218\uc9d1\uae30","text":"<p>\uc5ec\ub7ec \uacf5\uac1c API\ub97c \ud65c\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud558\uace0 \ubd84\uc11d\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694: - API \ud0a4 \uad00\ub9ac \ubc0f \uc778\uc99d - \ube44\ub3d9\uae30 \uc694\uccad\uc73c\ub85c \uc131\ub2a5 \ucd5c\uc801\ud654 - \uc5d0\ub7ec \ucc98\ub9ac \ubc0f \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1 - \uc218\uc9d1\ub41c \ub370\uc774\ud130 \uc2dc\uac01\ud654</p>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#3_1","title":"\uc5f0\uc2b5 3: \uc804\uc790\uc0c1\uac70\ub798 \uac00\uaca9 \ubaa8\ub2c8\ud130\ub9c1","text":"<p>\uc5ec\ub7ec \uc1fc\ud551\ubab0\uc758 \uc0c1\ud488 \uac00\uaca9\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694: - \ub3d9\uc801 \ucf58\ud150\uce20 \ucc98\ub9ac (Selenium) - \uac00\uaca9 \ubcc0\ub3d9 \uc54c\ub9bc - \ub370\uc774\ud130 \uc800\uc7a5 \ubc0f \ud788\uc2a4\ud1a0\ub9ac \uad00\ub9ac - \uc2a4\ucf00\uc904\ub9c1\uc744 \ud1b5\ud55c \uc790\ub3d9 \uc2e4\ud589</p>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#4","title":"\uc5f0\uc2b5 4: \uc18c\uc15c \ubbf8\ub514\uc5b4 \ubd84\uc11d \ub3c4\uad6c","text":"<p>\uacf5\uac1c API\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc18c\uc15c \ubbf8\ub514\uc5b4 \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\ub294 \ub3c4\uad6c\ub97c \uad6c\ud604\ud558\uc138\uc694: - OAuth \uc778\uc99d \uad6c\ud604 - \uc2e4\uc2dc\uac04 \ub370\uc774\ud130 \uc218\uc9d1 - \ud14d\uc2a4\ud2b8 \ubd84\uc11d \ubc0f \uac10\uc815 \ubd84\uc11d - \ub300\uc2dc\ubcf4\ub4dc\ub97c \ud1b5\ud55c \uacb0\uacfc \uc2dc\uac01\ud654</p>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>HTTP \uae30\ucd08: requests \ub77c\uc774\ube0c\ub7ec\ub9ac, \uc138\uc158 \uad00\ub9ac, \ucfe0\ud0a4 \ucc98\ub9ac</li> <li>\uc6f9 \uc2a4\ud06c\ub798\ud551: BeautifulSoup, HTML \ud30c\uc2f1, \ub370\uc774\ud130 \ucd94\ucd9c</li> <li>\uace0\uae09 \uae30\ubc95: User-Agent \ub85c\ud14c\uc774\uc158, \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1, \ud3f4\ubc31 \ucc98\ub9ac</li> <li>\ub3d9\uc801 \ucf58\ud150\uce20: JavaScript \ub80c\ub354\ub9c1, SPA \ucc98\ub9ac, \ud398\uc774\uc9c0\ub124\uc774\uc158</li> <li>REST API: HTTP \uba54\uc11c\ub4dc, \uc778\uc99d, \ud398\uc774\uc9c0\ub124\uc774\uc158 \ucc98\ub9ac</li> <li>\ube44\ub3d9\uae30 \ucc98\ub9ac: aiohttp, \ub3d9\uc2dc \uc694\uccad, \uc131\ub2a5 \ucd5c\uc801\ud654</li> <li>\uc5d0\ud2f0\ucf13\uacfc \ubaa8\ubc94 \uc0ac\ub840: robots.txt, \uc694\uccad \uc81c\ud55c, \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4</li> </ol> <p>\ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c\ub294 GUI \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08\uc5d0 \ub300\ud574 \ud559\uc2b5\ud558\uc5ec \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4 \uac1c\ubc1c \ubc29\ubc95\uc744 \ubc30\uc6b0\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter13_web_scraping_api/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>\uc6f9 \uc2a4\ud06c\ub798\ud551\uc740 \uac15\ub825\ud55c \ub3c4\uad6c\uc774\uc9c0\ub9cc \uc724\ub9ac\uc801\uc73c\ub85c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4</li> <li>robots.txt\ub97c \uc874\uc911\ud558\uace0 \uc11c\ubc84\uc5d0 \ubd80\ub2f4\uc744 \uc8fc\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758\ud558\uc138\uc694</li> <li>\uc5d0\ub7ec \ucc98\ub9ac\uc640 \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1\uc744 \uad6c\ud604\ud558\uc5ec \uacac\uace0\ud55c \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4dc\uc138\uc694</li> <li>\ube44\ub3d9\uae30 \ucc98\ub9ac\ub85c \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4</li> <li>API \uc0ac\uc6a9 \uc2dc \uc778\uc99d\uacfc \ubcf4\uc548\uc744 \ubc18\ub4dc\uc2dc \uace0\ub824\ud558\uc138\uc694</li> <li>\ubc95\uc801 \ubb38\uc81c\uc640 \uc774\uc6a9\uc57d\uad00\uc744 \ud56d\uc0c1 \ud655\uc778\ud558\uc138\uc694 </li> </ul>"},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/","title":"Chapter 14: GUI \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08","text":""},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#_1","title":"\ud559\uc2b5 \ubaa9\ud45c","text":"<p>\uc774 \ucc55\ud130\ub97c \uc644\ub8cc\ud558\uba74 \ub2e4\uc74c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: - tkinter\ub97c \ud65c\uc6a9\ud55c GUI \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uac1c\ubc1c\ud558\uae30 - \ub2e4\uc591\ud55c \uc704\uc82f\uc758 \ud2b9\uc131\uacfc \uc0ac\uc6a9\ubc95 \uc774\ud574\ud558\uae30 - \uc774\ubca4\ud2b8 \uae30\ubc18 \ud504\ub85c\uadf8\ub798\ubc0d\uacfc \ucf5c\ubc31 \ud568\uc218 \ud65c\uc6a9\ud558\uae30 - \ub808\uc774\uc544\uc6c3 \ub9e4\ub2c8\uc800\ub85c \ud6a8\uacfc\uc801\uc778 UI \ubc30\uce58\ud558\uae30 - \uba54\ub274, \ub300\ud654\uc0c1\uc790, \uce94\ubc84\uc2a4 \ub4f1 \uace0\uae09 \uae30\ub2a5 \uad6c\ud604\ud558\uae30 - MVC \ud328\ud134\uc744 \uc801\uc6a9\ud55c GUI \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uacc4\ud558\uae30 - \uc0ac\uc6a9\uc790 \uce5c\ud654\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4 \uc124\uacc4 \uc6d0\uce59 \uc801\uc6a9\ud558\uae30</p>"},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#1-gui","title":"1. GUI \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08","text":""},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#11-tkinter","title":"1.1 tkinter \uc18c\uac1c\uc640 \uae30\ubcf8 \uad6c\uc870","text":"<pre><code>print(\"=== GUI \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ucd08 ===\")\n\nimport tkinter as tk\nfrom tkinter import ttk, messagebox, filedialog, colorchooser\nfrom datetime import datetime\nimport json\nimport os\n\nclass BasicGUIExample:\n    \"\"\"\uae30\ubcf8 GUI \uc608\uc81c\"\"\"\n\n    def __init__(self):\n        self.root = tk.Tk()\n        self.setup_main_window()\n        self.create_widgets()\n\n    def setup_main_window(self):\n        \"\"\"\uba54\uc778 \uc708\ub3c4\uc6b0 \uc124\uc815\"\"\"\n        self.root.title(\"\uae30\ubcf8 GUI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\")\n        self.root.geometry(\"600x400\")\n        self.root.resizable(True, True)\n\n        # \uc708\ub3c4\uc6b0 \uc544\uc774\ucf58 \uc124\uc815 (\uc2dc\ubbac\ub808\uc774\uc158)\n        # self.root.iconbitmap(\"app_icon.ico\")\n\n        # \uc708\ub3c4\uc6b0 \ub2eb\uae30 \uc774\ubca4\ud2b8 \ucc98\ub9ac\n        self.root.protocol(\"WM_DELETE_WINDOW\", self.on_closing)\n\n        print(\"   \uba54\uc778 \uc708\ub3c4\uc6b0 \uc124\uc815 \uc644\ub8cc\")\n\n    def create_widgets(self):\n        \"\"\"\uae30\ubcf8 \uc704\uc82f \uc0dd\uc131\"\"\"\n\n        # \uc0c1\ub2e8 \ud504\ub808\uc784\n        top_frame = tk.Frame(self.root, bg=\"lightblue\", height=100)\n        top_frame.pack(fill=tk.X, padx=5, pady=5)\n        top_frame.pack_propagate(False)\n\n        title_label = tk.Label(\n            top_frame, \n            text=\"tkinter GUI \uae30\ucd08\", \n            font=(\"Arial\", 16, \"bold\"),\n            bg=\"lightblue\"\n        )\n        title_label.pack(pady=20)\n\n        # \uc911\uc559 \ud504\ub808\uc784\n        middle_frame = tk.Frame(self.root)\n        middle_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)\n\n        # \uc88c\uce21 \ud328\ub110\n        left_panel = tk.LabelFrame(middle_frame, text=\"\uc785\ub825 \ud328\ub110\", padx=5, pady=5)\n        left_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))\n\n        # \uc785\ub825 \ud544\ub4dc\ub4e4\n        tk.Label(left_panel, text=\"\uc774\ub984:\").pack(anchor=tk.W)\n        self.name_entry = tk.Entry(left_panel, width=30)\n        self.name_entry.pack(fill=tk.X, pady=(0, 10))\n\n        tk.Label(left_panel, text=\"\uba54\uc2dc\uc9c0:\").pack(anchor=tk.W)\n        self.message_text = tk.Text(left_panel, height=5)\n        self.message_text.pack(fill=tk.BOTH, expand=True, pady=(0, 10))\n\n        # \ubc84\ud2bc\ub4e4\n        button_frame = tk.Frame(left_panel)\n        button_frame.pack(fill=tk.X)\n\n        self.submit_btn = tk.Button(\n            button_frame, \n            text=\"\uc81c\ucd9c\",\n            command=self.on_submit,\n            bg=\"lightgreen\"\n        )\n        self.submit_btn.pack(side=tk.LEFT, padx=(0, 5))\n\n        self.clear_btn = tk.Button(\n            button_frame, \n            text=\"\uc9c0\uc6b0\uae30\",\n            command=self.on_clear,\n            bg=\"lightcoral\"\n        )\n        self.clear_btn.pack(side=tk.LEFT)\n\n        # \uc6b0\uce21 \ud328\ub110\n        right_panel = tk.LabelFrame(middle_frame, text=\"\ucd9c\ub825 \ud328\ub110\", padx=5, pady=5)\n        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)\n\n        self.output_listbox = tk.Listbox(right_panel)\n        self.output_listbox.pack(fill=tk.BOTH, expand=True)\n\n        # \ud558\ub2e8 \uc0c1\ud0dc\ubc14\n        self.status_bar = tk.Label(\n            self.root, \n            text=\"\uc900\ube44\", \n            relief=tk.SUNKEN, \n            anchor=tk.W\n        )\n        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)\n\n        print(\"   \uae30\ubcf8 \uc704\uc82f \uc0dd\uc131 \uc644\ub8cc\")\n\n    def on_submit(self):\n        \"\"\"\uc81c\ucd9c \ubc84\ud2bc \uc774\ubca4\ud2b8 \ucc98\ub9ac\"\"\"\n        name = self.name_entry.get()\n        message = self.message_text.get(\"1.0\", tk.END).strip()\n\n        if name and message:\n            timestamp = datetime.now().strftime(\"%H:%M:%S\")\n            entry = f\"[{timestamp}] {name}: {message}\"\n            self.output_listbox.insert(tk.END, entry)\n\n            self.status_bar.config(text=f\"\uba54\uc2dc\uc9c0 \ucd94\uac00\ub428: {name}\")\n            self.on_clear()\n        else:\n            messagebox.showwarning(\"\uc785\ub825 \uc624\ub958\", \"\uc774\ub984\uacfc \uba54\uc2dc\uc9c0\ub97c \ubaa8\ub450 \uc785\ub825\ud558\uc138\uc694.\")\n            self.status_bar.config(text=\"\uc785\ub825 \uc624\ub958 \ubc1c\uc0dd\")\n\n    def on_clear(self):\n        \"\"\"\uc9c0\uc6b0\uae30 \ubc84\ud2bc \uc774\ubca4\ud2b8 \ucc98\ub9ac\"\"\"\n        self.name_entry.delete(0, tk.END)\n        self.message_text.delete(\"1.0\", tk.END)\n        self.status_bar.config(text=\"\uc785\ub825 \ud544\ub4dc \ucd08\uae30\ud654\ub428\")\n\n    def on_closing(self):\n        \"\"\"\uc708\ub3c4\uc6b0 \ub2eb\uae30 \uc774\ubca4\ud2b8 \ucc98\ub9ac\"\"\"\n        if messagebox.askokcancel(\"\uc885\ub8cc\", \"\uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc885\ub8cc\ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c?\"):\n            self.root.destroy()\n\n    def run(self):\n        \"\"\"\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc2e4\ud589\"\"\"\n        print(\"   GUI \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc2dc\uc791\")\n        # self.root.mainloop()  # \uc2e4\uc81c \uc2e4\ud589 \uc2dc \uc8fc\uc11d \ud574\uc81c\n        print(\"   (\uc2e4\uc81c \ud658\uacbd\uc5d0\uc11c\ub294 mainloop()\uac00 \uc2e4\ud589\ub429\ub2c8\ub2e4)\")\n\ndef demonstrate_basic_gui():\n    \"\"\"\uae30\ubcf8 GUI \uc2dc\uc5f0\"\"\"\n    print(\"1. tkinter \uae30\ubcf8 \uad6c\uc870:\")\n\n    app = BasicGUIExample()\n    app.run()\n\ndemonstrate_basic_gui()\n</code></pre>"},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#12","title":"1.2 \uc704\uc82f\uc758 \uc885\ub958\uc640 \ud2b9\uc131","text":"<pre><code>print(\"\\n=== \ub2e4\uc591\ud55c \uc704\uc82f \ud65c\uc6a9 ===\")\n\nclass WidgetShowcase:\n    \"\"\"\ub2e4\uc591\ud55c \uc704\uc82f \uc1fc\ucf00\uc774\uc2a4\"\"\"\n\n    def __init__(self):\n        self.root = tk.Tk()\n        self.root.title(\"\uc704\uc82f \uc1fc\ucf00\uc774\uc2a4\")\n        self.root.geometry(\"800x600\")\n\n        self.notebook = ttk.Notebook(self.root)\n        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n\n        self.create_input_widgets_tab()\n        self.create_display_widgets_tab()\n        self.create_selection_widgets_tab()\n        self.create_container_widgets_tab()\n\n    def create_input_widgets_tab(self):\n        \"\"\"\uc785\ub825 \uc704\uc82f \ud0ed\"\"\"\n        tab = ttk.Frame(self.notebook)\n        self.notebook.add(tab, text=\"\uc785\ub825 \uc704\uc82f\")\n\n        # Entry \uc704\uc82f\n        entry_frame = tk.LabelFrame(tab, text=\"Entry \uc704\uc82f\", padx=5, pady=5)\n        entry_frame.pack(fill=tk.X, padx=5, pady=5)\n\n        tk.Label(entry_frame, text=\"\uc77c\ubc18 \uc785\ub825:\").pack(anchor=tk.W)\n        self.normal_entry = tk.Entry(entry_frame, width=30)\n        self.normal_entry.pack(anchor=tk.W, pady=2)\n\n        tk.Label(entry_frame, text=\"\ube44\ubc00\ubc88\ud638:\").pack(anchor=tk.W)\n        self.password_entry = tk.Entry(entry_frame, show=\"*\", width=30)\n        self.password_entry.pack(anchor=tk.W, pady=2)\n\n        tk.Label(entry_frame, text=\"\uc77d\uae30 \uc804\uc6a9:\").pack(anchor=tk.W)\n        self.readonly_entry = tk.Entry(entry_frame, state=\"readonly\", width=30)\n        self.readonly_entry.pack(anchor=tk.W, pady=2)\n\n        # Text \uc704\uc82f\n        text_frame = tk.LabelFrame(tab, text=\"Text \uc704\uc82f\", padx=5, pady=5)\n        text_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)\n\n        text_container = tk.Frame(text_frame)\n        text_container.pack(fill=tk.BOTH, expand=True)\n\n        self.text_widget = tk.Text(text_container, wrap=tk.WORD)\n        scrollbar = tk.Scrollbar(text_container, orient=tk.VERTICAL, command=self.text_widget.yview)\n        self.text_widget.config(yscrollcommand=scrollbar.set)\n\n        self.text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)\n\n        # \ud14d\uc2a4\ud2b8 \uc704\uc82f\uc5d0 \uc0d8\ud50c \ud14d\uc2a4\ud2b8 \ucd94\uac00\n        sample_text = \"\"\"\uc774\uac83\uc740 Text \uc704\uc82f\uc785\ub2c8\ub2e4.\n\uc5ec\ub7ec \uc904\uc758 \ud14d\uc2a4\ud2b8\ub97c \uc785\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc2a4\ud06c\ub864\ubc14\ub3c4 \uc9c0\uc6d0\ub429\ub2c8\ub2e4.\n\ub2e4\uc591\ud55c \ud3ec\ub9f7\ud305\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4.\"\"\"\n        self.text_widget.insert(\"1.0\", sample_text)\n\n        print(\"     \uc785\ub825 \uc704\uc82f \ud0ed \uc0dd\uc131 \uc644\ub8cc\")\n\n    def create_display_widgets_tab(self):\n        \"\"\"\ud45c\uc2dc \uc704\uc82f \ud0ed\"\"\"\n        tab = ttk.Frame(self.notebook)\n        self.notebook.add(tab, text=\"\ud45c\uc2dc \uc704\uc82f\")\n\n        # Label \uc704\uc82f\ub4e4\n        label_frame = tk.LabelFrame(tab, text=\"Label \uc704\uc82f\", padx=5, pady=5)\n        label_frame.pack(fill=tk.X, padx=5, pady=5)\n\n        tk.Label(label_frame, text=\"\uae30\ubcf8 \ub77c\ubca8\", font=(\"Arial\", 10)).pack(anchor=tk.W)\n        tk.Label(label_frame, text=\"\uad75\uc740 \ub77c\ubca8\", font=(\"Arial\", 10, \"bold\"), fg=\"blue\").pack(anchor=tk.W)\n        tk.Label(label_frame, text=\"\ubc30\uacbd\uc0c9 \ub77c\ubca8\", bg=\"yellow\", fg=\"red\").pack(anchor=tk.W)\n        tk.Label(label_frame, text=\"\uacbd\uacc4\uc120 \ub77c\ubca8\", relief=tk.RAISED, borderwidth=2).pack(anchor=tk.W, pady=2)\n\n        # Listbox \uc704\uc82f\n        listbox_frame = tk.LabelFrame(tab, text=\"Listbox \uc704\uc82f\", padx=5, pady=5)\n        listbox_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)\n\n        list_container = tk.Frame(listbox_frame)\n        list_container.pack(fill=tk.BOTH, expand=True)\n\n        self.listbox = tk.Listbox(list_container, selectmode=tk.EXTENDED)\n        list_scrollbar = tk.Scrollbar(list_container, orient=tk.VERTICAL, command=self.listbox.yview)\n        self.listbox.config(yscrollcommand=list_scrollbar.set)\n\n        # \uc0d8\ud50c \ub370\uc774\ud130 \ucd94\uac00\n        for i in range(20):\n            self.listbox.insert(tk.END, f\"\ud56d\ubaa9 {i+1}\")\n\n        self.listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n        list_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)\n\n        # \uc120\ud0dd \uc774\ubca4\ud2b8 \ubc14\uc778\ub529\n        self.listbox.bind(\"&lt;&lt;ListboxSelect&gt;&gt;\", self.on_listbox_select)\n\n        print(\"     \ud45c\uc2dc \uc704\uc82f \ud0ed \uc0dd\uc131 \uc644\ub8cc\")\n\n    def create_selection_widgets_tab(self):\n        \"\"\"\uc120\ud0dd \uc704\uc82f \ud0ed\"\"\"\n        tab = ttk.Frame(self.notebook)\n        self.notebook.add(tab, text=\"\uc120\ud0dd \uc704\uc82f\")\n\n        # \uccb4\ud06c\ubc15\uc2a4\ub4e4\n        checkbox_frame = tk.LabelFrame(tab, text=\"Checkbutton \uc704\uc82f\", padx=5, pady=5)\n        checkbox_frame.pack(fill=tk.X, padx=5, pady=5)\n\n        self.check_vars = {}\n        options = [\"\uc635\uc158 1\", \"\uc635\uc158 2\", \"\uc635\uc158 3\"]\n\n        for option in options:\n            var = tk.BooleanVar()\n            self.check_vars[option] = var\n\n            checkbox = tk.Checkbutton(\n                checkbox_frame, \n                text=option, \n                variable=var,\n                command=lambda opt=option: self.on_checkbox_change(opt)\n            )\n            checkbox.pack(anchor=tk.W)\n\n        # \ub77c\ub514\uc624 \ubc84\ud2bc\ub4e4\n        radio_frame = tk.LabelFrame(tab, text=\"Radiobutton \uc704\uc82f\", padx=5, pady=5)\n        radio_frame.pack(fill=tk.X, padx=5, pady=5)\n\n        self.radio_var = tk.StringVar(value=\"\ub77c\ub514\uc624 1\")\n        radio_options = [\"\ub77c\ub514\uc624 1\", \"\ub77c\ub514\uc624 2\", \"\ub77c\ub514\uc624 3\"]\n\n        for option in radio_options:\n            radio = tk.Radiobutton(\n                radio_frame, \n                text=option, \n                variable=self.radio_var, \n                value=option,\n                command=self.on_radio_change\n            )\n            radio.pack(anchor=tk.W)\n\n        # Scale (\uc2ac\ub77c\uc774\ub354) \uc704\uc82f\n        scale_frame = tk.LabelFrame(tab, text=\"Scale \uc704\uc82f\", padx=5, pady=5)\n        scale_frame.pack(fill=tk.X, padx=5, pady=5)\n\n        self.scale_var = tk.DoubleVar()\n        self.scale = tk.Scale(\n            scale_frame, \n            from_=0, \n            to=100, \n            orient=tk.HORIZONTAL,\n            variable=self.scale_var,\n            command=self.on_scale_change\n        )\n        self.scale.pack(fill=tk.X)\n\n        self.scale_label = tk.Label(scale_frame, text=\"\uac12: 0\")\n        self.scale_label.pack()\n\n        # Spinbox \uc704\uc82f\n        spinbox_frame = tk.LabelFrame(tab, text=\"Spinbox \uc704\uc82f\", padx=5, pady=5)\n        spinbox_frame.pack(fill=tk.X, padx=5, pady=5)\n\n        self.spinbox = tk.Spinbox(\n            spinbox_frame, \n            from_=1, \n            to=10, \n            width=10,\n            command=self.on_spinbox_change\n        )\n        self.spinbox.pack(anchor=tk.W)\n\n        print(\"     \uc120\ud0dd \uc704\uc82f \ud0ed \uc0dd\uc131 \uc644\ub8cc\")\n\n    def create_container_widgets_tab(self):\n        \"\"\"\ucee8\ud14c\uc774\ub108 \uc704\uc82f \ud0ed\"\"\"\n        tab = ttk.Frame(self.notebook)\n        self.notebook.add(tab, text=\"\ucee8\ud14c\uc774\ub108 \uc704\uc82f\")\n\n        # PanedWindow \uc704\uc82f\n        paned_frame = tk.LabelFrame(tab, text=\"PanedWindow \uc704\uc82f\", padx=5, pady=5)\n        paned_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)\n\n        paned_window = tk.PanedWindow(paned_frame, orient=tk.HORIZONTAL)\n        paned_window.pack(fill=tk.BOTH, expand=True)\n\n        # \uc67c\ucabd \ud328\ub110\n        left_pane = tk.Frame(paned_window, bg=\"lightblue\", width=200)\n        paned_window.add(left_pane)\n        tk.Label(left_pane, text=\"\uc67c\ucabd \ud328\ub110\", bg=\"lightblue\").pack(pady=20)\n\n        # \uc624\ub978\ucabd \ud328\ub110\n        right_pane = tk.Frame(paned_window, bg=\"lightgreen\")\n        paned_window.add(right_pane)\n        tk.Label(right_pane, text=\"\uc624\ub978\ucabd \ud328\ub110\", bg=\"lightgreen\").pack(pady=20)\n\n        print(\"     \ucee8\ud14c\uc774\ub108 \uc704\uc82f \ud0ed \uc0dd\uc131 \uc644\ub8cc\")\n\n    def on_listbox_select(self, event):\n        \"\"\"\ub9ac\uc2a4\ud2b8\ubc15\uc2a4 \uc120\ud0dd \uc774\ubca4\ud2b8\"\"\"\n        selection = self.listbox.curselection()\n        if selection:\n            print(f\"     \uc120\ud0dd\ub41c \ud56d\ubaa9: {[self.listbox.get(i) for i in selection]}\")\n\n    def on_checkbox_change(self, option):\n        \"\"\"\uccb4\ud06c\ubc15\uc2a4 \ubcc0\uacbd \uc774\ubca4\ud2b8\"\"\"\n        state = self.check_vars[option].get()\n        print(f\"     {option}: {'\uccb4\ud06c\ub428' if state else '\uccb4\ud06c \ud574\uc81c'}\")\n\n    def on_radio_change(self):\n        \"\"\"\ub77c\ub514\uc624 \ubc84\ud2bc \ubcc0\uacbd \uc774\ubca4\ud2b8\"\"\"\n        print(f\"     \ub77c\ub514\uc624 \uc120\ud0dd: {self.radio_var.get()}\")\n\n    def on_scale_change(self, value):\n        \"\"\"\uc2a4\ucf00\uc77c \ubcc0\uacbd \uc774\ubca4\ud2b8\"\"\"\n        self.scale_label.config(text=f\"\uac12: {float(value):.0f}\")\n        print(f\"     \uc2a4\ucf00\uc77c \uac12: {float(value):.0f}\")\n\n    def on_spinbox_change(self):\n        \"\"\"\uc2a4\ud540\ubc15\uc2a4 \ubcc0\uacbd \uc774\ubca4\ud2b8\"\"\"\n        print(f\"     \uc2a4\ud540\ubc15\uc2a4 \uac12: {self.spinbox.get()}\")\n\n    def run(self):\n        \"\"\"\uc1fc\ucf00\uc774\uc2a4 \uc2e4\ud589\"\"\"\n        print(\"   \uc704\uc82f \uc1fc\ucf00\uc774\uc2a4 \uc2e4\ud589\")\n        # self.root.mainloop()  # \uc2e4\uc81c \uc2e4\ud589 \uc2dc \uc8fc\uc11d \ud574\uc81c\n\ndef demonstrate_widgets():\n    \"\"\"\uc704\uc82f \uc1fc\ucf00\uc774\uc2a4 \uc2dc\uc5f0\"\"\"\n    print(\"2. \ub2e4\uc591\ud55c \uc704\uc82f \ud65c\uc6a9:\")\n\n    showcase = WidgetShowcase()\n    showcase.run()\n\ndemonstrate_widgets()\n</code></pre>"},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#2","title":"2. \uc774\ubca4\ud2b8 \ucc98\ub9ac\uc640 \ucf5c\ubc31","text":""},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#21","title":"2.1 \uc774\ubca4\ud2b8 \uae30\ubc18 \ud504\ub85c\uadf8\ub798\ubc0d","text":"<pre><code>print(\"\\n=== \uc774\ubca4\ud2b8 \ucc98\ub9ac\uc640 \ucf5c\ubc31 ===\")\n\nclass EventHandlingDemo:\n    \"\"\"\uc774\ubca4\ud2b8 \ucc98\ub9ac \ub370\ubaa8\"\"\"\n\n    def __init__(self):\n        self.root = tk.Tk()\n        self.root.title(\"\uc774\ubca4\ud2b8 \ucc98\ub9ac \ub370\ubaa8\")\n        self.root.geometry(\"600x500\")\n\n        self.event_log = []\n        self.create_widgets()\n        self.bind_events()\n\n    def create_widgets(self):\n        \"\"\"\uc704\uc82f \uc0dd\uc131\"\"\"\n\n        # \uc0c1\ub2e8 \uc815\ubcf4 \ud328\ub110\n        info_frame = tk.LabelFrame(self.root, text=\"\uc774\ubca4\ud2b8 \uc815\ubcf4\", padx=5, pady=5)\n        info_frame.pack(fill=tk.X, padx=10, pady=5)\n\n        self.mouse_label = tk.Label(info_frame, text=\"\ub9c8\uc6b0\uc2a4 \uc704\uce58: (0, 0)\")\n        self.mouse_label.pack(anchor=tk.W)\n\n        self.key_label = tk.Label(info_frame, text=\"\ub9c8\uc9c0\ub9c9 \ud0a4: \uc5c6\uc74c\")\n        self.key_label.pack(anchor=tk.W)\n\n        # \uc774\ubca4\ud2b8 \ud14c\uc2a4\ud2b8 \uc601\uc5ed\n        test_frame = tk.LabelFrame(self.root, text=\"\uc774\ubca4\ud2b8 \ud14c\uc2a4\ud2b8 \uc601\uc5ed\", padx=5, pady=5)\n        test_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)\n\n        # \uce94\ubc84\uc2a4 (\ub4dc\ub798\uadf8 \uc564 \ub4dc\ub86d \ud14c\uc2a4\ud2b8\uc6a9)\n        self.canvas = tk.Canvas(test_frame, bg=\"white\", height=200)\n        self.canvas.pack(fill=tk.X, pady=5)\n\n        # \ubc84\ud2bc\ub4e4\n        button_frame = tk.Frame(test_frame)\n        button_frame.pack(fill=tk.X, pady=5)\n\n        self.click_btn = tk.Button(\n            button_frame, \n            text=\"\ud074\ub9ad \uc774\ubca4\ud2b8 \ud14c\uc2a4\ud2b8\",\n            command=self.on_button_click\n        )\n        self.click_btn.pack(side=tk.LEFT, padx=5)\n\n        self.double_click_btn = tk.Button(\n            button_frame, \n            text=\"\ub354\ube14\ud074\ub9ad \ud14c\uc2a4\ud2b8\"\n        )\n        self.double_click_btn.pack(side=tk.LEFT, padx=5)\n\n        self.right_click_btn = tk.Button(\n            button_frame, \n            text=\"\uc6b0\ud074\ub9ad \ud14c\uc2a4\ud2b8\"\n        )\n        self.right_click_btn.pack(side=tk.LEFT, padx=5)\n\n        # \uc785\ub825 \ud544\ub4dc (\ud0a4\ubcf4\ub4dc \uc774\ubca4\ud2b8 \ud14c\uc2a4\ud2b8\uc6a9)\n        self.entry = tk.Entry(test_frame, font=(\"Arial\", 12))\n        self.entry.pack(fill=tk.X, pady=5)\n\n        # \uc774\ubca4\ud2b8 \ub85c\uadf8\n        log_frame = tk.LabelFrame(self.root, text=\"\uc774\ubca4\ud2b8 \ub85c\uadf8\", padx=5, pady=5)\n        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)\n\n        log_container = tk.Frame(log_frame)\n        log_container.pack(fill=tk.BOTH, expand=True)\n\n        self.log_listbox = tk.Listbox(log_container)\n        log_scrollbar = tk.Scrollbar(log_container, orient=tk.VERTICAL, command=self.log_listbox.yview)\n        self.log_listbox.config(yscrollcommand=log_scrollbar.set)\n\n        self.log_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n        log_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)\n\n        # \ub85c\uadf8 \uc9c0\uc6b0\uae30 \ubc84\ud2bc\n        clear_log_btn = tk.Button(log_frame, text=\"\ub85c\uadf8 \uc9c0\uc6b0\uae30\", command=self.clear_log)\n        clear_log_btn.pack(pady=5)\n\n        print(\"     \uc774\ubca4\ud2b8 \ub370\ubaa8 \uc704\uc82f \uc0dd\uc131 \uc644\ub8cc\")\n\n    def bind_events(self):\n        \"\"\"\uc774\ubca4\ud2b8 \ubc14\uc778\ub529\"\"\"\n\n        # \ub9c8\uc6b0\uc2a4 \uc774\ubca4\ud2b8\n        self.root.bind(\"&lt;Motion&gt;\", self.on_mouse_move)\n        self.canvas.bind(\"&lt;Button-1&gt;\", self.on_canvas_click)\n        self.canvas.bind(\"&lt;B1-Motion&gt;\", self.on_canvas_drag)\n        self.canvas.bind(\"&lt;ButtonRelease-1&gt;\", self.on_canvas_release)\n\n        # \ub354\ube14\ud074\ub9ad \uc774\ubca4\ud2b8\n        self.double_click_btn.bind(\"&lt;Double-Button-1&gt;\", self.on_double_click)\n\n        # \uc6b0\ud074\ub9ad \uc774\ubca4\ud2b8\n        self.right_click_btn.bind(\"&lt;Button-3&gt;\", self.on_right_click)\n\n        # \ud0a4\ubcf4\ub4dc \uc774\ubca4\ud2b8\n        self.entry.bind(\"&lt;KeyPress&gt;\", self.on_key_press)\n        self.entry.bind(\"&lt;KeyRelease&gt;\", self.on_key_release)\n        self.entry.bind(\"&lt;Return&gt;\", self.on_enter_press)\n\n        # \uc708\ub3c4\uc6b0 \uc774\ubca4\ud2b8\n        self.root.bind(\"&lt;Configure&gt;\", self.on_window_resize)\n        self.root.bind(\"&lt;FocusIn&gt;\", self.on_focus_in)\n        self.root.bind(\"&lt;FocusOut&gt;\", self.on_focus_out)\n\n        # \uce94\ubc84\uc2a4\uc5d0 \ub4dc\ub798\uadf8 \uc0c1\ud0dc \ucd94\uc801 \ubcc0\uc218\n        self.canvas.drag_data = {\"x\": 0, \"y\": 0, \"item\": None}\n\n        print(\"     \uc774\ubca4\ud2b8 \ubc14\uc778\ub529 \uc644\ub8cc\")\n\n    def log_event(self, event_type, details=\"\"):\n        \"\"\"\uc774\ubca4\ud2b8 \ub85c\uae45\"\"\"\n        timestamp = datetime.now().strftime(\"%H:%M:%S.%f\")[:-3]\n        log_entry = f\"[{timestamp}] {event_type}\"\n        if details:\n            log_entry += f\": {details}\"\n\n        self.event_log.append(log_entry)\n        self.log_listbox.insert(tk.END, log_entry)\n        self.log_listbox.see(tk.END)  # \uc790\ub3d9 \uc2a4\ud06c\ub864\n\n        # \ub85c\uadf8 \uac1c\uc218 \uc81c\ud55c\n        if len(self.event_log) &gt; 100:\n            self.event_log.pop(0)\n            self.log_listbox.delete(0)\n\n    def on_mouse_move(self, event):\n        \"\"\"\ub9c8\uc6b0\uc2a4 \uc774\ub3d9 \uc774\ubca4\ud2b8\"\"\"\n        self.mouse_label.config(text=f\"\ub9c8\uc6b0\uc2a4 \uc704\uce58: ({event.x}, {event.y})\")\n\n    def on_button_click(self):\n        \"\"\"\ubc84\ud2bc \ud074\ub9ad \uc774\ubca4\ud2b8\"\"\"\n        self.log_event(\"Button Click\", \"\ud074\ub9ad \uc774\ubca4\ud2b8 \ud14c\uc2a4\ud2b8 \ubc84\ud2bc\")\n\n    def on_double_click(self, event):\n        \"\"\"\ub354\ube14\ud074\ub9ad \uc774\ubca4\ud2b8\"\"\"\n        self.log_event(\"Double Click\", \"\ub354\ube14\ud074\ub9ad \uac10\uc9c0\")\n\n    def on_right_click(self, event):\n        \"\"\"\uc6b0\ud074\ub9ad \uc774\ubca4\ud2b8\"\"\"\n        self.log_event(\"Right Click\", f\"\uc704\uce58: ({event.x}, {event.y})\")\n\n    def on_canvas_click(self, event):\n        \"\"\"\uce94\ubc84\uc2a4 \ud074\ub9ad \uc774\ubca4\ud2b8\"\"\"\n        # \uc791\uc740 \uc6d0 \uadf8\ub9ac\uae30\n        x, y = event.x, event.y\n        item = self.canvas.create_oval(x-5, y-5, x+5, y+5, fill=\"blue\", outline=\"darkblue\")\n\n        self.canvas.drag_data[\"x\"] = x\n        self.canvas.drag_data[\"y\"] = y\n        self.canvas.drag_data[\"item\"] = item\n\n        self.log_event(\"Canvas Click\", f\"\uc6d0 \uc0dd\uc131 at ({x}, {y})\")\n\n    def on_canvas_drag(self, event):\n        \"\"\"\uce94\ubc84\uc2a4 \ub4dc\ub798\uadf8 \uc774\ubca4\ud2b8\"\"\"\n        if self.canvas.drag_data[\"item\"]:\n            # \ub4dc\ub798\uadf8\ub85c \uc6d0 \uc774\ub3d9\n            dx = event.x - self.canvas.drag_data[\"x\"]\n            dy = event.y - self.canvas.drag_data[\"y\"]\n\n            self.canvas.move(self.canvas.drag_data[\"item\"], dx, dy)\n\n            self.canvas.drag_data[\"x\"] = event.x\n            self.canvas.drag_data[\"y\"] = event.y\n\n    def on_canvas_release(self, event):\n        \"\"\"\uce94\ubc84\uc2a4 \ub9c8\uc6b0\uc2a4 \ub9b4\ub9ac\uc988 \uc774\ubca4\ud2b8\"\"\"\n        if self.canvas.drag_data[\"item\"]:\n            self.log_event(\"Canvas Drag End\", f\"\ucd5c\uc885 \uc704\uce58: ({event.x}, {event.y})\")\n            self.canvas.drag_data[\"item\"] = None\n\n    def on_key_press(self, event):\n        \"\"\"\ud0a4 \ub204\ub984 \uc774\ubca4\ud2b8\"\"\"\n        key = event.keysym\n        self.key_label.config(text=f\"\ub9c8\uc9c0\ub9c9 \ud0a4: {key}\")\n        self.log_event(\"Key Press\", f\"\ud0a4: {key}\")\n\n    def on_key_release(self, event):\n        \"\"\"\ud0a4 \ub9b4\ub9ac\uc988 \uc774\ubca4\ud2b8\"\"\"\n        self.log_event(\"Key Release\", f\"\ud0a4: {event.keysym}\")\n\n    def on_enter_press(self, event):\n        \"\"\"Enter \ud0a4 \uc774\ubca4\ud2b8\"\"\"\n        text = self.entry.get()\n        self.log_event(\"Enter Press\", f\"\uc785\ub825 \ud14d\uc2a4\ud2b8: '{text}'\")\n        self.entry.delete(0, tk.END)\n\n    def on_window_resize(self, event):\n        \"\"\"\uc708\ub3c4\uc6b0 \ub9ac\uc0ac\uc774\uc988 \uc774\ubca4\ud2b8\"\"\"\n        if event.widget == self.root:\n            self.log_event(\"Window Resize\", f\"\ud06c\uae30: {event.width}x{event.height}\")\n\n    def on_focus_in(self, event):\n        \"\"\"\ud3ec\ucee4\uc2a4 \ud68d\ub4dd \uc774\ubca4\ud2b8\"\"\"\n        self.log_event(\"Focus In\", \"\uc708\ub3c4\uc6b0 \ud3ec\ucee4\uc2a4 \ud68d\ub4dd\")\n\n    def on_focus_out(self, event):\n        \"\"\"\ud3ec\ucee4\uc2a4 \uc0c1\uc2e4 \uc774\ubca4\ud2b8\"\"\"\n        self.log_event(\"Focus Out\", \"\uc708\ub3c4\uc6b0 \ud3ec\ucee4\uc2a4 \uc0c1\uc2e4\")\n\n    def clear_log(self):\n        \"\"\"\ub85c\uadf8 \uc9c0\uc6b0\uae30\"\"\"\n        self.event_log.clear()\n        self.log_listbox.delete(0, tk.END)\n        self.log_event(\"Log Cleared\", \"\uc774\ubca4\ud2b8 \ub85c\uadf8\uac00 \uc9c0\uc6cc\uc84c\uc2b5\ub2c8\ub2e4\")\n\n    def run(self):\n        \"\"\"\ub370\ubaa8 \uc2e4\ud589\"\"\"\n        print(\"   \uc774\ubca4\ud2b8 \ucc98\ub9ac \ub370\ubaa8 \uc2dc\uc791\")\n        # self.root.mainloop()  # \uc2e4\uc81c \uc2e4\ud589 \uc2dc \uc8fc\uc11d \ud574\uc81c\n\ndef demonstrate_event_handling():\n    \"\"\"\uc774\ubca4\ud2b8 \ucc98\ub9ac \uc2dc\uc5f0\"\"\"\n    print(\"3. \uc774\ubca4\ud2b8 \uae30\ubc18 \ud504\ub85c\uadf8\ub798\ubc0d:\")\n\n    demo = EventHandlingDemo()\n    demo.run()\n\ndemonstrate_event_handling()\n</code></pre>"},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#22","title":"2.2 \uace0\uae09 \uc774\ubca4\ud2b8 \ucc98\ub9ac\uc640 \ucf5c\ubc31 \ud328\ud134","text":"<pre><code>print(\"\\n=== \uace0\uae09 \uc774\ubca4\ud2b8 \ucc98\ub9ac \ud328\ud134 ===\")\n\nclass CallbackManager:\n    \"\"\"\ucf5c\ubc31 \uad00\ub9ac\uc790\"\"\"\n\n    def __init__(self):\n        self.callbacks = {}\n\n    def register(self, event_type, callback):\n        \"\"\"\ucf5c\ubc31 \ub4f1\ub85d\"\"\"\n        if event_type not in self.callbacks:\n            self.callbacks[event_type] = []\n        self.callbacks[event_type].append(callback)\n\n    def unregister(self, event_type, callback):\n        \"\"\"\ucf5c\ubc31 \ud574\uc81c\"\"\"\n        if event_type in self.callbacks:\n            try:\n                self.callbacks[event_type].remove(callback)\n            except ValueError:\n                pass\n\n    def trigger(self, event_type, *args, **kwargs):\n        \"\"\"\uc774\ubca4\ud2b8 \ud2b8\ub9ac\uac70\"\"\"\n        if event_type in self.callbacks:\n            for callback in self.callbacks[event_type]:\n                try:\n                    callback(*args, **kwargs)\n                except Exception as e:\n                    print(f\"     \ucf5c\ubc31 \uc624\ub958 ({event_type}): {e}\")\n\nclass AdvancedEventDemo:\n    \"\"\"\uace0\uae09 \uc774\ubca4\ud2b8 \ucc98\ub9ac \ub370\ubaa8\"\"\"\n\n    def __init__(self):\n        self.root = tk.Tk()\n        self.root.title(\"\uace0\uae09 \uc774\ubca4\ud2b8 \ucc98\ub9ac\")\n        self.root.geometry(\"700x600\")\n\n        self.callback_manager = CallbackManager()\n        self.setup_callbacks()\n        self.create_widgets()\n\n        # \ucee4\uc2a4\ud140 \uc774\ubca4\ud2b8 \uc2dc\ubbac\ub808\uc774\uc158\uc6a9 \ud0c0\uc774\uba38\n        self.timer_active = False\n        self.timer_count = 0\n\n    def setup_callbacks(self):\n        \"\"\"\ucf5c\ubc31 \uc124\uc815\"\"\"\n\n        # \ub370\uc774\ud130 \ubcc0\uacbd \uc774\ubca4\ud2b8 \ucf5c\ubc31\ub4e4\n        self.callback_manager.register(\"data_changed\", self.on_data_validation)\n        self.callback_manager.register(\"data_changed\", self.on_data_logging)\n        self.callback_manager.register(\"data_changed\", self.on_data_backup)\n\n        # \uc0ac\uc6a9\uc790 \uc561\uc158 \ucf5c\ubc31\ub4e4\n        self.callback_manager.register(\"user_action\", self.on_user_analytics)\n        self.callback_manager.register(\"user_action\", self.on_user_feedback)\n\n        # \uc2dc\uc2a4\ud15c \uc774\ubca4\ud2b8 \ucf5c\ubc31\ub4e4\n        self.callback_manager.register(\"system_event\", self.on_system_monitoring)\n        self.callback_manager.register(\"system_event\", self.on_system_notification)\n\n        print(\"     \ucf5c\ubc31 \uc2dc\uc2a4\ud15c \uc124\uc815 \uc644\ub8cc\")\n\n    def create_widgets(self):\n        \"\"\"\uc704\uc82f \uc0dd\uc131\"\"\"\n\n        # \ucf5c\ubc31 \ud2b8\ub9ac\uac70 \ubc84\ud2bc\ub4e4\n        trigger_frame = tk.LabelFrame(self.root, text=\"\uc774\ubca4\ud2b8 \ud2b8\ub9ac\uac70\", padx=5, pady=5)\n        trigger_frame.pack(fill=tk.X, padx=10, pady=5)\n\n        btn_frame = tk.Frame(trigger_frame)\n        btn_frame.pack(fill=tk.X)\n\n        tk.Button(btn_frame, text=\"\ub370\uc774\ud130 \ubcc0\uacbd\", \n                 command=lambda: self.trigger_event(\"data_changed\", \"\uc0ac\uc6a9\uc790 \ub370\uc774\ud130\")).pack(side=tk.LEFT, padx=5)\n\n        tk.Button(btn_frame, text=\"\uc0ac\uc6a9\uc790 \uc561\uc158\", \n                 command=lambda: self.trigger_event(\"user_action\", \"\ubc84\ud2bc \ud074\ub9ad\")).pack(side=tk.LEFT, padx=5)\n\n        tk.Button(btn_frame, text=\"\uc2dc\uc2a4\ud15c \uc774\ubca4\ud2b8\", \n                 command=lambda: self.trigger_event(\"system_event\", \"\uba54\ubaa8\ub9ac \ubd80\uc871\")).pack(side=tk.LEFT, padx=5)\n\n        # \ud0c0\uc774\uba38 \uc81c\uc5b4\n        timer_frame = tk.Frame(trigger_frame)\n        timer_frame.pack(fill=tk.X, pady=5)\n\n        self.timer_btn = tk.Button(timer_frame, text=\"\ud0c0\uc774\uba38 \uc2dc\uc791\", command=self.toggle_timer)\n        self.timer_btn.pack(side=tk.LEFT, padx=5)\n\n        self.timer_label = tk.Label(timer_frame, text=\"\ud0c0\uc774\uba38 \ube44\ud65c\uc131\")\n        self.timer_label.pack(side=tk.LEFT, padx=10)\n\n        # \ucf5c\ubc31 \uad00\ub9ac\n        callback_frame = tk.LabelFrame(self.root, text=\"\ucf5c\ubc31 \uad00\ub9ac\", padx=5, pady=5)\n        callback_frame.pack(fill=tk.X, padx=10, pady=5)\n\n        # \ucf5c\ubc31 \ud65c\uc131\ud654/\ube44\ud65c\uc131\ud654 \uccb4\ud06c\ubc15\uc2a4\ub4e4\n        self.callback_vars = {}\n        callbacks = [\n            (\"data_validation\", \"\ub370\uc774\ud130 \uac80\uc99d\"),\n            (\"data_logging\", \"\ub370\uc774\ud130 \ub85c\uae45\"),\n            (\"data_backup\", \"\ub370\uc774\ud130 \ubc31\uc5c5\"),\n            (\"user_analytics\", \"\uc0ac\uc6a9\uc790 \ubd84\uc11d\"),\n            (\"user_feedback\", \"\uc0ac\uc6a9\uc790 \ud53c\ub4dc\ubc31\"),\n            (\"system_monitoring\", \"\uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1\"),\n            (\"system_notification\", \"\uc2dc\uc2a4\ud15c \uc54c\ub9bc\")\n        ]\n\n        for callback_id, callback_name in callbacks:\n            var = tk.BooleanVar(value=True)\n            self.callback_vars[callback_id] = var\n\n            checkbox = tk.Checkbutton(\n                callback_frame, \n                text=callback_name, \n                variable=var,\n                command=lambda cid=callback_id: self.toggle_callback(cid)\n            )\n            checkbox.pack(anchor=tk.W)\n\n        # \uc774\ubca4\ud2b8 \ub85c\uadf8\n        log_frame = tk.LabelFrame(self.root, text=\"\uc774\ubca4\ud2b8 \ub85c\uadf8\", padx=5, pady=5)\n        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)\n\n        log_container = tk.Frame(log_frame)\n        log_container.pack(fill=tk.BOTH, expand=True)\n\n        self.log_text = tk.Text(log_container, wrap=tk.WORD, state=tk.DISABLED)\n        log_scrollbar = tk.Scrollbar(log_container, orient=tk.VERTICAL, command=self.log_text.yview)\n        self.log_text.config(yscrollcommand=log_scrollbar.set)\n\n        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n        log_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)\n\n        # \ub85c\uadf8 \uc81c\uc5b4 \ubc84\ud2bc\ub4e4\n        log_control_frame = tk.Frame(log_frame)\n        log_control_frame.pack(fill=tk.X, pady=5)\n\n        tk.Button(log_control_frame, text=\"\ub85c\uadf8 \uc9c0\uc6b0\uae30\", command=self.clear_log).pack(side=tk.LEFT, padx=5)\n        tk.Button(log_control_frame, text=\"\ub85c\uadf8 \uc800\uc7a5\", command=self.save_log).pack(side=tk.LEFT, padx=5)\n\n        print(\"     \uace0\uae09 \uc774\ubca4\ud2b8 \ub370\ubaa8 \uc704\uc82f \uc0dd\uc131 \uc644\ub8cc\")\n\n    def trigger_event(self, event_type, data):\n        \"\"\"\uc774\ubca4\ud2b8 \ud2b8\ub9ac\uac70\"\"\"\n        self.log_message(f\"\uc774\ubca4\ud2b8 \ud2b8\ub9ac\uac70: {event_type} - {data}\")\n        self.callback_manager.trigger(event_type, data)\n\n    def toggle_callback(self, callback_id):\n        \"\"\"\ucf5c\ubc31 \ud65c\uc131\ud654/\ube44\ud65c\uc131\ud654\"\"\"\n        is_active = self.callback_vars[callback_id].get()\n        self.log_message(f\"\ucf5c\ubc31 {'\ud65c\uc131\ud654' if is_active else '\ube44\ud65c\uc131\ud654'}: {callback_id}\")\n\n    def toggle_timer(self):\n        \"\"\"\ud0c0\uc774\uba38 \ud1a0\uae00\"\"\"\n        if self.timer_active:\n            self.timer_active = False\n            self.timer_btn.config(text=\"\ud0c0\uc774\uba38 \uc2dc\uc791\")\n            self.timer_label.config(text=\"\ud0c0\uc774\uba38 \ube44\ud65c\uc131\")\n        else:\n            self.timer_active = True\n            self.timer_btn.config(text=\"\ud0c0\uc774\uba38 \uc911\uc9c0\")\n            self.timer_label.config(text=\"\ud0c0\uc774\uba38 \ud65c\uc131\")\n            self.timer_count = 0\n            self.run_timer()\n\n    def run_timer(self):\n        \"\"\"\ud0c0\uc774\uba38 \uc2e4\ud589\"\"\"\n        if self.timer_active:\n            self.timer_count += 1\n            self.timer_label.config(text=f\"\ud0c0\uc774\uba38: {self.timer_count}\ucd08\")\n\n            # 5\ucd08\ub9c8\ub2e4 \uc790\ub3d9 \uc774\ubca4\ud2b8 \ubc1c\uc0dd\n            if self.timer_count % 5 == 0:\n                self.trigger_event(\"system_event\", f\"\uc790\ub3d9 \uccb4\ud06c ({self.timer_count}\ucd08)\")\n\n            # 1\ucd08 \ud6c4 \uc7ac\uadc0 \ud638\ucd9c (\uc2e4\uc81c\ub85c\ub294 self.root.after \uc0ac\uc6a9)\n            # self.root.after(1000, self.run_timer)\n            print(f\"     \ud0c0\uc774\uba38 \ud2f1: {self.timer_count}\ucd08\")\n\n    # \ucf5c\ubc31 \ud568\uc218\ub4e4\n    def on_data_validation(self, data):\n        \"\"\"\ub370\uc774\ud130 \uac80\uc99d \ucf5c\ubc31\"\"\"\n        if self.callback_vars[\"data_validation\"].get():\n            self.log_message(f\"  \u2192 \ub370\uc774\ud130 \uac80\uc99d: {data} \uac80\uc99d \uc644\ub8cc\")\n\n    def on_data_logging(self, data):\n        \"\"\"\ub370\uc774\ud130 \ub85c\uae45 \ucf5c\ubc31\"\"\"\n        if self.callback_vars[\"data_logging\"].get():\n            self.log_message(f\"  \u2192 \ub370\uc774\ud130 \ub85c\uae45: {data} \ub85c\uadf8 \uae30\ub85d\")\n\n    def on_data_backup(self, data):\n        \"\"\"\ub370\uc774\ud130 \ubc31\uc5c5 \ucf5c\ubc31\"\"\"\n        if self.callback_vars[\"data_backup\"].get():\n            self.log_message(f\"  \u2192 \ub370\uc774\ud130 \ubc31\uc5c5: {data} \ubc31\uc5c5 \uc0dd\uc131\")\n\n    def on_user_analytics(self, action):\n        \"\"\"\uc0ac\uc6a9\uc790 \ubd84\uc11d \ucf5c\ubc31\"\"\"\n        if self.callback_vars[\"user_analytics\"].get():\n            self.log_message(f\"  \u2192 \uc0ac\uc6a9\uc790 \ubd84\uc11d: {action} \ubd84\uc11d \ub370\uc774\ud130 \uc218\uc9d1\")\n\n    def on_user_feedback(self, action):\n        \"\"\"\uc0ac\uc6a9\uc790 \ud53c\ub4dc\ubc31 \ucf5c\ubc31\"\"\"\n        if self.callback_vars[\"user_feedback\"].get():\n            self.log_message(f\"  \u2192 \uc0ac\uc6a9\uc790 \ud53c\ub4dc\ubc31: {action}\uc5d0 \ub300\ud55c \ud53c\ub4dc\ubc31 \ud45c\uc2dc\")\n\n    def on_system_monitoring(self, event):\n        \"\"\"\uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1 \ucf5c\ubc31\"\"\"\n        if self.callback_vars[\"system_monitoring\"].get():\n            self.log_message(f\"  \u2192 \uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1: {event} \uc0c1\ud0dc \uccb4\ud06c\")\n\n    def on_system_notification(self, event):\n        \"\"\"\uc2dc\uc2a4\ud15c \uc54c\ub9bc \ucf5c\ubc31\"\"\"\n        if self.callback_vars[\"system_notification\"].get():\n            self.log_message(f\"  \u2192 \uc2dc\uc2a4\ud15c \uc54c\ub9bc: {event} \uc54c\ub9bc \ubc1c\uc1a1\")\n\n    def log_message(self, message):\n        \"\"\"\ub85c\uadf8 \uba54\uc2dc\uc9c0 \ucd94\uac00\"\"\"\n        timestamp = datetime.now().strftime(\"%H:%M:%S\")\n        log_entry = f\"[{timestamp}] {message}\\n\"\n\n        self.log_text.config(state=tk.NORMAL)\n        self.log_text.insert(tk.END, log_entry)\n        self.log_text.see(tk.END)\n        self.log_text.config(state=tk.DISABLED)\n\n    def clear_log(self):\n        \"\"\"\ub85c\uadf8 \uc9c0\uc6b0\uae30\"\"\"\n        self.log_text.config(state=tk.NORMAL)\n        self.log_text.delete(\"1.0\", tk.END)\n        self.log_text.config(state=tk.DISABLED)\n        self.log_message(\"\ub85c\uadf8\uac00 \uc9c0\uc6cc\uc84c\uc2b5\ub2c8\ub2e4\")\n\n    def save_log(self):\n        \"\"\"\ub85c\uadf8 \uc800\uc7a5 (\uc2dc\ubbac\ub808\uc774\uc158)\"\"\"\n        # \uc2e4\uc81c\ub85c\ub294 filedialog.asksaveasfilename() \uc0ac\uc6a9\n        self.log_message(\"\ub85c\uadf8\uac00 \ud30c\uc77c\ub85c \uc800\uc7a5\ub418\uc5c8\uc2b5\ub2c8\ub2e4 (\uc2dc\ubbac\ub808\uc774\uc158)\")\n\n    def run(self):\n        \"\"\"\ub370\ubaa8 \uc2e4\ud589\"\"\"\n        print(\"   \uace0\uae09 \uc774\ubca4\ud2b8 \ucc98\ub9ac \ub370\ubaa8 \uc2dc\uc791\")\n        # self.root.mainloop()  # \uc2e4\uc81c \uc2e4\ud589 \uc2dc \uc8fc\uc11d \ud574\uc81c\n\ndef demonstrate_advanced_events():\n    \"\"\"\uace0\uae09 \uc774\ubca4\ud2b8 \ucc98\ub9ac \uc2dc\uc5f0\"\"\"\n    print(\"4. \uace0\uae09 \ucf5c\ubc31 \ud328\ud134:\")\n\n    demo = AdvancedEventDemo()\n    demo.run()\n\ndemonstrate_advanced_events()\n</code></pre>"},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#3","title":"3. \ub808\uc774\uc544\uc6c3 \uad00\ub9ac","text":""},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#31-pack-grid-place","title":"3.1 Pack, Grid, Place \ub9e4\ub2c8\uc800","text":"<pre><code>print(\"\\n=== \ub808\uc774\uc544\uc6c3 \uad00\ub9ac ===\")\n\nclass LayoutDemo:\n    \"\"\"\ub808\uc774\uc544\uc6c3 \uad00\ub9ac \ub370\ubaa8\"\"\"\n\n    def __init__(self):\n        self.root = tk.Tk()\n        self.root.title(\"\ub808\uc774\uc544\uc6c3 \uad00\ub9ac \ub370\ubaa8\")\n        self.root.geometry(\"900x700\")\n\n        self.notebook = ttk.Notebook(self.root)\n        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n\n        self.create_pack_demo()\n        self.create_grid_demo()\n        self.create_place_demo()\n        self.create_mixed_demo()\n\n    def create_pack_demo(self):\n        \"\"\"Pack \ub9e4\ub2c8\uc800 \ub370\ubaa8\"\"\"\n        tab = ttk.Frame(self.notebook)\n        self.notebook.add(tab, text=\"Pack \ub9e4\ub2c8\uc800\")\n\n        # \uc124\uba85\n        description = tk.Label(\n            tab, \n            text=\"Pack \ub9e4\ub2c8\uc800: \uc704\uc82f\uc744 TOP, BOTTOM, LEFT, RIGHT\ub85c \uc21c\ucc28\uc801\uc73c\ub85c \ubc30\uce58\",\n            font=(\"Arial\", 10, \"bold\")\n        )\n        description.pack(pady=5)\n\n        # \uae30\ubcf8 pack \uc608\uc81c\n        basic_frame = tk.LabelFrame(tab, text=\"\uae30\ubcf8 pack() \uc0ac\uc6a9\ubc95\", padx=5, pady=5)\n        basic_frame.pack(fill=tk.X, padx=10, pady=5)\n\n        tk.Label(basic_frame, text=\"TOP\", bg=\"lightblue\").pack(side=tk.TOP, fill=tk.X, padx=2, pady=2)\n        tk.Label(basic_frame, text=\"BOTTOM\", bg=\"lightgreen\").pack(side=tk.BOTTOM, fill=tk.X, padx=2, pady=2)\n        tk.Label(basic_frame, text=\"LEFT\", bg=\"lightcoral\").pack(side=tk.LEFT, fill=tk.Y, padx=2, pady=2)\n        tk.Label(basic_frame, text=\"RIGHT\", bg=\"lightyellow\").pack(side=tk.RIGHT, fill=tk.Y, padx=2, pady=2)\n        tk.Label(basic_frame, text=\"CENTER (fill=BOTH, expand=True)\", \n                bg=\"lightgray\").pack(fill=tk.BOTH, expand=True, padx=2, pady=2)\n\n        # \ubcf5\uc7a1\ud55c pack \uc608\uc81c\n        complex_frame = tk.LabelFrame(tab, text=\"\ubcf5\uc7a1\ud55c pack \ub808\uc774\uc544\uc6c3\", padx=5, pady=5)\n        complex_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)\n\n        # \ud5e4\ub354\n        header = tk.Frame(complex_frame, bg=\"darkblue\", height=50)\n        header.pack(side=tk.TOP, fill=tk.X, padx=2, pady=2)\n        header.pack_propagate(False)\n        tk.Label(header, text=\"\ud5e4\ub354 \uc601\uc5ed\", bg=\"darkblue\", fg=\"white\", \n                font=(\"Arial\", 12, \"bold\")).pack(expand=True)\n\n        # \uba54\uc778 \ucee8\ud150\uce20 \uc601\uc5ed\n        main_area = tk.Frame(complex_frame)\n        main_area.pack(fill=tk.BOTH, expand=True, padx=2, pady=2)\n\n        # \uc0ac\uc774\ub4dc\ubc14\n        sidebar = tk.Frame(main_area, bg=\"lightsteelblue\", width=150)\n        sidebar.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 2))\n        sidebar.pack_propagate(False)\n        tk.Label(sidebar, text=\"\uc0ac\uc774\ub4dc\ubc14\", bg=\"lightsteelblue\").pack(pady=10)\n\n        # \ucf58\ud150\uce20\n        content = tk.Frame(main_area, bg=\"white\")\n        content.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n        tk.Label(content, text=\"\uba54\uc778 \ucf58\ud150\uce20 \uc601\uc5ed\\n(fill=BOTH, expand=True)\", \n                bg=\"white\", justify=tk.CENTER).pack(expand=True)\n\n        # \ud478\ud130\n        footer = tk.Frame(complex_frame, bg=\"darkgray\", height=30)\n        footer.pack(side=tk.BOTTOM, fill=tk.X, padx=2, pady=2)\n        footer.pack_propagate(False)\n        tk.Label(footer, text=\"\ud478\ud130 \uc601\uc5ed\", bg=\"darkgray\", fg=\"white\").pack(expand=True)\n\n        print(\"     Pack \ub370\ubaa8 \uc0dd\uc131 \uc644\ub8cc\")\n\n    def create_grid_demo(self):\n        \"\"\"Grid \ub9e4\ub2c8\uc800 \ub370\ubaa8\"\"\"\n        tab = ttk.Frame(self.notebook)\n        self.notebook.add(tab, text=\"Grid \ub9e4\ub2c8\uc800\")\n\n        # \uc124\uba85\n        description = tk.Label(\n            tab, \n            text=\"Grid \ub9e4\ub2c8\uc800: \uc704\uc82f\uc744 \ud589(row)\uacfc \uc5f4(column)\uc758 \uaca9\uc790 \ud615\ud0dc\ub85c \ubc30\uce58\",\n            font=(\"Arial\", 10, \"bold\")\n        )\n        description.grid(row=0, column=0, columnspan=3, pady=5, sticky=\"ew\")\n\n        # \uae30\ubcf8 grid \uc608\uc81c\n        basic_frame = tk.LabelFrame(tab, text=\"\uae30\ubcf8 grid() \uc0ac\uc6a9\ubc95\", padx=5, pady=5)\n        basic_frame.grid(row=1, column=0, columnspan=3, sticky=\"ew\", padx=10, pady=5)\n\n        # \uac04\ub2e8\ud55c \uaca9\uc790 \ub808\uc774\uc544\uc6c3\n        for i in range(3):\n            for j in range(4):\n                label = tk.Label(\n                    basic_frame, \n                    text=f\"({i},{j})\", \n                    bg=f\"#{200+i*20:02x}{200+j*10:02x}{150:02x}\",\n                    relief=tk.RAISED,\n                    borderwidth=1\n                )\n                label.grid(row=i, column=j, padx=1, pady=1, sticky=\"ew\")\n\n        # \ud3fc \ub808\uc774\uc544\uc6c3 \uc608\uc81c\n        form_frame = tk.LabelFrame(tab, text=\"\ud3fc \ub808\uc774\uc544\uc6c3 (sticky, span \ud65c\uc6a9)\", padx=5, pady=5)\n        form_frame.grid(row=2, column=0, columnspan=2, sticky=\"ew\", padx=10, pady=5)\n\n        # \ud3fc \ud544\ub4dc\ub4e4\n        tk.Label(form_frame, text=\"\uc774\ub984:\").grid(row=0, column=0, sticky=\"e\", padx=5, pady=2)\n        tk.Entry(form_frame, width=20).grid(row=0, column=1, sticky=\"ew\", padx=5, pady=2)\n\n        tk.Label(form_frame, text=\"\uc774\uba54\uc77c:\").grid(row=1, column=0, sticky=\"e\", padx=5, pady=2)\n        tk.Entry(form_frame, width=20).grid(row=1, column=1, sticky=\"ew\", padx=5, pady=2)\n\n        tk.Label(form_frame, text=\"\uba54\uc2dc\uc9c0:\").grid(row=2, column=0, sticky=\"ne\", padx=5, pady=2)\n        message_text = tk.Text(form_frame, height=4, width=30)\n        message_text.grid(row=2, column=1, sticky=\"ew\", padx=5, pady=2)\n\n        # \ubc84\ud2bc\ub4e4 (columnspan \uc0ac\uc6a9)\n        button_frame = tk.Frame(form_frame)\n        button_frame.grid(row=3, column=0, columnspan=2, pady=10)\n\n        tk.Button(button_frame, text=\"\uc81c\ucd9c\").pack(side=tk.LEFT, padx=5)\n        tk.Button(button_frame, text=\"\ucde8\uc18c\").pack(side=tk.LEFT, padx=5)\n\n        # \uc5f4 \uac00\uc911\uce58 \uc124\uc815\n        form_frame.columnconfigure(1, weight=1)\n\n        # \uacc4\uc0b0\uae30 \ub808\uc774\uc544\uc6c3 \uc608\uc81c\n        calc_frame = tk.LabelFrame(tab, text=\"\uacc4\uc0b0\uae30 \ub808\uc774\uc544\uc6c3\", padx=5, pady=5)\n        calc_frame.grid(row=2, column=2, sticky=\"nsew\", padx=10, pady=5)\n\n        # \ub514\uc2a4\ud50c\ub808\uc774\n        display = tk.Entry(calc_frame, font=(\"Arial\", 14), justify=\"right\", state=\"readonly\")\n        display.grid(row=0, column=0, columnspan=4, sticky=\"ew\", padx=2, pady=2)\n\n        # \ubc84\ud2bc\ub4e4\n        buttons = [\n            ['C', '\u00b1', '%', '\u00f7'],\n            ['7', '8', '9', '\u00d7'],\n            ['4', '5', '6', '-'],\n            ['1', '2', '3', '+'],\n            ['0', '0', '.', '=']\n        ]\n\n        for i, row in enumerate(buttons):\n            for j, btn_text in enumerate(row):\n                if i == 4 and j == 0:  # '0' \ubc84\ud2bc\uc740 2\uce78 \ucc28\uc9c0\n                    btn = tk.Button(calc_frame, text=btn_text, font=(\"Arial\", 12))\n                    btn.grid(row=i+1, column=j, columnspan=2, sticky=\"ew\", padx=1, pady=1)\n                elif i == 4 and j == 1:  # \uc774\ubbf8 '0' \ubc84\ud2bc\uc73c\ub85c \uc0ac\uc6a9\ub428\n                    continue\n                else:\n                    btn = tk.Button(calc_frame, text=btn_text, font=(\"Arial\", 12))\n                    btn.grid(row=i+1, column=j, sticky=\"ew\", padx=1, pady=1)\n\n        # \uc5f4\uacfc \ud589 \uac00\uc911\uce58 \uc124\uc815\n        for i in range(4):\n            calc_frame.columnconfigure(i, weight=1)\n\n        # \uba54\uc778 \ud0ed \uc5f4 \uac00\uc911\uce58 \uc124\uc815\n        tab.columnconfigure(0, weight=1)\n        tab.columnconfigure(1, weight=1)\n        tab.columnconfigure(2, weight=1)\n\n        print(\"     Grid \ub370\ubaa8 \uc0dd\uc131 \uc644\ub8cc\")\n\n    def create_place_demo(self):\n        \"\"\"Place \ub9e4\ub2c8\uc800 \ub370\ubaa8\"\"\"\n        tab = ttk.Frame(self.notebook)\n        self.notebook.add(tab, text=\"Place \ub9e4\ub2c8\uc800\")\n\n        # \uc124\uba85\n        description = tk.Label(\n            tab, \n            text=\"Place \ub9e4\ub2c8\uc800: \uc704\uc82f\uc744 \uc808\ub300 \ub610\ub294 \uc0c1\ub300 \uc88c\ud45c\ub85c \uc815\ud655\ud55c \uc704\uce58\uc5d0 \ubc30\uce58\",\n            font=(\"Arial\", 10, \"bold\")\n        )\n        description.place(x=10, y=10)\n\n        # \uc808\ub300 \uc88c\ud45c \uc608\uc81c\n        abs_frame = tk.LabelFrame(tab, text=\"\uc808\ub300 \uc88c\ud45c \ubc30\uce58\", padx=5, pady=5, width=300, height=200)\n        abs_frame.place(x=20, y=50)\n        abs_frame.place_propagate(False)\n\n        # \uc808\ub300 \uc88c\ud45c\ub85c \uc704\uc82f\ub4e4 \ubc30\uce58\n        tk.Label(abs_frame, text=\"(10, 10)\", bg=\"lightblue\").place(x=10, y=10)\n        tk.Label(abs_frame, text=\"(100, 50)\", bg=\"lightgreen\").place(x=100, y=50)\n        tk.Label(abs_frame, text=\"(200, 100)\", bg=\"lightcoral\").place(x=200, y=100)\n        tk.Button(abs_frame, text=\"\ubc84\ud2bc\", width=8).place(x=50, y=150)\n\n        # \uc0c1\ub300 \uc88c\ud45c \uc608\uc81c\n        rel_frame = tk.LabelFrame(tab, text=\"\uc0c1\ub300 \uc88c\ud45c \ubc30\uce58 (relx, rely)\", padx=5, pady=5, width=300, height=200)\n        rel_frame.place(x=350, y=50)\n        rel_frame.place_propagate(False)\n\n        # \uc0c1\ub300 \uc88c\ud45c\ub85c \uc704\uc82f\ub4e4 \ubc30\uce58 (0.0 ~ 1.0)\n        tk.Label(rel_frame, text=\"\uc911\uc559\", bg=\"yellow\").place(relx=0.5, rely=0.5, anchor=\"center\")\n        tk.Label(rel_frame, text=\"\uc88c\uc0c1\ub2e8\", bg=\"lightblue\").place(relx=0, rely=0, anchor=\"nw\")\n        tk.Label(rel_frame, text=\"\uc6b0\ud558\ub2e8\", bg=\"lightgreen\").place(relx=1, rely=1, anchor=\"se\")\n        tk.Label(rel_frame, text=\"\uc6b0\uc0c1\ub2e8\", bg=\"lightcoral\").place(relx=1, rely=0, anchor=\"ne\")\n        tk.Label(rel_frame, text=\"\uc88c\ud558\ub2e8\", bg=\"lightyellow\").place(relx=0, rely=1, anchor=\"sw\")\n\n        # \ud06c\uae30 \uc870\uc808 \uc608\uc81c\n        size_frame = tk.LabelFrame(tab, text=\"\ud06c\uae30 \uc870\uc808 (relwidth, relheight)\", padx=5, pady=5, \n                                  width=300, height=200)\n        size_frame.place(x=20, y=280)\n        size_frame.place_propagate(False)\n\n        # \uc0c1\ub300 \ud06c\uae30\ub85c \uc704\uc82f\ub4e4 \ubc30\uce58\n        tk.Label(size_frame, text=\"50% \ub108\ube44\", bg=\"lightblue\").place(\n            relx=0, rely=0, relwidth=0.5, height=30\n        )\n        tk.Label(size_frame, text=\"\uc804\uccb4 \ub108\ube44\", bg=\"lightgreen\").place(\n            relx=0, rely=0.2, relwidth=1, height=30\n        )\n        tk.Label(size_frame, text=\"\uc911\uc559 70%\", bg=\"lightcoral\").place(\n            relx=0.15, rely=0.4, relwidth=0.7, height=30\n        )\n        tk.Label(size_frame, text=\"\uc804\uccb4 \ub192\uc774 30%\", bg=\"lightyellow\").place(\n            relx=0, rely=0.7, relwidth=1, relheight=0.3\n        )\n\n        # \uc624\ubc84\ub808\uc774 \uc608\uc81c\n        overlay_frame = tk.LabelFrame(tab, text=\"\uc624\ubc84\ub808\uc774 \ud6a8\uacfc\", padx=5, pady=5, \n                                     width=300, height=200)\n        overlay_frame.place(x=350, y=280)\n        overlay_frame.place_propagate(False)\n\n        # \ubc30\uacbd \uc704\uc82f\n        bg_label = tk.Label(overlay_frame, text=\"\ubc30\uacbd \ub808\uc774\uc5b4\", bg=\"lightgray\", \n                           font=(\"Arial\", 20))\n        bg_label.place(relwidth=1, relheight=1)\n\n        # \uc624\ubc84\ub808\uc774 \uc704\uc82f\ub4e4\n        overlay1 = tk.Label(overlay_frame, text=\"\uc624\ubc84\ub808\uc774 1\", bg=\"red\", fg=\"white\")\n        overlay1.place(x=20, y=20, width=100, height=30)\n\n        overlay2 = tk.Label(overlay_frame, text=\"\uc624\ubc84\ub808\uc774 2\", bg=\"blue\", fg=\"white\")\n        overlay2.place(x=50, y=50, width=100, height=30)\n\n        overlay3 = tk.Label(overlay_frame, text=\"\ud22c\uba85 \ud6a8\uacfc\", bg=\"green\", fg=\"white\")\n        overlay3.place(relx=0.5, rely=0.8, anchor=\"center\")\n\n        print(\"     Place \ub370\ubaa8 \uc0dd\uc131 \uc644\ub8cc\")\n\n    def create_mixed_demo(self):\n        \"\"\"\ud63c\ud569 \ub808\uc774\uc544\uc6c3 \ub370\ubaa8\"\"\"\n        tab = ttk.Frame(self.notebook)\n        self.notebook.add(tab, text=\"\ud63c\ud569 \ub808\uc774\uc544\uc6c3\")\n\n        # \uc124\uba85\n        description = tk.Label(\n            tab, \n            text=\"\uc2e4\uc81c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c\ub294 \uc5ec\ub7ec \ub808\uc774\uc544\uc6c3 \ub9e4\ub2c8\uc800\ub97c \uc870\ud569\ud558\uc5ec \uc0ac\uc6a9\",\n            font=(\"Arial\", 10, \"bold\")\n        )\n        description.pack(pady=5)\n\n        # \uba54\uc778 \ucee8\ud14c\uc774\ub108 (pack \uc0ac\uc6a9)\n        main_container = tk.Frame(tab)\n        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)\n\n        # \uc0c1\ub2e8 \ud234\ubc14 (pack \uc0ac\uc6a9)\n        toolbar = tk.Frame(main_container, bg=\"lightgray\", height=40)\n        toolbar.pack(side=tk.TOP, fill=tk.X, pady=(0, 5))\n        toolbar.pack_propagate(False)\n\n        # \ud234\ubc14 \ubc84\ud2bc\ub4e4 (pack \uc0ac\uc6a9)\n        tk.Button(toolbar, text=\"\uc0c8\ub85c \ub9cc\ub4e4\uae30\").pack(side=tk.LEFT, padx=5, pady=5)\n        tk.Button(toolbar, text=\"\uc5f4\uae30\").pack(side=tk.LEFT, padx=5, pady=5)\n        tk.Button(toolbar, text=\"\uc800\uc7a5\").pack(side=tk.LEFT, padx=5, pady=5)\n\n        # \uad6c\ubd84\uc120\n        tk.Frame(toolbar, width=2, bg=\"gray\").pack(side=tk.LEFT, fill=tk.Y, padx=5, pady=2)\n\n        tk.Button(toolbar, text=\"\uc2e4\ud589\").pack(side=tk.LEFT, padx=5, pady=5)\n        tk.Button(toolbar, text=\"\ub514\ubc84\uadf8\").pack(side=tk.LEFT, padx=5, pady=5)\n\n        # \uc0c1\ud0dc \ud45c\uc2dc (\uc624\ub978\ucabd \uc815\ub82c)\n        status_label = tk.Label(toolbar, text=\"\uc900\ube44\", bg=\"lightgray\")\n        status_label.pack(side=tk.RIGHT, padx=10, pady=5)\n\n        # \uba54\uc778 \uc601\uc5ed (pack + grid \uc870\ud569)\n        main_area = tk.Frame(main_container)\n        main_area.pack(fill=tk.BOTH, expand=True)\n\n        # \uc88c\uce21 \ud328\ub110 (pack \uc0ac\uc6a9)\n        left_panel = tk.Frame(main_area, bg=\"lightsteelblue\", width=200)\n        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 5))\n        left_panel.pack_propagate(False)\n\n        # \uc88c\uce21 \ud328\ub110 \ub0b4\uc6a9 (grid \uc0ac\uc6a9)\n        tk.Label(left_panel, text=\"\ud504\ub85c\uc81d\ud2b8 \ud0d0\uc0c9\uae30\", bg=\"lightsteelblue\", \n                font=(\"Arial\", 10, \"bold\")).grid(row=0, column=0, sticky=\"ew\", padx=5, pady=5)\n\n        # \ud2b8\ub9ac\ubdf0 \uc2dc\ubbac\ub808\uc774\uc158\n        tree_frame = tk.Frame(left_panel, bg=\"white\")\n        tree_frame.grid(row=1, column=0, sticky=\"nsew\", padx=5, pady=5)\n\n        tree_items = [\"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8\", \"  \ud83d\udcc4 main.py\", \"  \ud83d\udcc4 utils.py\", \"\ud83d\udcc1 tests\", \"  \ud83d\udcc4 test_main.py\"]\n        for item in tree_items:\n            tk.Label(tree_frame, text=item, bg=\"white\", anchor=\"w\").pack(fill=tk.X, padx=2, pady=1)\n\n        left_panel.rowconfigure(1, weight=1)\n        left_panel.columnconfigure(0, weight=1)\n\n        # \uc6b0\uce21 \uc601\uc5ed (pack \uc0ac\uc6a9)\n        right_area = tk.Frame(main_area)\n        right_area.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n\n        # \ud0ed \uc601\uc5ed (grid \uc0ac\uc6a9)\n        tab_frame = tk.Frame(right_area, bg=\"lightgray\", height=30)\n        tab_frame.pack(side=tk.TOP, fill=tk.X)\n        tab_frame.pack_propagate(False)\n\n        # \ud0ed \ubc84\ud2bc\ub4e4 (pack \uc0ac\uc6a9)\n        tk.Button(tab_frame, text=\"main.py\", relief=tk.FLAT, bg=\"white\").pack(side=tk.LEFT, padx=1, pady=2)\n        tk.Button(tab_frame, text=\"utils.py\", relief=tk.FLAT).pack(side=tk.LEFT, padx=1, pady=2)\n\n        # \uc5d0\ub514\ud130 \uc601\uc5ed (pack \uc0ac\uc6a9)\n        editor_frame = tk.Frame(right_area, bg=\"white\")\n        editor_frame.pack(fill=tk.BOTH, expand=True)\n\n        # \uc904 \ubc88\ud638\uc640 \ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130 (grid \uc0ac\uc6a9)\n        line_numbers = tk.Text(editor_frame, width=4, bg=\"lightgray\", state=tk.DISABLED)\n        line_numbers.grid(row=0, column=0, sticky=\"ns\")\n\n        editor_text = tk.Text(editor_frame, wrap=tk.NONE)\n        editor_text.grid(row=0, column=1, sticky=\"nsew\")\n\n        # \uc2a4\ud06c\ub864\ubc14 (grid \uc0ac\uc6a9)\n        v_scrollbar = tk.Scrollbar(editor_frame, orient=tk.VERTICAL, command=editor_text.yview)\n        v_scrollbar.grid(row=0, column=2, sticky=\"ns\")\n        editor_text.config(yscrollcommand=v_scrollbar.set)\n\n        h_scrollbar = tk.Scrollbar(editor_frame, orient=tk.HORIZONTAL, command=editor_text.xview)\n        h_scrollbar.grid(row=1, column=1, sticky=\"ew\")\n        editor_text.config(xscrollcommand=h_scrollbar.set)\n\n        # \uadf8\ub9ac\ub4dc \uac00\uc911\uce58 \uc124\uc815\n        editor_frame.rowconfigure(0, weight=1)\n        editor_frame.columnconfigure(1, weight=1)\n\n        # \uc0d8\ud50c \ucf54\ub4dc \ucd94\uac00\n        sample_code = \"\"\"def hello_world():\n    print(\"Hello, GUI World!\")\n    return \"Success\"\n\nif __name__ == \"__main__\":\n    hello_world()\n\"\"\"\n        editor_text.insert(\"1.0\", sample_code)\n\n        # \uc904 \ubc88\ud638 \ucd94\uac00\n        for i in range(1, 7):\n            line_numbers.config(state=tk.NORMAL)\n            line_numbers.insert(tk.END, f\"{i}\\n\")\n            line_numbers.config(state=tk.DISABLED)\n\n        # \ud558\ub2e8 \uc0c1\ud0dc\ubc14 (pack \uc0ac\uc6a9)\n        status_bar = tk.Frame(main_container, bg=\"darkgray\", height=25)\n        status_bar.pack(side=tk.BOTTOM, fill=tk.X, pady=(5, 0))\n        status_bar.pack_propagate(False)\n\n        tk.Label(status_bar, text=\"\uc904: 1, \uc5f4: 1\", bg=\"darkgray\", fg=\"white\").pack(side=tk.LEFT, padx=10)\n        tk.Label(status_bar, text=\"Python\", bg=\"darkgray\", fg=\"white\").pack(side=tk.RIGHT, padx=10)\n\n        print(\"     \ud63c\ud569 \ub808\uc774\uc544\uc6c3 \ub370\ubaa8 \uc0dd\uc131 \uc644\ub8cc\")\n\n    def run(self):\n        \"\"\"\ub370\ubaa8 \uc2e4\ud589\"\"\"\n        print(\"   \ub808\uc774\uc544\uc6c3 \uad00\ub9ac \ub370\ubaa8 \uc2dc\uc791\")\n        # self.root.mainloop()  # \uc2e4\uc81c \uc2e4\ud589 \uc2dc \uc8fc\uc11d \ud574\uc81c\n\ndef demonstrate_layouts():\n    \"\"\"\ub808\uc774\uc544\uc6c3 \uad00\ub9ac \uc2dc\uc5f0\"\"\"\n    print(\"5. \ub808\uc774\uc544\uc6c3 \ub9e4\ub2c8\uc800:\")\n\n    demo = LayoutDemo()\n    demo.run()\n\ndemonstrate_layouts()\n</code></pre>"},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#4-gui","title":"4. \uace0\uae09 GUI \uae30\ub2a5","text":""},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#41","title":"4.1 \uba54\ub274\uc640 \ub300\ud654\uc0c1\uc790","text":"<pre><code>print(\"\\n=== \uace0\uae09 GUI \uae30\ub2a5 ===\")\n\nclass AdvancedGUIFeatures:\n    \"\"\"\uace0\uae09 GUI \uae30\ub2a5 \ub370\ubaa8\"\"\"\n\n    def __init__(self):\n        self.root = tk.Tk()\n        self.root.title(\"\uace0\uae09 GUI \uae30\ub2a5\")\n        self.root.geometry(\"800x600\")\n\n        # \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc0c1\ud0dc\n        self.file_content = \"\"\n        self.is_modified = False\n        self.current_file = None\n\n        self.create_menu()\n        self.create_toolbar()\n        self.create_main_content()\n        self.create_status_bar()\n        self.create_context_menu()\n\n        # \ud0a4\ubcf4\ub4dc \ub2e8\ucd95\ud0a4 \ubc14\uc778\ub529\n        self.bind_shortcuts()\n\n    def create_menu(self):\n        \"\"\"\uba54\ub274\ubc14 \uc0dd\uc131\"\"\"\n\n        menubar = tk.Menu(self.root)\n        self.root.config(menu=menubar)\n\n        # \ud30c\uc77c \uba54\ub274\n        file_menu = tk.Menu(menubar, tearoff=0)\n        menubar.add_cascade(label=\"\ud30c\uc77c\", menu=file_menu)\n\n        file_menu.add_command(label=\"\uc0c8\ub85c \ub9cc\ub4e4\uae30\", command=self.new_file, accelerator=\"Ctrl+N\")\n        file_menu.add_command(label=\"\uc5f4\uae30...\", command=self.open_file, accelerator=\"Ctrl+O\")\n        file_menu.add_separator()\n        file_menu.add_command(label=\"\uc800\uc7a5\", command=self.save_file, accelerator=\"Ctrl+S\")\n        file_menu.add_command(label=\"\ub2e4\ub978 \uc774\ub984\uc73c\ub85c \uc800\uc7a5...\", command=self.save_as_file, accelerator=\"Ctrl+Shift+S\")\n        file_menu.add_separator()\n\n        # \ucd5c\uadfc \ud30c\uc77c \uc11c\ube0c\uba54\ub274\n        recent_menu = tk.Menu(file_menu, tearoff=0)\n        file_menu.add_cascade(label=\"\ucd5c\uadfc \ud30c\uc77c\", menu=recent_menu)\n        recent_menu.add_command(label=\"\ud30c\uc77c1.txt\")\n        recent_menu.add_command(label=\"\ud30c\uc77c2.py\")\n        recent_menu.add_command(label=\"\ud504\ub85c\uc81d\ud2b8.md\")\n\n        file_menu.add_separator()\n        file_menu.add_command(label=\"\uc885\ub8cc\", command=self.quit_app, accelerator=\"Ctrl+Q\")\n\n        # \ud3b8\uc9d1 \uba54\ub274\n        edit_menu = tk.Menu(menubar, tearoff=0)\n        menubar.add_cascade(label=\"\ud3b8\uc9d1\", menu=edit_menu)\n\n        edit_menu.add_command(label=\"\uc2e4\ud589 \ucde8\uc18c\", command=self.undo, accelerator=\"Ctrl+Z\")\n        edit_menu.add_command(label=\"\ub2e4\uc2dc \uc2e4\ud589\", command=self.redo, accelerator=\"Ctrl+Y\")\n        edit_menu.add_separator()\n        edit_menu.add_command(label=\"\uc798\ub77c\ub0b4\uae30\", command=self.cut, accelerator=\"Ctrl+X\")\n        edit_menu.add_command(label=\"\ubcf5\uc0ac\", command=self.copy, accelerator=\"Ctrl+C\")\n        edit_menu.add_command(label=\"\ubd99\uc5ec\ub123\uae30\", command=self.paste, accelerator=\"Ctrl+V\")\n        edit_menu.add_separator()\n        edit_menu.add_command(label=\"\ubaa8\ub450 \uc120\ud0dd\", command=self.select_all, accelerator=\"Ctrl+A\")\n        edit_menu.add_command(label=\"\ucc3e\uae30...\", command=self.find, accelerator=\"Ctrl+F\")\n        edit_menu.add_command(label=\"\ubc14\uafb8\uae30...\", command=self.replace, accelerator=\"Ctrl+H\")\n\n        # \ubcf4\uae30 \uba54\ub274 (\uccb4\ud06c \uba54\ub274 \uc608\uc81c)\n        view_menu = tk.Menu(menubar, tearoff=0)\n        menubar.add_cascade(label=\"\ubcf4\uae30\", menu=view_menu)\n\n        self.show_toolbar_var = tk.BooleanVar(value=True)\n        self.show_status_var = tk.BooleanVar(value=True)\n        self.word_wrap_var = tk.BooleanVar(value=False)\n\n        view_menu.add_checkbutton(label=\"\ud234\ubc14\", variable=self.show_toolbar_var, command=self.toggle_toolbar)\n        view_menu.add_checkbutton(label=\"\uc0c1\ud0dc\ubc14\", variable=self.show_status_var, command=self.toggle_status_bar)\n        view_menu.add_separator()\n        view_menu.add_checkbutton(label=\"\uc904 \ubc14\uafc8\", variable=self.word_wrap_var, command=self.toggle_word_wrap)\n        view_menu.add_separator()\n\n        # \ud655\ub300/\ucd95\uc18c \uc11c\ube0c\uba54\ub274\n        zoom_menu = tk.Menu(view_menu, tearoff=0)\n        view_menu.add_cascade(label=\"\ud655\ub300/\ucd95\uc18c\", menu=zoom_menu)\n        zoom_menu.add_command(label=\"\ud655\ub300\", command=lambda: self.zoom(1.2))\n        zoom_menu.add_command(label=\"\ucd95\uc18c\", command=lambda: self.zoom(0.8))\n        zoom_menu.add_command(label=\"\uc6d0\ub798 \ud06c\uae30\", command=lambda: self.zoom(1.0, reset=True))\n\n        # \ub3c4\uad6c \uba54\ub274\n        tools_menu = tk.Menu(menubar, tearoff=0)\n        menubar.add_cascade(label=\"\ub3c4\uad6c\", menu=tools_menu)\n\n        tools_menu.add_command(label=\"\uc0c9\uc0c1 \uc120\ud0dd\uae30\", command=self.color_chooser)\n        tools_menu.add_command(label=\"\ud3f0\ud2b8 \uc120\ud0dd\uae30\", command=self.font_chooser)\n        tools_menu.add_separator()\n        tools_menu.add_command(label=\"\uc124\uc815...\", command=self.show_preferences)\n\n        # \ub3c4\uc6c0\ub9d0 \uba54\ub274\n        help_menu = tk.Menu(menubar, tearoff=0)\n        menubar.add_cascade(label=\"\ub3c4\uc6c0\ub9d0\", menu=help_menu)\n\n        help_menu.add_command(label=\"\uc0ac\uc6a9\ubc95\", command=self.show_help)\n        help_menu.add_command(label=\"\ud0a4\ubcf4\ub4dc \ub2e8\ucd95\ud0a4\", command=self.show_shortcuts)\n        help_menu.add_separator()\n        help_menu.add_command(label=\"\uc815\ubcf4\", command=self.show_about)\n\n        print(\"     \uba54\ub274\ubc14 \uc0dd\uc131 \uc644\ub8cc\")\n\n    def create_toolbar(self):\n        \"\"\"\ud234\ubc14 \uc0dd\uc131\"\"\"\n\n        self.toolbar_frame = tk.Frame(self.root, bg=\"lightgray\", height=40)\n        self.toolbar_frame.pack(side=tk.TOP, fill=tk.X)\n        self.toolbar_frame.pack_propagate(False)\n\n        # \ud234\ubc14 \ubc84\ud2bc\ub4e4\n        buttons = [\n            (\"\uc0c8\ub85c \ub9cc\ub4e4\uae30\", self.new_file, \"\ud83d\udcc4\"),\n            (\"\uc5f4\uae30\", self.open_file, \"\ud83d\udcc1\"),\n            (\"\uc800\uc7a5\", self.save_file, \"\ud83d\udcbe\"),\n            (\"-\", None, None),  # \uad6c\ubd84\uc120\n            (\"\uc798\ub77c\ub0b4\uae30\", self.cut, \"\u2702\ufe0f\"),\n            (\"\ubcf5\uc0ac\", self.copy, \"\ud83d\udccb\"),\n            (\"\ubd99\uc5ec\ub123\uae30\", self.paste, \"\ud83d\udccc\"),\n            (\"-\", None, None),  # \uad6c\ubd84\uc120\n            (\"\ucc3e\uae30\", self.find, \"\ud83d\udd0d\"),\n            (\"\uc124\uc815\", self.show_preferences, \"\u2699\ufe0f\")\n        ]\n\n        for btn_text, btn_command, btn_icon in buttons:\n            if btn_text == \"-\":\n                # \uad6c\ubd84\uc120\n                separator = tk.Frame(self.toolbar_frame, width=2, bg=\"gray\")\n                separator.pack(side=tk.LEFT, fill=tk.Y, padx=5, pady=5)\n            else:\n                btn = tk.Button(\n                    self.toolbar_frame,\n                    text=f\"{btn_icon} {btn_text}\",\n                    command=btn_command,\n                    relief=tk.FLAT,\n                    padx=10,\n                    pady=5\n                )\n                btn.pack(side=tk.LEFT, padx=2, pady=5)\n\n        print(\"     \ud234\ubc14 \uc0dd\uc131 \uc644\ub8cc\")\n\n    def create_main_content(self):\n        \"\"\"\uba54\uc778 \ucf58\ud150\uce20 \uc601\uc5ed \uc0dd\uc131\"\"\"\n\n        self.main_frame = tk.Frame(self.root)\n        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)\n\n        # \ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130\n        self.text_editor = tk.Text(\n            self.main_frame,\n            wrap=tk.NONE,\n            undo=True,\n            font=(\"Consolas\", 11)\n        )\n\n        # \uc2a4\ud06c\ub864\ubc14\n        v_scrollbar = tk.Scrollbar(self.main_frame, orient=tk.VERTICAL, command=self.text_editor.yview)\n        h_scrollbar = tk.Scrollbar(self.main_frame, orient=tk.HORIZONTAL, command=self.text_editor.xview)\n\n        self.text_editor.config(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)\n\n        # \ubc30\uce58\n        self.text_editor.grid(row=0, column=0, sticky=\"nsew\")\n        v_scrollbar.grid(row=0, column=1, sticky=\"ns\")\n        h_scrollbar.grid(row=1, column=0, sticky=\"ew\")\n\n        # \uadf8\ub9ac\ub4dc \uac00\uc911\uce58 \uc124\uc815\n        self.main_frame.rowconfigure(0, weight=1)\n        self.main_frame.columnconfigure(0, weight=1)\n\n        # \ud14d\uc2a4\ud2b8 \ubcc0\uacbd \uc774\ubca4\ud2b8 \ubc14\uc778\ub529\n        self.text_editor.bind(\"&lt;KeyPress&gt;\", self.on_text_change)\n        self.text_editor.bind(\"&lt;Button-1&gt;\", self.update_cursor_position)\n        self.text_editor.bind(\"&lt;KeyRelease&gt;\", self.update_cursor_position)\n\n        print(\"     \uba54\uc778 \ucf58\ud150\uce20 \uc601\uc5ed \uc0dd\uc131 \uc644\ub8cc\")\n\n    def create_status_bar(self):\n        \"\"\"\uc0c1\ud0dc\ubc14 \uc0dd\uc131\"\"\"\n\n        self.status_frame = tk.Frame(self.root, bg=\"darkgray\", height=25)\n        self.status_frame.pack(side=tk.BOTTOM, fill=tk.X)\n        self.status_frame.pack_propagate(False)\n\n        # \uc0c1\ud0dc \uc815\ubcf4 \ub808\uc774\ube14\ub4e4\n        self.status_label = tk.Label(self.status_frame, text=\"\uc900\ube44\", bg=\"darkgray\", fg=\"white\", anchor=\"w\")\n        self.status_label.pack(side=tk.LEFT, padx=10)\n\n        self.cursor_label = tk.Label(self.status_frame, text=\"\uc904: 1, \uc5f4: 1\", bg=\"darkgray\", fg=\"white\")\n        self.cursor_label.pack(side=tk.RIGHT, padx=10)\n\n        self.encoding_label = tk.Label(self.status_frame, text=\"UTF-8\", bg=\"darkgray\", fg=\"white\")\n        self.encoding_label.pack(side=tk.RIGHT, padx=10)\n\n        print(\"     \uc0c1\ud0dc\ubc14 \uc0dd\uc131 \uc644\ub8cc\")\n\n    def create_context_menu(self):\n        \"\"\"\ucee8\ud14d\uc2a4\ud2b8 \uba54\ub274 (\uc6b0\ud074\ub9ad \uba54\ub274) \uc0dd\uc131\"\"\"\n\n        self.context_menu = tk.Menu(self.root, tearoff=0)\n        self.context_menu.add_command(label=\"\uc798\ub77c\ub0b4\uae30\", command=self.cut)\n        self.context_menu.add_command(label=\"\ubcf5\uc0ac\", command=self.copy)\n        self.context_menu.add_command(label=\"\ubd99\uc5ec\ub123\uae30\", command=self.paste)\n        self.context_menu.add_separator()\n        self.context_menu.add_command(label=\"\ubaa8\ub450 \uc120\ud0dd\", command=self.select_all)\n        self.context_menu.add_separator()\n        self.context_menu.add_command(label=\"\ucc3e\uae30...\", command=self.find)\n\n        # \ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130\uc5d0 \uc6b0\ud074\ub9ad \uc774\ubca4\ud2b8 \ubc14\uc778\ub529\n        self.text_editor.bind(\"&lt;Button-3&gt;\", self.show_context_menu)\n\n        print(\"     \ucee8\ud14d\uc2a4\ud2b8 \uba54\ub274 \uc0dd\uc131 \uc644\ub8cc\")\n\n    def bind_shortcuts(self):\n        \"\"\"\ud0a4\ubcf4\ub4dc \ub2e8\ucd95\ud0a4 \ubc14\uc778\ub529\"\"\"\n\n        shortcuts = [\n            (\"&lt;Control-n&gt;\", self.new_file),\n            (\"&lt;Control-o&gt;\", self.open_file),\n            (\"&lt;Control-s&gt;\", self.save_file),\n            (\"&lt;Control-Shift-s&gt;\", self.save_as_file),\n            (\"&lt;Control-q&gt;\", self.quit_app),\n            (\"&lt;Control-z&gt;\", self.undo),\n            (\"&lt;Control-y&gt;\", self.redo),\n            (\"&lt;Control-x&gt;\", self.cut),\n            (\"&lt;Control-c&gt;\", self.copy),\n            (\"&lt;Control-v&gt;\", self.paste),\n            (\"&lt;Control-a&gt;\", self.select_all),\n            (\"&lt;Control-f&gt;\", self.find),\n            (\"&lt;Control-h&gt;\", self.replace),\n            (\"&lt;F1&gt;\", self.show_help)\n        ]\n\n        for shortcut, command in shortcuts:\n            self.root.bind(shortcut, lambda event, cmd=command: cmd())\n\n        print(\"     \ud0a4\ubcf4\ub4dc \ub2e8\ucd95\ud0a4 \ubc14\uc778\ub529 \uc644\ub8cc\")\n\n    # \uba54\ub274 \uba85\ub839\uc5b4 \uad6c\ud604\n    def new_file(self):\n        \"\"\"\uc0c8 \ud30c\uc77c\"\"\"\n        if self.is_modified:\n            result = messagebox.askyesnocancel(\"\uc800\uc7a5\", \"\ubcc0\uacbd\uc0ac\ud56d\uc744 \uc800\uc7a5\ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c?\")\n            if result is True:\n                self.save_file()\n            elif result is None:\n                return\n\n        self.text_editor.delete(\"1.0\", tk.END)\n        self.current_file = None\n        self.is_modified = False\n        self.update_title()\n        self.status_label.config(text=\"\uc0c8 \ud30c\uc77c\")\n\n    def open_file(self):\n        \"\"\"\ud30c\uc77c \uc5f4\uae30\"\"\"\n        filename = filedialog.askopenfilename(\n            title=\"\ud30c\uc77c \uc5f4\uae30\",\n            filetypes=[\n                (\"\ud14d\uc2a4\ud2b8 \ud30c\uc77c\", \"*.txt\"),\n                (\"Python \ud30c\uc77c\", \"*.py\"),\n                (\"\ubaa8\ub4e0 \ud30c\uc77c\", \"*.*\")\n            ]\n        )\n\n        if filename:\n            try:\n                # \uc2e4\uc81c\ub85c\ub294 \ud30c\uc77c\uc744 \uc77d\uc5b4\uc634 (\uc2dc\ubbac\ub808\uc774\uc158)\n                self.text_editor.delete(\"1.0\", tk.END)\n                sample_content = f\"# \ud30c\uc77c: {os.path.basename(filename)}\\n# \ud30c\uc77c \ub0b4\uc6a9 \uc2dc\ubbac\ub808\uc774\uc158\\n\\nprint('Hello, World!')\\n\"\n                self.text_editor.insert(\"1.0\", sample_content)\n\n                self.current_file = filename\n                self.is_modified = False\n                self.update_title()\n                self.status_label.config(text=f\"\ud30c\uc77c \uc5f4\ub9bc: {os.path.basename(filename)}\")\n\n            except Exception as e:\n                messagebox.showerror(\"\uc624\ub958\", f\"\ud30c\uc77c\uc744 \uc5f4 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4:\\n{str(e)}\")\n\n    def save_file(self):\n        \"\"\"\ud30c\uc77c \uc800\uc7a5\"\"\"\n        if self.current_file:\n            # \uc2e4\uc81c\ub85c\ub294 \ud30c\uc77c\uc5d0 \uc800\uc7a5 (\uc2dc\ubbac\ub808\uc774\uc158)\n            self.is_modified = False\n            self.update_title()\n            self.status_label.config(text=f\"\uc800\uc7a5\ub428: {os.path.basename(self.current_file)}\")\n            return True\n        else:\n            return self.save_as_file()\n\n    def save_as_file(self):\n        \"\"\"\ub2e4\ub978 \uc774\ub984\uc73c\ub85c \uc800\uc7a5\"\"\"\n        filename = filedialog.asksaveasfilename(\n            title=\"\ub2e4\ub978 \uc774\ub984\uc73c\ub85c \uc800\uc7a5\",\n            defaultextension=\".txt\",\n            filetypes=[\n                (\"\ud14d\uc2a4\ud2b8 \ud30c\uc77c\", \"*.txt\"),\n                (\"Python \ud30c\uc77c\", \"*.py\"),\n                (\"\ubaa8\ub4e0 \ud30c\uc77c\", \"*.*\")\n            ]\n        )\n\n        if filename:\n            # \uc2e4\uc81c\ub85c\ub294 \ud30c\uc77c\uc5d0 \uc800\uc7a5 (\uc2dc\ubbac\ub808\uc774\uc158)\n            self.current_file = filename\n            self.is_modified = False\n            self.update_title()\n            self.status_label.config(text=f\"\uc800\uc7a5\ub428: {os.path.basename(filename)}\")\n            return True\n        return False\n\n    def quit_app(self):\n        \"\"\"\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc885\ub8cc\"\"\"\n        if self.is_modified:\n            result = messagebox.askyesnocancel(\"\uc800\uc7a5\", \"\ubcc0\uacbd\uc0ac\ud56d\uc744 \uc800\uc7a5\ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c?\")\n            if result is True:\n                if not self.save_file():\n                    return\n            elif result is None:\n                return\n\n        self.root.destroy()\n\n    def undo(self):\n        \"\"\"\uc2e4\ud589 \ucde8\uc18c\"\"\"\n        try:\n            self.text_editor.edit_undo()\n        except tk.TclError:\n            pass\n\n    def redo(self):\n        \"\"\"\ub2e4\uc2dc \uc2e4\ud589\"\"\"\n        try:\n            self.text_editor.edit_redo()\n        except tk.TclError:\n            pass\n\n    def cut(self):\n        \"\"\"\uc798\ub77c\ub0b4\uae30\"\"\"\n        try:\n            self.text_editor.event_generate(\"&lt;&lt;Cut&gt;&gt;\")\n        except tk.TclError:\n            pass\n\n    def copy(self):\n        \"\"\"\ubcf5\uc0ac\"\"\"\n        try:\n            self.text_editor.event_generate(\"&lt;&lt;Copy&gt;&gt;\")\n        except tk.TclError:\n            pass\n\n    def paste(self):\n        \"\"\"\ubd99\uc5ec\ub123\uae30\"\"\"\n        try:\n            self.text_editor.event_generate(\"&lt;&lt;Paste&gt;&gt;\")\n        except tk.TclError:\n            pass\n\n    def select_all(self):\n        \"\"\"\ubaa8\ub450 \uc120\ud0dd\"\"\"\n        self.text_editor.tag_add(tk.SEL, \"1.0\", tk.END)\n        self.text_editor.mark_set(tk.INSERT, \"1.0\")\n        self.text_editor.see(tk.INSERT)\n\n    def find(self):\n        \"\"\"\ucc3e\uae30 \ub300\ud654\uc0c1\uc790\"\"\"\n        find_text = tk.simpledialog.askstring(\"\ucc3e\uae30\", \"\ucc3e\uc744 \ud14d\uc2a4\ud2b8:\")\n        if find_text:\n            # \uac80\uc0c9 \uad6c\ud604 (\uc2dc\ubbac\ub808\uc774\uc158)\n            self.status_label.config(text=f\"\uac80\uc0c9: '{find_text}'\")\n\n    def replace(self):\n        \"\"\"\ubc14\uafb8\uae30 \ub300\ud654\uc0c1\uc790\"\"\"\n        # \ucee4\uc2a4\ud140 \ub300\ud654\uc0c1\uc790 \uc0dd\uc131\n        dialog = tk.Toplevel(self.root)\n        dialog.title(\"\ubc14\uafb8\uae30\")\n        dialog.geometry(\"400x150\")\n        dialog.transient(self.root)\n        dialog.grab_set()\n\n        tk.Label(dialog, text=\"\ucc3e\uc744 \ud14d\uc2a4\ud2b8:\").grid(row=0, column=0, sticky=\"e\", padx=5, pady=5)\n        find_entry = tk.Entry(dialog, width=30)\n        find_entry.grid(row=0, column=1, padx=5, pady=5)\n\n        tk.Label(dialog, text=\"\ubc14\uafc0 \ud14d\uc2a4\ud2b8:\").grid(row=1, column=0, sticky=\"e\", padx=5, pady=5)\n        replace_entry = tk.Entry(dialog, width=30)\n        replace_entry.grid(row=1, column=1, padx=5, pady=5)\n\n        button_frame = tk.Frame(dialog)\n        button_frame.grid(row=2, column=0, columnspan=2, pady=10)\n\n        tk.Button(button_frame, text=\"\ubc14\uafb8\uae30\", command=lambda: self.do_replace(find_entry.get(), replace_entry.get(), dialog)).pack(side=tk.LEFT, padx=5)\n        tk.Button(button_frame, text=\"\ubaa8\ub450 \ubc14\uafb8\uae30\", command=lambda: self.do_replace_all(find_entry.get(), replace_entry.get(), dialog)).pack(side=tk.LEFT, padx=5)\n        tk.Button(button_frame, text=\"\ucde8\uc18c\", command=dialog.destroy).pack(side=tk.LEFT, padx=5)\n\n        find_entry.focus()\n\n    def do_replace(self, find_text, replace_text, dialog):\n        \"\"\"\ub2e8\uc77c \ubc14\uafb8\uae30\"\"\"\n        if find_text:\n            self.status_label.config(text=f\"\ubc14\uafb8\uae30: '{find_text}' \u2192 '{replace_text}'\")\n        dialog.destroy()\n\n    def do_replace_all(self, find_text, replace_text, dialog):\n        \"\"\"\ubaa8\ub450 \ubc14\uafb8\uae30\"\"\"\n        if find_text:\n            self.status_label.config(text=f\"\ubaa8\ub450 \ubc14\uafb8\uae30: '{find_text}' \u2192 '{replace_text}'\")\n        dialog.destroy()\n\n    def color_chooser(self):\n        \"\"\"\uc0c9\uc0c1 \uc120\ud0dd\uae30\"\"\"\n        color = colorchooser.askcolor(title=\"\uc0c9\uc0c1 \uc120\ud0dd\")\n        if color[1]:\n            self.text_editor.config(bg=color[1])\n            self.status_label.config(text=f\"\ubc30\uacbd\uc0c9 \ubcc0\uacbd: {color[1]}\")\n\n    def font_chooser(self):\n        \"\"\"\ud3f0\ud2b8 \uc120\ud0dd\uae30 (\uc2dc\ubbac\ub808\uc774\uc158)\"\"\"\n        fonts = [\"Arial\", \"Times New Roman\", \"Consolas\", \"Courier New\"]\n        font = tk.simpledialog.askstring(\"\ud3f0\ud2b8 \uc120\ud0dd\", f\"\ud3f0\ud2b8\ub97c \uc120\ud0dd\ud558\uc138\uc694:\\n{', '.join(fonts)}\")\n        if font and font in fonts:\n            current_font = self.text_editor.cget(\"font\")\n            if isinstance(current_font, str):\n                size = 11\n            else:\n                size = current_font[1] if len(current_font) &gt; 1 else 11\n\n            self.text_editor.config(font=(font, size))\n            self.status_label.config(text=f\"\ud3f0\ud2b8 \ubcc0\uacbd: {font}\")\n\n    def show_preferences(self):\n        \"\"\"\uc124\uc815 \ub300\ud654\uc0c1\uc790\"\"\"\n        prefs_dialog = tk.Toplevel(self.root)\n        prefs_dialog.title(\"\uc124\uc815\")\n        prefs_dialog.geometry(\"500x400\")\n        prefs_dialog.transient(self.root)\n        prefs_dialog.grab_set()\n\n        notebook = ttk.Notebook(prefs_dialog)\n        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n\n        # \uc77c\ubc18 \ud0ed\n        general_tab = ttk.Frame(notebook)\n        notebook.add(general_tab, text=\"\uc77c\ubc18\")\n\n        tk.Checkbutton(general_tab, text=\"\uc2dc\uc791 \uc2dc \ub9c8\uc9c0\ub9c9 \ud30c\uc77c \uc5f4\uae30\").pack(anchor=\"w\", padx=10, pady=5)\n        tk.Checkbutton(general_tab, text=\"\uc790\ub3d9 \uc800\uc7a5 \ud65c\uc131\ud654\").pack(anchor=\"w\", padx=10, pady=5)\n        tk.Checkbutton(general_tab, text=\"\uc904 \ubc88\ud638 \ud45c\uc2dc\").pack(anchor=\"w\", padx=10, pady=5)\n\n        # \ud3b8\uc9d1\uae30 \ud0ed\n        editor_tab = ttk.Frame(notebook)\n        notebook.add(editor_tab, text=\"\ud3b8\uc9d1\uae30\")\n\n        tk.Label(editor_tab, text=\"\ud0ed \ud06c\uae30:\").pack(anchor=\"w\", padx=10, pady=5)\n        tab_size_var = tk.IntVar(value=4)\n        tk.Spinbox(editor_tab, from_=2, to=8, textvariable=tab_size_var).pack(anchor=\"w\", padx=20)\n\n        tk.Checkbutton(editor_tab, text=\"\uacf5\ubc31\uc744 \ud0ed\uc73c\ub85c \ubcc0\ud658\").pack(anchor=\"w\", padx=10, pady=5)\n        tk.Checkbutton(editor_tab, text=\"\uc790\ub3d9 \ub4e4\uc5ec\uc4f0\uae30\").pack(anchor=\"w\", padx=10, pady=5)\n\n        # \ubc84\ud2bc \ud504\ub808\uc784\n        button_frame = tk.Frame(prefs_dialog)\n        button_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=10, pady=10)\n\n        tk.Button(button_frame, text=\"\ud655\uc778\", command=prefs_dialog.destroy).pack(side=tk.RIGHT, padx=5)\n        tk.Button(button_frame, text=\"\ucde8\uc18c\", command=prefs_dialog.destroy).pack(side=tk.RIGHT, padx=5)\n\n    def show_help(self):\n        \"\"\"\ub3c4\uc6c0\ub9d0 \ub300\ud654\uc0c1\uc790\"\"\"\n        help_dialog = tk.Toplevel(self.root)\n        help_dialog.title(\"\ub3c4\uc6c0\ub9d0\")\n        help_dialog.geometry(\"600x400\")\n        help_dialog.transient(self.root)\n\n        help_text = tk.Text(help_dialog, wrap=tk.WORD, padx=10, pady=10)\n        help_text.pack(fill=tk.BOTH, expand=True)\n\n        help_content = \"\"\"GUI \ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130 \uc0ac\uc6a9\ubc95\n\n1. \ud30c\uc77c \uc791\uc5c5:\n   - \uc0c8\ub85c \ub9cc\ub4e4\uae30: Ctrl+N\n   - \uc5f4\uae30: Ctrl+O\n   - \uc800\uc7a5: Ctrl+S\n   - \ub2e4\ub978 \uc774\ub984\uc73c\ub85c \uc800\uc7a5: Ctrl+Shift+S\n\n2. \ud3b8\uc9d1 \uc791\uc5c5:\n   - \uc2e4\ud589 \ucde8\uc18c: Ctrl+Z\n   - \ub2e4\uc2dc \uc2e4\ud589: Ctrl+Y\n   - \uc798\ub77c\ub0b4\uae30: Ctrl+X\n   - \ubcf5\uc0ac: Ctrl+C\n   - \ubd99\uc5ec\ub123\uae30: Ctrl+V\n   - \ubaa8\ub450 \uc120\ud0dd: Ctrl+A\n\n3. \uac80\uc0c9 \ubc0f \ubc14\uafb8\uae30:\n   - \ucc3e\uae30: Ctrl+F\n   - \ubc14\uafb8\uae30: Ctrl+H\n\n4. \ubcf4\uae30 \uc635\uc158:\n   - \ud234\ubc14 \ud45c\uc2dc/\uc228\uae30\uae30\n   - \uc0c1\ud0dc\ubc14 \ud45c\uc2dc/\uc228\uae30\uae30\n   - \uc904 \ubc14\uafc8 \uc124\uc815\n   - \ud655\ub300/\ucd95\uc18c\n\n5. \uae30\ud0c0 \uae30\ub2a5:\n   - \uc6b0\ud074\ub9ad\uc73c\ub85c \ucee8\ud14d\uc2a4\ud2b8 \uba54\ub274 \uc0ac\uc6a9\n   - \uc0c9\uc0c1 \ubc0f \ud3f0\ud2b8 \ubcc0\uacbd\n   - \uc124\uc815 \uc0ac\uc6a9\uc790 \uc815\uc758\n\"\"\"\n\n        help_text.insert(\"1.0\", help_content)\n        help_text.config(state=tk.DISABLED)\n\n        tk.Button(help_dialog, text=\"\ub2eb\uae30\", command=help_dialog.destroy).pack(pady=10)\n\n    def show_shortcuts(self):\n        \"\"\"\ud0a4\ubcf4\ub4dc \ub2e8\ucd95\ud0a4 \ub300\ud654\uc0c1\uc790\"\"\"\n        shortcuts_dialog = tk.Toplevel(self.root)\n        shortcuts_dialog.title(\"\ud0a4\ubcf4\ub4dc \ub2e8\ucd95\ud0a4\")\n        shortcuts_dialog.geometry(\"400x500\")\n        shortcuts_dialog.transient(self.root)\n\n        # \ub2e8\ucd95\ud0a4 \ubaa9\ub85d\uc744 \ud45c\ub85c \ud45c\uc2dc\n        tree_frame = tk.Frame(shortcuts_dialog)\n        tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n\n        # \ud2b8\ub9ac\ubdf0 \uc2dc\ubbac\ub808\uc774\uc158 (\uc2e4\uc81c\ub85c\ub294 ttk.Treeview \uc0ac\uc6a9)\n        shortcuts_text = tk.Text(tree_frame, font=(\"Courier\", 10))\n        shortcuts_text.pack(fill=tk.BOTH, expand=True)\n\n        shortcuts_list = [\n            (\"\uae30\ub2a5\", \"\ub2e8\ucd95\ud0a4\"),\n            (\"=\" * 30, \"=\" * 15),\n            (\"\uc0c8\ub85c \ub9cc\ub4e4\uae30\", \"Ctrl+N\"),\n            (\"\uc5f4\uae30\", \"Ctrl+O\"),\n            (\"\uc800\uc7a5\", \"Ctrl+S\"),\n            (\"\ub2e4\ub978 \uc774\ub984\uc73c\ub85c \uc800\uc7a5\", \"Ctrl+Shift+S\"),\n            (\"\uc885\ub8cc\", \"Ctrl+Q\"),\n            (\"\uc2e4\ud589 \ucde8\uc18c\", \"Ctrl+Z\"),\n            (\"\ub2e4\uc2dc \uc2e4\ud589\", \"Ctrl+Y\"),\n            (\"\uc798\ub77c\ub0b4\uae30\", \"Ctrl+X\"),\n            (\"\ubcf5\uc0ac\", \"Ctrl+C\"),\n            (\"\ubd99\uc5ec\ub123\uae30\", \"Ctrl+V\"),\n            (\"\ubaa8\ub450 \uc120\ud0dd\", \"Ctrl+A\"),\n            (\"\ucc3e\uae30\", \"Ctrl+F\"),\n            (\"\ubc14\uafb8\uae30\", \"Ctrl+H\"),\n            (\"\ub3c4\uc6c0\ub9d0\", \"F1\")\n        ]\n\n        for function, shortcut in shortcuts_list:\n            shortcuts_text.insert(tk.END, f\"{function:&lt;25} {shortcut}\\n\")\n\n        shortcuts_text.config(state=tk.DISABLED)\n\n        tk.Button(shortcuts_dialog, text=\"\ub2eb\uae30\", command=shortcuts_dialog.destroy).pack(pady=10)\n\n    def show_about(self):\n        \"\"\"\uc815\ubcf4 \ub300\ud654\uc0c1\uc790\"\"\"\n        about_info = \"\"\"GUI \ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130\n\ubc84\uc804 1.0\n\nPython tkinter\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc81c\uc791\ub41c\n\uac04\ub2e8\ud55c \ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130\uc785\ub2c8\ub2e4.\n\n\u00a9 2025 Python Tutorial Project\"\"\"\n\n        messagebox.showinfo(\"\uc815\ubcf4\", about_info)\n\n    # \ubcf4\uae30 \uba54\ub274 \ud1a0\uae00 \ud568\uc218\ub4e4\n    def toggle_toolbar(self):\n        \"\"\"\ud234\ubc14 \ud45c\uc2dc/\uc228\uae30\uae30\"\"\"\n        if self.show_toolbar_var.get():\n            self.toolbar_frame.pack(side=tk.TOP, fill=tk.X, before=self.main_frame)\n        else:\n            self.toolbar_frame.pack_forget()\n\n    def toggle_status_bar(self):\n        \"\"\"\uc0c1\ud0dc\ubc14 \ud45c\uc2dc/\uc228\uae30\uae30\"\"\"\n        if self.show_status_var.get():\n            self.status_frame.pack(side=tk.BOTTOM, fill=tk.X)\n        else:\n            self.status_frame.pack_forget()\n\n    def toggle_word_wrap(self):\n        \"\"\"\uc904 \ubc14\uafc8 \ud1a0\uae00\"\"\"\n        if self.word_wrap_var.get():\n            self.text_editor.config(wrap=tk.WORD)\n        else:\n            self.text_editor.config(wrap=tk.NONE)\n\n    def zoom(self, factor, reset=False):\n        \"\"\"\ud655\ub300/\ucd95\uc18c\"\"\"\n        current_font = self.text_editor.cget(\"font\")\n        if isinstance(current_font, str):\n            font_family = current_font\n            font_size = 11\n        else:\n            font_family = current_font[0] if current_font else \"Arial\"\n            font_size = current_font[1] if len(current_font) &gt; 1 else 11\n\n        if reset:\n            new_size = 11\n        else:\n            new_size = max(8, min(32, int(font_size * factor)))\n\n        self.text_editor.config(font=(font_family, new_size))\n        self.status_label.config(text=f\"\ud3f0\ud2b8 \ud06c\uae30: {new_size}\")\n\n    # \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec\ub4e4\n    def show_context_menu(self, event):\n        \"\"\"\ucee8\ud14d\uc2a4\ud2b8 \uba54\ub274 \ud45c\uc2dc\"\"\"\n        try:\n            self.context_menu.tk_popup(event.x_root, event.y_root)\n        finally:\n            self.context_menu.grab_release()\n\n    def on_text_change(self, event):\n        \"\"\"\ud14d\uc2a4\ud2b8 \ubcc0\uacbd \uc774\ubca4\ud2b8\"\"\"\n        if not self.is_modified:\n            self.is_modified = True\n            self.update_title()\n\n    def update_cursor_position(self, event=None):\n        \"\"\"\ucee4\uc11c \uc704\uce58 \uc5c5\ub370\uc774\ud2b8\"\"\"\n        cursor_pos = self.text_editor.index(tk.INSERT)\n        line, col = cursor_pos.split('.')\n        self.cursor_label.config(text=f\"\uc904: {line}, \uc5f4: {int(col)+1}\")\n\n    def update_title(self):\n        \"\"\"\uc708\ub3c4\uc6b0 \ud0c0\uc774\ud2c0 \uc5c5\ub370\uc774\ud2b8\"\"\"\n        if self.current_file:\n            filename = os.path.basename(self.current_file)\n        else:\n            filename = \"\uc81c\ubaa9 \uc5c6\uc74c\"\n\n        if self.is_modified:\n            filename = \"*\" + filename\n\n        self.root.title(f\"{filename} - GUI \ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130\")\n\n    def run(self):\n        \"\"\"\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc2e4\ud589\"\"\"\n        print(\"   \uace0\uae09 GUI \uae30\ub2a5 \ub370\ubaa8 \uc2dc\uc791\")\n        self.update_title()\n        # self.root.mainloop()  # \uc2e4\uc81c \uc2e4\ud589 \uc2dc \uc8fc\uc11d \ud574\uc81c\n\ndef demonstrate_advanced_features():\n    \"\"\"\uace0\uae09 GUI \uae30\ub2a5 \uc2dc\uc5f0\"\"\"\n    print(\"6. \uba54\ub274\uc640 \ub300\ud654\uc0c1\uc790:\")\n\n    app = AdvancedGUIFeatures()\n    app.run()\n\ndemonstrate_advanced_features()\n</code></pre>"},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#5","title":"5. \uc5f0\uc2b5 \ubb38\uc81c","text":""},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#1","title":"\uc5f0\uc2b5 1: \uac04\ub2e8\ud55c \uacc4\uc0b0\uae30","text":"<p>\uae30\ubcf8\uc801\uc778 \uc0ac\uce59\uc5f0\uc0b0\uc744 \uc218\ud589\ud558\ub294 GUI \uacc4\uc0b0\uae30\ub97c \uad6c\ud604\ud558\uc138\uc694: - Grid \ub808\uc774\uc544\uc6c3\uc73c\ub85c \ubc84\ud2bc \ubc30\uce58 - \uc5f0\uc0b0 \uacb0\uacfc \ud45c\uc2dc - \ud0a4\ubcf4\ub4dc \uc785\ub825 \uc9c0\uc6d0 - \uc624\ub958 \ucc98\ub9ac</p>"},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#2_1","title":"\uc5f0\uc2b5 2: \uc774\ubbf8\uc9c0 \ubdf0\uc5b4","text":"<p>\uc774\ubbf8\uc9c0 \ud30c\uc77c\uc744 \ubcf4\uc5ec\uc8fc\ub294 GUI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uad6c\ud604\ud558\uc138\uc694: - \ud30c\uc77c \uc5f4\uae30 \ub300\ud654\uc0c1\uc790 - \uc774\ubbf8\uc9c0 \ud655\ub300/\ucd95\uc18c - \ub2e4\uc74c/\uc774\uc804 \uc774\ubbf8\uc9c0 \ud0d0\uc0c9 - \uc378\ub124\uc77c \ubaa9\ub85d</p>"},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#3_1","title":"\uc5f0\uc2b5 3: \ud14d\uc2a4\ud2b8 \uc5d0\ub514\ud130","text":"<p>\uae30\ubcf8\uc801\uc778 \ud14d\uc2a4\ud2b8 \ud3b8\uc9d1 \uae30\ub2a5\uc744 \uac00\uc9c4 \uc5d0\ub514\ud130\ub97c \uad6c\ud604\ud558\uc138\uc694: - \ud30c\uc77c \uc5f4\uae30/\uc800\uc7a5 - \ucc3e\uae30/\ubc14\uafb8\uae30 \uae30\ub2a5 - \ud3f0\ud2b8 \ubcc0\uacbd - \uc0c1\ud0dc\ubc14</p>"},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#4-gui_1","title":"\uc5f0\uc2b5 4: \ub370\uc774\ud130\ubca0\uc774\uc2a4 GUI \ud074\ub77c\uc774\uc5b8\ud2b8","text":"<p>SQLite \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uad00\ub9ac\ud558\ub294 GUI\ub97c \uad6c\ud604\ud558\uc138\uc694: - \ud14c\uc774\ube14 \ubaa9\ub85d \ud45c\uc2dc - \ub370\uc774\ud130 \uc870\ud68c/\ud3b8\uc9d1 - SQL \ucffc\ub9ac \uc2e4\ud589 - \uacb0\uacfc \ub0b4\ubcf4\ub0b4\uae30</p>"},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#_2","title":"\uc815\ub9ac","text":"<p>\uc774 \ucc55\ud130\uc5d0\uc11c \ud559\uc2b5\ud55c \ub0b4\uc6a9:</p> <ol> <li>GUI \uae30\ucd08: tkinter\uc758 \uae30\ubcf8 \uad6c\uc870\uc640 \uc704\uc82f \uc2dc\uc2a4\ud15c</li> <li>\ub2e4\uc591\ud55c \uc704\uc82f: Entry, Text, Listbox, Button, Label \ub4f1\uc758 \ud65c\uc6a9</li> <li>\uc774\ubca4\ud2b8 \ucc98\ub9ac: \ub9c8\uc6b0\uc2a4, \ud0a4\ubcf4\ub4dc, \uc708\ub3c4\uc6b0 \uc774\ubca4\ud2b8\uc758 \ucc98\ub9ac \ubc29\ubc95</li> <li>\ucf5c\ubc31 \ud328\ud134: \uc774\ubca4\ud2b8 \uae30\ubc18 \ud504\ub85c\uadf8\ub798\ubc0d\uacfc \ucf5c\ubc31 \uad00\ub9ac</li> <li>\ub808\uc774\uc544\uc6c3 \uad00\ub9ac: Pack, Grid, Place \ub9e4\ub2c8\uc800\uc758 \ud2b9\uc131\uacfc \ud65c\uc6a9</li> <li>\uace0\uae09 \uae30\ub2a5: \uba54\ub274, \ub300\ud654\uc0c1\uc790, \ud234\ubc14, \uc0c1\ud0dc\ubc14 \uad6c\ud604</li> <li>\uc2e4\ubb34 \ud328\ud134: MVC \ud328\ud134\uacfc \uc0ac\uc6a9\uc790 \uce5c\ud654\uc801 \uc778\ud130\ud398\uc774\uc2a4 \uc124\uacc4</li> </ol> <p>\ub2e4\uc74c \ub2e8\uacc4\uc5d0\uc11c\ub294 \uace0\uae09 \uacfc\uc815\uc73c\ub85c \ub118\uc5b4\uac00 \ub354 \ubcf5\uc7a1\ud55c GUI \ud504\ub808\uc784\uc6cc\ud06c\ub098 \uc6f9 \uae30\ubc18 \uc778\ud130\ud398\uc774\uc2a4 \uac1c\ubc1c\uc744 \ud559\uc2b5\ud558\uac8c \ub429\ub2c8\ub2e4.</p>"},{"location":"tutorials/intermediate/chapter14_gui_programming_basics/#_3","title":"\ud575\uc2ec \ud3ec\uc778\ud2b8","text":"<ul> <li>GUI\ub294 \uc0ac\uc6a9\uc790 \uacbd\ud5d8(UX)\uc744 \ucd5c\uc6b0\uc120\uc73c\ub85c \uace0\ub824\ud574\uc57c \ud569\ub2c8\ub2e4</li> <li>\uc774\ubca4\ud2b8 \uae30\ubc18 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \ube44\ub3d9\uae30\uc801 \ud2b9\uc131\uc744 \uc774\ud574\ud558\uc138\uc694</li> <li>\uc801\uc808\ud55c \ub808\uc774\uc544\uc6c3 \ub9e4\ub2c8\uc800\ub97c \uc120\ud0dd\ud558\uc5ec \ubc18\uc751\ud615 UI\ub97c \ub9cc\ub4dc\uc138\uc694</li> <li>\uc5d0\ub7ec \ucc98\ub9ac\uc640 \uc0ac\uc6a9\uc790 \ud53c\ub4dc\ubc31\uc744 \uc78a\uc9c0 \ub9c8\uc138\uc694</li> <li>\ud0a4\ubcf4\ub4dc \ub2e8\ucd95\ud0a4\uc640 \uc811\uadfc\uc131\uc744 \uace0\ub824\ud558\uc138\uc694</li> <li>\ucf54\ub4dc\uc758 \uc7ac\uc0ac\uc6a9\uc131\uacfc \uc720\uc9c0\ubcf4\uc218\uc131\uc744 \uc704\ud574 \ubaa8\ub4c8\ud654\ud558\uc138\uc694  </li> </ul>"}]}